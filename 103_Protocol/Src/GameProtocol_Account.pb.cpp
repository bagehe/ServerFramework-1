// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_Account.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol_Account.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* CreateRole_Account_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRole_Account_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRole_Account_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRole_Account_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_ListZone_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_ListZone_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_ListZone_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_ListZone_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRole_Account_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRole_Account_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteRole_Account_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteRole_Account_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_ListRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_ListRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Account_ListRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Account_ListRole_Response_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_5fAccount_2eproto() {
  protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol_Account.proto");
  GOOGLE_CHECK(file != NULL);
  CreateRole_Account_Request_descriptor_ = file->message_type(0);
  static const int CreateRole_Account_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Request, sznickname_),
  };
  CreateRole_Account_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRole_Account_Request_descriptor_,
      CreateRole_Account_Request::default_instance_,
      CreateRole_Account_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRole_Account_Request));
  CreateRole_Account_Response_descriptor_ = file->message_type(1);
  static const int CreateRole_Account_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Response, uworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Response, stroleid_),
  };
  CreateRole_Account_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRole_Account_Response_descriptor_,
      CreateRole_Account_Response::default_instance_,
      CreateRole_Account_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRole_Account_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRole_Account_Response));
  Account_ListZone_Request_descriptor_ = file->message_type(2);
  static const int Account_ListZone_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Request, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Request, uispinfo_),
  };
  Account_ListZone_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_ListZone_Request_descriptor_,
      Account_ListZone_Request::default_instance_,
      Account_ListZone_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account_ListZone_Request));
  Account_ListZone_Response_descriptor_ = file->message_type(3);
  static const int Account_ListZone_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Response, uworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Response, stzonelist_),
  };
  Account_ListZone_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_ListZone_Response_descriptor_,
      Account_ListZone_Response::default_instance_,
      Account_ListZone_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListZone_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account_ListZone_Response));
  DeleteRole_Account_Request_descriptor_ = file->message_type(4);
  static const int DeleteRole_Account_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Request, stroleid_),
  };
  DeleteRole_Account_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRole_Account_Request_descriptor_,
      DeleteRole_Account_Request::default_instance_,
      DeleteRole_Account_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRole_Account_Request));
  DeleteRole_Account_Response_descriptor_ = file->message_type(5);
  static const int DeleteRole_Account_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Response, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Response, uprofession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Response, ulevel_),
  };
  DeleteRole_Account_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteRole_Account_Response_descriptor_,
      DeleteRole_Account_Response::default_instance_,
      DeleteRole_Account_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteRole_Account_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteRole_Account_Response));
  Account_ListRole_Request_descriptor_ = file->message_type(6);
  static const int Account_ListRole_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Request, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Request, sessionkey_),
  };
  Account_ListRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_ListRole_Request_descriptor_,
      Account_ListRole_Request::default_instance_,
      Account_ListRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account_ListRole_Request));
  Account_ListRole_Response_descriptor_ = file->message_type(7);
  static const int Account_ListRole_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Response, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Response, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Response, bexist_),
  };
  Account_ListRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Account_ListRole_Response_descriptor_,
      Account_ListRole_Response::default_instance_,
      Account_ListRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Account_ListRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Account_ListRole_Response));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_5fAccount_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRole_Account_Request_descriptor_, &CreateRole_Account_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRole_Account_Response_descriptor_, &CreateRole_Account_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_ListZone_Request_descriptor_, &Account_ListZone_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_ListZone_Response_descriptor_, &Account_ListZone_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRole_Account_Request_descriptor_, &DeleteRole_Account_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteRole_Account_Response_descriptor_, &DeleteRole_Account_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_ListRole_Request_descriptor_, &Account_ListRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Account_ListRole_Response_descriptor_, &Account_ListRole_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_5fAccount_2eproto() {
  delete CreateRole_Account_Request::default_instance_;
  delete CreateRole_Account_Request_reflection_;
  delete CreateRole_Account_Response::default_instance_;
  delete CreateRole_Account_Response_reflection_;
  delete Account_ListZone_Request::default_instance_;
  delete Account_ListZone_Request_reflection_;
  delete Account_ListZone_Response::default_instance_;
  delete Account_ListZone_Response_reflection_;
  delete DeleteRole_Account_Request::default_instance_;
  delete DeleteRole_Account_Request_reflection_;
  delete DeleteRole_Account_Response::default_instance_;
  delete DeleteRole_Account_Response_reflection_;
  delete Account_ListRole_Request::default_instance_;
  delete Account_ListRole_Request_reflection_;
  delete Account_ListRole_Response::default_instance_;
  delete Account_ListRole_Response_reflection_;
}

void protobuf_AddDesc_GameProtocol_5fAccount_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  ::protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032GameProtocol_Account.proto\032\031GameProtoc"
    "ol_Common.proto\032\031GameProtocol_USERDB.pro"
    "to\"0\n\032CreateRole_Account_Request\022\022\n\nszNi"
    "ckName\030\004 \001(\t\"[\n\033CreateRole_Account_Respo"
    "nse\022\017\n\007iResult\030\001 \001(\005\022\020\n\010uWorldID\030\002 \001(\r\022\031"
    "\n\010stRoleID\030\003 \001(\0132\007.RoleID\"=\n\030Account_Lis"
    "tZone_Request\022\017\n\007worldID\030\001 \001(\r\022\020\n\010uISPIn"
    "fo\030\002 \001(\r\"]\n\031Account_ListZone_Response\022\017\n"
    "\007iResult\030\001 \001(\005\022\020\n\010uWorldID\030\002 \001(\r\022\035\n\nstZo"
    "neList\030\003 \001(\0132\t.ZoneList\"7\n\032DeleteRole_Ac"
    "count_Request\022\031\n\010stRoleID\030\001 \001(\0132\007.RoleID"
    "\"n\n\033DeleteRole_Account_Response\022\017\n\007iResu"
    "lt\030\001 \001(\005\022\031\n\010stRoleID\030\002 \001(\0132\007.RoleID\022\023\n\013u"
    "Profession\030\004 \001(\r\022\016\n\006uLevel\030\006 \001(\r\"J\n\030Acco"
    "unt_ListRole_Request\022\013\n\003uin\030\001 \001(\r\022\r\n\005wor"
    "ld\030\002 \001(\r\022\022\n\nsessionKey\030\003 \001(\t\"f\n\031Account_"
    "ListRole_Response\022\017\n\007iResult\030\001 \001(\005\022\031\n\010st"
    "RoleID\030\002 \001(\0132\007.RoleID\022\r\n\005world\030\004 \001(\r\022\016\n\006"
    "bExist\030\005 \001(\010", 732);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol_Account.proto", &protobuf_RegisterTypes);
  CreateRole_Account_Request::default_instance_ = new CreateRole_Account_Request();
  CreateRole_Account_Response::default_instance_ = new CreateRole_Account_Response();
  Account_ListZone_Request::default_instance_ = new Account_ListZone_Request();
  Account_ListZone_Response::default_instance_ = new Account_ListZone_Response();
  DeleteRole_Account_Request::default_instance_ = new DeleteRole_Account_Request();
  DeleteRole_Account_Response::default_instance_ = new DeleteRole_Account_Response();
  Account_ListRole_Request::default_instance_ = new Account_ListRole_Request();
  Account_ListRole_Response::default_instance_ = new Account_ListRole_Response();
  CreateRole_Account_Request::default_instance_->InitAsDefaultInstance();
  CreateRole_Account_Response::default_instance_->InitAsDefaultInstance();
  Account_ListZone_Request::default_instance_->InitAsDefaultInstance();
  Account_ListZone_Response::default_instance_->InitAsDefaultInstance();
  DeleteRole_Account_Request::default_instance_->InitAsDefaultInstance();
  DeleteRole_Account_Response::default_instance_->InitAsDefaultInstance();
  Account_ListRole_Request::default_instance_->InitAsDefaultInstance();
  Account_ListRole_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_5fAccount_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_5fAccount_2eproto {
  StaticDescriptorInitializer_GameProtocol_5fAccount_2eproto() {
    protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  }
} static_descriptor_initializer_GameProtocol_5fAccount_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CreateRole_Account_Request::kSzNickNameFieldNumber;
#endif  // !_MSC_VER

CreateRole_Account_Request::CreateRole_Account_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRole_Account_Request::InitAsDefaultInstance() {
}

CreateRole_Account_Request::CreateRole_Account_Request(const CreateRole_Account_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRole_Account_Request::SharedCtor() {
  _cached_size_ = 0;
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRole_Account_Request::~CreateRole_Account_Request() {
  SharedDtor();
}

void CreateRole_Account_Request::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (this != default_instance_) {
  }
}

void CreateRole_Account_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRole_Account_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRole_Account_Request_descriptor_;
}

const CreateRole_Account_Request& CreateRole_Account_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

CreateRole_Account_Request* CreateRole_Account_Request::default_instance_ = NULL;

CreateRole_Account_Request* CreateRole_Account_Request::New() const {
  return new CreateRole_Account_Request;
}

void CreateRole_Account_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
        sznickname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRole_Account_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string szNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sznickname().data(), this->sznickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRole_Account_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string szNickName = 4;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sznickname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRole_Account_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string szNickName = 4;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sznickname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRole_Account_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string szNickName = 4;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRole_Account_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRole_Account_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRole_Account_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRole_Account_Request::MergeFrom(const CreateRole_Account_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRole_Account_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRole_Account_Request::CopyFrom(const CreateRole_Account_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRole_Account_Request::IsInitialized() const {

  return true;
}

void CreateRole_Account_Request::Swap(CreateRole_Account_Request* other) {
  if (other != this) {
    std::swap(sznickname_, other->sznickname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRole_Account_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRole_Account_Request_descriptor_;
  metadata.reflection = CreateRole_Account_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRole_Account_Response::kIResultFieldNumber;
const int CreateRole_Account_Response::kUWorldIDFieldNumber;
const int CreateRole_Account_Response::kStRoleIDFieldNumber;
#endif  // !_MSC_VER

CreateRole_Account_Response::CreateRole_Account_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRole_Account_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

CreateRole_Account_Response::CreateRole_Account_Response(const CreateRole_Account_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRole_Account_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uworldid_ = 0u;
  stroleid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRole_Account_Response::~CreateRole_Account_Response() {
  SharedDtor();
}

void CreateRole_Account_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void CreateRole_Account_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRole_Account_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRole_Account_Response_descriptor_;
}

const CreateRole_Account_Response& CreateRole_Account_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

CreateRole_Account_Response* CreateRole_Account_Response::default_instance_ = NULL;

CreateRole_Account_Response* CreateRole_Account_Response::New() const {
  return new CreateRole_Account_Response;
}

void CreateRole_Account_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uworldid_ = 0u;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRole_Account_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uWorldID;
        break;
      }

      // optional uint32 uWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uworldid_)));
          set_has_uworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRole_Account_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uWorldID = 2;
  if (has_uworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uworldid(), output);
  }

  // optional .RoleID stRoleID = 3;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRole_Account_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uWorldID = 2;
  if (has_uworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uworldid(), target);
  }

  // optional .RoleID stRoleID = 3;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRole_Account_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uWorldID = 2;
    if (has_uworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uworldid());
    }

    // optional .RoleID stRoleID = 3;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRole_Account_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRole_Account_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRole_Account_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRole_Account_Response::MergeFrom(const CreateRole_Account_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uworldid()) {
      set_uworldid(from.uworldid());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRole_Account_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRole_Account_Response::CopyFrom(const CreateRole_Account_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRole_Account_Response::IsInitialized() const {

  return true;
}

void CreateRole_Account_Response::Swap(CreateRole_Account_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uworldid_, other->uworldid_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRole_Account_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRole_Account_Response_descriptor_;
  metadata.reflection = CreateRole_Account_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account_ListZone_Request::kWorldIDFieldNumber;
const int Account_ListZone_Request::kUISPInfoFieldNumber;
#endif  // !_MSC_VER

Account_ListZone_Request::Account_ListZone_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account_ListZone_Request::InitAsDefaultInstance() {
}

Account_ListZone_Request::Account_ListZone_Request(const Account_ListZone_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account_ListZone_Request::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  uispinfo_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account_ListZone_Request::~Account_ListZone_Request() {
  SharedDtor();
}

void Account_ListZone_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Account_ListZone_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account_ListZone_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_ListZone_Request_descriptor_;
}

const Account_ListZone_Request& Account_ListZone_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

Account_ListZone_Request* Account_ListZone_Request::default_instance_ = NULL;

Account_ListZone_Request* Account_ListZone_Request::New() const {
  return new Account_ListZone_Request;
}

void Account_ListZone_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    uispinfo_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account_ListZone_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uISPInfo;
        break;
      }

      // optional uint32 uISPInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uISPInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uispinfo_)));
          set_has_uispinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account_ListZone_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 worldID = 1;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldid(), output);
  }

  // optional uint32 uISPInfo = 2;
  if (has_uispinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uispinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account_ListZone_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 worldID = 1;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldid(), target);
  }

  // optional uint32 uISPInfo = 2;
  if (has_uispinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uispinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account_ListZone_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 worldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }

    // optional uint32 uISPInfo = 2;
    if (has_uispinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uispinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account_ListZone_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account_ListZone_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account_ListZone_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account_ListZone_Request::MergeFrom(const Account_ListZone_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_uispinfo()) {
      set_uispinfo(from.uispinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account_ListZone_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account_ListZone_Request::CopyFrom(const Account_ListZone_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_ListZone_Request::IsInitialized() const {

  return true;
}

void Account_ListZone_Request::Swap(Account_ListZone_Request* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(uispinfo_, other->uispinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account_ListZone_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_ListZone_Request_descriptor_;
  metadata.reflection = Account_ListZone_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account_ListZone_Response::kIResultFieldNumber;
const int Account_ListZone_Response::kUWorldIDFieldNumber;
const int Account_ListZone_Response::kStZoneListFieldNumber;
#endif  // !_MSC_VER

Account_ListZone_Response::Account_ListZone_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account_ListZone_Response::InitAsDefaultInstance() {
  stzonelist_ = const_cast< ::ZoneList*>(&::ZoneList::default_instance());
}

Account_ListZone_Response::Account_ListZone_Response(const Account_ListZone_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account_ListZone_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uworldid_ = 0u;
  stzonelist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account_ListZone_Response::~Account_ListZone_Response() {
  SharedDtor();
}

void Account_ListZone_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stzonelist_;
  }
}

void Account_ListZone_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account_ListZone_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_ListZone_Response_descriptor_;
}

const Account_ListZone_Response& Account_ListZone_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

Account_ListZone_Response* Account_ListZone_Response::default_instance_ = NULL;

Account_ListZone_Response* Account_ListZone_Response::New() const {
  return new Account_ListZone_Response;
}

void Account_ListZone_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uworldid_ = 0u;
    if (has_stzonelist()) {
      if (stzonelist_ != NULL) stzonelist_->::ZoneList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account_ListZone_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uWorldID;
        break;
      }

      // optional uint32 uWorldID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uworldid_)));
          set_has_uworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stZoneList;
        break;
      }

      // optional .ZoneList stZoneList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stZoneList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stzonelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account_ListZone_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uWorldID = 2;
  if (has_uworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uworldid(), output);
  }

  // optional .ZoneList stZoneList = 3;
  if (has_stzonelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stzonelist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account_ListZone_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uWorldID = 2;
  if (has_uworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uworldid(), target);
  }

  // optional .ZoneList stZoneList = 3;
  if (has_stzonelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stzonelist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account_ListZone_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uWorldID = 2;
    if (has_uworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uworldid());
    }

    // optional .ZoneList stZoneList = 3;
    if (has_stzonelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stzonelist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account_ListZone_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account_ListZone_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account_ListZone_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account_ListZone_Response::MergeFrom(const Account_ListZone_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uworldid()) {
      set_uworldid(from.uworldid());
    }
    if (from.has_stzonelist()) {
      mutable_stzonelist()->::ZoneList::MergeFrom(from.stzonelist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account_ListZone_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account_ListZone_Response::CopyFrom(const Account_ListZone_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_ListZone_Response::IsInitialized() const {

  return true;
}

void Account_ListZone_Response::Swap(Account_ListZone_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uworldid_, other->uworldid_);
    std::swap(stzonelist_, other->stzonelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account_ListZone_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_ListZone_Response_descriptor_;
  metadata.reflection = Account_ListZone_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRole_Account_Request::kStRoleIDFieldNumber;
#endif  // !_MSC_VER

DeleteRole_Account_Request::DeleteRole_Account_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteRole_Account_Request::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

DeleteRole_Account_Request::DeleteRole_Account_Request(const DeleteRole_Account_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteRole_Account_Request::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRole_Account_Request::~DeleteRole_Account_Request() {
  SharedDtor();
}

void DeleteRole_Account_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void DeleteRole_Account_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRole_Account_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRole_Account_Request_descriptor_;
}

const DeleteRole_Account_Request& DeleteRole_Account_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

DeleteRole_Account_Request* DeleteRole_Account_Request::default_instance_ = NULL;

DeleteRole_Account_Request* DeleteRole_Account_Request::New() const {
  return new DeleteRole_Account_Request;
}

void DeleteRole_Account_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRole_Account_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteRole_Account_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteRole_Account_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteRole_Account_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRole_Account_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRole_Account_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRole_Account_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRole_Account_Request::MergeFrom(const DeleteRole_Account_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRole_Account_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRole_Account_Request::CopyFrom(const DeleteRole_Account_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRole_Account_Request::IsInitialized() const {

  return true;
}

void DeleteRole_Account_Request::Swap(DeleteRole_Account_Request* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRole_Account_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRole_Account_Request_descriptor_;
  metadata.reflection = DeleteRole_Account_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteRole_Account_Response::kIResultFieldNumber;
const int DeleteRole_Account_Response::kStRoleIDFieldNumber;
const int DeleteRole_Account_Response::kUProfessionFieldNumber;
const int DeleteRole_Account_Response::kULevelFieldNumber;
#endif  // !_MSC_VER

DeleteRole_Account_Response::DeleteRole_Account_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteRole_Account_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

DeleteRole_Account_Response::DeleteRole_Account_Response(const DeleteRole_Account_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteRole_Account_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stroleid_ = NULL;
  uprofession_ = 0u;
  ulevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteRole_Account_Response::~DeleteRole_Account_Response() {
  SharedDtor();
}

void DeleteRole_Account_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void DeleteRole_Account_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteRole_Account_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteRole_Account_Response_descriptor_;
}

const DeleteRole_Account_Response& DeleteRole_Account_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

DeleteRole_Account_Response* DeleteRole_Account_Response::default_instance_ = NULL;

DeleteRole_Account_Response* DeleteRole_Account_Response::New() const {
  return new DeleteRole_Account_Response;
}

void DeleteRole_Account_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    uprofession_ = 0u;
    ulevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteRole_Account_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uProfession;
        break;
      }

      // optional uint32 uProfession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uProfession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uprofession_)));
          set_has_uprofession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uLevel;
        break;
      }

      // optional uint32 uLevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ulevel_)));
          set_has_ulevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteRole_Account_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroleid(), output);
  }

  // optional uint32 uProfession = 4;
  if (has_uprofession()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uprofession(), output);
  }

  // optional uint32 uLevel = 6;
  if (has_ulevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ulevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteRole_Account_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroleid(), target);
  }

  // optional uint32 uProfession = 4;
  if (has_uprofession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uprofession(), target);
  }

  // optional uint32 uLevel = 6;
  if (has_ulevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ulevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteRole_Account_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .RoleID stRoleID = 2;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional uint32 uProfession = 4;
    if (has_uprofession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uprofession());
    }

    // optional uint32 uLevel = 6;
    if (has_ulevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ulevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteRole_Account_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteRole_Account_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteRole_Account_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteRole_Account_Response::MergeFrom(const DeleteRole_Account_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_uprofession()) {
      set_uprofession(from.uprofession());
    }
    if (from.has_ulevel()) {
      set_ulevel(from.ulevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteRole_Account_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteRole_Account_Response::CopyFrom(const DeleteRole_Account_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRole_Account_Response::IsInitialized() const {

  return true;
}

void DeleteRole_Account_Response::Swap(DeleteRole_Account_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(uprofession_, other->uprofession_);
    std::swap(ulevel_, other->ulevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteRole_Account_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteRole_Account_Response_descriptor_;
  metadata.reflection = DeleteRole_Account_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account_ListRole_Request::kUinFieldNumber;
const int Account_ListRole_Request::kWorldFieldNumber;
const int Account_ListRole_Request::kSessionKeyFieldNumber;
#endif  // !_MSC_VER

Account_ListRole_Request::Account_ListRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account_ListRole_Request::InitAsDefaultInstance() {
}

Account_ListRole_Request::Account_ListRole_Request(const Account_ListRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account_ListRole_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  world_ = 0u;
  sessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account_ListRole_Request::~Account_ListRole_Request() {
  SharedDtor();
}

void Account_ListRole_Request::SharedDtor() {
  if (sessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete sessionkey_;
  }
  if (this != default_instance_) {
  }
}

void Account_ListRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account_ListRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_ListRole_Request_descriptor_;
}

const Account_ListRole_Request& Account_ListRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

Account_ListRole_Request* Account_ListRole_Request::default_instance_ = NULL;

Account_ListRole_Request* Account_ListRole_Request::New() const {
  return new Account_ListRole_Request;
}

void Account_ListRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    world_ = 0u;
    if (has_sessionkey()) {
      if (sessionkey_ != &::google::protobuf::internal::kEmptyString) {
        sessionkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account_ListRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_world;
        break;
      }

      // optional uint32 world = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_)));
          set_has_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sessionKey;
        break;
      }

      // optional string sessionKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sessionkey().data(), this->sessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account_ListRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 world = 2;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->world(), output);
  }

  // optional string sessionKey = 3;
  if (has_sessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sessionkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account_ListRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 world = 2;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->world(), target);
  }

  // optional string sessionKey = 3;
  if (has_sessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sessionkey().data(), this->sessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sessionkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account_ListRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 world = 2;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world());
    }

    // optional string sessionKey = 3;
    if (has_sessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sessionkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account_ListRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account_ListRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account_ListRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account_ListRole_Request::MergeFrom(const Account_ListRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_world()) {
      set_world(from.world());
    }
    if (from.has_sessionkey()) {
      set_sessionkey(from.sessionkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account_ListRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account_ListRole_Request::CopyFrom(const Account_ListRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_ListRole_Request::IsInitialized() const {

  return true;
}

void Account_ListRole_Request::Swap(Account_ListRole_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(world_, other->world_);
    std::swap(sessionkey_, other->sessionkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account_ListRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_ListRole_Request_descriptor_;
  metadata.reflection = Account_ListRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Account_ListRole_Response::kIResultFieldNumber;
const int Account_ListRole_Response::kStRoleIDFieldNumber;
const int Account_ListRole_Response::kWorldFieldNumber;
const int Account_ListRole_Response::kBExistFieldNumber;
#endif  // !_MSC_VER

Account_ListRole_Response::Account_ListRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Account_ListRole_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Account_ListRole_Response::Account_ListRole_Response(const Account_ListRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Account_ListRole_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stroleid_ = NULL;
  world_ = 0u;
  bexist_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Account_ListRole_Response::~Account_ListRole_Response() {
  SharedDtor();
}

void Account_ListRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void Account_ListRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Account_ListRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Account_ListRole_Response_descriptor_;
}

const Account_ListRole_Response& Account_ListRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fAccount_2eproto();
  return *default_instance_;
}

Account_ListRole_Response* Account_ListRole_Response::default_instance_ = NULL;

Account_ListRole_Response* Account_ListRole_Response::New() const {
  return new Account_ListRole_Response;
}

void Account_ListRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    world_ = 0u;
    bexist_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Account_ListRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_world;
        break;
      }

      // optional uint32 world = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_)));
          set_has_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bExist;
        break;
      }

      // optional bool bExist = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bExist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bexist_)));
          set_has_bexist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Account_ListRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroleid(), output);
  }

  // optional uint32 world = 4;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->world(), output);
  }

  // optional bool bExist = 5;
  if (has_bexist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bexist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Account_ListRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroleid(), target);
  }

  // optional uint32 world = 4;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->world(), target);
  }

  // optional bool bExist = 5;
  if (has_bexist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bexist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Account_ListRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .RoleID stRoleID = 2;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional uint32 world = 4;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world());
    }

    // optional bool bExist = 5;
    if (has_bexist()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Account_ListRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Account_ListRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Account_ListRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Account_ListRole_Response::MergeFrom(const Account_ListRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_world()) {
      set_world(from.world());
    }
    if (from.has_bexist()) {
      set_bexist(from.bexist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Account_ListRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Account_ListRole_Response::CopyFrom(const Account_ListRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Account_ListRole_Response::IsInitialized() const {

  return true;
}

void Account_ListRole_Response::Swap(Account_ListRole_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(world_, other->world_);
    std::swap(bexist_, other->bexist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Account_ListRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Account_ListRole_Response_descriptor_;
  metadata.reflection = Account_ListRole_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
