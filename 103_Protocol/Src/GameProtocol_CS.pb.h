// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_CS.proto

#ifndef PROTOBUF_GameProtocol_5fCS_2eproto__INCLUDED
#define PROTOBUF_GameProtocol_5fCS_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GameProtocol_Common.pb.h"
#include "GameProtocol_Account.pb.h"
#include "GameProtocol_World.pb.h"
#include "GameProtocol_Zone.pb.h"
#include "GameProtocol_RegAuth.pb.h"
#include "GameProtocol_MsgID.pb.h"
// @@protoc_insertion_point(includes)

namespace GameProtocol {
namespace CS {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameProtocol_5fCS_2eproto();
void protobuf_AssignDesc_GameProtocol_5fCS_2eproto();
void protobuf_ShutdownFile_GameProtocol_5fCS_2eproto();

class CSMsgBody;
class CSMsgHead;
class ProtocolCSMsg;

// ===================================================================

class CSMsgBody : public ::google::protobuf::Message {
 public:
  CSMsgBody();
  virtual ~CSMsgBody();

  CSMsgBody(const CSMsgBody& from);

  inline CSMsgBody& operator=(const CSMsgBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgBody& default_instance();

  void Swap(CSMsgBody* other);

  // implements Message ----------------------------------------------

  CSMsgBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgBody& from);
  void MergeFrom(const CSMsgBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RegAuthDB_AddAccount_Request m_stRegAuthDB_AddAccount_Request = 1;
  inline bool has_m_stregauthdb_addaccount_request() const;
  inline void clear_m_stregauthdb_addaccount_request();
  static const int kMStRegAuthDBAddAccountRequestFieldNumber = 1;
  inline const ::RegAuthDB_AddAccount_Request& m_stregauthdb_addaccount_request() const;
  inline ::RegAuthDB_AddAccount_Request* mutable_m_stregauthdb_addaccount_request();
  inline ::RegAuthDB_AddAccount_Request* release_m_stregauthdb_addaccount_request();
  inline void set_allocated_m_stregauthdb_addaccount_request(::RegAuthDB_AddAccount_Request* m_stregauthdb_addaccount_request);

  // optional .RegAuthDB_AddAccount_Response m_stRegAuthDB_AddAccount_Response = 2;
  inline bool has_m_stregauthdb_addaccount_response() const;
  inline void clear_m_stregauthdb_addaccount_response();
  static const int kMStRegAuthDBAddAccountResponseFieldNumber = 2;
  inline const ::RegAuthDB_AddAccount_Response& m_stregauthdb_addaccount_response() const;
  inline ::RegAuthDB_AddAccount_Response* mutable_m_stregauthdb_addaccount_response();
  inline ::RegAuthDB_AddAccount_Response* release_m_stregauthdb_addaccount_response();
  inline void set_allocated_m_stregauthdb_addaccount_response(::RegAuthDB_AddAccount_Response* m_stregauthdb_addaccount_response);

  // optional .RegAuthDB_DelAccount_Request m_stRegAuthDB_Delete_Request = 3;
  inline bool has_m_stregauthdb_delete_request() const;
  inline void clear_m_stregauthdb_delete_request();
  static const int kMStRegAuthDBDeleteRequestFieldNumber = 3;
  inline const ::RegAuthDB_DelAccount_Request& m_stregauthdb_delete_request() const;
  inline ::RegAuthDB_DelAccount_Request* mutable_m_stregauthdb_delete_request();
  inline ::RegAuthDB_DelAccount_Request* release_m_stregauthdb_delete_request();
  inline void set_allocated_m_stregauthdb_delete_request(::RegAuthDB_DelAccount_Request* m_stregauthdb_delete_request);

  // optional .RegAuthDB_DelAccount_Response m_stRegAuthDB_Delete_Response = 4;
  inline bool has_m_stregauthdb_delete_response() const;
  inline void clear_m_stregauthdb_delete_response();
  static const int kMStRegAuthDBDeleteResponseFieldNumber = 4;
  inline const ::RegAuthDB_DelAccount_Response& m_stregauthdb_delete_response() const;
  inline ::RegAuthDB_DelAccount_Response* mutable_m_stregauthdb_delete_response();
  inline ::RegAuthDB_DelAccount_Response* release_m_stregauthdb_delete_response();
  inline void set_allocated_m_stregauthdb_delete_response(::RegAuthDB_DelAccount_Response* m_stregauthdb_delete_response);

  // optional .RegAuthDB_GetAccount_Request m_stRegAuthDB_Fetch_Request = 5;
  inline bool has_m_stregauthdb_fetch_request() const;
  inline void clear_m_stregauthdb_fetch_request();
  static const int kMStRegAuthDBFetchRequestFieldNumber = 5;
  inline const ::RegAuthDB_GetAccount_Request& m_stregauthdb_fetch_request() const;
  inline ::RegAuthDB_GetAccount_Request* mutable_m_stregauthdb_fetch_request();
  inline ::RegAuthDB_GetAccount_Request* release_m_stregauthdb_fetch_request();
  inline void set_allocated_m_stregauthdb_fetch_request(::RegAuthDB_GetAccount_Request* m_stregauthdb_fetch_request);

  // optional .RegAuthDB_GetAccount_Response m_stRegAuthDB_Fetch_Response = 6;
  inline bool has_m_stregauthdb_fetch_response() const;
  inline void clear_m_stregauthdb_fetch_response();
  static const int kMStRegAuthDBFetchResponseFieldNumber = 6;
  inline const ::RegAuthDB_GetAccount_Response& m_stregauthdb_fetch_response() const;
  inline ::RegAuthDB_GetAccount_Response* mutable_m_stregauthdb_fetch_response();
  inline ::RegAuthDB_GetAccount_Response* release_m_stregauthdb_fetch_response();
  inline void set_allocated_m_stregauthdb_fetch_response(::RegAuthDB_GetAccount_Response* m_stregauthdb_fetch_response);

  // optional .RegAuth_RegAccount_Request m_stRegAuth_RegAccount_Request = 10;
  inline bool has_m_stregauth_regaccount_request() const;
  inline void clear_m_stregauth_regaccount_request();
  static const int kMStRegAuthRegAccountRequestFieldNumber = 10;
  inline const ::RegAuth_RegAccount_Request& m_stregauth_regaccount_request() const;
  inline ::RegAuth_RegAccount_Request* mutable_m_stregauth_regaccount_request();
  inline ::RegAuth_RegAccount_Request* release_m_stregauth_regaccount_request();
  inline void set_allocated_m_stregauth_regaccount_request(::RegAuth_RegAccount_Request* m_stregauth_regaccount_request);

  // optional .RegAuth_RegAccount_Response m_stRegAuth_RegAccount_Response = 11;
  inline bool has_m_stregauth_regaccount_response() const;
  inline void clear_m_stregauth_regaccount_response();
  static const int kMStRegAuthRegAccountResponseFieldNumber = 11;
  inline const ::RegAuth_RegAccount_Response& m_stregauth_regaccount_response() const;
  inline ::RegAuth_RegAccount_Response* mutable_m_stregauth_regaccount_response();
  inline ::RegAuth_RegAccount_Response* release_m_stregauth_regaccount_response();
  inline void set_allocated_m_stregauth_regaccount_response(::RegAuth_RegAccount_Response* m_stregauth_regaccount_response);

  // optional .RegAuth_AuthAccount_Request m_stRegAuth_AuthAccount_Request = 12;
  inline bool has_m_stregauth_authaccount_request() const;
  inline void clear_m_stregauth_authaccount_request();
  static const int kMStRegAuthAuthAccountRequestFieldNumber = 12;
  inline const ::RegAuth_AuthAccount_Request& m_stregauth_authaccount_request() const;
  inline ::RegAuth_AuthAccount_Request* mutable_m_stregauth_authaccount_request();
  inline ::RegAuth_AuthAccount_Request* release_m_stregauth_authaccount_request();
  inline void set_allocated_m_stregauth_authaccount_request(::RegAuth_AuthAccount_Request* m_stregauth_authaccount_request);

  // optional .RegAuth_AuthAccount_Response m_stRegAuth_AuthAccount_Response = 13;
  inline bool has_m_stregauth_authaccount_response() const;
  inline void clear_m_stregauth_authaccount_response();
  static const int kMStRegAuthAuthAccountResponseFieldNumber = 13;
  inline const ::RegAuth_AuthAccount_Response& m_stregauth_authaccount_response() const;
  inline ::RegAuth_AuthAccount_Response* mutable_m_stregauth_authaccount_response();
  inline ::RegAuth_AuthAccount_Response* release_m_stregauth_authaccount_response();
  inline void set_allocated_m_stregauth_authaccount_response(::RegAuth_AuthAccount_Response* m_stregauth_authaccount_response);

  // optional .RegAuth_PlatformAuth_Request m_stRegAuth_PlatformAuth_Request = 16;
  inline bool has_m_stregauth_platformauth_request() const;
  inline void clear_m_stregauth_platformauth_request();
  static const int kMStRegAuthPlatformAuthRequestFieldNumber = 16;
  inline const ::RegAuth_PlatformAuth_Request& m_stregauth_platformauth_request() const;
  inline ::RegAuth_PlatformAuth_Request* mutable_m_stregauth_platformauth_request();
  inline ::RegAuth_PlatformAuth_Request* release_m_stregauth_platformauth_request();
  inline void set_allocated_m_stregauth_platformauth_request(::RegAuth_PlatformAuth_Request* m_stregauth_platformauth_request);

  // optional .RegAuth_PlatformAuth_Response m_stRegAuth_PlatformAuth_Response = 17;
  inline bool has_m_stregauth_platformauth_response() const;
  inline void clear_m_stregauth_platformauth_response();
  static const int kMStRegAuthPlatformAuthResponseFieldNumber = 17;
  inline const ::RegAuth_PlatformAuth_Response& m_stregauth_platformauth_response() const;
  inline ::RegAuth_PlatformAuth_Response* mutable_m_stregauth_platformauth_response();
  inline ::RegAuth_PlatformAuth_Response* release_m_stregauth_platformauth_response();
  inline void set_allocated_m_stregauth_platformauth_response(::RegAuth_PlatformAuth_Response* m_stregauth_platformauth_response);

  // optional .World_WriteLog_Request m_stWorld_WriteLog_Request = 20;
  inline bool has_m_stworld_writelog_request() const;
  inline void clear_m_stworld_writelog_request();
  static const int kMStWorldWriteLogRequestFieldNumber = 20;
  inline const ::World_WriteLog_Request& m_stworld_writelog_request() const;
  inline ::World_WriteLog_Request* mutable_m_stworld_writelog_request();
  inline ::World_WriteLog_Request* release_m_stworld_writelog_request();
  inline void set_allocated_m_stworld_writelog_request(::World_WriteLog_Request* m_stworld_writelog_request);

  // optional .CreateRole_Account_Request m_stAccountCreateRoleRequest = 21;
  inline bool has_m_staccountcreaterolerequest() const;
  inline void clear_m_staccountcreaterolerequest();
  static const int kMStAccountCreateRoleRequestFieldNumber = 21;
  inline const ::CreateRole_Account_Request& m_staccountcreaterolerequest() const;
  inline ::CreateRole_Account_Request* mutable_m_staccountcreaterolerequest();
  inline ::CreateRole_Account_Request* release_m_staccountcreaterolerequest();
  inline void set_allocated_m_staccountcreaterolerequest(::CreateRole_Account_Request* m_staccountcreaterolerequest);

  // optional .CreateRole_Account_Response m_stAccountCreateRoleResponse = 22;
  inline bool has_m_staccountcreateroleresponse() const;
  inline void clear_m_staccountcreateroleresponse();
  static const int kMStAccountCreateRoleResponseFieldNumber = 22;
  inline const ::CreateRole_Account_Response& m_staccountcreateroleresponse() const;
  inline ::CreateRole_Account_Response* mutable_m_staccountcreateroleresponse();
  inline ::CreateRole_Account_Response* release_m_staccountcreateroleresponse();
  inline void set_allocated_m_staccountcreateroleresponse(::CreateRole_Account_Response* m_staccountcreateroleresponse);

  // optional .Account_ListZone_Request m_stAccount_ListZone_Request = 23;
  inline bool has_m_staccount_listzone_request() const;
  inline void clear_m_staccount_listzone_request();
  static const int kMStAccountListZoneRequestFieldNumber = 23;
  inline const ::Account_ListZone_Request& m_staccount_listzone_request() const;
  inline ::Account_ListZone_Request* mutable_m_staccount_listzone_request();
  inline ::Account_ListZone_Request* release_m_staccount_listzone_request();
  inline void set_allocated_m_staccount_listzone_request(::Account_ListZone_Request* m_staccount_listzone_request);

  // optional .Account_ListZone_Response m_stAccount_ListZone_Response = 24;
  inline bool has_m_staccount_listzone_response() const;
  inline void clear_m_staccount_listzone_response();
  static const int kMStAccountListZoneResponseFieldNumber = 24;
  inline const ::Account_ListZone_Response& m_staccount_listzone_response() const;
  inline ::Account_ListZone_Response* mutable_m_staccount_listzone_response();
  inline ::Account_ListZone_Response* release_m_staccount_listzone_response();
  inline void set_allocated_m_staccount_listzone_response(::Account_ListZone_Response* m_staccount_listzone_response);

  // optional .DeleteRole_Account_Request m_stAccountDeleteRoleRequest = 25;
  inline bool has_m_staccountdeleterolerequest() const;
  inline void clear_m_staccountdeleterolerequest();
  static const int kMStAccountDeleteRoleRequestFieldNumber = 25;
  inline const ::DeleteRole_Account_Request& m_staccountdeleterolerequest() const;
  inline ::DeleteRole_Account_Request* mutable_m_staccountdeleterolerequest();
  inline ::DeleteRole_Account_Request* release_m_staccountdeleterolerequest();
  inline void set_allocated_m_staccountdeleterolerequest(::DeleteRole_Account_Request* m_staccountdeleterolerequest);

  // optional .DeleteRole_Account_Response m_stAccountDeleteRoleResponse = 26;
  inline bool has_m_staccountdeleteroleresponse() const;
  inline void clear_m_staccountdeleteroleresponse();
  static const int kMStAccountDeleteRoleResponseFieldNumber = 26;
  inline const ::DeleteRole_Account_Response& m_staccountdeleteroleresponse() const;
  inline ::DeleteRole_Account_Response* mutable_m_staccountdeleteroleresponse();
  inline ::DeleteRole_Account_Response* release_m_staccountdeleteroleresponse();
  inline void set_allocated_m_staccountdeleteroleresponse(::DeleteRole_Account_Response* m_staccountdeleteroleresponse);

  // optional .Account_ListRole_Request m_stAccountListRoleRequest = 27;
  inline bool has_m_staccountlistrolerequest() const;
  inline void clear_m_staccountlistrolerequest();
  static const int kMStAccountListRoleRequestFieldNumber = 27;
  inline const ::Account_ListRole_Request& m_staccountlistrolerequest() const;
  inline ::Account_ListRole_Request* mutable_m_staccountlistrolerequest();
  inline ::Account_ListRole_Request* release_m_staccountlistrolerequest();
  inline void set_allocated_m_staccountlistrolerequest(::Account_ListRole_Request* m_staccountlistrolerequest);

  // optional .Account_ListRole_Response m_stAccountListRoleResponse = 28;
  inline bool has_m_staccountlistroleresponse() const;
  inline void clear_m_staccountlistroleresponse();
  static const int kMStAccountListRoleResponseFieldNumber = 28;
  inline const ::Account_ListRole_Response& m_staccountlistroleresponse() const;
  inline ::Account_ListRole_Response* mutable_m_staccountlistroleresponse();
  inline ::Account_ListRole_Response* release_m_staccountlistroleresponse();
  inline void set_allocated_m_staccountlistroleresponse(::Account_ListRole_Response* m_staccountlistroleresponse);

  // optional .LogoutServer_Response m_stLogoutServer_Response = 30;
  inline bool has_m_stlogoutserver_response() const;
  inline void clear_m_stlogoutserver_response();
  static const int kMStLogoutServerResponseFieldNumber = 30;
  inline const ::LogoutServer_Response& m_stlogoutserver_response() const;
  inline ::LogoutServer_Response* mutable_m_stlogoutserver_response();
  inline ::LogoutServer_Response* release_m_stlogoutserver_response();
  inline void set_allocated_m_stlogoutserver_response(::LogoutServer_Response* m_stlogoutserver_response);

  // optional .World_ZoneChanged_Notify m_stWorld_ZoneChanged_Notify = 31;
  inline bool has_m_stworld_zonechanged_notify() const;
  inline void clear_m_stworld_zonechanged_notify();
  static const int kMStWorldZoneChangedNotifyFieldNumber = 31;
  inline const ::World_ZoneChanged_Notify& m_stworld_zonechanged_notify() const;
  inline ::World_ZoneChanged_Notify* mutable_m_stworld_zonechanged_notify();
  inline ::World_ZoneChanged_Notify* release_m_stworld_zonechanged_notify();
  inline void set_allocated_m_stworld_zonechanged_notify(::World_ZoneChanged_Notify* m_stworld_zonechanged_notify);

  // optional .World_CreateRole_Request m_stWorld_CreateRole_Request = 32;
  inline bool has_m_stworld_createrole_request() const;
  inline void clear_m_stworld_createrole_request();
  static const int kMStWorldCreateRoleRequestFieldNumber = 32;
  inline const ::World_CreateRole_Request& m_stworld_createrole_request() const;
  inline ::World_CreateRole_Request* mutable_m_stworld_createrole_request();
  inline ::World_CreateRole_Request* release_m_stworld_createrole_request();
  inline void set_allocated_m_stworld_createrole_request(::World_CreateRole_Request* m_stworld_createrole_request);

  // optional .World_CreateRole_Response m_stWorld_CreateRole_Response = 33;
  inline bool has_m_stworld_createrole_response() const;
  inline void clear_m_stworld_createrole_response();
  static const int kMStWorldCreateRoleResponseFieldNumber = 33;
  inline const ::World_CreateRole_Response& m_stworld_createrole_response() const;
  inline ::World_CreateRole_Response* mutable_m_stworld_createrole_response();
  inline ::World_CreateRole_Response* release_m_stworld_createrole_response();
  inline void set_allocated_m_stworld_createrole_response(::World_CreateRole_Response* m_stworld_createrole_response);

  // optional .World_FetchRole_Request m_stWorld_FetchRole_Request = 34;
  inline bool has_m_stworld_fetchrole_request() const;
  inline void clear_m_stworld_fetchrole_request();
  static const int kMStWorldFetchRoleRequestFieldNumber = 34;
  inline const ::World_FetchRole_Request& m_stworld_fetchrole_request() const;
  inline ::World_FetchRole_Request* mutable_m_stworld_fetchrole_request();
  inline ::World_FetchRole_Request* release_m_stworld_fetchrole_request();
  inline void set_allocated_m_stworld_fetchrole_request(::World_FetchRole_Request* m_stworld_fetchrole_request);

  // optional .World_FetchRole_Response m_stWorld_FetchRole_Response = 35;
  inline bool has_m_stworld_fetchrole_response() const;
  inline void clear_m_stworld_fetchrole_response();
  static const int kMStWorldFetchRoleResponseFieldNumber = 35;
  inline const ::World_FetchRole_Response& m_stworld_fetchrole_response() const;
  inline ::World_FetchRole_Response* mutable_m_stworld_fetchrole_response();
  inline ::World_FetchRole_Response* release_m_stworld_fetchrole_response();
  inline void set_allocated_m_stworld_fetchrole_response(::World_FetchRole_Response* m_stworld_fetchrole_response);

  // optional .Zone_Logout_Notify m_stZone_Logout_Notify = 36;
  inline bool has_m_stzone_logout_notify() const;
  inline void clear_m_stzone_logout_notify();
  static const int kMStZoneLogoutNotifyFieldNumber = 36;
  inline const ::Zone_Logout_Notify& m_stzone_logout_notify() const;
  inline ::Zone_Logout_Notify* mutable_m_stzone_logout_notify();
  inline ::Zone_Logout_Notify* release_m_stzone_logout_notify();
  inline void set_allocated_m_stzone_logout_notify(::Zone_Logout_Notify* m_stzone_logout_notify);

  // optional .World_UpdateRole_Request m_stWorld_UpdateRole_Request = 37;
  inline bool has_m_stworld_updaterole_request() const;
  inline void clear_m_stworld_updaterole_request();
  static const int kMStWorldUpdateRoleRequestFieldNumber = 37;
  inline const ::World_UpdateRole_Request& m_stworld_updaterole_request() const;
  inline ::World_UpdateRole_Request* mutable_m_stworld_updaterole_request();
  inline ::World_UpdateRole_Request* release_m_stworld_updaterole_request();
  inline void set_allocated_m_stworld_updaterole_request(::World_UpdateRole_Request* m_stworld_updaterole_request);

  // optional .World_UpdateRole_Response m_stWorld_UpdateRole_Response = 38;
  inline bool has_m_stworld_updaterole_response() const;
  inline void clear_m_stworld_updaterole_response();
  static const int kMStWorldUpdateRoleResponseFieldNumber = 38;
  inline const ::World_UpdateRole_Response& m_stworld_updaterole_response() const;
  inline ::World_UpdateRole_Response* mutable_m_stworld_updaterole_response();
  inline ::World_UpdateRole_Response* release_m_stworld_updaterole_response();
  inline void set_allocated_m_stworld_updaterole_response(::World_UpdateRole_Response* m_stworld_updaterole_response);

  // optional .Zone_GetFriendInfo_Request m_stZone_GetFriendInfo_Request = 39;
  inline bool has_m_stzone_getfriendinfo_request() const;
  inline void clear_m_stzone_getfriendinfo_request();
  static const int kMStZoneGetFriendInfoRequestFieldNumber = 39;
  inline const ::Zone_GetFriendInfo_Request& m_stzone_getfriendinfo_request() const;
  inline ::Zone_GetFriendInfo_Request* mutable_m_stzone_getfriendinfo_request();
  inline ::Zone_GetFriendInfo_Request* release_m_stzone_getfriendinfo_request();
  inline void set_allocated_m_stzone_getfriendinfo_request(::Zone_GetFriendInfo_Request* m_stzone_getfriendinfo_request);

  // optional .Zone_GetFriendInfo_Response m_stZone_GetFriendInfo_Response = 40;
  inline bool has_m_stzone_getfriendinfo_response() const;
  inline void clear_m_stzone_getfriendinfo_response();
  static const int kMStZoneGetFriendInfoResponseFieldNumber = 40;
  inline const ::Zone_GetFriendInfo_Response& m_stzone_getfriendinfo_response() const;
  inline ::Zone_GetFriendInfo_Response* mutable_m_stzone_getfriendinfo_response();
  inline ::Zone_GetFriendInfo_Response* release_m_stzone_getfriendinfo_response();
  inline void set_allocated_m_stzone_getfriendinfo_response(::Zone_GetFriendInfo_Response* m_stzone_getfriendinfo_response);

  // optional .Zone_LoginServer_Request m_stZone_LoginServer_Request = 41;
  inline bool has_m_stzone_loginserver_request() const;
  inline void clear_m_stzone_loginserver_request();
  static const int kMStZoneLoginServerRequestFieldNumber = 41;
  inline const ::Zone_LoginServer_Request& m_stzone_loginserver_request() const;
  inline ::Zone_LoginServer_Request* mutable_m_stzone_loginserver_request();
  inline ::Zone_LoginServer_Request* release_m_stzone_loginserver_request();
  inline void set_allocated_m_stzone_loginserver_request(::Zone_LoginServer_Request* m_stzone_loginserver_request);

  // optional .Zone_LoginServer_Response m_stZone_LoginServer_Response = 42;
  inline bool has_m_stzone_loginserver_response() const;
  inline void clear_m_stzone_loginserver_response();
  static const int kMStZoneLoginServerResponseFieldNumber = 42;
  inline const ::Zone_LoginServer_Response& m_stzone_loginserver_response() const;
  inline ::Zone_LoginServer_Response* mutable_m_stzone_loginserver_response();
  inline ::Zone_LoginServer_Response* release_m_stzone_loginserver_response();
  inline void set_allocated_m_stzone_loginserver_response(::Zone_LoginServer_Response* m_stzone_loginserver_response);

  // optional .World_KickRole_Request m_stWorld_KickRole_Request = 43;
  inline bool has_m_stworld_kickrole_request() const;
  inline void clear_m_stworld_kickrole_request();
  static const int kMStWorldKickRoleRequestFieldNumber = 43;
  inline const ::World_KickRole_Request& m_stworld_kickrole_request() const;
  inline ::World_KickRole_Request* mutable_m_stworld_kickrole_request();
  inline ::World_KickRole_Request* release_m_stworld_kickrole_request();
  inline void set_allocated_m_stworld_kickrole_request(::World_KickRole_Request* m_stworld_kickrole_request);

  // optional .World_KickRole_Response m_stWorld_KickRole_Response = 44;
  inline bool has_m_stworld_kickrole_response() const;
  inline void clear_m_stworld_kickrole_response();
  static const int kMStWorldKickRoleResponseFieldNumber = 44;
  inline const ::World_KickRole_Response& m_stworld_kickrole_response() const;
  inline ::World_KickRole_Response* mutable_m_stworld_kickrole_response();
  inline ::World_KickRole_Response* release_m_stworld_kickrole_response();
  inline void set_allocated_m_stworld_kickrole_response(::World_KickRole_Response* m_stworld_kickrole_response);

  // optional .Zone_OnlineRole_Request m_stZone_OnlineRole_Request = 45;
  inline bool has_m_stzone_onlinerole_request() const;
  inline void clear_m_stzone_onlinerole_request();
  static const int kMStZoneOnlineRoleRequestFieldNumber = 45;
  inline const ::Zone_OnlineRole_Request& m_stzone_onlinerole_request() const;
  inline ::Zone_OnlineRole_Request* mutable_m_stzone_onlinerole_request();
  inline ::Zone_OnlineRole_Request* release_m_stzone_onlinerole_request();
  inline void set_allocated_m_stzone_onlinerole_request(::Zone_OnlineRole_Request* m_stzone_onlinerole_request);

  // optional .World_OnlineStat_Request m_stWorld_OnlineStat_Request = 46;
  inline bool has_m_stworld_onlinestat_request() const;
  inline void clear_m_stworld_onlinestat_request();
  static const int kMStWorldOnlineStatRequestFieldNumber = 46;
  inline const ::World_OnlineStat_Request& m_stworld_onlinestat_request() const;
  inline ::World_OnlineStat_Request* mutable_m_stworld_onlinestat_request();
  inline ::World_OnlineStat_Request* release_m_stworld_onlinestat_request();
  inline void set_allocated_m_stworld_onlinestat_request(::World_OnlineStat_Request* m_stworld_onlinestat_request);

  // optional .World_OnlineStat_Response m_stWorld_OnlineStat_Response = 47;
  inline bool has_m_stworld_onlinestat_response() const;
  inline void clear_m_stworld_onlinestat_response();
  static const int kMStWorldOnlineStatResponseFieldNumber = 47;
  inline const ::World_OnlineStat_Response& m_stworld_onlinestat_response() const;
  inline ::World_OnlineStat_Response* mutable_m_stworld_onlinestat_response();
  inline ::World_OnlineStat_Response* release_m_stworld_onlinestat_response();
  inline void set_allocated_m_stworld_onlinestat_response(::World_OnlineStat_Response* m_stworld_onlinestat_response);

  // optional .GameMaster_Request m_stZone_GameMaster_Request = 48;
  inline bool has_m_stzone_gamemaster_request() const;
  inline void clear_m_stzone_gamemaster_request();
  static const int kMStZoneGameMasterRequestFieldNumber = 48;
  inline const ::GameMaster_Request& m_stzone_gamemaster_request() const;
  inline ::GameMaster_Request* mutable_m_stzone_gamemaster_request();
  inline ::GameMaster_Request* release_m_stzone_gamemaster_request();
  inline void set_allocated_m_stzone_gamemaster_request(::GameMaster_Request* m_stzone_gamemaster_request);

  // optional .GameMaster_Response m_stZone_GameMaster_Response = 49;
  inline bool has_m_stzone_gamemaster_response() const;
  inline void clear_m_stzone_gamemaster_response();
  static const int kMStZoneGameMasterResponseFieldNumber = 49;
  inline const ::GameMaster_Response& m_stzone_gamemaster_response() const;
  inline ::GameMaster_Response* mutable_m_stzone_gamemaster_response();
  inline ::GameMaster_Response* release_m_stzone_gamemaster_response();
  inline void set_allocated_m_stzone_gamemaster_response(::GameMaster_Response* m_stzone_gamemaster_response);

  // optional .GameMaster_Request m_stWorld_GameMaster_Request = 50;
  inline bool has_m_stworld_gamemaster_request() const;
  inline void clear_m_stworld_gamemaster_request();
  static const int kMStWorldGameMasterRequestFieldNumber = 50;
  inline const ::GameMaster_Request& m_stworld_gamemaster_request() const;
  inline ::GameMaster_Request* mutable_m_stworld_gamemaster_request();
  inline ::GameMaster_Request* release_m_stworld_gamemaster_request();
  inline void set_allocated_m_stworld_gamemaster_request(::GameMaster_Request* m_stworld_gamemaster_request);

  // optional .GameMaster_Response m_stWorld_GameMaster_Response = 51;
  inline bool has_m_stworld_gamemaster_response() const;
  inline void clear_m_stworld_gamemaster_response();
  static const int kMStWorldGameMasterResponseFieldNumber = 51;
  inline const ::GameMaster_Response& m_stworld_gamemaster_response() const;
  inline ::GameMaster_Response* mutable_m_stworld_gamemaster_response();
  inline ::GameMaster_Response* release_m_stworld_gamemaster_response();
  inline void set_allocated_m_stworld_gamemaster_response(::GameMaster_Response* m_stworld_gamemaster_response);

  // optional .AddNewName_Request m_stAddNewName_Request = 52;
  inline bool has_m_staddnewname_request() const;
  inline void clear_m_staddnewname_request();
  static const int kMStAddNewNameRequestFieldNumber = 52;
  inline const ::AddNewName_Request& m_staddnewname_request() const;
  inline ::AddNewName_Request* mutable_m_staddnewname_request();
  inline ::AddNewName_Request* release_m_staddnewname_request();
  inline void set_allocated_m_staddnewname_request(::AddNewName_Request* m_staddnewname_request);

  // optional .AddNewName_Response m_stAddNewName_Response = 53;
  inline bool has_m_staddnewname_response() const;
  inline void clear_m_staddnewname_response();
  static const int kMStAddNewNameResponseFieldNumber = 53;
  inline const ::AddNewName_Response& m_staddnewname_response() const;
  inline ::AddNewName_Response* mutable_m_staddnewname_response();
  inline ::AddNewName_Response* release_m_staddnewname_response();
  inline void set_allocated_m_staddnewname_response(::AddNewName_Response* m_staddnewname_response);

  // optional .DeleteName_Request m_stDeleteName_Request = 54;
  inline bool has_m_stdeletename_request() const;
  inline void clear_m_stdeletename_request();
  static const int kMStDeleteNameRequestFieldNumber = 54;
  inline const ::DeleteName_Request& m_stdeletename_request() const;
  inline ::DeleteName_Request* mutable_m_stdeletename_request();
  inline ::DeleteName_Request* release_m_stdeletename_request();
  inline void set_allocated_m_stdeletename_request(::DeleteName_Request* m_stdeletename_request);

  // optional .DeleteName_Response m_stDeleteName_Response = 55;
  inline bool has_m_stdeletename_response() const;
  inline void clear_m_stdeletename_response();
  static const int kMStDeleteNameResponseFieldNumber = 55;
  inline const ::DeleteName_Response& m_stdeletename_response() const;
  inline ::DeleteName_Response* mutable_m_stdeletename_response();
  inline ::DeleteName_Response* release_m_stdeletename_response();
  inline void set_allocated_m_stdeletename_response(::DeleteName_Response* m_stdeletename_response);

  // optional .Zone_LoginServer_Notify m_stLoginServer_Notify = 57;
  inline bool has_m_stloginserver_notify() const;
  inline void clear_m_stloginserver_notify();
  static const int kMStLoginServerNotifyFieldNumber = 57;
  inline const ::Zone_LoginServer_Notify& m_stloginserver_notify() const;
  inline ::Zone_LoginServer_Notify* mutable_m_stloginserver_notify();
  inline ::Zone_LoginServer_Notify* release_m_stloginserver_notify();
  inline void set_allocated_m_stloginserver_notify(::Zone_LoginServer_Notify* m_stloginserver_notify);

  // optional .Zone_RepOpera_Request m_stZone_RepOpera_Request = 64;
  inline bool has_m_stzone_repopera_request() const;
  inline void clear_m_stzone_repopera_request();
  static const int kMStZoneRepOperaRequestFieldNumber = 64;
  inline const ::Zone_RepOpera_Request& m_stzone_repopera_request() const;
  inline ::Zone_RepOpera_Request* mutable_m_stzone_repopera_request();
  inline ::Zone_RepOpera_Request* release_m_stzone_repopera_request();
  inline void set_allocated_m_stzone_repopera_request(::Zone_RepOpera_Request* m_stzone_repopera_request);

  // optional .Zone_RepOpera_Response m_stZone_RepOpera_Response = 65;
  inline bool has_m_stzone_repopera_response() const;
  inline void clear_m_stzone_repopera_response();
  static const int kMStZoneRepOperaResponseFieldNumber = 65;
  inline const ::Zone_RepOpera_Response& m_stzone_repopera_response() const;
  inline ::Zone_RepOpera_Response* mutable_m_stzone_repopera_response();
  inline ::Zone_RepOpera_Response* release_m_stzone_repopera_response();
  inline void set_allocated_m_stzone_repopera_response(::Zone_RepOpera_Response* m_stzone_repopera_response);

  // optional .Zone_RepChange_Notify m_stZone_RepChange_Notify = 70;
  inline bool has_m_stzone_repchange_notify() const;
  inline void clear_m_stzone_repchange_notify();
  static const int kMStZoneRepChangeNotifyFieldNumber = 70;
  inline const ::Zone_RepChange_Notify& m_stzone_repchange_notify() const;
  inline ::Zone_RepChange_Notify* mutable_m_stzone_repchange_notify();
  inline ::Zone_RepChange_Notify* release_m_stzone_repchange_notify();
  inline void set_allocated_m_stzone_repchange_notify(::Zone_RepChange_Notify* m_stzone_repchange_notify);

  // optional .World_OnlineExchange_Request m_stWorld_OnlineExchange_Request = 71;
  inline bool has_m_stworld_onlineexchange_request() const;
  inline void clear_m_stworld_onlineexchange_request();
  static const int kMStWorldOnlineExchangeRequestFieldNumber = 71;
  inline const ::World_OnlineExchange_Request& m_stworld_onlineexchange_request() const;
  inline ::World_OnlineExchange_Request* mutable_m_stworld_onlineexchange_request();
  inline ::World_OnlineExchange_Request* release_m_stworld_onlineexchange_request();
  inline void set_allocated_m_stworld_onlineexchange_request(::World_OnlineExchange_Request* m_stworld_onlineexchange_request);

  // optional .World_OnlineExchange_Response m_stWorld_OnlineExchange_Response = 72;
  inline bool has_m_stworld_onlineexchange_response() const;
  inline void clear_m_stworld_onlineexchange_response();
  static const int kMStWorldOnlineExchangeResponseFieldNumber = 72;
  inline const ::World_OnlineExchange_Response& m_stworld_onlineexchange_response() const;
  inline ::World_OnlineExchange_Response* mutable_m_stworld_onlineexchange_response();
  inline ::World_OnlineExchange_Response* release_m_stworld_onlineexchange_response();
  inline void set_allocated_m_stworld_onlineexchange_response(::World_OnlineExchange_Response* m_stworld_onlineexchange_response);

  // optional .Zone_ResourceChange_Notify m_stZone_ResourceChange_Notify = 73;
  inline bool has_m_stzone_resourcechange_notify() const;
  inline void clear_m_stzone_resourcechange_notify();
  static const int kMStZoneResourceChangeNotifyFieldNumber = 73;
  inline const ::Zone_ResourceChange_Notify& m_stzone_resourcechange_notify() const;
  inline ::Zone_ResourceChange_Notify* mutable_m_stzone_resourcechange_notify();
  inline ::Zone_ResourceChange_Notify* release_m_stzone_resourcechange_notify();
  inline void set_allocated_m_stzone_resourcechange_notify(::Zone_ResourceChange_Notify* m_stzone_resourcechange_notify);

  // optional .Zone_Chat_Request m_stZone_Chat_Request = 76;
  inline bool has_m_stzone_chat_request() const;
  inline void clear_m_stzone_chat_request();
  static const int kMStZoneChatRequestFieldNumber = 76;
  inline const ::Zone_Chat_Request& m_stzone_chat_request() const;
  inline ::Zone_Chat_Request* mutable_m_stzone_chat_request();
  inline ::Zone_Chat_Request* release_m_stzone_chat_request();
  inline void set_allocated_m_stzone_chat_request(::Zone_Chat_Request* m_stzone_chat_request);

  // optional .Zone_Chat_Response m_stZone_Chat_Response = 77;
  inline bool has_m_stzone_chat_response() const;
  inline void clear_m_stzone_chat_response();
  static const int kMStZoneChatResponseFieldNumber = 77;
  inline const ::Zone_Chat_Response& m_stzone_chat_response() const;
  inline ::Zone_Chat_Response* mutable_m_stzone_chat_response();
  inline ::Zone_Chat_Response* release_m_stzone_chat_response();
  inline void set_allocated_m_stzone_chat_response(::Zone_Chat_Response* m_stzone_chat_response);

  // optional .World_Chat_Notify m_stWorld_Chat_Notify = 78;
  inline bool has_m_stworld_chat_notify() const;
  inline void clear_m_stworld_chat_notify();
  static const int kMStWorldChatNotifyFieldNumber = 78;
  inline const ::World_Chat_Notify& m_stworld_chat_notify() const;
  inline ::World_Chat_Notify* mutable_m_stworld_chat_notify();
  inline ::World_Chat_Notify* release_m_stworld_chat_notify();
  inline void set_allocated_m_stworld_chat_notify(::World_Chat_Notify* m_stworld_chat_notify);

  // optional .Zone_DoFish_Request m_stZone_DoFish_Request = 81;
  inline bool has_m_stzone_dofish_request() const;
  inline void clear_m_stzone_dofish_request();
  static const int kMStZoneDoFishRequestFieldNumber = 81;
  inline const ::Zone_DoFish_Request& m_stzone_dofish_request() const;
  inline ::Zone_DoFish_Request* mutable_m_stzone_dofish_request();
  inline ::Zone_DoFish_Request* release_m_stzone_dofish_request();
  inline void set_allocated_m_stzone_dofish_request(::Zone_DoFish_Request* m_stzone_dofish_request);

  // optional .Zone_DoFish_Response m_stZone_DoFish_Response = 82;
  inline bool has_m_stzone_dofish_response() const;
  inline void clear_m_stzone_dofish_response();
  static const int kMStZoneDoFishResponseFieldNumber = 82;
  inline const ::Zone_DoFish_Response& m_stzone_dofish_response() const;
  inline ::Zone_DoFish_Response* mutable_m_stzone_dofish_response();
  inline ::Zone_DoFish_Response* release_m_stzone_dofish_response();
  inline void set_allocated_m_stzone_dofish_response(::Zone_DoFish_Response* m_stzone_dofish_response);

  // optional .Zone_FormTime_Notify m_stZone_FormTime_Notify = 83;
  inline bool has_m_stzone_formtime_notify() const;
  inline void clear_m_stzone_formtime_notify();
  static const int kMStZoneFormTimeNotifyFieldNumber = 83;
  inline const ::Zone_FormTime_Notify& m_stzone_formtime_notify() const;
  inline ::Zone_FormTime_Notify* mutable_m_stzone_formtime_notify();
  inline ::Zone_FormTime_Notify* release_m_stzone_formtime_notify();
  inline void set_allocated_m_stzone_formtime_notify(::Zone_FormTime_Notify* m_stzone_formtime_notify);

  // optional .Zone_SyncTime_Notify m_stZone_SyncTime_Notify = 84;
  inline bool has_m_stzone_synctime_notify() const;
  inline void clear_m_stzone_synctime_notify();
  static const int kMStZoneSyncTimeNotifyFieldNumber = 84;
  inline const ::Zone_SyncTime_Notify& m_stzone_synctime_notify() const;
  inline ::Zone_SyncTime_Notify* mutable_m_stzone_synctime_notify();
  inline ::Zone_SyncTime_Notify* release_m_stzone_synctime_notify();
  inline void set_allocated_m_stzone_synctime_notify(::Zone_SyncTime_Notify* m_stzone_synctime_notify);

  // optional .Zone_SeatUser_Notify m_stZone_SeatUser_Notify = 85;
  inline bool has_m_stzone_seatuser_notify() const;
  inline void clear_m_stzone_seatuser_notify();
  static const int kMStZoneSeatUserNotifyFieldNumber = 85;
  inline const ::Zone_SeatUser_Notify& m_stzone_seatuser_notify() const;
  inline ::Zone_SeatUser_Notify* mutable_m_stzone_seatuser_notify();
  inline ::Zone_SeatUser_Notify* release_m_stzone_seatuser_notify();
  inline void set_allocated_m_stzone_seatuser_notify(::Zone_SeatUser_Notify* m_stzone_seatuser_notify);

  // optional .Zone_FishInfo_Notify m_stZone_FishInfo_Notify = 86;
  inline bool has_m_stzone_fishinfo_notify() const;
  inline void clear_m_stzone_fishinfo_notify();
  static const int kMStZoneFishInfoNotifyFieldNumber = 86;
  inline const ::Zone_FishInfo_Notify& m_stzone_fishinfo_notify() const;
  inline ::Zone_FishInfo_Notify* mutable_m_stzone_fishinfo_notify();
  inline ::Zone_FishInfo_Notify* release_m_stzone_fishinfo_notify();
  inline void set_allocated_m_stzone_fishinfo_notify(::Zone_FishInfo_Notify* m_stzone_fishinfo_notify);

  // optional .Zone_BulletInfo_Notify m_stZone_BulletInfo_Notify = 87;
  inline bool has_m_stzone_bulletinfo_notify() const;
  inline void clear_m_stzone_bulletinfo_notify();
  static const int kMStZoneBulletInfoNotifyFieldNumber = 87;
  inline const ::Zone_BulletInfo_Notify& m_stzone_bulletinfo_notify() const;
  inline ::Zone_BulletInfo_Notify* mutable_m_stzone_bulletinfo_notify();
  inline ::Zone_BulletInfo_Notify* release_m_stzone_bulletinfo_notify();
  inline void set_allocated_m_stzone_bulletinfo_notify(::Zone_BulletInfo_Notify* m_stzone_bulletinfo_notify);

  // optional .Zone_FormInfo_Notify m_stZone_FormInfo_Notify = 88;
  inline bool has_m_stzone_forminfo_notify() const;
  inline void clear_m_stzone_forminfo_notify();
  static const int kMStZoneFormInfoNotifyFieldNumber = 88;
  inline const ::Zone_FormInfo_Notify& m_stzone_forminfo_notify() const;
  inline ::Zone_FormInfo_Notify* mutable_m_stzone_forminfo_notify();
  inline ::Zone_FormInfo_Notify* release_m_stzone_forminfo_notify();
  inline void set_allocated_m_stzone_forminfo_notify(::Zone_FormInfo_Notify* m_stzone_forminfo_notify);

  // optional .Zone_ExitFish_Request m_stZone_ExitFish_Request = 89;
  inline bool has_m_stzone_exitfish_request() const;
  inline void clear_m_stzone_exitfish_request();
  static const int kMStZoneExitFishRequestFieldNumber = 89;
  inline const ::Zone_ExitFish_Request& m_stzone_exitfish_request() const;
  inline ::Zone_ExitFish_Request* mutable_m_stzone_exitfish_request();
  inline ::Zone_ExitFish_Request* release_m_stzone_exitfish_request();
  inline void set_allocated_m_stzone_exitfish_request(::Zone_ExitFish_Request* m_stzone_exitfish_request);

  // optional .Zone_ExitFish_Response m_stZone_ExitFish_Response = 90;
  inline bool has_m_stzone_exitfish_response() const;
  inline void clear_m_stzone_exitfish_response();
  static const int kMStZoneExitFishResponseFieldNumber = 90;
  inline const ::Zone_ExitFish_Response& m_stzone_exitfish_response() const;
  inline ::Zone_ExitFish_Response* mutable_m_stzone_exitfish_response();
  inline ::Zone_ExitFish_Response* release_m_stzone_exitfish_response();
  inline void set_allocated_m_stzone_exitfish_response(::Zone_ExitFish_Response* m_stzone_exitfish_response);

  // optional .Zone_ExitFish_Notify m_stZone_ExitFish_Notify = 91;
  inline bool has_m_stzone_exitfish_notify() const;
  inline void clear_m_stzone_exitfish_notify();
  static const int kMStZoneExitFishNotifyFieldNumber = 91;
  inline const ::Zone_ExitFish_Notify& m_stzone_exitfish_notify() const;
  inline ::Zone_ExitFish_Notify* mutable_m_stzone_exitfish_notify();
  inline ::Zone_ExitFish_Notify* release_m_stzone_exitfish_notify();
  inline void set_allocated_m_stzone_exitfish_notify(::Zone_ExitFish_Notify* m_stzone_exitfish_notify);

  // optional .Zone_ChangeGun_Request m_stZone_ChangeGun_Request = 92;
  inline bool has_m_stzone_changegun_request() const;
  inline void clear_m_stzone_changegun_request();
  static const int kMStZoneChangeGunRequestFieldNumber = 92;
  inline const ::Zone_ChangeGun_Request& m_stzone_changegun_request() const;
  inline ::Zone_ChangeGun_Request* mutable_m_stzone_changegun_request();
  inline ::Zone_ChangeGun_Request* release_m_stzone_changegun_request();
  inline void set_allocated_m_stzone_changegun_request(::Zone_ChangeGun_Request* m_stzone_changegun_request);

  // optional .Zone_ChangeGun_Response m_stZone_ChangeGun_Response = 93;
  inline bool has_m_stzone_changegun_response() const;
  inline void clear_m_stzone_changegun_response();
  static const int kMStZoneChangeGunResponseFieldNumber = 93;
  inline const ::Zone_ChangeGun_Response& m_stzone_changegun_response() const;
  inline ::Zone_ChangeGun_Response* mutable_m_stzone_changegun_response();
  inline ::Zone_ChangeGun_Response* release_m_stzone_changegun_response();
  inline void set_allocated_m_stzone_changegun_response(::Zone_ChangeGun_Response* m_stzone_changegun_response);

  // optional .Zone_ChangeGun_Notify m_stZone_ChangeGun_Notify = 94;
  inline bool has_m_stzone_changegun_notify() const;
  inline void clear_m_stzone_changegun_notify();
  static const int kMStZoneChangeGunNotifyFieldNumber = 94;
  inline const ::Zone_ChangeGun_Notify& m_stzone_changegun_notify() const;
  inline ::Zone_ChangeGun_Notify* mutable_m_stzone_changegun_notify();
  inline ::Zone_ChangeGun_Notify* release_m_stzone_changegun_notify();
  inline void set_allocated_m_stzone_changegun_notify(::Zone_ChangeGun_Notify* m_stzone_changegun_notify);

  // optional .Zone_ShootBullet_Request m_stZone_ShootBullet_Request = 95;
  inline bool has_m_stzone_shootbullet_request() const;
  inline void clear_m_stzone_shootbullet_request();
  static const int kMStZoneShootBulletRequestFieldNumber = 95;
  inline const ::Zone_ShootBullet_Request& m_stzone_shootbullet_request() const;
  inline ::Zone_ShootBullet_Request* mutable_m_stzone_shootbullet_request();
  inline ::Zone_ShootBullet_Request* release_m_stzone_shootbullet_request();
  inline void set_allocated_m_stzone_shootbullet_request(::Zone_ShootBullet_Request* m_stzone_shootbullet_request);

  // optional .Zone_ShootBullet_Response m_stZone_ShootBullet_Response = 96;
  inline bool has_m_stzone_shootbullet_response() const;
  inline void clear_m_stzone_shootbullet_response();
  static const int kMStZoneShootBulletResponseFieldNumber = 96;
  inline const ::Zone_ShootBullet_Response& m_stzone_shootbullet_response() const;
  inline ::Zone_ShootBullet_Response* mutable_m_stzone_shootbullet_response();
  inline ::Zone_ShootBullet_Response* release_m_stzone_shootbullet_response();
  inline void set_allocated_m_stzone_shootbullet_response(::Zone_ShootBullet_Response* m_stzone_shootbullet_response);

  // optional .Zone_ShootBullet_Notify m_stZone_ShootBullet_Notify = 97;
  inline bool has_m_stzone_shootbullet_notify() const;
  inline void clear_m_stzone_shootbullet_notify();
  static const int kMStZoneShootBulletNotifyFieldNumber = 97;
  inline const ::Zone_ShootBullet_Notify& m_stzone_shootbullet_notify() const;
  inline ::Zone_ShootBullet_Notify* mutable_m_stzone_shootbullet_notify();
  inline ::Zone_ShootBullet_Notify* release_m_stzone_shootbullet_notify();
  inline void set_allocated_m_stzone_shootbullet_notify(::Zone_ShootBullet_Notify* m_stzone_shootbullet_notify);

  // optional .Zone_HitFish_Request m_stZone_HitFish_Request = 98;
  inline bool has_m_stzone_hitfish_request() const;
  inline void clear_m_stzone_hitfish_request();
  static const int kMStZoneHitFishRequestFieldNumber = 98;
  inline const ::Zone_HitFish_Request& m_stzone_hitfish_request() const;
  inline ::Zone_HitFish_Request* mutable_m_stzone_hitfish_request();
  inline ::Zone_HitFish_Request* release_m_stzone_hitfish_request();
  inline void set_allocated_m_stzone_hitfish_request(::Zone_HitFish_Request* m_stzone_hitfish_request);

  // optional .Zone_HitFish_Response m_stZone_HitFish_Response = 99;
  inline bool has_m_stzone_hitfish_response() const;
  inline void clear_m_stzone_hitfish_response();
  static const int kMStZoneHitFishResponseFieldNumber = 99;
  inline const ::Zone_HitFish_Response& m_stzone_hitfish_response() const;
  inline ::Zone_HitFish_Response* mutable_m_stzone_hitfish_response();
  inline ::Zone_HitFish_Response* release_m_stzone_hitfish_response();
  inline void set_allocated_m_stzone_hitfish_response(::Zone_HitFish_Response* m_stzone_hitfish_response);

  // optional .Zone_HitFish_Notify m_stZone_HitFish_Notify = 100;
  inline bool has_m_stzone_hitfish_notify() const;
  inline void clear_m_stzone_hitfish_notify();
  static const int kMStZoneHitFishNotifyFieldNumber = 100;
  inline const ::Zone_HitFish_Notify& m_stzone_hitfish_notify() const;
  inline ::Zone_HitFish_Notify* mutable_m_stzone_hitfish_notify();
  inline ::Zone_HitFish_Notify* release_m_stzone_hitfish_notify();
  inline void set_allocated_m_stzone_hitfish_notify(::Zone_HitFish_Notify* m_stzone_hitfish_notify);

  // optional .Zone_HitFormFish_Request m_stZone_HitFormFish_Request = 101;
  inline bool has_m_stzone_hitformfish_request() const;
  inline void clear_m_stzone_hitformfish_request();
  static const int kMStZoneHitFormFishRequestFieldNumber = 101;
  inline const ::Zone_HitFormFish_Request& m_stzone_hitformfish_request() const;
  inline ::Zone_HitFormFish_Request* mutable_m_stzone_hitformfish_request();
  inline ::Zone_HitFormFish_Request* release_m_stzone_hitformfish_request();
  inline void set_allocated_m_stzone_hitformfish_request(::Zone_HitFormFish_Request* m_stzone_hitformfish_request);

  // optional .Zone_HitFormFish_Response m_stZone_HitFormFish_Response = 102;
  inline bool has_m_stzone_hitformfish_response() const;
  inline void clear_m_stzone_hitformfish_response();
  static const int kMStZoneHitFormFishResponseFieldNumber = 102;
  inline const ::Zone_HitFormFish_Response& m_stzone_hitformfish_response() const;
  inline ::Zone_HitFormFish_Response* mutable_m_stzone_hitformfish_response();
  inline ::Zone_HitFormFish_Response* release_m_stzone_hitformfish_response();
  inline void set_allocated_m_stzone_hitformfish_response(::Zone_HitFormFish_Response* m_stzone_hitformfish_response);

  // optional .Zone_BoomFishInfo_Notify m_stZone_BoomFishInfo_Notify = 103;
  inline bool has_m_stzone_boomfishinfo_notify() const;
  inline void clear_m_stzone_boomfishinfo_notify();
  static const int kMStZoneBoomFishInfoNotifyFieldNumber = 103;
  inline const ::Zone_BoomFishInfo_Notify& m_stzone_boomfishinfo_notify() const;
  inline ::Zone_BoomFishInfo_Notify* mutable_m_stzone_boomfishinfo_notify();
  inline ::Zone_BoomFishInfo_Notify* release_m_stzone_boomfishinfo_notify();
  inline void set_allocated_m_stzone_boomfishinfo_notify(::Zone_BoomFishInfo_Notify* m_stzone_boomfishinfo_notify);

  // optional .Zone_AddTicket_Notify m_stZone_AddTicket_Notify = 104;
  inline bool has_m_stzone_addticket_notify() const;
  inline void clear_m_stzone_addticket_notify();
  static const int kMStZoneAddTicketNotifyFieldNumber = 104;
  inline const ::Zone_AddTicket_Notify& m_stzone_addticket_notify() const;
  inline ::Zone_AddTicket_Notify* mutable_m_stzone_addticket_notify();
  inline ::Zone_AddTicket_Notify* release_m_stzone_addticket_notify();
  inline void set_allocated_m_stzone_addticket_notify(::Zone_AddTicket_Notify* m_stzone_addticket_notify);

  // optional .Zone_FishUserUpdate_Notify m_stZone_FishUserUpdate_Notify = 105;
  inline bool has_m_stzone_fishuserupdate_notify() const;
  inline void clear_m_stzone_fishuserupdate_notify();
  static const int kMStZoneFishUserUpdateNotifyFieldNumber = 105;
  inline const ::Zone_FishUserUpdate_Notify& m_stzone_fishuserupdate_notify() const;
  inline ::Zone_FishUserUpdate_Notify* mutable_m_stzone_fishuserupdate_notify();
  inline ::Zone_FishUserUpdate_Notify* release_m_stzone_fishuserupdate_notify();
  inline void set_allocated_m_stzone_fishuserupdate_notify(::Zone_FishUserUpdate_Notify* m_stzone_fishuserupdate_notify);

  // optional .Zone_Lottery_Request m_stZone_Lottery_Request = 120;
  inline bool has_m_stzone_lottery_request() const;
  inline void clear_m_stzone_lottery_request();
  static const int kMStZoneLotteryRequestFieldNumber = 120;
  inline const ::Zone_Lottery_Request& m_stzone_lottery_request() const;
  inline ::Zone_Lottery_Request* mutable_m_stzone_lottery_request();
  inline ::Zone_Lottery_Request* release_m_stzone_lottery_request();
  inline void set_allocated_m_stzone_lottery_request(::Zone_Lottery_Request* m_stzone_lottery_request);

  // optional .Zone_Lottery_Response m_stZone_Lottery_Response = 121;
  inline bool has_m_stzone_lottery_response() const;
  inline void clear_m_stzone_lottery_response();
  static const int kMStZoneLotteryResponseFieldNumber = 121;
  inline const ::Zone_Lottery_Response& m_stzone_lottery_response() const;
  inline ::Zone_Lottery_Response* mutable_m_stzone_lottery_response();
  inline ::Zone_Lottery_Response* release_m_stzone_lottery_response();
  inline void set_allocated_m_stzone_lottery_response(::Zone_Lottery_Response* m_stzone_lottery_response);

  // optional .Zone_QuestChange_Notify m_stZone_QuestChange_Notify = 130;
  inline bool has_m_stzone_questchange_notify() const;
  inline void clear_m_stzone_questchange_notify();
  static const int kMStZoneQuestChangeNotifyFieldNumber = 130;
  inline const ::Zone_QuestChange_Notify& m_stzone_questchange_notify() const;
  inline ::Zone_QuestChange_Notify* mutable_m_stzone_questchange_notify();
  inline ::Zone_QuestChange_Notify* release_m_stzone_questchange_notify();
  inline void set_allocated_m_stzone_questchange_notify(::Zone_QuestChange_Notify* m_stzone_questchange_notify);

  // optional .Zone_FinQuest_Request m_stZone_FinQuest_Request = 131;
  inline bool has_m_stzone_finquest_request() const;
  inline void clear_m_stzone_finquest_request();
  static const int kMStZoneFinQuestRequestFieldNumber = 131;
  inline const ::Zone_FinQuest_Request& m_stzone_finquest_request() const;
  inline ::Zone_FinQuest_Request* mutable_m_stzone_finquest_request();
  inline ::Zone_FinQuest_Request* release_m_stzone_finquest_request();
  inline void set_allocated_m_stzone_finquest_request(::Zone_FinQuest_Request* m_stzone_finquest_request);

  // optional .Zone_FinQuest_Response m_stZone_FinQuest_Response = 132;
  inline bool has_m_stzone_finquest_response() const;
  inline void clear_m_stzone_finquest_response();
  static const int kMStZoneFinQuestResponseFieldNumber = 132;
  inline const ::Zone_FinQuest_Response& m_stzone_finquest_response() const;
  inline ::Zone_FinQuest_Response* mutable_m_stzone_finquest_response();
  inline ::Zone_FinQuest_Response* release_m_stzone_finquest_response();
  inline void set_allocated_m_stzone_finquest_response(::Zone_FinQuest_Response* m_stzone_finquest_response);

  // optional .Zone_GetReward_Notify m_stZone_GetReward_Notify = 133;
  inline bool has_m_stzone_getreward_notify() const;
  inline void clear_m_stzone_getreward_notify();
  static const int kMStZoneGetRewardNotifyFieldNumber = 133;
  inline const ::Zone_GetReward_Notify& m_stzone_getreward_notify() const;
  inline ::Zone_GetReward_Notify* mutable_m_stzone_getreward_notify();
  inline ::Zone_GetReward_Notify* release_m_stzone_getreward_notify();
  inline void set_allocated_m_stzone_getreward_notify(::Zone_GetReward_Notify* m_stzone_getreward_notify);

  // optional .Zone_GetLivness_Request m_stZone_GetLivness_Request = 134;
  inline bool has_m_stzone_getlivness_request() const;
  inline void clear_m_stzone_getlivness_request();
  static const int kMStZoneGetLivnessRequestFieldNumber = 134;
  inline const ::Zone_GetLivness_Request& m_stzone_getlivness_request() const;
  inline ::Zone_GetLivness_Request* mutable_m_stzone_getlivness_request();
  inline ::Zone_GetLivness_Request* release_m_stzone_getlivness_request();
  inline void set_allocated_m_stzone_getlivness_request(::Zone_GetLivness_Request* m_stzone_getlivness_request);

  // optional .Zone_GetLivness_Response m_stZone_GetLivness_Response = 135;
  inline bool has_m_stzone_getlivness_response() const;
  inline void clear_m_stzone_getlivness_response();
  static const int kMStZoneGetLivnessResponseFieldNumber = 135;
  inline const ::Zone_GetLivness_Response& m_stzone_getlivness_response() const;
  inline ::Zone_GetLivness_Response* mutable_m_stzone_getlivness_response();
  inline ::Zone_GetLivness_Response* release_m_stzone_getlivness_response();
  inline void set_allocated_m_stzone_getlivness_response(::Zone_GetLivness_Response* m_stzone_getlivness_response);

  // optional .Zone_SetExchange_Request m_stZone_SetExchange_Request = 140;
  inline bool has_m_stzone_setexchange_request() const;
  inline void clear_m_stzone_setexchange_request();
  static const int kMStZoneSetExchangeRequestFieldNumber = 140;
  inline const ::Zone_SetExchange_Request& m_stzone_setexchange_request() const;
  inline ::Zone_SetExchange_Request* mutable_m_stzone_setexchange_request();
  inline ::Zone_SetExchange_Request* release_m_stzone_setexchange_request();
  inline void set_allocated_m_stzone_setexchange_request(::Zone_SetExchange_Request* m_stzone_setexchange_request);

  // optional .Zone_SetExchange_Response m_stZone_SetExchange_Response = 141;
  inline bool has_m_stzone_setexchange_response() const;
  inline void clear_m_stzone_setexchange_response();
  static const int kMStZoneSetExchangeResponseFieldNumber = 141;
  inline const ::Zone_SetExchange_Response& m_stzone_setexchange_response() const;
  inline ::Zone_SetExchange_Response* mutable_m_stzone_setexchange_response();
  inline ::Zone_SetExchange_Response* release_m_stzone_setexchange_response();
  inline void set_allocated_m_stzone_setexchange_response(::Zone_SetExchange_Response* m_stzone_setexchange_response);

  // optional .Zone_ExchangeItem_Request m_stZone_ExchangeItem_Request = 142;
  inline bool has_m_stzone_exchangeitem_request() const;
  inline void clear_m_stzone_exchangeitem_request();
  static const int kMStZoneExchangeItemRequestFieldNumber = 142;
  inline const ::Zone_ExchangeItem_Request& m_stzone_exchangeitem_request() const;
  inline ::Zone_ExchangeItem_Request* mutable_m_stzone_exchangeitem_request();
  inline ::Zone_ExchangeItem_Request* release_m_stzone_exchangeitem_request();
  inline void set_allocated_m_stzone_exchangeitem_request(::Zone_ExchangeItem_Request* m_stzone_exchangeitem_request);

  // optional .Zone_ExchangeItem_Response m_stZone_ExchangeItem_Response = 143;
  inline bool has_m_stzone_exchangeitem_response() const;
  inline void clear_m_stzone_exchangeitem_response();
  static const int kMStZoneExchangeItemResponseFieldNumber = 143;
  inline const ::Zone_ExchangeItem_Response& m_stzone_exchangeitem_response() const;
  inline ::Zone_ExchangeItem_Response* mutable_m_stzone_exchangeitem_response();
  inline ::Zone_ExchangeItem_Response* release_m_stzone_exchangeitem_response();
  inline void set_allocated_m_stzone_exchangeitem_response(::Zone_ExchangeItem_Response* m_stzone_exchangeitem_response);

  // optional .World_AddLimitNum_Request m_stWorld_AddLimitNum_Request = 144;
  inline bool has_m_stworld_addlimitnum_request() const;
  inline void clear_m_stworld_addlimitnum_request();
  static const int kMStWorldAddLimitNumRequestFieldNumber = 144;
  inline const ::World_AddLimitNum_Request& m_stworld_addlimitnum_request() const;
  inline ::World_AddLimitNum_Request* mutable_m_stworld_addlimitnum_request();
  inline ::World_AddLimitNum_Request* release_m_stworld_addlimitnum_request();
  inline void set_allocated_m_stworld_addlimitnum_request(::World_AddLimitNum_Request* m_stworld_addlimitnum_request);

  // optional .World_AddLimitNum_Response m_stWorld_AddLimitNum_Response = 145;
  inline bool has_m_stworld_addlimitnum_response() const;
  inline void clear_m_stworld_addlimitnum_response();
  static const int kMStWorldAddLimitNumResponseFieldNumber = 145;
  inline const ::World_AddLimitNum_Response& m_stworld_addlimitnum_response() const;
  inline ::World_AddLimitNum_Response* mutable_m_stworld_addlimitnum_response();
  inline ::World_AddLimitNum_Response* release_m_stworld_addlimitnum_response();
  inline void set_allocated_m_stworld_addlimitnum_response(::World_AddLimitNum_Response* m_stworld_addlimitnum_response);

  // optional .Zone_GetLimitNum_Request m_stZone_GetLimitNum_Request = 146;
  inline bool has_m_stzone_getlimitnum_request() const;
  inline void clear_m_stzone_getlimitnum_request();
  static const int kMStZoneGetLimitNumRequestFieldNumber = 146;
  inline const ::Zone_GetLimitNum_Request& m_stzone_getlimitnum_request() const;
  inline ::Zone_GetLimitNum_Request* mutable_m_stzone_getlimitnum_request();
  inline ::Zone_GetLimitNum_Request* release_m_stzone_getlimitnum_request();
  inline void set_allocated_m_stzone_getlimitnum_request(::Zone_GetLimitNum_Request* m_stzone_getlimitnum_request);

  // optional .Zone_GetLimitNum_Response m_stZone_GetLimitNum_Response = 147;
  inline bool has_m_stzone_getlimitnum_response() const;
  inline void clear_m_stzone_getlimitnum_response();
  static const int kMStZoneGetLimitNumResponseFieldNumber = 147;
  inline const ::Zone_GetLimitNum_Response& m_stzone_getlimitnum_response() const;
  inline ::Zone_GetLimitNum_Response* mutable_m_stzone_getlimitnum_response();
  inline ::Zone_GetLimitNum_Response* release_m_stzone_getlimitnum_response();
  inline void set_allocated_m_stzone_getlimitnum_response(::Zone_GetLimitNum_Response* m_stzone_getlimitnum_response);

  // optional .World_GetCardNo_Request m_stWorld_GetCardNo_Request = 148;
  inline bool has_m_stworld_getcardno_request() const;
  inline void clear_m_stworld_getcardno_request();
  static const int kMStWorldGetCardNoRequestFieldNumber = 148;
  inline const ::World_GetCardNo_Request& m_stworld_getcardno_request() const;
  inline ::World_GetCardNo_Request* mutable_m_stworld_getcardno_request();
  inline ::World_GetCardNo_Request* release_m_stworld_getcardno_request();
  inline void set_allocated_m_stworld_getcardno_request(::World_GetCardNo_Request* m_stworld_getcardno_request);

  // optional .World_GetCardNo_Response m_stWorld_GetCardNo_Response = 149;
  inline bool has_m_stworld_getcardno_response() const;
  inline void clear_m_stworld_getcardno_response();
  static const int kMStWorldGetCardNoResponseFieldNumber = 149;
  inline const ::World_GetCardNo_Response& m_stworld_getcardno_response() const;
  inline ::World_GetCardNo_Response* mutable_m_stworld_getcardno_response();
  inline ::World_GetCardNo_Response* release_m_stworld_getcardno_response();
  inline void set_allocated_m_stworld_getcardno_response(::World_GetCardNo_Response* m_stworld_getcardno_response);

  // optional .Zone_NewMailInfo_Notify m_stZone_NewMailInfo_Notify = 150;
  inline bool has_m_stzone_newmailinfo_notify() const;
  inline void clear_m_stzone_newmailinfo_notify();
  static const int kMStZoneNewMailInfoNotifyFieldNumber = 150;
  inline const ::Zone_NewMailInfo_Notify& m_stzone_newmailinfo_notify() const;
  inline ::Zone_NewMailInfo_Notify* mutable_m_stzone_newmailinfo_notify();
  inline ::Zone_NewMailInfo_Notify* release_m_stzone_newmailinfo_notify();
  inline void set_allocated_m_stzone_newmailinfo_notify(::Zone_NewMailInfo_Notify* m_stzone_newmailinfo_notify);

  // optional .Zone_MailOpera_Request m_stZone_MailOpera_Request = 151;
  inline bool has_m_stzone_mailopera_request() const;
  inline void clear_m_stzone_mailopera_request();
  static const int kMStZoneMailOperaRequestFieldNumber = 151;
  inline const ::Zone_MailOpera_Request& m_stzone_mailopera_request() const;
  inline ::Zone_MailOpera_Request* mutable_m_stzone_mailopera_request();
  inline ::Zone_MailOpera_Request* release_m_stzone_mailopera_request();
  inline void set_allocated_m_stzone_mailopera_request(::Zone_MailOpera_Request* m_stzone_mailopera_request);

  // optional .Zone_MailOpera_Response m_stZone_MailOpera_Response = 152;
  inline bool has_m_stzone_mailopera_response() const;
  inline void clear_m_stzone_mailopera_response();
  static const int kMStZoneMailOperaResponseFieldNumber = 152;
  inline const ::Zone_MailOpera_Response& m_stzone_mailopera_response() const;
  inline ::Zone_MailOpera_Response* mutable_m_stzone_mailopera_response();
  inline ::Zone_MailOpera_Response* release_m_stzone_mailopera_response();
  inline void set_allocated_m_stzone_mailopera_response(::Zone_MailOpera_Response* m_stzone_mailopera_response);

  // optional .World_SendMail_Request m_stWorld_SendMail_Request = 153;
  inline bool has_m_stworld_sendmail_request() const;
  inline void clear_m_stworld_sendmail_request();
  static const int kMStWorldSendMailRequestFieldNumber = 153;
  inline const ::World_SendMail_Request& m_stworld_sendmail_request() const;
  inline ::World_SendMail_Request* mutable_m_stworld_sendmail_request();
  inline ::World_SendMail_Request* release_m_stworld_sendmail_request();
  inline void set_allocated_m_stworld_sendmail_request(::World_SendMail_Request* m_stworld_sendmail_request);

  // optional .World_SendMail_Response m_stWorld_SendMail_Response = 154;
  inline bool has_m_stworld_sendmail_response() const;
  inline void clear_m_stworld_sendmail_response();
  static const int kMStWorldSendMailResponseFieldNumber = 154;
  inline const ::World_SendMail_Response& m_stworld_sendmail_response() const;
  inline ::World_SendMail_Response* mutable_m_stworld_sendmail_response();
  inline ::World_SendMail_Response* release_m_stworld_sendmail_response();
  inline void set_allocated_m_stworld_sendmail_response(::World_SendMail_Response* m_stworld_sendmail_response);

  // optional .World_SystemMailID_Notify m_stWorld_SystemMailID_Notify = 155;
  inline bool has_m_stworld_systemmailid_notify() const;
  inline void clear_m_stworld_systemmailid_notify();
  static const int kMStWorldSystemMailIDNotifyFieldNumber = 155;
  inline const ::World_SystemMailID_Notify& m_stworld_systemmailid_notify() const;
  inline ::World_SystemMailID_Notify* mutable_m_stworld_systemmailid_notify();
  inline ::World_SystemMailID_Notify* release_m_stworld_systemmailid_notify();
  inline void set_allocated_m_stworld_systemmailid_notify(::World_SystemMailID_Notify* m_stworld_systemmailid_notify);

  // optional .World_GetSystemMail_Request m_stWorld_GetSystemMail_Request = 156;
  inline bool has_m_stworld_getsystemmail_request() const;
  inline void clear_m_stworld_getsystemmail_request();
  static const int kMStWorldGetSystemMailRequestFieldNumber = 156;
  inline const ::World_GetSystemMail_Request& m_stworld_getsystemmail_request() const;
  inline ::World_GetSystemMail_Request* mutable_m_stworld_getsystemmail_request();
  inline ::World_GetSystemMail_Request* release_m_stworld_getsystemmail_request();
  inline void set_allocated_m_stworld_getsystemmail_request(::World_GetSystemMail_Request* m_stworld_getsystemmail_request);

  // optional .World_GetSystemMail_Response m_stWorld_GetSystemMail_Response = 157;
  inline bool has_m_stworld_getsystemmail_response() const;
  inline void clear_m_stworld_getsystemmail_response();
  static const int kMStWorldGetSystemMailResponseFieldNumber = 157;
  inline const ::World_GetSystemMail_Response& m_stworld_getsystemmail_response() const;
  inline ::World_GetSystemMail_Response* mutable_m_stworld_getsystemmail_response();
  inline ::World_GetSystemMail_Response* release_m_stworld_getsystemmail_response();
  inline void set_allocated_m_stworld_getsystemmail_response(::World_GetSystemMail_Response* m_stworld_getsystemmail_response);

  // optional .Zone_GetRankInfo_Request m_stZone_GetRankInfo_Request = 160;
  inline bool has_m_stzone_getrankinfo_request() const;
  inline void clear_m_stzone_getrankinfo_request();
  static const int kMStZoneGetRankInfoRequestFieldNumber = 160;
  inline const ::Zone_GetRankInfo_Request& m_stzone_getrankinfo_request() const;
  inline ::Zone_GetRankInfo_Request* mutable_m_stzone_getrankinfo_request();
  inline ::Zone_GetRankInfo_Request* release_m_stzone_getrankinfo_request();
  inline void set_allocated_m_stzone_getrankinfo_request(::Zone_GetRankInfo_Request* m_stzone_getrankinfo_request);

  // optional .Zone_GetRankInfo_Response m_stZone_GetRankInfo_Response = 161;
  inline bool has_m_stzone_getrankinfo_response() const;
  inline void clear_m_stzone_getrankinfo_response();
  static const int kMStZoneGetRankInfoResponseFieldNumber = 161;
  inline const ::Zone_GetRankInfo_Response& m_stzone_getrankinfo_response() const;
  inline ::Zone_GetRankInfo_Response* mutable_m_stzone_getrankinfo_response();
  inline ::Zone_GetRankInfo_Response* release_m_stzone_getrankinfo_response();
  inline void set_allocated_m_stzone_getrankinfo_response(::Zone_GetRankInfo_Response* m_stzone_getrankinfo_response);

  // optional .World_UpdateRank_Request m_stWorld_UpdateRank_Request = 162;
  inline bool has_m_stworld_updaterank_request() const;
  inline void clear_m_stworld_updaterank_request();
  static const int kMStWorldUpdateRankRequestFieldNumber = 162;
  inline const ::World_UpdateRank_Request& m_stworld_updaterank_request() const;
  inline ::World_UpdateRank_Request* mutable_m_stworld_updaterank_request();
  inline ::World_UpdateRank_Request* release_m_stworld_updaterank_request();
  inline void set_allocated_m_stworld_updaterank_request(::World_UpdateRank_Request* m_stworld_updaterank_request);

  // optional .World_UpdateRank_Response m_stWorld_UpdateRank_Response = 163;
  inline bool has_m_stworld_updaterank_response() const;
  inline void clear_m_stworld_updaterank_response();
  static const int kMStWorldUpdateRankResponseFieldNumber = 163;
  inline const ::World_UpdateRank_Response& m_stworld_updaterank_response() const;
  inline ::World_UpdateRank_Response* mutable_m_stworld_updaterank_response();
  inline ::World_UpdateRank_Response* release_m_stworld_updaterank_response();
  inline void set_allocated_m_stworld_updaterank_response(::World_UpdateRank_Response* m_stworld_updaterank_response);

  // optional .World_GetRankInfo_Request m_stWorld_GetRankInfo_Request = 164;
  inline bool has_m_stworld_getrankinfo_request() const;
  inline void clear_m_stworld_getrankinfo_request();
  static const int kMStWorldGetRankInfoRequestFieldNumber = 164;
  inline const ::World_GetRankInfo_Request& m_stworld_getrankinfo_request() const;
  inline ::World_GetRankInfo_Request* mutable_m_stworld_getrankinfo_request();
  inline ::World_GetRankInfo_Request* release_m_stworld_getrankinfo_request();
  inline void set_allocated_m_stworld_getrankinfo_request(::World_GetRankInfo_Request* m_stworld_getrankinfo_request);

  // optional .World_GetRankInfo_Response m_stWorld_GetRankInfo_Response = 165;
  inline bool has_m_stworld_getrankinfo_response() const;
  inline void clear_m_stworld_getrankinfo_response();
  static const int kMStWorldGetRankInfoResponseFieldNumber = 165;
  inline const ::World_GetRankInfo_Response& m_stworld_getrankinfo_response() const;
  inline ::World_GetRankInfo_Response* mutable_m_stworld_getrankinfo_response();
  inline ::World_GetRankInfo_Response* release_m_stworld_getrankinfo_response();
  inline void set_allocated_m_stworld_getrankinfo_response(::World_GetRankInfo_Response* m_stworld_getrankinfo_response);

  // optional .Zone_UseSkill_Request m_stZone_UseSkill_Request = 170;
  inline bool has_m_stzone_useskill_request() const;
  inline void clear_m_stzone_useskill_request();
  static const int kMStZoneUseSkillRequestFieldNumber = 170;
  inline const ::Zone_UseSkill_Request& m_stzone_useskill_request() const;
  inline ::Zone_UseSkill_Request* mutable_m_stzone_useskill_request();
  inline ::Zone_UseSkill_Request* release_m_stzone_useskill_request();
  inline void set_allocated_m_stzone_useskill_request(::Zone_UseSkill_Request* m_stzone_useskill_request);

  // optional .Zone_UseSkill_Response m_stZone_UseSkill_Response = 171;
  inline bool has_m_stzone_useskill_response() const;
  inline void clear_m_stzone_useskill_response();
  static const int kMStZoneUseSkillResponseFieldNumber = 171;
  inline const ::Zone_UseSkill_Response& m_stzone_useskill_response() const;
  inline ::Zone_UseSkill_Response* mutable_m_stzone_useskill_response();
  inline ::Zone_UseSkill_Response* release_m_stzone_useskill_response();
  inline void set_allocated_m_stzone_useskill_response(::Zone_UseSkill_Response* m_stzone_useskill_response);

  // optional .Zone_UseSkill_Notify m_stZone_UseSkill_Notify = 172;
  inline bool has_m_stzone_useskill_notify() const;
  inline void clear_m_stzone_useskill_notify();
  static const int kMStZoneUseSkillNotifyFieldNumber = 172;
  inline const ::Zone_UseSkill_Notify& m_stzone_useskill_notify() const;
  inline ::Zone_UseSkill_Notify* mutable_m_stzone_useskill_notify();
  inline ::Zone_UseSkill_Notify* release_m_stzone_useskill_notify();
  inline void set_allocated_m_stzone_useskill_notify(::Zone_UseSkill_Notify* m_stzone_useskill_notify);

  // optional .Zone_ChooseAimFish_Request m_stZone_ChooseAimFish_Request = 173;
  inline bool has_m_stzone_chooseaimfish_request() const;
  inline void clear_m_stzone_chooseaimfish_request();
  static const int kMStZoneChooseAimFishRequestFieldNumber = 173;
  inline const ::Zone_ChooseAimFish_Request& m_stzone_chooseaimfish_request() const;
  inline ::Zone_ChooseAimFish_Request* mutable_m_stzone_chooseaimfish_request();
  inline ::Zone_ChooseAimFish_Request* release_m_stzone_chooseaimfish_request();
  inline void set_allocated_m_stzone_chooseaimfish_request(::Zone_ChooseAimFish_Request* m_stzone_chooseaimfish_request);

  // optional .Zone_ChooseAimFish_Response m_stZone_ChooseAimFish_Response = 174;
  inline bool has_m_stzone_chooseaimfish_response() const;
  inline void clear_m_stzone_chooseaimfish_response();
  static const int kMStZoneChooseAimFishResponseFieldNumber = 174;
  inline const ::Zone_ChooseAimFish_Response& m_stzone_chooseaimfish_response() const;
  inline ::Zone_ChooseAimFish_Response* mutable_m_stzone_chooseaimfish_response();
  inline ::Zone_ChooseAimFish_Response* release_m_stzone_chooseaimfish_response();
  inline void set_allocated_m_stzone_chooseaimfish_response(::Zone_ChooseAimFish_Response* m_stzone_chooseaimfish_response);

  // optional .Zone_ChooseAimFish_Notify m_stZone_ChooseAimFish_Notify = 175;
  inline bool has_m_stzone_chooseaimfish_notify() const;
  inline void clear_m_stzone_chooseaimfish_notify();
  static const int kMStZoneChooseAimFishNotifyFieldNumber = 175;
  inline const ::Zone_ChooseAimFish_Notify& m_stzone_chooseaimfish_notify() const;
  inline ::Zone_ChooseAimFish_Notify* mutable_m_stzone_chooseaimfish_notify();
  inline ::Zone_ChooseAimFish_Notify* release_m_stzone_chooseaimfish_notify();
  inline void set_allocated_m_stzone_chooseaimfish_notify(::Zone_ChooseAimFish_Notify* m_stzone_chooseaimfish_notify);

  // optional .Zone_GetUserAlms_Request m_stZone_GetUserAlms_Request = 180;
  inline bool has_m_stzone_getuseralms_request() const;
  inline void clear_m_stzone_getuseralms_request();
  static const int kMStZoneGetUserAlmsRequestFieldNumber = 180;
  inline const ::Zone_GetUserAlms_Request& m_stzone_getuseralms_request() const;
  inline ::Zone_GetUserAlms_Request* mutable_m_stzone_getuseralms_request();
  inline ::Zone_GetUserAlms_Request* release_m_stzone_getuseralms_request();
  inline void set_allocated_m_stzone_getuseralms_request(::Zone_GetUserAlms_Request* m_stzone_getuseralms_request);

  // optional .Zone_GetUserAlms_Response m_stZone_GetUserAlms_Response = 181;
  inline bool has_m_stzone_getuseralms_response() const;
  inline void clear_m_stzone_getuseralms_response();
  static const int kMStZoneGetUserAlmsResponseFieldNumber = 181;
  inline const ::Zone_GetUserAlms_Response& m_stzone_getuseralms_response() const;
  inline ::Zone_GetUserAlms_Response* mutable_m_stzone_getuseralms_response();
  inline ::Zone_GetUserAlms_Response* release_m_stzone_getuseralms_response();
  inline void set_allocated_m_stzone_getuseralms_response(::Zone_GetUserAlms_Response* m_stzone_getuseralms_response);

  // optional .Zone_UpdateAlms_Notify m_stZone_UpdateAlms_Notify = 182;
  inline bool has_m_stzone_updatealms_notify() const;
  inline void clear_m_stzone_updatealms_notify();
  static const int kMStZoneUpdateAlmsNotifyFieldNumber = 182;
  inline const ::Zone_UpdateAlms_Notify& m_stzone_updatealms_notify() const;
  inline ::Zone_UpdateAlms_Notify* mutable_m_stzone_updatealms_notify();
  inline ::Zone_UpdateAlms_Notify* release_m_stzone_updatealms_notify();
  inline void set_allocated_m_stzone_updatealms_notify(::Zone_UpdateAlms_Notify* m_stzone_updatealms_notify);

  // optional .Zone_LimitLottery_Request m_stZone_LimitLottery_Request = 190;
  inline bool has_m_stzone_limitlottery_request() const;
  inline void clear_m_stzone_limitlottery_request();
  static const int kMStZoneLimitLotteryRequestFieldNumber = 190;
  inline const ::Zone_LimitLottery_Request& m_stzone_limitlottery_request() const;
  inline ::Zone_LimitLottery_Request* mutable_m_stzone_limitlottery_request();
  inline ::Zone_LimitLottery_Request* release_m_stzone_limitlottery_request();
  inline void set_allocated_m_stzone_limitlottery_request(::Zone_LimitLottery_Request* m_stzone_limitlottery_request);

  // optional .Zone_LimitLottery_Response m_stZone_LimitLottery_Response = 191;
  inline bool has_m_stzone_limitlottery_response() const;
  inline void clear_m_stzone_limitlottery_response();
  static const int kMStZoneLimitLotteryResponseFieldNumber = 191;
  inline const ::Zone_LimitLottery_Response& m_stzone_limitlottery_response() const;
  inline ::Zone_LimitLottery_Response* mutable_m_stzone_limitlottery_response();
  inline ::Zone_LimitLottery_Response* release_m_stzone_limitlottery_response();
  inline void set_allocated_m_stzone_limitlottery_response(::Zone_LimitLottery_Response* m_stzone_limitlottery_response);

  // optional .Zone_PayLotteryRecord_Request m_stZone_PayLotteryRecord_Request = 192;
  inline bool has_m_stzone_paylotteryrecord_request() const;
  inline void clear_m_stzone_paylotteryrecord_request();
  static const int kMStZonePayLotteryRecordRequestFieldNumber = 192;
  inline const ::Zone_PayLotteryRecord_Request& m_stzone_paylotteryrecord_request() const;
  inline ::Zone_PayLotteryRecord_Request* mutable_m_stzone_paylotteryrecord_request();
  inline ::Zone_PayLotteryRecord_Request* release_m_stzone_paylotteryrecord_request();
  inline void set_allocated_m_stzone_paylotteryrecord_request(::Zone_PayLotteryRecord_Request* m_stzone_paylotteryrecord_request);

  // optional .Zone_PayLotteryRecord_Response m_stZone_PayLotteryRecord_Response = 193;
  inline bool has_m_stzone_paylotteryrecord_response() const;
  inline void clear_m_stzone_paylotteryrecord_response();
  static const int kMStZonePayLotteryRecordResponseFieldNumber = 193;
  inline const ::Zone_PayLotteryRecord_Response& m_stzone_paylotteryrecord_response() const;
  inline ::Zone_PayLotteryRecord_Response* mutable_m_stzone_paylotteryrecord_response();
  inline ::Zone_PayLotteryRecord_Response* release_m_stzone_paylotteryrecord_response();
  inline void set_allocated_m_stzone_paylotteryrecord_response(::Zone_PayLotteryRecord_Response* m_stzone_paylotteryrecord_response);

  // optional .Zone_GetPayOrder_Request m_stZone_GetPayOrder_Request = 194;
  inline bool has_m_stzone_getpayorder_request() const;
  inline void clear_m_stzone_getpayorder_request();
  static const int kMStZoneGetPayOrderRequestFieldNumber = 194;
  inline const ::Zone_GetPayOrder_Request& m_stzone_getpayorder_request() const;
  inline ::Zone_GetPayOrder_Request* mutable_m_stzone_getpayorder_request();
  inline ::Zone_GetPayOrder_Request* release_m_stzone_getpayorder_request();
  inline void set_allocated_m_stzone_getpayorder_request(::Zone_GetPayOrder_Request* m_stzone_getpayorder_request);

  // optional .Zone_GetPayOrder_Response m_stZone_GetPayOrder_Response = 195;
  inline bool has_m_stzone_getpayorder_response() const;
  inline void clear_m_stzone_getpayorder_response();
  static const int kMStZoneGetPayOrderResponseFieldNumber = 195;
  inline const ::Zone_GetPayOrder_Response& m_stzone_getpayorder_response() const;
  inline ::Zone_GetPayOrder_Response* mutable_m_stzone_getpayorder_response();
  inline ::Zone_GetPayOrder_Response* release_m_stzone_getpayorder_response();
  inline void set_allocated_m_stzone_getpayorder_response(::Zone_GetPayOrder_Response* m_stzone_getpayorder_response);

  // optional .Zone_HorseLamp_Notify m_stZone_HorseLamp_Notify = 200;
  inline bool has_m_stzone_horselamp_notify() const;
  inline void clear_m_stzone_horselamp_notify();
  static const int kMStZoneHorseLampNotifyFieldNumber = 200;
  inline const ::Zone_HorseLamp_Notify& m_stzone_horselamp_notify() const;
  inline ::Zone_HorseLamp_Notify* mutable_m_stzone_horselamp_notify();
  inline ::Zone_HorseLamp_Notify* release_m_stzone_horselamp_notify();
  inline void set_allocated_m_stzone_horselamp_notify(::Zone_HorseLamp_Notify* m_stzone_horselamp_notify);

  // optional .World_UpdatePrizeInfo_Request m_stWorld_UpdatePrizeInfo_Request = 210;
  inline bool has_m_stworld_updateprizeinfo_request() const;
  inline void clear_m_stworld_updateprizeinfo_request();
  static const int kMStWorldUpdatePrizeInfoRequestFieldNumber = 210;
  inline const ::World_UpdatePrizeInfo_Request& m_stworld_updateprizeinfo_request() const;
  inline ::World_UpdatePrizeInfo_Request* mutable_m_stworld_updateprizeinfo_request();
  inline ::World_UpdatePrizeInfo_Request* release_m_stworld_updateprizeinfo_request();
  inline void set_allocated_m_stworld_updateprizeinfo_request(::World_UpdatePrizeInfo_Request* m_stworld_updateprizeinfo_request);

  // optional .World_UpdateBetInfo_Request m_stWorld_UpdateBetInfo_Request = 211;
  inline bool has_m_stworld_updatebetinfo_request() const;
  inline void clear_m_stworld_updatebetinfo_request();
  static const int kMStWorldUpdateBetInfoRequestFieldNumber = 211;
  inline const ::World_UpdateBetInfo_Request& m_stworld_updatebetinfo_request() const;
  inline ::World_UpdateBetInfo_Request* mutable_m_stworld_updatebetinfo_request();
  inline ::World_UpdateBetInfo_Request* release_m_stworld_updatebetinfo_request();
  inline void set_allocated_m_stworld_updatebetinfo_request(::World_UpdateBetInfo_Request* m_stworld_updatebetinfo_request);

  // optional .World_UpdateLasvegas_Notify m_stWorld_UpdateLasvegas_Notify = 212;
  inline bool has_m_stworld_updatelasvegas_notify() const;
  inline void clear_m_stworld_updatelasvegas_notify();
  static const int kMStWorldUpdateLasvegasNotifyFieldNumber = 212;
  inline const ::World_UpdateLasvegas_Notify& m_stworld_updatelasvegas_notify() const;
  inline ::World_UpdateLasvegas_Notify* mutable_m_stworld_updatelasvegas_notify();
  inline ::World_UpdateLasvegas_Notify* release_m_stworld_updatelasvegas_notify();
  inline void set_allocated_m_stworld_updatelasvegas_notify(::World_UpdateLasvegas_Notify* m_stworld_updatelasvegas_notify);

  // optional .Zone_EnterLasvegas_Request m_stZone_EnterLasvegas_Request = 213;
  inline bool has_m_stzone_enterlasvegas_request() const;
  inline void clear_m_stzone_enterlasvegas_request();
  static const int kMStZoneEnterLasvegasRequestFieldNumber = 213;
  inline const ::Zone_EnterLasvegas_Request& m_stzone_enterlasvegas_request() const;
  inline ::Zone_EnterLasvegas_Request* mutable_m_stzone_enterlasvegas_request();
  inline ::Zone_EnterLasvegas_Request* release_m_stzone_enterlasvegas_request();
  inline void set_allocated_m_stzone_enterlasvegas_request(::Zone_EnterLasvegas_Request* m_stzone_enterlasvegas_request);

  // optional .Zone_EnterLasvegas_Response m_stZone_EnterLasvegas_Response = 214;
  inline bool has_m_stzone_enterlasvegas_response() const;
  inline void clear_m_stzone_enterlasvegas_response();
  static const int kMStZoneEnterLasvegasResponseFieldNumber = 214;
  inline const ::Zone_EnterLasvegas_Response& m_stzone_enterlasvegas_response() const;
  inline ::Zone_EnterLasvegas_Response* mutable_m_stzone_enterlasvegas_response();
  inline ::Zone_EnterLasvegas_Response* release_m_stzone_enterlasvegas_response();
  inline void set_allocated_m_stzone_enterlasvegas_response(::Zone_EnterLasvegas_Response* m_stzone_enterlasvegas_response);

  // optional .Zone_LasvegasBet_Request m_stZone_LasvegasBet_Request = 215;
  inline bool has_m_stzone_lasvegasbet_request() const;
  inline void clear_m_stzone_lasvegasbet_request();
  static const int kMStZoneLasvegasBetRequestFieldNumber = 215;
  inline const ::Zone_LasvegasBet_Request& m_stzone_lasvegasbet_request() const;
  inline ::Zone_LasvegasBet_Request* mutable_m_stzone_lasvegasbet_request();
  inline ::Zone_LasvegasBet_Request* release_m_stzone_lasvegasbet_request();
  inline void set_allocated_m_stzone_lasvegasbet_request(::Zone_LasvegasBet_Request* m_stzone_lasvegasbet_request);

  // optional .Zone_LasvegasBet_Response m_stZone_LasvegasBet_Response = 216;
  inline bool has_m_stzone_lasvegasbet_response() const;
  inline void clear_m_stzone_lasvegasbet_response();
  static const int kMStZoneLasvegasBetResponseFieldNumber = 216;
  inline const ::Zone_LasvegasBet_Response& m_stzone_lasvegasbet_response() const;
  inline ::Zone_LasvegasBet_Response* mutable_m_stzone_lasvegasbet_response();
  inline ::Zone_LasvegasBet_Response* release_m_stzone_lasvegasbet_response();
  inline void set_allocated_m_stzone_lasvegasbet_response(::Zone_LasvegasBet_Response* m_stzone_lasvegasbet_response);

  // optional .Zone_UpdateLasvegas_Notify m_stZone_UpdateLasvegas_Notify = 217;
  inline bool has_m_stzone_updatelasvegas_notify() const;
  inline void clear_m_stzone_updatelasvegas_notify();
  static const int kMStZoneUpdateLasvegasNotifyFieldNumber = 217;
  inline const ::Zone_UpdateLasvegas_Notify& m_stzone_updatelasvegas_notify() const;
  inline ::Zone_UpdateLasvegas_Notify* mutable_m_stzone_updatelasvegas_notify();
  inline ::Zone_UpdateLasvegas_Notify* release_m_stzone_updatelasvegas_notify();
  inline void set_allocated_m_stzone_updatelasvegas_notify(::Zone_UpdateLasvegas_Notify* m_stzone_updatelasvegas_notify);

  // optional .Zone_GetRewardInfo_Request m_stZone_GetRewardInfo_Request = 218;
  inline bool has_m_stzone_getrewardinfo_request() const;
  inline void clear_m_stzone_getrewardinfo_request();
  static const int kMStZoneGetRewardInfoRequestFieldNumber = 218;
  inline const ::Zone_GetRewardInfo_Request& m_stzone_getrewardinfo_request() const;
  inline ::Zone_GetRewardInfo_Request* mutable_m_stzone_getrewardinfo_request();
  inline ::Zone_GetRewardInfo_Request* release_m_stzone_getrewardinfo_request();
  inline void set_allocated_m_stzone_getrewardinfo_request(::Zone_GetRewardInfo_Request* m_stzone_getrewardinfo_request);

  // optional .Zone_GetRewardInfo_Response m_stZone_GetRewardInfo_Response = 219;
  inline bool has_m_stzone_getrewardinfo_response() const;
  inline void clear_m_stzone_getrewardinfo_response();
  static const int kMStZoneGetRewardInfoResponseFieldNumber = 219;
  inline const ::Zone_GetRewardInfo_Response& m_stzone_getrewardinfo_response() const;
  inline ::Zone_GetRewardInfo_Response* mutable_m_stzone_getrewardinfo_response();
  inline ::Zone_GetRewardInfo_Response* release_m_stzone_getrewardinfo_response();
  inline void set_allocated_m_stzone_getrewardinfo_response(::Zone_GetRewardInfo_Response* m_stzone_getrewardinfo_response);

  // optional .Zone_GetLoginReward_Request m_stZone_GetLoginReward_Request = 230;
  inline bool has_m_stzone_getloginreward_request() const;
  inline void clear_m_stzone_getloginreward_request();
  static const int kMStZoneGetLoginRewardRequestFieldNumber = 230;
  inline const ::Zone_GetLoginReward_Request& m_stzone_getloginreward_request() const;
  inline ::Zone_GetLoginReward_Request* mutable_m_stzone_getloginreward_request();
  inline ::Zone_GetLoginReward_Request* release_m_stzone_getloginreward_request();
  inline void set_allocated_m_stzone_getloginreward_request(::Zone_GetLoginReward_Request* m_stzone_getloginreward_request);

  // optional .Zone_GetLoginReward_Response m_stZone_GetLoginReward_Response = 231;
  inline bool has_m_stzone_getloginreward_response() const;
  inline void clear_m_stzone_getloginreward_response();
  static const int kMStZoneGetLoginRewardResponseFieldNumber = 231;
  inline const ::Zone_GetLoginReward_Response& m_stzone_getloginreward_response() const;
  inline ::Zone_GetLoginReward_Response* mutable_m_stzone_getloginreward_response();
  inline ::Zone_GetLoginReward_Response* release_m_stzone_getloginreward_response();
  inline void set_allocated_m_stzone_getloginreward_response(::Zone_GetLoginReward_Response* m_stzone_getloginreward_response);

  // optional .World_UserRecharge_Request m_stWorld_UserRecharge_Request = 240;
  inline bool has_m_stworld_userrecharge_request() const;
  inline void clear_m_stworld_userrecharge_request();
  static const int kMStWorldUserRechargeRequestFieldNumber = 240;
  inline const ::World_UserRecharge_Request& m_stworld_userrecharge_request() const;
  inline ::World_UserRecharge_Request* mutable_m_stworld_userrecharge_request();
  inline ::World_UserRecharge_Request* release_m_stworld_userrecharge_request();
  inline void set_allocated_m_stworld_userrecharge_request(::World_UserRecharge_Request* m_stworld_userrecharge_request);

  // optional .World_UserRecharge_Response m_stWorld_UserRecharge_Response = 241;
  inline bool has_m_stworld_userrecharge_response() const;
  inline void clear_m_stworld_userrecharge_response();
  static const int kMStWorldUserRechargeResponseFieldNumber = 241;
  inline const ::World_UserRecharge_Response& m_stworld_userrecharge_response() const;
  inline ::World_UserRecharge_Response* mutable_m_stworld_userrecharge_response();
  inline ::World_UserRecharge_Response* release_m_stworld_userrecharge_response();
  inline void set_allocated_m_stworld_userrecharge_response(::World_UserRecharge_Response* m_stworld_userrecharge_response);

  // optional .Zone_GetPayRecord_Request m_stZone_GetPayRecord_Request = 242;
  inline bool has_m_stzone_getpayrecord_request() const;
  inline void clear_m_stzone_getpayrecord_request();
  static const int kMStZoneGetPayRecordRequestFieldNumber = 242;
  inline const ::Zone_GetPayRecord_Request& m_stzone_getpayrecord_request() const;
  inline ::Zone_GetPayRecord_Request* mutable_m_stzone_getpayrecord_request();
  inline ::Zone_GetPayRecord_Request* release_m_stzone_getpayrecord_request();
  inline void set_allocated_m_stzone_getpayrecord_request(::Zone_GetPayRecord_Request* m_stzone_getpayrecord_request);

  // optional .Zone_GetPayRecord_Response m_stZone_GetPayRecord_Response = 243;
  inline bool has_m_stzone_getpayrecord_response() const;
  inline void clear_m_stzone_getpayrecord_response();
  static const int kMStZoneGetPayRecordResponseFieldNumber = 243;
  inline const ::Zone_GetPayRecord_Response& m_stzone_getpayrecord_response() const;
  inline ::Zone_GetPayRecord_Response* mutable_m_stzone_getpayrecord_response();
  inline ::Zone_GetPayRecord_Response* release_m_stzone_getpayrecord_response();
  inline void set_allocated_m_stzone_getpayrecord_response(::Zone_GetPayRecord_Response* m_stzone_getpayrecord_response);

  // optional .Zone_GetPayGift_Request m_stZone_GetPayGift_Request = 244;
  inline bool has_m_stzone_getpaygift_request() const;
  inline void clear_m_stzone_getpaygift_request();
  static const int kMStZoneGetPayGiftRequestFieldNumber = 244;
  inline const ::Zone_GetPayGift_Request& m_stzone_getpaygift_request() const;
  inline ::Zone_GetPayGift_Request* mutable_m_stzone_getpaygift_request();
  inline ::Zone_GetPayGift_Request* release_m_stzone_getpaygift_request();
  inline void set_allocated_m_stzone_getpaygift_request(::Zone_GetPayGift_Request* m_stzone_getpaygift_request);

  // optional .Zone_GetPayGift_Response m_stZone_GetPayGift_Response = 245;
  inline bool has_m_stzone_getpaygift_response() const;
  inline void clear_m_stzone_getpaygift_response();
  static const int kMStZoneGetPayGiftResponseFieldNumber = 245;
  inline const ::Zone_GetPayGift_Response& m_stzone_getpaygift_response() const;
  inline ::Zone_GetPayGift_Response* mutable_m_stzone_getpaygift_response();
  inline ::Zone_GetPayGift_Response* release_m_stzone_getpaygift_response();
  inline void set_allocated_m_stzone_getpaygift_response(::Zone_GetPayGift_Response* m_stzone_getpaygift_response);

  // optional .Zone_UpdateMonthTime_Notify m_stZone_UpdateMonthTime_Notify = 246;
  inline bool has_m_stzone_updatemonthtime_notify() const;
  inline void clear_m_stzone_updatemonthtime_notify();
  static const int kMStZoneUpdateMonthTimeNotifyFieldNumber = 246;
  inline const ::Zone_UpdateMonthTime_Notify& m_stzone_updatemonthtime_notify() const;
  inline ::Zone_UpdateMonthTime_Notify* mutable_m_stzone_updatemonthtime_notify();
  inline ::Zone_UpdateMonthTime_Notify* release_m_stzone_updatemonthtime_notify();
  inline void set_allocated_m_stzone_updatemonthtime_notify(::Zone_UpdateMonthTime_Notify* m_stzone_updatemonthtime_notify);

  // optional .Zone_VipExpUpdate_Notify m_stZone_VipExpUpdate_Notify = 247;
  inline bool has_m_stzone_vipexpupdate_notify() const;
  inline void clear_m_stzone_vipexpupdate_notify();
  static const int kMStZoneVipExpUpdateNotifyFieldNumber = 247;
  inline const ::Zone_VipExpUpdate_Notify& m_stzone_vipexpupdate_notify() const;
  inline ::Zone_VipExpUpdate_Notify* mutable_m_stzone_vipexpupdate_notify();
  inline ::Zone_VipExpUpdate_Notify* release_m_stzone_vipexpupdate_notify();
  inline void set_allocated_m_stzone_vipexpupdate_notify(::Zone_VipExpUpdate_Notify* m_stzone_vipexpupdate_notify);

  // optional .Zone_UserRecharge_Notify m_stZone_UserRecharge_Notify = 248;
  inline bool has_m_stzone_userrecharge_notify() const;
  inline void clear_m_stzone_userrecharge_notify();
  static const int kMStZoneUserRechargeNotifyFieldNumber = 248;
  inline const ::Zone_UserRecharge_Notify& m_stzone_userrecharge_notify() const;
  inline ::Zone_UserRecharge_Notify* mutable_m_stzone_userrecharge_notify();
  inline ::Zone_UserRecharge_Notify* release_m_stzone_userrecharge_notify();
  inline void set_allocated_m_stzone_userrecharge_notify(::Zone_UserRecharge_Notify* m_stzone_userrecharge_notify);

  // optional .Zone_UserRecharge_Request m_stZone_UserRecharge_Request = 249;
  inline bool has_m_stzone_userrecharge_request() const;
  inline void clear_m_stzone_userrecharge_request();
  static const int kMStZoneUserRechargeRequestFieldNumber = 249;
  inline const ::Zone_UserRecharge_Request& m_stzone_userrecharge_request() const;
  inline ::Zone_UserRecharge_Request* mutable_m_stzone_userrecharge_request();
  inline ::Zone_UserRecharge_Request* release_m_stzone_userrecharge_request();
  inline void set_allocated_m_stzone_userrecharge_request(::Zone_UserRecharge_Request* m_stzone_userrecharge_request);

  // optional .Zone_UserRecharge_Response m_stZone_UserRecharge_Response = 250;
  inline bool has_m_stzone_userrecharge_response() const;
  inline void clear_m_stzone_userrecharge_response();
  static const int kMStZoneUserRechargeResponseFieldNumber = 250;
  inline const ::Zone_UserRecharge_Response& m_stzone_userrecharge_response() const;
  inline ::Zone_UserRecharge_Response* mutable_m_stzone_userrecharge_response();
  inline ::Zone_UserRecharge_Response* release_m_stzone_userrecharge_response();
  inline void set_allocated_m_stzone_userrecharge_response(::Zone_UserRecharge_Response* m_stzone_userrecharge_response);

  // optional .Zone_FinGuide_Request m_stZone_FinGuide_Request = 252;
  inline bool has_m_stzone_finguide_request() const;
  inline void clear_m_stzone_finguide_request();
  static const int kMStZoneFinGuideRequestFieldNumber = 252;
  inline const ::Zone_FinGuide_Request& m_stzone_finguide_request() const;
  inline ::Zone_FinGuide_Request* mutable_m_stzone_finguide_request();
  inline ::Zone_FinGuide_Request* release_m_stzone_finguide_request();
  inline void set_allocated_m_stzone_finguide_request(::Zone_FinGuide_Request* m_stzone_finguide_request);

  // optional .Zone_FinGuide_Response m_stZone_FinGuide_Response = 251;
  inline bool has_m_stzone_finguide_response() const;
  inline void clear_m_stzone_finguide_response();
  static const int kMStZoneFinGuideResponseFieldNumber = 251;
  inline const ::Zone_FinGuide_Response& m_stzone_finguide_response() const;
  inline ::Zone_FinGuide_Response* mutable_m_stzone_finguide_response();
  inline ::Zone_FinGuide_Response* release_m_stzone_finguide_response();
  inline void set_allocated_m_stzone_finguide_response(::Zone_FinGuide_Response* m_stzone_finguide_response);

  // optional .Zone_UpdateName_Request m_stZone_UpdateName_Request = 260;
  inline bool has_m_stzone_updatename_request() const;
  inline void clear_m_stzone_updatename_request();
  static const int kMStZoneUpdateNameRequestFieldNumber = 260;
  inline const ::Zone_UpdateName_Request& m_stzone_updatename_request() const;
  inline ::Zone_UpdateName_Request* mutable_m_stzone_updatename_request();
  inline ::Zone_UpdateName_Request* release_m_stzone_updatename_request();
  inline void set_allocated_m_stzone_updatename_request(::Zone_UpdateName_Request* m_stzone_updatename_request);

  // optional .Zone_UpdateName_Response m_stZone_UpdateName_Response = 261;
  inline bool has_m_stzone_updatename_response() const;
  inline void clear_m_stzone_updatename_response();
  static const int kMStZoneUpdateNameResponseFieldNumber = 261;
  inline const ::Zone_UpdateName_Response& m_stzone_updatename_response() const;
  inline ::Zone_UpdateName_Response* mutable_m_stzone_updatename_response();
  inline ::Zone_UpdateName_Response* release_m_stzone_updatename_response();
  inline void set_allocated_m_stzone_updatename_response(::Zone_UpdateName_Response* m_stzone_updatename_response);

  // optional .World_GetUserInfo_Request m_stWorld_GetUserInfo_Request = 270;
  inline bool has_m_stworld_getuserinfo_request() const;
  inline void clear_m_stworld_getuserinfo_request();
  static const int kMStWorldGetUserInfoRequestFieldNumber = 270;
  inline const ::World_GetUserInfo_Request& m_stworld_getuserinfo_request() const;
  inline ::World_GetUserInfo_Request* mutable_m_stworld_getuserinfo_request();
  inline ::World_GetUserInfo_Request* release_m_stworld_getuserinfo_request();
  inline void set_allocated_m_stworld_getuserinfo_request(::World_GetUserInfo_Request* m_stworld_getuserinfo_request);

  // optional .World_GetUserInfo_Response m_stWorld_GetUserInfo_Response = 271;
  inline bool has_m_stworld_getuserinfo_response() const;
  inline void clear_m_stworld_getuserinfo_response();
  static const int kMStWorldGetUserInfoResponseFieldNumber = 271;
  inline const ::World_GetUserInfo_Response& m_stworld_getuserinfo_response() const;
  inline ::World_GetUserInfo_Response* mutable_m_stworld_getuserinfo_response();
  inline ::World_GetUserInfo_Response* release_m_stworld_getuserinfo_response();
  inline void set_allocated_m_stworld_getuserinfo_response(::World_GetUserInfo_Response* m_stworld_getuserinfo_response);

  // optional .Zone_GetExchangeRec_Request m_stZone_GetExchangeRec_Request = 280;
  inline bool has_m_stzone_getexchangerec_request() const;
  inline void clear_m_stzone_getexchangerec_request();
  static const int kMStZoneGetExchangeRecRequestFieldNumber = 280;
  inline const ::Zone_GetExchangeRec_Request& m_stzone_getexchangerec_request() const;
  inline ::Zone_GetExchangeRec_Request* mutable_m_stzone_getexchangerec_request();
  inline ::Zone_GetExchangeRec_Request* release_m_stzone_getexchangerec_request();
  inline void set_allocated_m_stzone_getexchangerec_request(::Zone_GetExchangeRec_Request* m_stzone_getexchangerec_request);

  // optional .Zone_GetExchangeRec_Response m_stZone_GetExchangeRec_Response = 281;
  inline bool has_m_stzone_getexchangerec_response() const;
  inline void clear_m_stzone_getexchangerec_response();
  static const int kMStZoneGetExchangeRecResponseFieldNumber = 281;
  inline const ::Zone_GetExchangeRec_Response& m_stzone_getexchangerec_response() const;
  inline ::Zone_GetExchangeRec_Response* mutable_m_stzone_getexchangerec_response();
  inline ::Zone_GetExchangeRec_Response* release_m_stzone_getexchangerec_response();
  inline void set_allocated_m_stzone_getexchangerec_response(::Zone_GetExchangeRec_Response* m_stzone_getexchangerec_response);

  // optional .World_AddExcRec_Request m_stWorld_AddExcRec_Request = 282;
  inline bool has_m_stworld_addexcrec_request() const;
  inline void clear_m_stworld_addexcrec_request();
  static const int kMStWorldAddExcRecRequestFieldNumber = 282;
  inline const ::World_AddExcRec_Request& m_stworld_addexcrec_request() const;
  inline ::World_AddExcRec_Request* mutable_m_stworld_addexcrec_request();
  inline ::World_AddExcRec_Request* release_m_stworld_addexcrec_request();
  inline void set_allocated_m_stworld_addexcrec_request(::World_AddExcRec_Request* m_stworld_addexcrec_request);

  // optional .World_AddExcRec_Response m_stWorld_AddExcRec_Response = 283;
  inline bool has_m_stworld_addexcrec_response() const;
  inline void clear_m_stworld_addexcrec_response();
  static const int kMStWorldAddExcRecResponseFieldNumber = 283;
  inline const ::World_AddExcRec_Response& m_stworld_addexcrec_response() const;
  inline ::World_AddExcRec_Response* mutable_m_stworld_addexcrec_response();
  inline ::World_AddExcRec_Response* release_m_stworld_addexcrec_response();
  inline void set_allocated_m_stworld_addexcrec_response(::World_AddExcRec_Response* m_stworld_addexcrec_response);

  // @@protoc_insertion_point(class_scope:GameProtocol.CS.CSMsgBody)
 private:
  inline void set_has_m_stregauthdb_addaccount_request();
  inline void clear_has_m_stregauthdb_addaccount_request();
  inline void set_has_m_stregauthdb_addaccount_response();
  inline void clear_has_m_stregauthdb_addaccount_response();
  inline void set_has_m_stregauthdb_delete_request();
  inline void clear_has_m_stregauthdb_delete_request();
  inline void set_has_m_stregauthdb_delete_response();
  inline void clear_has_m_stregauthdb_delete_response();
  inline void set_has_m_stregauthdb_fetch_request();
  inline void clear_has_m_stregauthdb_fetch_request();
  inline void set_has_m_stregauthdb_fetch_response();
  inline void clear_has_m_stregauthdb_fetch_response();
  inline void set_has_m_stregauth_regaccount_request();
  inline void clear_has_m_stregauth_regaccount_request();
  inline void set_has_m_stregauth_regaccount_response();
  inline void clear_has_m_stregauth_regaccount_response();
  inline void set_has_m_stregauth_authaccount_request();
  inline void clear_has_m_stregauth_authaccount_request();
  inline void set_has_m_stregauth_authaccount_response();
  inline void clear_has_m_stregauth_authaccount_response();
  inline void set_has_m_stregauth_platformauth_request();
  inline void clear_has_m_stregauth_platformauth_request();
  inline void set_has_m_stregauth_platformauth_response();
  inline void clear_has_m_stregauth_platformauth_response();
  inline void set_has_m_stworld_writelog_request();
  inline void clear_has_m_stworld_writelog_request();
  inline void set_has_m_staccountcreaterolerequest();
  inline void clear_has_m_staccountcreaterolerequest();
  inline void set_has_m_staccountcreateroleresponse();
  inline void clear_has_m_staccountcreateroleresponse();
  inline void set_has_m_staccount_listzone_request();
  inline void clear_has_m_staccount_listzone_request();
  inline void set_has_m_staccount_listzone_response();
  inline void clear_has_m_staccount_listzone_response();
  inline void set_has_m_staccountdeleterolerequest();
  inline void clear_has_m_staccountdeleterolerequest();
  inline void set_has_m_staccountdeleteroleresponse();
  inline void clear_has_m_staccountdeleteroleresponse();
  inline void set_has_m_staccountlistrolerequest();
  inline void clear_has_m_staccountlistrolerequest();
  inline void set_has_m_staccountlistroleresponse();
  inline void clear_has_m_staccountlistroleresponse();
  inline void set_has_m_stlogoutserver_response();
  inline void clear_has_m_stlogoutserver_response();
  inline void set_has_m_stworld_zonechanged_notify();
  inline void clear_has_m_stworld_zonechanged_notify();
  inline void set_has_m_stworld_createrole_request();
  inline void clear_has_m_stworld_createrole_request();
  inline void set_has_m_stworld_createrole_response();
  inline void clear_has_m_stworld_createrole_response();
  inline void set_has_m_stworld_fetchrole_request();
  inline void clear_has_m_stworld_fetchrole_request();
  inline void set_has_m_stworld_fetchrole_response();
  inline void clear_has_m_stworld_fetchrole_response();
  inline void set_has_m_stzone_logout_notify();
  inline void clear_has_m_stzone_logout_notify();
  inline void set_has_m_stworld_updaterole_request();
  inline void clear_has_m_stworld_updaterole_request();
  inline void set_has_m_stworld_updaterole_response();
  inline void clear_has_m_stworld_updaterole_response();
  inline void set_has_m_stzone_getfriendinfo_request();
  inline void clear_has_m_stzone_getfriendinfo_request();
  inline void set_has_m_stzone_getfriendinfo_response();
  inline void clear_has_m_stzone_getfriendinfo_response();
  inline void set_has_m_stzone_loginserver_request();
  inline void clear_has_m_stzone_loginserver_request();
  inline void set_has_m_stzone_loginserver_response();
  inline void clear_has_m_stzone_loginserver_response();
  inline void set_has_m_stworld_kickrole_request();
  inline void clear_has_m_stworld_kickrole_request();
  inline void set_has_m_stworld_kickrole_response();
  inline void clear_has_m_stworld_kickrole_response();
  inline void set_has_m_stzone_onlinerole_request();
  inline void clear_has_m_stzone_onlinerole_request();
  inline void set_has_m_stworld_onlinestat_request();
  inline void clear_has_m_stworld_onlinestat_request();
  inline void set_has_m_stworld_onlinestat_response();
  inline void clear_has_m_stworld_onlinestat_response();
  inline void set_has_m_stzone_gamemaster_request();
  inline void clear_has_m_stzone_gamemaster_request();
  inline void set_has_m_stzone_gamemaster_response();
  inline void clear_has_m_stzone_gamemaster_response();
  inline void set_has_m_stworld_gamemaster_request();
  inline void clear_has_m_stworld_gamemaster_request();
  inline void set_has_m_stworld_gamemaster_response();
  inline void clear_has_m_stworld_gamemaster_response();
  inline void set_has_m_staddnewname_request();
  inline void clear_has_m_staddnewname_request();
  inline void set_has_m_staddnewname_response();
  inline void clear_has_m_staddnewname_response();
  inline void set_has_m_stdeletename_request();
  inline void clear_has_m_stdeletename_request();
  inline void set_has_m_stdeletename_response();
  inline void clear_has_m_stdeletename_response();
  inline void set_has_m_stloginserver_notify();
  inline void clear_has_m_stloginserver_notify();
  inline void set_has_m_stzone_repopera_request();
  inline void clear_has_m_stzone_repopera_request();
  inline void set_has_m_stzone_repopera_response();
  inline void clear_has_m_stzone_repopera_response();
  inline void set_has_m_stzone_repchange_notify();
  inline void clear_has_m_stzone_repchange_notify();
  inline void set_has_m_stworld_onlineexchange_request();
  inline void clear_has_m_stworld_onlineexchange_request();
  inline void set_has_m_stworld_onlineexchange_response();
  inline void clear_has_m_stworld_onlineexchange_response();
  inline void set_has_m_stzone_resourcechange_notify();
  inline void clear_has_m_stzone_resourcechange_notify();
  inline void set_has_m_stzone_chat_request();
  inline void clear_has_m_stzone_chat_request();
  inline void set_has_m_stzone_chat_response();
  inline void clear_has_m_stzone_chat_response();
  inline void set_has_m_stworld_chat_notify();
  inline void clear_has_m_stworld_chat_notify();
  inline void set_has_m_stzone_dofish_request();
  inline void clear_has_m_stzone_dofish_request();
  inline void set_has_m_stzone_dofish_response();
  inline void clear_has_m_stzone_dofish_response();
  inline void set_has_m_stzone_formtime_notify();
  inline void clear_has_m_stzone_formtime_notify();
  inline void set_has_m_stzone_synctime_notify();
  inline void clear_has_m_stzone_synctime_notify();
  inline void set_has_m_stzone_seatuser_notify();
  inline void clear_has_m_stzone_seatuser_notify();
  inline void set_has_m_stzone_fishinfo_notify();
  inline void clear_has_m_stzone_fishinfo_notify();
  inline void set_has_m_stzone_bulletinfo_notify();
  inline void clear_has_m_stzone_bulletinfo_notify();
  inline void set_has_m_stzone_forminfo_notify();
  inline void clear_has_m_stzone_forminfo_notify();
  inline void set_has_m_stzone_exitfish_request();
  inline void clear_has_m_stzone_exitfish_request();
  inline void set_has_m_stzone_exitfish_response();
  inline void clear_has_m_stzone_exitfish_response();
  inline void set_has_m_stzone_exitfish_notify();
  inline void clear_has_m_stzone_exitfish_notify();
  inline void set_has_m_stzone_changegun_request();
  inline void clear_has_m_stzone_changegun_request();
  inline void set_has_m_stzone_changegun_response();
  inline void clear_has_m_stzone_changegun_response();
  inline void set_has_m_stzone_changegun_notify();
  inline void clear_has_m_stzone_changegun_notify();
  inline void set_has_m_stzone_shootbullet_request();
  inline void clear_has_m_stzone_shootbullet_request();
  inline void set_has_m_stzone_shootbullet_response();
  inline void clear_has_m_stzone_shootbullet_response();
  inline void set_has_m_stzone_shootbullet_notify();
  inline void clear_has_m_stzone_shootbullet_notify();
  inline void set_has_m_stzone_hitfish_request();
  inline void clear_has_m_stzone_hitfish_request();
  inline void set_has_m_stzone_hitfish_response();
  inline void clear_has_m_stzone_hitfish_response();
  inline void set_has_m_stzone_hitfish_notify();
  inline void clear_has_m_stzone_hitfish_notify();
  inline void set_has_m_stzone_hitformfish_request();
  inline void clear_has_m_stzone_hitformfish_request();
  inline void set_has_m_stzone_hitformfish_response();
  inline void clear_has_m_stzone_hitformfish_response();
  inline void set_has_m_stzone_boomfishinfo_notify();
  inline void clear_has_m_stzone_boomfishinfo_notify();
  inline void set_has_m_stzone_addticket_notify();
  inline void clear_has_m_stzone_addticket_notify();
  inline void set_has_m_stzone_fishuserupdate_notify();
  inline void clear_has_m_stzone_fishuserupdate_notify();
  inline void set_has_m_stzone_lottery_request();
  inline void clear_has_m_stzone_lottery_request();
  inline void set_has_m_stzone_lottery_response();
  inline void clear_has_m_stzone_lottery_response();
  inline void set_has_m_stzone_questchange_notify();
  inline void clear_has_m_stzone_questchange_notify();
  inline void set_has_m_stzone_finquest_request();
  inline void clear_has_m_stzone_finquest_request();
  inline void set_has_m_stzone_finquest_response();
  inline void clear_has_m_stzone_finquest_response();
  inline void set_has_m_stzone_getreward_notify();
  inline void clear_has_m_stzone_getreward_notify();
  inline void set_has_m_stzone_getlivness_request();
  inline void clear_has_m_stzone_getlivness_request();
  inline void set_has_m_stzone_getlivness_response();
  inline void clear_has_m_stzone_getlivness_response();
  inline void set_has_m_stzone_setexchange_request();
  inline void clear_has_m_stzone_setexchange_request();
  inline void set_has_m_stzone_setexchange_response();
  inline void clear_has_m_stzone_setexchange_response();
  inline void set_has_m_stzone_exchangeitem_request();
  inline void clear_has_m_stzone_exchangeitem_request();
  inline void set_has_m_stzone_exchangeitem_response();
  inline void clear_has_m_stzone_exchangeitem_response();
  inline void set_has_m_stworld_addlimitnum_request();
  inline void clear_has_m_stworld_addlimitnum_request();
  inline void set_has_m_stworld_addlimitnum_response();
  inline void clear_has_m_stworld_addlimitnum_response();
  inline void set_has_m_stzone_getlimitnum_request();
  inline void clear_has_m_stzone_getlimitnum_request();
  inline void set_has_m_stzone_getlimitnum_response();
  inline void clear_has_m_stzone_getlimitnum_response();
  inline void set_has_m_stworld_getcardno_request();
  inline void clear_has_m_stworld_getcardno_request();
  inline void set_has_m_stworld_getcardno_response();
  inline void clear_has_m_stworld_getcardno_response();
  inline void set_has_m_stzone_newmailinfo_notify();
  inline void clear_has_m_stzone_newmailinfo_notify();
  inline void set_has_m_stzone_mailopera_request();
  inline void clear_has_m_stzone_mailopera_request();
  inline void set_has_m_stzone_mailopera_response();
  inline void clear_has_m_stzone_mailopera_response();
  inline void set_has_m_stworld_sendmail_request();
  inline void clear_has_m_stworld_sendmail_request();
  inline void set_has_m_stworld_sendmail_response();
  inline void clear_has_m_stworld_sendmail_response();
  inline void set_has_m_stworld_systemmailid_notify();
  inline void clear_has_m_stworld_systemmailid_notify();
  inline void set_has_m_stworld_getsystemmail_request();
  inline void clear_has_m_stworld_getsystemmail_request();
  inline void set_has_m_stworld_getsystemmail_response();
  inline void clear_has_m_stworld_getsystemmail_response();
  inline void set_has_m_stzone_getrankinfo_request();
  inline void clear_has_m_stzone_getrankinfo_request();
  inline void set_has_m_stzone_getrankinfo_response();
  inline void clear_has_m_stzone_getrankinfo_response();
  inline void set_has_m_stworld_updaterank_request();
  inline void clear_has_m_stworld_updaterank_request();
  inline void set_has_m_stworld_updaterank_response();
  inline void clear_has_m_stworld_updaterank_response();
  inline void set_has_m_stworld_getrankinfo_request();
  inline void clear_has_m_stworld_getrankinfo_request();
  inline void set_has_m_stworld_getrankinfo_response();
  inline void clear_has_m_stworld_getrankinfo_response();
  inline void set_has_m_stzone_useskill_request();
  inline void clear_has_m_stzone_useskill_request();
  inline void set_has_m_stzone_useskill_response();
  inline void clear_has_m_stzone_useskill_response();
  inline void set_has_m_stzone_useskill_notify();
  inline void clear_has_m_stzone_useskill_notify();
  inline void set_has_m_stzone_chooseaimfish_request();
  inline void clear_has_m_stzone_chooseaimfish_request();
  inline void set_has_m_stzone_chooseaimfish_response();
  inline void clear_has_m_stzone_chooseaimfish_response();
  inline void set_has_m_stzone_chooseaimfish_notify();
  inline void clear_has_m_stzone_chooseaimfish_notify();
  inline void set_has_m_stzone_getuseralms_request();
  inline void clear_has_m_stzone_getuseralms_request();
  inline void set_has_m_stzone_getuseralms_response();
  inline void clear_has_m_stzone_getuseralms_response();
  inline void set_has_m_stzone_updatealms_notify();
  inline void clear_has_m_stzone_updatealms_notify();
  inline void set_has_m_stzone_limitlottery_request();
  inline void clear_has_m_stzone_limitlottery_request();
  inline void set_has_m_stzone_limitlottery_response();
  inline void clear_has_m_stzone_limitlottery_response();
  inline void set_has_m_stzone_paylotteryrecord_request();
  inline void clear_has_m_stzone_paylotteryrecord_request();
  inline void set_has_m_stzone_paylotteryrecord_response();
  inline void clear_has_m_stzone_paylotteryrecord_response();
  inline void set_has_m_stzone_getpayorder_request();
  inline void clear_has_m_stzone_getpayorder_request();
  inline void set_has_m_stzone_getpayorder_response();
  inline void clear_has_m_stzone_getpayorder_response();
  inline void set_has_m_stzone_horselamp_notify();
  inline void clear_has_m_stzone_horselamp_notify();
  inline void set_has_m_stworld_updateprizeinfo_request();
  inline void clear_has_m_stworld_updateprizeinfo_request();
  inline void set_has_m_stworld_updatebetinfo_request();
  inline void clear_has_m_stworld_updatebetinfo_request();
  inline void set_has_m_stworld_updatelasvegas_notify();
  inline void clear_has_m_stworld_updatelasvegas_notify();
  inline void set_has_m_stzone_enterlasvegas_request();
  inline void clear_has_m_stzone_enterlasvegas_request();
  inline void set_has_m_stzone_enterlasvegas_response();
  inline void clear_has_m_stzone_enterlasvegas_response();
  inline void set_has_m_stzone_lasvegasbet_request();
  inline void clear_has_m_stzone_lasvegasbet_request();
  inline void set_has_m_stzone_lasvegasbet_response();
  inline void clear_has_m_stzone_lasvegasbet_response();
  inline void set_has_m_stzone_updatelasvegas_notify();
  inline void clear_has_m_stzone_updatelasvegas_notify();
  inline void set_has_m_stzone_getrewardinfo_request();
  inline void clear_has_m_stzone_getrewardinfo_request();
  inline void set_has_m_stzone_getrewardinfo_response();
  inline void clear_has_m_stzone_getrewardinfo_response();
  inline void set_has_m_stzone_getloginreward_request();
  inline void clear_has_m_stzone_getloginreward_request();
  inline void set_has_m_stzone_getloginreward_response();
  inline void clear_has_m_stzone_getloginreward_response();
  inline void set_has_m_stworld_userrecharge_request();
  inline void clear_has_m_stworld_userrecharge_request();
  inline void set_has_m_stworld_userrecharge_response();
  inline void clear_has_m_stworld_userrecharge_response();
  inline void set_has_m_stzone_getpayrecord_request();
  inline void clear_has_m_stzone_getpayrecord_request();
  inline void set_has_m_stzone_getpayrecord_response();
  inline void clear_has_m_stzone_getpayrecord_response();
  inline void set_has_m_stzone_getpaygift_request();
  inline void clear_has_m_stzone_getpaygift_request();
  inline void set_has_m_stzone_getpaygift_response();
  inline void clear_has_m_stzone_getpaygift_response();
  inline void set_has_m_stzone_updatemonthtime_notify();
  inline void clear_has_m_stzone_updatemonthtime_notify();
  inline void set_has_m_stzone_vipexpupdate_notify();
  inline void clear_has_m_stzone_vipexpupdate_notify();
  inline void set_has_m_stzone_userrecharge_notify();
  inline void clear_has_m_stzone_userrecharge_notify();
  inline void set_has_m_stzone_userrecharge_request();
  inline void clear_has_m_stzone_userrecharge_request();
  inline void set_has_m_stzone_userrecharge_response();
  inline void clear_has_m_stzone_userrecharge_response();
  inline void set_has_m_stzone_finguide_request();
  inline void clear_has_m_stzone_finguide_request();
  inline void set_has_m_stzone_finguide_response();
  inline void clear_has_m_stzone_finguide_response();
  inline void set_has_m_stzone_updatename_request();
  inline void clear_has_m_stzone_updatename_request();
  inline void set_has_m_stzone_updatename_response();
  inline void clear_has_m_stzone_updatename_response();
  inline void set_has_m_stworld_getuserinfo_request();
  inline void clear_has_m_stworld_getuserinfo_request();
  inline void set_has_m_stworld_getuserinfo_response();
  inline void clear_has_m_stworld_getuserinfo_response();
  inline void set_has_m_stzone_getexchangerec_request();
  inline void clear_has_m_stzone_getexchangerec_request();
  inline void set_has_m_stzone_getexchangerec_response();
  inline void clear_has_m_stzone_getexchangerec_response();
  inline void set_has_m_stworld_addexcrec_request();
  inline void clear_has_m_stworld_addexcrec_request();
  inline void set_has_m_stworld_addexcrec_response();
  inline void clear_has_m_stworld_addexcrec_response();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::RegAuthDB_AddAccount_Request* m_stregauthdb_addaccount_request_;
  ::RegAuthDB_AddAccount_Response* m_stregauthdb_addaccount_response_;
  ::RegAuthDB_DelAccount_Request* m_stregauthdb_delete_request_;
  ::RegAuthDB_DelAccount_Response* m_stregauthdb_delete_response_;
  ::RegAuthDB_GetAccount_Request* m_stregauthdb_fetch_request_;
  ::RegAuthDB_GetAccount_Response* m_stregauthdb_fetch_response_;
  ::RegAuth_RegAccount_Request* m_stregauth_regaccount_request_;
  ::RegAuth_RegAccount_Response* m_stregauth_regaccount_response_;
  ::RegAuth_AuthAccount_Request* m_stregauth_authaccount_request_;
  ::RegAuth_AuthAccount_Response* m_stregauth_authaccount_response_;
  ::RegAuth_PlatformAuth_Request* m_stregauth_platformauth_request_;
  ::RegAuth_PlatformAuth_Response* m_stregauth_platformauth_response_;
  ::World_WriteLog_Request* m_stworld_writelog_request_;
  ::CreateRole_Account_Request* m_staccountcreaterolerequest_;
  ::CreateRole_Account_Response* m_staccountcreateroleresponse_;
  ::Account_ListZone_Request* m_staccount_listzone_request_;
  ::Account_ListZone_Response* m_staccount_listzone_response_;
  ::DeleteRole_Account_Request* m_staccountdeleterolerequest_;
  ::DeleteRole_Account_Response* m_staccountdeleteroleresponse_;
  ::Account_ListRole_Request* m_staccountlistrolerequest_;
  ::Account_ListRole_Response* m_staccountlistroleresponse_;
  ::LogoutServer_Response* m_stlogoutserver_response_;
  ::World_ZoneChanged_Notify* m_stworld_zonechanged_notify_;
  ::World_CreateRole_Request* m_stworld_createrole_request_;
  ::World_CreateRole_Response* m_stworld_createrole_response_;
  ::World_FetchRole_Request* m_stworld_fetchrole_request_;
  ::World_FetchRole_Response* m_stworld_fetchrole_response_;
  ::Zone_Logout_Notify* m_stzone_logout_notify_;
  ::World_UpdateRole_Request* m_stworld_updaterole_request_;
  ::World_UpdateRole_Response* m_stworld_updaterole_response_;
  ::Zone_GetFriendInfo_Request* m_stzone_getfriendinfo_request_;
  ::Zone_GetFriendInfo_Response* m_stzone_getfriendinfo_response_;
  ::Zone_LoginServer_Request* m_stzone_loginserver_request_;
  ::Zone_LoginServer_Response* m_stzone_loginserver_response_;
  ::World_KickRole_Request* m_stworld_kickrole_request_;
  ::World_KickRole_Response* m_stworld_kickrole_response_;
  ::Zone_OnlineRole_Request* m_stzone_onlinerole_request_;
  ::World_OnlineStat_Request* m_stworld_onlinestat_request_;
  ::World_OnlineStat_Response* m_stworld_onlinestat_response_;
  ::GameMaster_Request* m_stzone_gamemaster_request_;
  ::GameMaster_Response* m_stzone_gamemaster_response_;
  ::GameMaster_Request* m_stworld_gamemaster_request_;
  ::GameMaster_Response* m_stworld_gamemaster_response_;
  ::AddNewName_Request* m_staddnewname_request_;
  ::AddNewName_Response* m_staddnewname_response_;
  ::DeleteName_Request* m_stdeletename_request_;
  ::DeleteName_Response* m_stdeletename_response_;
  ::Zone_LoginServer_Notify* m_stloginserver_notify_;
  ::Zone_RepOpera_Request* m_stzone_repopera_request_;
  ::Zone_RepOpera_Response* m_stzone_repopera_response_;
  ::Zone_RepChange_Notify* m_stzone_repchange_notify_;
  ::World_OnlineExchange_Request* m_stworld_onlineexchange_request_;
  ::World_OnlineExchange_Response* m_stworld_onlineexchange_response_;
  ::Zone_ResourceChange_Notify* m_stzone_resourcechange_notify_;
  ::Zone_Chat_Request* m_stzone_chat_request_;
  ::Zone_Chat_Response* m_stzone_chat_response_;
  ::World_Chat_Notify* m_stworld_chat_notify_;
  ::Zone_DoFish_Request* m_stzone_dofish_request_;
  ::Zone_DoFish_Response* m_stzone_dofish_response_;
  ::Zone_FormTime_Notify* m_stzone_formtime_notify_;
  ::Zone_SyncTime_Notify* m_stzone_synctime_notify_;
  ::Zone_SeatUser_Notify* m_stzone_seatuser_notify_;
  ::Zone_FishInfo_Notify* m_stzone_fishinfo_notify_;
  ::Zone_BulletInfo_Notify* m_stzone_bulletinfo_notify_;
  ::Zone_FormInfo_Notify* m_stzone_forminfo_notify_;
  ::Zone_ExitFish_Request* m_stzone_exitfish_request_;
  ::Zone_ExitFish_Response* m_stzone_exitfish_response_;
  ::Zone_ExitFish_Notify* m_stzone_exitfish_notify_;
  ::Zone_ChangeGun_Request* m_stzone_changegun_request_;
  ::Zone_ChangeGun_Response* m_stzone_changegun_response_;
  ::Zone_ChangeGun_Notify* m_stzone_changegun_notify_;
  ::Zone_ShootBullet_Request* m_stzone_shootbullet_request_;
  ::Zone_ShootBullet_Response* m_stzone_shootbullet_response_;
  ::Zone_ShootBullet_Notify* m_stzone_shootbullet_notify_;
  ::Zone_HitFish_Request* m_stzone_hitfish_request_;
  ::Zone_HitFish_Response* m_stzone_hitfish_response_;
  ::Zone_HitFish_Notify* m_stzone_hitfish_notify_;
  ::Zone_HitFormFish_Request* m_stzone_hitformfish_request_;
  ::Zone_HitFormFish_Response* m_stzone_hitformfish_response_;
  ::Zone_BoomFishInfo_Notify* m_stzone_boomfishinfo_notify_;
  ::Zone_AddTicket_Notify* m_stzone_addticket_notify_;
  ::Zone_FishUserUpdate_Notify* m_stzone_fishuserupdate_notify_;
  ::Zone_Lottery_Request* m_stzone_lottery_request_;
  ::Zone_Lottery_Response* m_stzone_lottery_response_;
  ::Zone_QuestChange_Notify* m_stzone_questchange_notify_;
  ::Zone_FinQuest_Request* m_stzone_finquest_request_;
  ::Zone_FinQuest_Response* m_stzone_finquest_response_;
  ::Zone_GetReward_Notify* m_stzone_getreward_notify_;
  ::Zone_GetLivness_Request* m_stzone_getlivness_request_;
  ::Zone_GetLivness_Response* m_stzone_getlivness_response_;
  ::Zone_SetExchange_Request* m_stzone_setexchange_request_;
  ::Zone_SetExchange_Response* m_stzone_setexchange_response_;
  ::Zone_ExchangeItem_Request* m_stzone_exchangeitem_request_;
  ::Zone_ExchangeItem_Response* m_stzone_exchangeitem_response_;
  ::World_AddLimitNum_Request* m_stworld_addlimitnum_request_;
  ::World_AddLimitNum_Response* m_stworld_addlimitnum_response_;
  ::Zone_GetLimitNum_Request* m_stzone_getlimitnum_request_;
  ::Zone_GetLimitNum_Response* m_stzone_getlimitnum_response_;
  ::World_GetCardNo_Request* m_stworld_getcardno_request_;
  ::World_GetCardNo_Response* m_stworld_getcardno_response_;
  ::Zone_NewMailInfo_Notify* m_stzone_newmailinfo_notify_;
  ::Zone_MailOpera_Request* m_stzone_mailopera_request_;
  ::Zone_MailOpera_Response* m_stzone_mailopera_response_;
  ::World_SendMail_Request* m_stworld_sendmail_request_;
  ::World_SendMail_Response* m_stworld_sendmail_response_;
  ::World_SystemMailID_Notify* m_stworld_systemmailid_notify_;
  ::World_GetSystemMail_Request* m_stworld_getsystemmail_request_;
  ::World_GetSystemMail_Response* m_stworld_getsystemmail_response_;
  ::Zone_GetRankInfo_Request* m_stzone_getrankinfo_request_;
  ::Zone_GetRankInfo_Response* m_stzone_getrankinfo_response_;
  ::World_UpdateRank_Request* m_stworld_updaterank_request_;
  ::World_UpdateRank_Response* m_stworld_updaterank_response_;
  ::World_GetRankInfo_Request* m_stworld_getrankinfo_request_;
  ::World_GetRankInfo_Response* m_stworld_getrankinfo_response_;
  ::Zone_UseSkill_Request* m_stzone_useskill_request_;
  ::Zone_UseSkill_Response* m_stzone_useskill_response_;
  ::Zone_UseSkill_Notify* m_stzone_useskill_notify_;
  ::Zone_ChooseAimFish_Request* m_stzone_chooseaimfish_request_;
  ::Zone_ChooseAimFish_Response* m_stzone_chooseaimfish_response_;
  ::Zone_ChooseAimFish_Notify* m_stzone_chooseaimfish_notify_;
  ::Zone_GetUserAlms_Request* m_stzone_getuseralms_request_;
  ::Zone_GetUserAlms_Response* m_stzone_getuseralms_response_;
  ::Zone_UpdateAlms_Notify* m_stzone_updatealms_notify_;
  ::Zone_LimitLottery_Request* m_stzone_limitlottery_request_;
  ::Zone_LimitLottery_Response* m_stzone_limitlottery_response_;
  ::Zone_PayLotteryRecord_Request* m_stzone_paylotteryrecord_request_;
  ::Zone_PayLotteryRecord_Response* m_stzone_paylotteryrecord_response_;
  ::Zone_GetPayOrder_Request* m_stzone_getpayorder_request_;
  ::Zone_GetPayOrder_Response* m_stzone_getpayorder_response_;
  ::Zone_HorseLamp_Notify* m_stzone_horselamp_notify_;
  ::World_UpdatePrizeInfo_Request* m_stworld_updateprizeinfo_request_;
  ::World_UpdateBetInfo_Request* m_stworld_updatebetinfo_request_;
  ::World_UpdateLasvegas_Notify* m_stworld_updatelasvegas_notify_;
  ::Zone_EnterLasvegas_Request* m_stzone_enterlasvegas_request_;
  ::Zone_EnterLasvegas_Response* m_stzone_enterlasvegas_response_;
  ::Zone_LasvegasBet_Request* m_stzone_lasvegasbet_request_;
  ::Zone_LasvegasBet_Response* m_stzone_lasvegasbet_response_;
  ::Zone_UpdateLasvegas_Notify* m_stzone_updatelasvegas_notify_;
  ::Zone_GetRewardInfo_Request* m_stzone_getrewardinfo_request_;
  ::Zone_GetRewardInfo_Response* m_stzone_getrewardinfo_response_;
  ::Zone_GetLoginReward_Request* m_stzone_getloginreward_request_;
  ::Zone_GetLoginReward_Response* m_stzone_getloginreward_response_;
  ::World_UserRecharge_Request* m_stworld_userrecharge_request_;
  ::World_UserRecharge_Response* m_stworld_userrecharge_response_;
  ::Zone_GetPayRecord_Request* m_stzone_getpayrecord_request_;
  ::Zone_GetPayRecord_Response* m_stzone_getpayrecord_response_;
  ::Zone_GetPayGift_Request* m_stzone_getpaygift_request_;
  ::Zone_GetPayGift_Response* m_stzone_getpaygift_response_;
  ::Zone_UpdateMonthTime_Notify* m_stzone_updatemonthtime_notify_;
  ::Zone_VipExpUpdate_Notify* m_stzone_vipexpupdate_notify_;
  ::Zone_UserRecharge_Notify* m_stzone_userrecharge_notify_;
  ::Zone_UserRecharge_Request* m_stzone_userrecharge_request_;
  ::Zone_UserRecharge_Response* m_stzone_userrecharge_response_;
  ::Zone_FinGuide_Request* m_stzone_finguide_request_;
  ::Zone_FinGuide_Response* m_stzone_finguide_response_;
  ::Zone_UpdateName_Request* m_stzone_updatename_request_;
  ::Zone_UpdateName_Response* m_stzone_updatename_response_;
  ::World_GetUserInfo_Request* m_stworld_getuserinfo_request_;
  ::World_GetUserInfo_Response* m_stworld_getuserinfo_response_;
  ::Zone_GetExchangeRec_Request* m_stzone_getexchangerec_request_;
  ::Zone_GetExchangeRec_Response* m_stzone_getexchangerec_response_;
  ::World_AddExcRec_Request* m_stworld_addexcrec_request_;
  ::World_AddExcRec_Response* m_stworld_addexcrec_response_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(163 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCS_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCS_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCS_2eproto();

  void InitAsDefaultInstance();
  static CSMsgBody* default_instance_;
};
// -------------------------------------------------------------------

class CSMsgHead : public ::google::protobuf::Message {
 public:
  CSMsgHead();
  virtual ~CSMsgHead();

  CSMsgHead(const CSMsgHead& from);

  inline CSMsgHead& operator=(const CSMsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CSMsgHead& default_instance();

  void Swap(CSMsgHead* other);

  // implements Message ----------------------------------------------

  CSMsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CSMsgHead& from);
  void MergeFrom(const CSMsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uiSessionFd = 1;
  inline bool has_uisessionfd() const;
  inline void clear_uisessionfd();
  static const int kUiSessionFdFieldNumber = 1;
  inline ::google::protobuf::uint32 uisessionfd() const;
  inline void set_uisessionfd(::google::protobuf::uint32 value);

  // optional .ProtocolMsgID uiMsgID = 2 [default = MSGID_PROTOCOL_INVALID_MSG];
  inline bool has_uimsgid() const;
  inline void clear_uimsgid();
  static const int kUiMsgIDFieldNumber = 2;
  inline ::ProtocolMsgID uimsgid() const;
  inline void set_uimsgid(::ProtocolMsgID value);

  // optional uint32 uin = 3;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 3;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:GameProtocol.CS.CSMsgHead)
 private:
  inline void set_has_uisessionfd();
  inline void clear_has_uisessionfd();
  inline void set_has_uimsgid();
  inline void clear_has_uimsgid();
  inline void set_has_uin();
  inline void clear_has_uin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uisessionfd_;
  int uimsgid_;
  ::google::protobuf::uint32 uin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCS_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCS_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCS_2eproto();

  void InitAsDefaultInstance();
  static CSMsgHead* default_instance_;
};
// -------------------------------------------------------------------

class ProtocolCSMsg : public ::google::protobuf::Message {
 public:
  ProtocolCSMsg();
  virtual ~ProtocolCSMsg();

  ProtocolCSMsg(const ProtocolCSMsg& from);

  inline ProtocolCSMsg& operator=(const ProtocolCSMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProtocolCSMsg& default_instance();

  void Swap(ProtocolCSMsg* other);

  // implements Message ----------------------------------------------

  ProtocolCSMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProtocolCSMsg& from);
  void MergeFrom(const ProtocolCSMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .GameProtocol.CS.CSMsgHead stHead = 1;
  inline bool has_sthead() const;
  inline void clear_sthead();
  static const int kStHeadFieldNumber = 1;
  inline const ::GameProtocol::CS::CSMsgHead& sthead() const;
  inline ::GameProtocol::CS::CSMsgHead* mutable_sthead();
  inline ::GameProtocol::CS::CSMsgHead* release_sthead();
  inline void set_allocated_sthead(::GameProtocol::CS::CSMsgHead* sthead);

  // optional .GameProtocol.CS.CSMsgBody stBody = 2;
  inline bool has_stbody() const;
  inline void clear_stbody();
  static const int kStBodyFieldNumber = 2;
  inline const ::GameProtocol::CS::CSMsgBody& stbody() const;
  inline ::GameProtocol::CS::CSMsgBody* mutable_stbody();
  inline ::GameProtocol::CS::CSMsgBody* release_stbody();
  inline void set_allocated_stbody(::GameProtocol::CS::CSMsgBody* stbody);

  // @@protoc_insertion_point(class_scope:GameProtocol.CS.ProtocolCSMsg)
 private:
  inline void set_has_sthead();
  inline void clear_has_sthead();
  inline void set_has_stbody();
  inline void clear_has_stbody();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::GameProtocol::CS::CSMsgHead* sthead_;
  ::GameProtocol::CS::CSMsgBody* stbody_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCS_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCS_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCS_2eproto();

  void InitAsDefaultInstance();
  static ProtocolCSMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// CSMsgBody

// optional .RegAuthDB_AddAccount_Request m_stRegAuthDB_AddAccount_Request = 1;
inline bool CSMsgBody::has_m_stregauthdb_addaccount_request() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stregauthdb_addaccount_request() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stregauthdb_addaccount_request() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stregauthdb_addaccount_request() {
  if (m_stregauthdb_addaccount_request_ != NULL) m_stregauthdb_addaccount_request_->::RegAuthDB_AddAccount_Request::Clear();
  clear_has_m_stregauthdb_addaccount_request();
}
inline const ::RegAuthDB_AddAccount_Request& CSMsgBody::m_stregauthdb_addaccount_request() const {
  return m_stregauthdb_addaccount_request_ != NULL ? *m_stregauthdb_addaccount_request_ : *default_instance_->m_stregauthdb_addaccount_request_;
}
inline ::RegAuthDB_AddAccount_Request* CSMsgBody::mutable_m_stregauthdb_addaccount_request() {
  set_has_m_stregauthdb_addaccount_request();
  if (m_stregauthdb_addaccount_request_ == NULL) m_stregauthdb_addaccount_request_ = new ::RegAuthDB_AddAccount_Request;
  return m_stregauthdb_addaccount_request_;
}
inline ::RegAuthDB_AddAccount_Request* CSMsgBody::release_m_stregauthdb_addaccount_request() {
  clear_has_m_stregauthdb_addaccount_request();
  ::RegAuthDB_AddAccount_Request* temp = m_stregauthdb_addaccount_request_;
  m_stregauthdb_addaccount_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauthdb_addaccount_request(::RegAuthDB_AddAccount_Request* m_stregauthdb_addaccount_request) {
  delete m_stregauthdb_addaccount_request_;
  m_stregauthdb_addaccount_request_ = m_stregauthdb_addaccount_request;
  if (m_stregauthdb_addaccount_request) {
    set_has_m_stregauthdb_addaccount_request();
  } else {
    clear_has_m_stregauthdb_addaccount_request();
  }
}

// optional .RegAuthDB_AddAccount_Response m_stRegAuthDB_AddAccount_Response = 2;
inline bool CSMsgBody::has_m_stregauthdb_addaccount_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stregauthdb_addaccount_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stregauthdb_addaccount_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stregauthdb_addaccount_response() {
  if (m_stregauthdb_addaccount_response_ != NULL) m_stregauthdb_addaccount_response_->::RegAuthDB_AddAccount_Response::Clear();
  clear_has_m_stregauthdb_addaccount_response();
}
inline const ::RegAuthDB_AddAccount_Response& CSMsgBody::m_stregauthdb_addaccount_response() const {
  return m_stregauthdb_addaccount_response_ != NULL ? *m_stregauthdb_addaccount_response_ : *default_instance_->m_stregauthdb_addaccount_response_;
}
inline ::RegAuthDB_AddAccount_Response* CSMsgBody::mutable_m_stregauthdb_addaccount_response() {
  set_has_m_stregauthdb_addaccount_response();
  if (m_stregauthdb_addaccount_response_ == NULL) m_stregauthdb_addaccount_response_ = new ::RegAuthDB_AddAccount_Response;
  return m_stregauthdb_addaccount_response_;
}
inline ::RegAuthDB_AddAccount_Response* CSMsgBody::release_m_stregauthdb_addaccount_response() {
  clear_has_m_stregauthdb_addaccount_response();
  ::RegAuthDB_AddAccount_Response* temp = m_stregauthdb_addaccount_response_;
  m_stregauthdb_addaccount_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauthdb_addaccount_response(::RegAuthDB_AddAccount_Response* m_stregauthdb_addaccount_response) {
  delete m_stregauthdb_addaccount_response_;
  m_stregauthdb_addaccount_response_ = m_stregauthdb_addaccount_response;
  if (m_stregauthdb_addaccount_response) {
    set_has_m_stregauthdb_addaccount_response();
  } else {
    clear_has_m_stregauthdb_addaccount_response();
  }
}

// optional .RegAuthDB_DelAccount_Request m_stRegAuthDB_Delete_Request = 3;
inline bool CSMsgBody::has_m_stregauthdb_delete_request() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stregauthdb_delete_request() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stregauthdb_delete_request() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stregauthdb_delete_request() {
  if (m_stregauthdb_delete_request_ != NULL) m_stregauthdb_delete_request_->::RegAuthDB_DelAccount_Request::Clear();
  clear_has_m_stregauthdb_delete_request();
}
inline const ::RegAuthDB_DelAccount_Request& CSMsgBody::m_stregauthdb_delete_request() const {
  return m_stregauthdb_delete_request_ != NULL ? *m_stregauthdb_delete_request_ : *default_instance_->m_stregauthdb_delete_request_;
}
inline ::RegAuthDB_DelAccount_Request* CSMsgBody::mutable_m_stregauthdb_delete_request() {
  set_has_m_stregauthdb_delete_request();
  if (m_stregauthdb_delete_request_ == NULL) m_stregauthdb_delete_request_ = new ::RegAuthDB_DelAccount_Request;
  return m_stregauthdb_delete_request_;
}
inline ::RegAuthDB_DelAccount_Request* CSMsgBody::release_m_stregauthdb_delete_request() {
  clear_has_m_stregauthdb_delete_request();
  ::RegAuthDB_DelAccount_Request* temp = m_stregauthdb_delete_request_;
  m_stregauthdb_delete_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauthdb_delete_request(::RegAuthDB_DelAccount_Request* m_stregauthdb_delete_request) {
  delete m_stregauthdb_delete_request_;
  m_stregauthdb_delete_request_ = m_stregauthdb_delete_request;
  if (m_stregauthdb_delete_request) {
    set_has_m_stregauthdb_delete_request();
  } else {
    clear_has_m_stregauthdb_delete_request();
  }
}

// optional .RegAuthDB_DelAccount_Response m_stRegAuthDB_Delete_Response = 4;
inline bool CSMsgBody::has_m_stregauthdb_delete_response() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_stregauthdb_delete_response() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_stregauthdb_delete_response() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_stregauthdb_delete_response() {
  if (m_stregauthdb_delete_response_ != NULL) m_stregauthdb_delete_response_->::RegAuthDB_DelAccount_Response::Clear();
  clear_has_m_stregauthdb_delete_response();
}
inline const ::RegAuthDB_DelAccount_Response& CSMsgBody::m_stregauthdb_delete_response() const {
  return m_stregauthdb_delete_response_ != NULL ? *m_stregauthdb_delete_response_ : *default_instance_->m_stregauthdb_delete_response_;
}
inline ::RegAuthDB_DelAccount_Response* CSMsgBody::mutable_m_stregauthdb_delete_response() {
  set_has_m_stregauthdb_delete_response();
  if (m_stregauthdb_delete_response_ == NULL) m_stregauthdb_delete_response_ = new ::RegAuthDB_DelAccount_Response;
  return m_stregauthdb_delete_response_;
}
inline ::RegAuthDB_DelAccount_Response* CSMsgBody::release_m_stregauthdb_delete_response() {
  clear_has_m_stregauthdb_delete_response();
  ::RegAuthDB_DelAccount_Response* temp = m_stregauthdb_delete_response_;
  m_stregauthdb_delete_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauthdb_delete_response(::RegAuthDB_DelAccount_Response* m_stregauthdb_delete_response) {
  delete m_stregauthdb_delete_response_;
  m_stregauthdb_delete_response_ = m_stregauthdb_delete_response;
  if (m_stregauthdb_delete_response) {
    set_has_m_stregauthdb_delete_response();
  } else {
    clear_has_m_stregauthdb_delete_response();
  }
}

// optional .RegAuthDB_GetAccount_Request m_stRegAuthDB_Fetch_Request = 5;
inline bool CSMsgBody::has_m_stregauthdb_fetch_request() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_stregauthdb_fetch_request() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_stregauthdb_fetch_request() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_stregauthdb_fetch_request() {
  if (m_stregauthdb_fetch_request_ != NULL) m_stregauthdb_fetch_request_->::RegAuthDB_GetAccount_Request::Clear();
  clear_has_m_stregauthdb_fetch_request();
}
inline const ::RegAuthDB_GetAccount_Request& CSMsgBody::m_stregauthdb_fetch_request() const {
  return m_stregauthdb_fetch_request_ != NULL ? *m_stregauthdb_fetch_request_ : *default_instance_->m_stregauthdb_fetch_request_;
}
inline ::RegAuthDB_GetAccount_Request* CSMsgBody::mutable_m_stregauthdb_fetch_request() {
  set_has_m_stregauthdb_fetch_request();
  if (m_stregauthdb_fetch_request_ == NULL) m_stregauthdb_fetch_request_ = new ::RegAuthDB_GetAccount_Request;
  return m_stregauthdb_fetch_request_;
}
inline ::RegAuthDB_GetAccount_Request* CSMsgBody::release_m_stregauthdb_fetch_request() {
  clear_has_m_stregauthdb_fetch_request();
  ::RegAuthDB_GetAccount_Request* temp = m_stregauthdb_fetch_request_;
  m_stregauthdb_fetch_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauthdb_fetch_request(::RegAuthDB_GetAccount_Request* m_stregauthdb_fetch_request) {
  delete m_stregauthdb_fetch_request_;
  m_stregauthdb_fetch_request_ = m_stregauthdb_fetch_request;
  if (m_stregauthdb_fetch_request) {
    set_has_m_stregauthdb_fetch_request();
  } else {
    clear_has_m_stregauthdb_fetch_request();
  }
}

// optional .RegAuthDB_GetAccount_Response m_stRegAuthDB_Fetch_Response = 6;
inline bool CSMsgBody::has_m_stregauthdb_fetch_response() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_stregauthdb_fetch_response() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_stregauthdb_fetch_response() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_stregauthdb_fetch_response() {
  if (m_stregauthdb_fetch_response_ != NULL) m_stregauthdb_fetch_response_->::RegAuthDB_GetAccount_Response::Clear();
  clear_has_m_stregauthdb_fetch_response();
}
inline const ::RegAuthDB_GetAccount_Response& CSMsgBody::m_stregauthdb_fetch_response() const {
  return m_stregauthdb_fetch_response_ != NULL ? *m_stregauthdb_fetch_response_ : *default_instance_->m_stregauthdb_fetch_response_;
}
inline ::RegAuthDB_GetAccount_Response* CSMsgBody::mutable_m_stregauthdb_fetch_response() {
  set_has_m_stregauthdb_fetch_response();
  if (m_stregauthdb_fetch_response_ == NULL) m_stregauthdb_fetch_response_ = new ::RegAuthDB_GetAccount_Response;
  return m_stregauthdb_fetch_response_;
}
inline ::RegAuthDB_GetAccount_Response* CSMsgBody::release_m_stregauthdb_fetch_response() {
  clear_has_m_stregauthdb_fetch_response();
  ::RegAuthDB_GetAccount_Response* temp = m_stregauthdb_fetch_response_;
  m_stregauthdb_fetch_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauthdb_fetch_response(::RegAuthDB_GetAccount_Response* m_stregauthdb_fetch_response) {
  delete m_stregauthdb_fetch_response_;
  m_stregauthdb_fetch_response_ = m_stregauthdb_fetch_response;
  if (m_stregauthdb_fetch_response) {
    set_has_m_stregauthdb_fetch_response();
  } else {
    clear_has_m_stregauthdb_fetch_response();
  }
}

// optional .RegAuth_RegAccount_Request m_stRegAuth_RegAccount_Request = 10;
inline bool CSMsgBody::has_m_stregauth_regaccount_request() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_regaccount_request() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_stregauth_regaccount_request() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_stregauth_regaccount_request() {
  if (m_stregauth_regaccount_request_ != NULL) m_stregauth_regaccount_request_->::RegAuth_RegAccount_Request::Clear();
  clear_has_m_stregauth_regaccount_request();
}
inline const ::RegAuth_RegAccount_Request& CSMsgBody::m_stregauth_regaccount_request() const {
  return m_stregauth_regaccount_request_ != NULL ? *m_stregauth_regaccount_request_ : *default_instance_->m_stregauth_regaccount_request_;
}
inline ::RegAuth_RegAccount_Request* CSMsgBody::mutable_m_stregauth_regaccount_request() {
  set_has_m_stregauth_regaccount_request();
  if (m_stregauth_regaccount_request_ == NULL) m_stregauth_regaccount_request_ = new ::RegAuth_RegAccount_Request;
  return m_stregauth_regaccount_request_;
}
inline ::RegAuth_RegAccount_Request* CSMsgBody::release_m_stregauth_regaccount_request() {
  clear_has_m_stregauth_regaccount_request();
  ::RegAuth_RegAccount_Request* temp = m_stregauth_regaccount_request_;
  m_stregauth_regaccount_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_regaccount_request(::RegAuth_RegAccount_Request* m_stregauth_regaccount_request) {
  delete m_stregauth_regaccount_request_;
  m_stregauth_regaccount_request_ = m_stregauth_regaccount_request;
  if (m_stregauth_regaccount_request) {
    set_has_m_stregauth_regaccount_request();
  } else {
    clear_has_m_stregauth_regaccount_request();
  }
}

// optional .RegAuth_RegAccount_Response m_stRegAuth_RegAccount_Response = 11;
inline bool CSMsgBody::has_m_stregauth_regaccount_response() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_regaccount_response() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_stregauth_regaccount_response() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_stregauth_regaccount_response() {
  if (m_stregauth_regaccount_response_ != NULL) m_stregauth_regaccount_response_->::RegAuth_RegAccount_Response::Clear();
  clear_has_m_stregauth_regaccount_response();
}
inline const ::RegAuth_RegAccount_Response& CSMsgBody::m_stregauth_regaccount_response() const {
  return m_stregauth_regaccount_response_ != NULL ? *m_stregauth_regaccount_response_ : *default_instance_->m_stregauth_regaccount_response_;
}
inline ::RegAuth_RegAccount_Response* CSMsgBody::mutable_m_stregauth_regaccount_response() {
  set_has_m_stregauth_regaccount_response();
  if (m_stregauth_regaccount_response_ == NULL) m_stregauth_regaccount_response_ = new ::RegAuth_RegAccount_Response;
  return m_stregauth_regaccount_response_;
}
inline ::RegAuth_RegAccount_Response* CSMsgBody::release_m_stregauth_regaccount_response() {
  clear_has_m_stregauth_regaccount_response();
  ::RegAuth_RegAccount_Response* temp = m_stregauth_regaccount_response_;
  m_stregauth_regaccount_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_regaccount_response(::RegAuth_RegAccount_Response* m_stregauth_regaccount_response) {
  delete m_stregauth_regaccount_response_;
  m_stregauth_regaccount_response_ = m_stregauth_regaccount_response;
  if (m_stregauth_regaccount_response) {
    set_has_m_stregauth_regaccount_response();
  } else {
    clear_has_m_stregauth_regaccount_response();
  }
}

// optional .RegAuth_AuthAccount_Request m_stRegAuth_AuthAccount_Request = 12;
inline bool CSMsgBody::has_m_stregauth_authaccount_request() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_authaccount_request() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stregauth_authaccount_request() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stregauth_authaccount_request() {
  if (m_stregauth_authaccount_request_ != NULL) m_stregauth_authaccount_request_->::RegAuth_AuthAccount_Request::Clear();
  clear_has_m_stregauth_authaccount_request();
}
inline const ::RegAuth_AuthAccount_Request& CSMsgBody::m_stregauth_authaccount_request() const {
  return m_stregauth_authaccount_request_ != NULL ? *m_stregauth_authaccount_request_ : *default_instance_->m_stregauth_authaccount_request_;
}
inline ::RegAuth_AuthAccount_Request* CSMsgBody::mutable_m_stregauth_authaccount_request() {
  set_has_m_stregauth_authaccount_request();
  if (m_stregauth_authaccount_request_ == NULL) m_stregauth_authaccount_request_ = new ::RegAuth_AuthAccount_Request;
  return m_stregauth_authaccount_request_;
}
inline ::RegAuth_AuthAccount_Request* CSMsgBody::release_m_stregauth_authaccount_request() {
  clear_has_m_stregauth_authaccount_request();
  ::RegAuth_AuthAccount_Request* temp = m_stregauth_authaccount_request_;
  m_stregauth_authaccount_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_authaccount_request(::RegAuth_AuthAccount_Request* m_stregauth_authaccount_request) {
  delete m_stregauth_authaccount_request_;
  m_stregauth_authaccount_request_ = m_stregauth_authaccount_request;
  if (m_stregauth_authaccount_request) {
    set_has_m_stregauth_authaccount_request();
  } else {
    clear_has_m_stregauth_authaccount_request();
  }
}

// optional .RegAuth_AuthAccount_Response m_stRegAuth_AuthAccount_Response = 13;
inline bool CSMsgBody::has_m_stregauth_authaccount_response() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_authaccount_response() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stregauth_authaccount_response() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stregauth_authaccount_response() {
  if (m_stregauth_authaccount_response_ != NULL) m_stregauth_authaccount_response_->::RegAuth_AuthAccount_Response::Clear();
  clear_has_m_stregauth_authaccount_response();
}
inline const ::RegAuth_AuthAccount_Response& CSMsgBody::m_stregauth_authaccount_response() const {
  return m_stregauth_authaccount_response_ != NULL ? *m_stregauth_authaccount_response_ : *default_instance_->m_stregauth_authaccount_response_;
}
inline ::RegAuth_AuthAccount_Response* CSMsgBody::mutable_m_stregauth_authaccount_response() {
  set_has_m_stregauth_authaccount_response();
  if (m_stregauth_authaccount_response_ == NULL) m_stregauth_authaccount_response_ = new ::RegAuth_AuthAccount_Response;
  return m_stregauth_authaccount_response_;
}
inline ::RegAuth_AuthAccount_Response* CSMsgBody::release_m_stregauth_authaccount_response() {
  clear_has_m_stregauth_authaccount_response();
  ::RegAuth_AuthAccount_Response* temp = m_stregauth_authaccount_response_;
  m_stregauth_authaccount_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_authaccount_response(::RegAuth_AuthAccount_Response* m_stregauth_authaccount_response) {
  delete m_stregauth_authaccount_response_;
  m_stregauth_authaccount_response_ = m_stregauth_authaccount_response;
  if (m_stregauth_authaccount_response) {
    set_has_m_stregauth_authaccount_response();
  } else {
    clear_has_m_stregauth_authaccount_response();
  }
}

// optional .RegAuth_PlatformAuth_Request m_stRegAuth_PlatformAuth_Request = 16;
inline bool CSMsgBody::has_m_stregauth_platformauth_request() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_platformauth_request() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_stregauth_platformauth_request() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_stregauth_platformauth_request() {
  if (m_stregauth_platformauth_request_ != NULL) m_stregauth_platformauth_request_->::RegAuth_PlatformAuth_Request::Clear();
  clear_has_m_stregauth_platformauth_request();
}
inline const ::RegAuth_PlatformAuth_Request& CSMsgBody::m_stregauth_platformauth_request() const {
  return m_stregauth_platformauth_request_ != NULL ? *m_stregauth_platformauth_request_ : *default_instance_->m_stregauth_platformauth_request_;
}
inline ::RegAuth_PlatformAuth_Request* CSMsgBody::mutable_m_stregauth_platformauth_request() {
  set_has_m_stregauth_platformauth_request();
  if (m_stregauth_platformauth_request_ == NULL) m_stregauth_platformauth_request_ = new ::RegAuth_PlatformAuth_Request;
  return m_stregauth_platformauth_request_;
}
inline ::RegAuth_PlatformAuth_Request* CSMsgBody::release_m_stregauth_platformauth_request() {
  clear_has_m_stregauth_platformauth_request();
  ::RegAuth_PlatformAuth_Request* temp = m_stregauth_platformauth_request_;
  m_stregauth_platformauth_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_platformauth_request(::RegAuth_PlatformAuth_Request* m_stregauth_platformauth_request) {
  delete m_stregauth_platformauth_request_;
  m_stregauth_platformauth_request_ = m_stregauth_platformauth_request;
  if (m_stregauth_platformauth_request) {
    set_has_m_stregauth_platformauth_request();
  } else {
    clear_has_m_stregauth_platformauth_request();
  }
}

// optional .RegAuth_PlatformAuth_Response m_stRegAuth_PlatformAuth_Response = 17;
inline bool CSMsgBody::has_m_stregauth_platformauth_response() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_stregauth_platformauth_response() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_stregauth_platformauth_response() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_stregauth_platformauth_response() {
  if (m_stregauth_platformauth_response_ != NULL) m_stregauth_platformauth_response_->::RegAuth_PlatformAuth_Response::Clear();
  clear_has_m_stregauth_platformauth_response();
}
inline const ::RegAuth_PlatformAuth_Response& CSMsgBody::m_stregauth_platformauth_response() const {
  return m_stregauth_platformauth_response_ != NULL ? *m_stregauth_platformauth_response_ : *default_instance_->m_stregauth_platformauth_response_;
}
inline ::RegAuth_PlatformAuth_Response* CSMsgBody::mutable_m_stregauth_platformauth_response() {
  set_has_m_stregauth_platformauth_response();
  if (m_stregauth_platformauth_response_ == NULL) m_stregauth_platformauth_response_ = new ::RegAuth_PlatformAuth_Response;
  return m_stregauth_platformauth_response_;
}
inline ::RegAuth_PlatformAuth_Response* CSMsgBody::release_m_stregauth_platformauth_response() {
  clear_has_m_stregauth_platformauth_response();
  ::RegAuth_PlatformAuth_Response* temp = m_stregauth_platformauth_response_;
  m_stregauth_platformauth_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stregauth_platformauth_response(::RegAuth_PlatformAuth_Response* m_stregauth_platformauth_response) {
  delete m_stregauth_platformauth_response_;
  m_stregauth_platformauth_response_ = m_stregauth_platformauth_response;
  if (m_stregauth_platformauth_response) {
    set_has_m_stregauth_platformauth_response();
  } else {
    clear_has_m_stregauth_platformauth_response();
  }
}

// optional .World_WriteLog_Request m_stWorld_WriteLog_Request = 20;
inline bool CSMsgBody::has_m_stworld_writelog_request() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_writelog_request() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_stworld_writelog_request() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_stworld_writelog_request() {
  if (m_stworld_writelog_request_ != NULL) m_stworld_writelog_request_->::World_WriteLog_Request::Clear();
  clear_has_m_stworld_writelog_request();
}
inline const ::World_WriteLog_Request& CSMsgBody::m_stworld_writelog_request() const {
  return m_stworld_writelog_request_ != NULL ? *m_stworld_writelog_request_ : *default_instance_->m_stworld_writelog_request_;
}
inline ::World_WriteLog_Request* CSMsgBody::mutable_m_stworld_writelog_request() {
  set_has_m_stworld_writelog_request();
  if (m_stworld_writelog_request_ == NULL) m_stworld_writelog_request_ = new ::World_WriteLog_Request;
  return m_stworld_writelog_request_;
}
inline ::World_WriteLog_Request* CSMsgBody::release_m_stworld_writelog_request() {
  clear_has_m_stworld_writelog_request();
  ::World_WriteLog_Request* temp = m_stworld_writelog_request_;
  m_stworld_writelog_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_writelog_request(::World_WriteLog_Request* m_stworld_writelog_request) {
  delete m_stworld_writelog_request_;
  m_stworld_writelog_request_ = m_stworld_writelog_request;
  if (m_stworld_writelog_request) {
    set_has_m_stworld_writelog_request();
  } else {
    clear_has_m_stworld_writelog_request();
  }
}

// optional .CreateRole_Account_Request m_stAccountCreateRoleRequest = 21;
inline bool CSMsgBody::has_m_staccountcreaterolerequest() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountcreaterolerequest() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_staccountcreaterolerequest() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_staccountcreaterolerequest() {
  if (m_staccountcreaterolerequest_ != NULL) m_staccountcreaterolerequest_->::CreateRole_Account_Request::Clear();
  clear_has_m_staccountcreaterolerequest();
}
inline const ::CreateRole_Account_Request& CSMsgBody::m_staccountcreaterolerequest() const {
  return m_staccountcreaterolerequest_ != NULL ? *m_staccountcreaterolerequest_ : *default_instance_->m_staccountcreaterolerequest_;
}
inline ::CreateRole_Account_Request* CSMsgBody::mutable_m_staccountcreaterolerequest() {
  set_has_m_staccountcreaterolerequest();
  if (m_staccountcreaterolerequest_ == NULL) m_staccountcreaterolerequest_ = new ::CreateRole_Account_Request;
  return m_staccountcreaterolerequest_;
}
inline ::CreateRole_Account_Request* CSMsgBody::release_m_staccountcreaterolerequest() {
  clear_has_m_staccountcreaterolerequest();
  ::CreateRole_Account_Request* temp = m_staccountcreaterolerequest_;
  m_staccountcreaterolerequest_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountcreaterolerequest(::CreateRole_Account_Request* m_staccountcreaterolerequest) {
  delete m_staccountcreaterolerequest_;
  m_staccountcreaterolerequest_ = m_staccountcreaterolerequest;
  if (m_staccountcreaterolerequest) {
    set_has_m_staccountcreaterolerequest();
  } else {
    clear_has_m_staccountcreaterolerequest();
  }
}

// optional .CreateRole_Account_Response m_stAccountCreateRoleResponse = 22;
inline bool CSMsgBody::has_m_staccountcreateroleresponse() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountcreateroleresponse() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_staccountcreateroleresponse() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_staccountcreateroleresponse() {
  if (m_staccountcreateroleresponse_ != NULL) m_staccountcreateroleresponse_->::CreateRole_Account_Response::Clear();
  clear_has_m_staccountcreateroleresponse();
}
inline const ::CreateRole_Account_Response& CSMsgBody::m_staccountcreateroleresponse() const {
  return m_staccountcreateroleresponse_ != NULL ? *m_staccountcreateroleresponse_ : *default_instance_->m_staccountcreateroleresponse_;
}
inline ::CreateRole_Account_Response* CSMsgBody::mutable_m_staccountcreateroleresponse() {
  set_has_m_staccountcreateroleresponse();
  if (m_staccountcreateroleresponse_ == NULL) m_staccountcreateroleresponse_ = new ::CreateRole_Account_Response;
  return m_staccountcreateroleresponse_;
}
inline ::CreateRole_Account_Response* CSMsgBody::release_m_staccountcreateroleresponse() {
  clear_has_m_staccountcreateroleresponse();
  ::CreateRole_Account_Response* temp = m_staccountcreateroleresponse_;
  m_staccountcreateroleresponse_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountcreateroleresponse(::CreateRole_Account_Response* m_staccountcreateroleresponse) {
  delete m_staccountcreateroleresponse_;
  m_staccountcreateroleresponse_ = m_staccountcreateroleresponse;
  if (m_staccountcreateroleresponse) {
    set_has_m_staccountcreateroleresponse();
  } else {
    clear_has_m_staccountcreateroleresponse();
  }
}

// optional .Account_ListZone_Request m_stAccount_ListZone_Request = 23;
inline bool CSMsgBody::has_m_staccount_listzone_request() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_staccount_listzone_request() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_staccount_listzone_request() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_staccount_listzone_request() {
  if (m_staccount_listzone_request_ != NULL) m_staccount_listzone_request_->::Account_ListZone_Request::Clear();
  clear_has_m_staccount_listzone_request();
}
inline const ::Account_ListZone_Request& CSMsgBody::m_staccount_listzone_request() const {
  return m_staccount_listzone_request_ != NULL ? *m_staccount_listzone_request_ : *default_instance_->m_staccount_listzone_request_;
}
inline ::Account_ListZone_Request* CSMsgBody::mutable_m_staccount_listzone_request() {
  set_has_m_staccount_listzone_request();
  if (m_staccount_listzone_request_ == NULL) m_staccount_listzone_request_ = new ::Account_ListZone_Request;
  return m_staccount_listzone_request_;
}
inline ::Account_ListZone_Request* CSMsgBody::release_m_staccount_listzone_request() {
  clear_has_m_staccount_listzone_request();
  ::Account_ListZone_Request* temp = m_staccount_listzone_request_;
  m_staccount_listzone_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccount_listzone_request(::Account_ListZone_Request* m_staccount_listzone_request) {
  delete m_staccount_listzone_request_;
  m_staccount_listzone_request_ = m_staccount_listzone_request;
  if (m_staccount_listzone_request) {
    set_has_m_staccount_listzone_request();
  } else {
    clear_has_m_staccount_listzone_request();
  }
}

// optional .Account_ListZone_Response m_stAccount_ListZone_Response = 24;
inline bool CSMsgBody::has_m_staccount_listzone_response() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_staccount_listzone_response() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_staccount_listzone_response() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_staccount_listzone_response() {
  if (m_staccount_listzone_response_ != NULL) m_staccount_listzone_response_->::Account_ListZone_Response::Clear();
  clear_has_m_staccount_listzone_response();
}
inline const ::Account_ListZone_Response& CSMsgBody::m_staccount_listzone_response() const {
  return m_staccount_listzone_response_ != NULL ? *m_staccount_listzone_response_ : *default_instance_->m_staccount_listzone_response_;
}
inline ::Account_ListZone_Response* CSMsgBody::mutable_m_staccount_listzone_response() {
  set_has_m_staccount_listzone_response();
  if (m_staccount_listzone_response_ == NULL) m_staccount_listzone_response_ = new ::Account_ListZone_Response;
  return m_staccount_listzone_response_;
}
inline ::Account_ListZone_Response* CSMsgBody::release_m_staccount_listzone_response() {
  clear_has_m_staccount_listzone_response();
  ::Account_ListZone_Response* temp = m_staccount_listzone_response_;
  m_staccount_listzone_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccount_listzone_response(::Account_ListZone_Response* m_staccount_listzone_response) {
  delete m_staccount_listzone_response_;
  m_staccount_listzone_response_ = m_staccount_listzone_response;
  if (m_staccount_listzone_response) {
    set_has_m_staccount_listzone_response();
  } else {
    clear_has_m_staccount_listzone_response();
  }
}

// optional .DeleteRole_Account_Request m_stAccountDeleteRoleRequest = 25;
inline bool CSMsgBody::has_m_staccountdeleterolerequest() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdeleterolerequest() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_staccountdeleterolerequest() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_staccountdeleterolerequest() {
  if (m_staccountdeleterolerequest_ != NULL) m_staccountdeleterolerequest_->::DeleteRole_Account_Request::Clear();
  clear_has_m_staccountdeleterolerequest();
}
inline const ::DeleteRole_Account_Request& CSMsgBody::m_staccountdeleterolerequest() const {
  return m_staccountdeleterolerequest_ != NULL ? *m_staccountdeleterolerequest_ : *default_instance_->m_staccountdeleterolerequest_;
}
inline ::DeleteRole_Account_Request* CSMsgBody::mutable_m_staccountdeleterolerequest() {
  set_has_m_staccountdeleterolerequest();
  if (m_staccountdeleterolerequest_ == NULL) m_staccountdeleterolerequest_ = new ::DeleteRole_Account_Request;
  return m_staccountdeleterolerequest_;
}
inline ::DeleteRole_Account_Request* CSMsgBody::release_m_staccountdeleterolerequest() {
  clear_has_m_staccountdeleterolerequest();
  ::DeleteRole_Account_Request* temp = m_staccountdeleterolerequest_;
  m_staccountdeleterolerequest_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdeleterolerequest(::DeleteRole_Account_Request* m_staccountdeleterolerequest) {
  delete m_staccountdeleterolerequest_;
  m_staccountdeleterolerequest_ = m_staccountdeleterolerequest;
  if (m_staccountdeleterolerequest) {
    set_has_m_staccountdeleterolerequest();
  } else {
    clear_has_m_staccountdeleterolerequest();
  }
}

// optional .DeleteRole_Account_Response m_stAccountDeleteRoleResponse = 26;
inline bool CSMsgBody::has_m_staccountdeleteroleresponse() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountdeleteroleresponse() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_staccountdeleteroleresponse() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_staccountdeleteroleresponse() {
  if (m_staccountdeleteroleresponse_ != NULL) m_staccountdeleteroleresponse_->::DeleteRole_Account_Response::Clear();
  clear_has_m_staccountdeleteroleresponse();
}
inline const ::DeleteRole_Account_Response& CSMsgBody::m_staccountdeleteroleresponse() const {
  return m_staccountdeleteroleresponse_ != NULL ? *m_staccountdeleteroleresponse_ : *default_instance_->m_staccountdeleteroleresponse_;
}
inline ::DeleteRole_Account_Response* CSMsgBody::mutable_m_staccountdeleteroleresponse() {
  set_has_m_staccountdeleteroleresponse();
  if (m_staccountdeleteroleresponse_ == NULL) m_staccountdeleteroleresponse_ = new ::DeleteRole_Account_Response;
  return m_staccountdeleteroleresponse_;
}
inline ::DeleteRole_Account_Response* CSMsgBody::release_m_staccountdeleteroleresponse() {
  clear_has_m_staccountdeleteroleresponse();
  ::DeleteRole_Account_Response* temp = m_staccountdeleteroleresponse_;
  m_staccountdeleteroleresponse_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountdeleteroleresponse(::DeleteRole_Account_Response* m_staccountdeleteroleresponse) {
  delete m_staccountdeleteroleresponse_;
  m_staccountdeleteroleresponse_ = m_staccountdeleteroleresponse;
  if (m_staccountdeleteroleresponse) {
    set_has_m_staccountdeleteroleresponse();
  } else {
    clear_has_m_staccountdeleteroleresponse();
  }
}

// optional .Account_ListRole_Request m_stAccountListRoleRequest = 27;
inline bool CSMsgBody::has_m_staccountlistrolerequest() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountlistrolerequest() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_staccountlistrolerequest() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_staccountlistrolerequest() {
  if (m_staccountlistrolerequest_ != NULL) m_staccountlistrolerequest_->::Account_ListRole_Request::Clear();
  clear_has_m_staccountlistrolerequest();
}
inline const ::Account_ListRole_Request& CSMsgBody::m_staccountlistrolerequest() const {
  return m_staccountlistrolerequest_ != NULL ? *m_staccountlistrolerequest_ : *default_instance_->m_staccountlistrolerequest_;
}
inline ::Account_ListRole_Request* CSMsgBody::mutable_m_staccountlistrolerequest() {
  set_has_m_staccountlistrolerequest();
  if (m_staccountlistrolerequest_ == NULL) m_staccountlistrolerequest_ = new ::Account_ListRole_Request;
  return m_staccountlistrolerequest_;
}
inline ::Account_ListRole_Request* CSMsgBody::release_m_staccountlistrolerequest() {
  clear_has_m_staccountlistrolerequest();
  ::Account_ListRole_Request* temp = m_staccountlistrolerequest_;
  m_staccountlistrolerequest_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountlistrolerequest(::Account_ListRole_Request* m_staccountlistrolerequest) {
  delete m_staccountlistrolerequest_;
  m_staccountlistrolerequest_ = m_staccountlistrolerequest;
  if (m_staccountlistrolerequest) {
    set_has_m_staccountlistrolerequest();
  } else {
    clear_has_m_staccountlistrolerequest();
  }
}

// optional .Account_ListRole_Response m_stAccountListRoleResponse = 28;
inline bool CSMsgBody::has_m_staccountlistroleresponse() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_staccountlistroleresponse() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_staccountlistroleresponse() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_staccountlistroleresponse() {
  if (m_staccountlistroleresponse_ != NULL) m_staccountlistroleresponse_->::Account_ListRole_Response::Clear();
  clear_has_m_staccountlistroleresponse();
}
inline const ::Account_ListRole_Response& CSMsgBody::m_staccountlistroleresponse() const {
  return m_staccountlistroleresponse_ != NULL ? *m_staccountlistroleresponse_ : *default_instance_->m_staccountlistroleresponse_;
}
inline ::Account_ListRole_Response* CSMsgBody::mutable_m_staccountlistroleresponse() {
  set_has_m_staccountlistroleresponse();
  if (m_staccountlistroleresponse_ == NULL) m_staccountlistroleresponse_ = new ::Account_ListRole_Response;
  return m_staccountlistroleresponse_;
}
inline ::Account_ListRole_Response* CSMsgBody::release_m_staccountlistroleresponse() {
  clear_has_m_staccountlistroleresponse();
  ::Account_ListRole_Response* temp = m_staccountlistroleresponse_;
  m_staccountlistroleresponse_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staccountlistroleresponse(::Account_ListRole_Response* m_staccountlistroleresponse) {
  delete m_staccountlistroleresponse_;
  m_staccountlistroleresponse_ = m_staccountlistroleresponse;
  if (m_staccountlistroleresponse) {
    set_has_m_staccountlistroleresponse();
  } else {
    clear_has_m_staccountlistroleresponse();
  }
}

// optional .LogoutServer_Response m_stLogoutServer_Response = 30;
inline bool CSMsgBody::has_m_stlogoutserver_response() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_stlogoutserver_response() {
  _has_bits_[0] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_stlogoutserver_response() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_stlogoutserver_response() {
  if (m_stlogoutserver_response_ != NULL) m_stlogoutserver_response_->::LogoutServer_Response::Clear();
  clear_has_m_stlogoutserver_response();
}
inline const ::LogoutServer_Response& CSMsgBody::m_stlogoutserver_response() const {
  return m_stlogoutserver_response_ != NULL ? *m_stlogoutserver_response_ : *default_instance_->m_stlogoutserver_response_;
}
inline ::LogoutServer_Response* CSMsgBody::mutable_m_stlogoutserver_response() {
  set_has_m_stlogoutserver_response();
  if (m_stlogoutserver_response_ == NULL) m_stlogoutserver_response_ = new ::LogoutServer_Response;
  return m_stlogoutserver_response_;
}
inline ::LogoutServer_Response* CSMsgBody::release_m_stlogoutserver_response() {
  clear_has_m_stlogoutserver_response();
  ::LogoutServer_Response* temp = m_stlogoutserver_response_;
  m_stlogoutserver_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stlogoutserver_response(::LogoutServer_Response* m_stlogoutserver_response) {
  delete m_stlogoutserver_response_;
  m_stlogoutserver_response_ = m_stlogoutserver_response;
  if (m_stlogoutserver_response) {
    set_has_m_stlogoutserver_response();
  } else {
    clear_has_m_stlogoutserver_response();
  }
}

// optional .World_ZoneChanged_Notify m_stWorld_ZoneChanged_Notify = 31;
inline bool CSMsgBody::has_m_stworld_zonechanged_notify() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_zonechanged_notify() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stworld_zonechanged_notify() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stworld_zonechanged_notify() {
  if (m_stworld_zonechanged_notify_ != NULL) m_stworld_zonechanged_notify_->::World_ZoneChanged_Notify::Clear();
  clear_has_m_stworld_zonechanged_notify();
}
inline const ::World_ZoneChanged_Notify& CSMsgBody::m_stworld_zonechanged_notify() const {
  return m_stworld_zonechanged_notify_ != NULL ? *m_stworld_zonechanged_notify_ : *default_instance_->m_stworld_zonechanged_notify_;
}
inline ::World_ZoneChanged_Notify* CSMsgBody::mutable_m_stworld_zonechanged_notify() {
  set_has_m_stworld_zonechanged_notify();
  if (m_stworld_zonechanged_notify_ == NULL) m_stworld_zonechanged_notify_ = new ::World_ZoneChanged_Notify;
  return m_stworld_zonechanged_notify_;
}
inline ::World_ZoneChanged_Notify* CSMsgBody::release_m_stworld_zonechanged_notify() {
  clear_has_m_stworld_zonechanged_notify();
  ::World_ZoneChanged_Notify* temp = m_stworld_zonechanged_notify_;
  m_stworld_zonechanged_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_zonechanged_notify(::World_ZoneChanged_Notify* m_stworld_zonechanged_notify) {
  delete m_stworld_zonechanged_notify_;
  m_stworld_zonechanged_notify_ = m_stworld_zonechanged_notify;
  if (m_stworld_zonechanged_notify) {
    set_has_m_stworld_zonechanged_notify();
  } else {
    clear_has_m_stworld_zonechanged_notify();
  }
}

// optional .World_CreateRole_Request m_stWorld_CreateRole_Request = 32;
inline bool CSMsgBody::has_m_stworld_createrole_request() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_createrole_request() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stworld_createrole_request() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stworld_createrole_request() {
  if (m_stworld_createrole_request_ != NULL) m_stworld_createrole_request_->::World_CreateRole_Request::Clear();
  clear_has_m_stworld_createrole_request();
}
inline const ::World_CreateRole_Request& CSMsgBody::m_stworld_createrole_request() const {
  return m_stworld_createrole_request_ != NULL ? *m_stworld_createrole_request_ : *default_instance_->m_stworld_createrole_request_;
}
inline ::World_CreateRole_Request* CSMsgBody::mutable_m_stworld_createrole_request() {
  set_has_m_stworld_createrole_request();
  if (m_stworld_createrole_request_ == NULL) m_stworld_createrole_request_ = new ::World_CreateRole_Request;
  return m_stworld_createrole_request_;
}
inline ::World_CreateRole_Request* CSMsgBody::release_m_stworld_createrole_request() {
  clear_has_m_stworld_createrole_request();
  ::World_CreateRole_Request* temp = m_stworld_createrole_request_;
  m_stworld_createrole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_createrole_request(::World_CreateRole_Request* m_stworld_createrole_request) {
  delete m_stworld_createrole_request_;
  m_stworld_createrole_request_ = m_stworld_createrole_request;
  if (m_stworld_createrole_request) {
    set_has_m_stworld_createrole_request();
  } else {
    clear_has_m_stworld_createrole_request();
  }
}

// optional .World_CreateRole_Response m_stWorld_CreateRole_Response = 33;
inline bool CSMsgBody::has_m_stworld_createrole_response() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_createrole_response() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stworld_createrole_response() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stworld_createrole_response() {
  if (m_stworld_createrole_response_ != NULL) m_stworld_createrole_response_->::World_CreateRole_Response::Clear();
  clear_has_m_stworld_createrole_response();
}
inline const ::World_CreateRole_Response& CSMsgBody::m_stworld_createrole_response() const {
  return m_stworld_createrole_response_ != NULL ? *m_stworld_createrole_response_ : *default_instance_->m_stworld_createrole_response_;
}
inline ::World_CreateRole_Response* CSMsgBody::mutable_m_stworld_createrole_response() {
  set_has_m_stworld_createrole_response();
  if (m_stworld_createrole_response_ == NULL) m_stworld_createrole_response_ = new ::World_CreateRole_Response;
  return m_stworld_createrole_response_;
}
inline ::World_CreateRole_Response* CSMsgBody::release_m_stworld_createrole_response() {
  clear_has_m_stworld_createrole_response();
  ::World_CreateRole_Response* temp = m_stworld_createrole_response_;
  m_stworld_createrole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_createrole_response(::World_CreateRole_Response* m_stworld_createrole_response) {
  delete m_stworld_createrole_response_;
  m_stworld_createrole_response_ = m_stworld_createrole_response;
  if (m_stworld_createrole_response) {
    set_has_m_stworld_createrole_response();
  } else {
    clear_has_m_stworld_createrole_response();
  }
}

// optional .World_FetchRole_Request m_stWorld_FetchRole_Request = 34;
inline bool CSMsgBody::has_m_stworld_fetchrole_request() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_fetchrole_request() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stworld_fetchrole_request() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stworld_fetchrole_request() {
  if (m_stworld_fetchrole_request_ != NULL) m_stworld_fetchrole_request_->::World_FetchRole_Request::Clear();
  clear_has_m_stworld_fetchrole_request();
}
inline const ::World_FetchRole_Request& CSMsgBody::m_stworld_fetchrole_request() const {
  return m_stworld_fetchrole_request_ != NULL ? *m_stworld_fetchrole_request_ : *default_instance_->m_stworld_fetchrole_request_;
}
inline ::World_FetchRole_Request* CSMsgBody::mutable_m_stworld_fetchrole_request() {
  set_has_m_stworld_fetchrole_request();
  if (m_stworld_fetchrole_request_ == NULL) m_stworld_fetchrole_request_ = new ::World_FetchRole_Request;
  return m_stworld_fetchrole_request_;
}
inline ::World_FetchRole_Request* CSMsgBody::release_m_stworld_fetchrole_request() {
  clear_has_m_stworld_fetchrole_request();
  ::World_FetchRole_Request* temp = m_stworld_fetchrole_request_;
  m_stworld_fetchrole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_fetchrole_request(::World_FetchRole_Request* m_stworld_fetchrole_request) {
  delete m_stworld_fetchrole_request_;
  m_stworld_fetchrole_request_ = m_stworld_fetchrole_request;
  if (m_stworld_fetchrole_request) {
    set_has_m_stworld_fetchrole_request();
  } else {
    clear_has_m_stworld_fetchrole_request();
  }
}

// optional .World_FetchRole_Response m_stWorld_FetchRole_Response = 35;
inline bool CSMsgBody::has_m_stworld_fetchrole_response() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_fetchrole_response() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stworld_fetchrole_response() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stworld_fetchrole_response() {
  if (m_stworld_fetchrole_response_ != NULL) m_stworld_fetchrole_response_->::World_FetchRole_Response::Clear();
  clear_has_m_stworld_fetchrole_response();
}
inline const ::World_FetchRole_Response& CSMsgBody::m_stworld_fetchrole_response() const {
  return m_stworld_fetchrole_response_ != NULL ? *m_stworld_fetchrole_response_ : *default_instance_->m_stworld_fetchrole_response_;
}
inline ::World_FetchRole_Response* CSMsgBody::mutable_m_stworld_fetchrole_response() {
  set_has_m_stworld_fetchrole_response();
  if (m_stworld_fetchrole_response_ == NULL) m_stworld_fetchrole_response_ = new ::World_FetchRole_Response;
  return m_stworld_fetchrole_response_;
}
inline ::World_FetchRole_Response* CSMsgBody::release_m_stworld_fetchrole_response() {
  clear_has_m_stworld_fetchrole_response();
  ::World_FetchRole_Response* temp = m_stworld_fetchrole_response_;
  m_stworld_fetchrole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_fetchrole_response(::World_FetchRole_Response* m_stworld_fetchrole_response) {
  delete m_stworld_fetchrole_response_;
  m_stworld_fetchrole_response_ = m_stworld_fetchrole_response;
  if (m_stworld_fetchrole_response) {
    set_has_m_stworld_fetchrole_response();
  } else {
    clear_has_m_stworld_fetchrole_response();
  }
}

// optional .Zone_Logout_Notify m_stZone_Logout_Notify = 36;
inline bool CSMsgBody::has_m_stzone_logout_notify() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_logout_notify() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stzone_logout_notify() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stzone_logout_notify() {
  if (m_stzone_logout_notify_ != NULL) m_stzone_logout_notify_->::Zone_Logout_Notify::Clear();
  clear_has_m_stzone_logout_notify();
}
inline const ::Zone_Logout_Notify& CSMsgBody::m_stzone_logout_notify() const {
  return m_stzone_logout_notify_ != NULL ? *m_stzone_logout_notify_ : *default_instance_->m_stzone_logout_notify_;
}
inline ::Zone_Logout_Notify* CSMsgBody::mutable_m_stzone_logout_notify() {
  set_has_m_stzone_logout_notify();
  if (m_stzone_logout_notify_ == NULL) m_stzone_logout_notify_ = new ::Zone_Logout_Notify;
  return m_stzone_logout_notify_;
}
inline ::Zone_Logout_Notify* CSMsgBody::release_m_stzone_logout_notify() {
  clear_has_m_stzone_logout_notify();
  ::Zone_Logout_Notify* temp = m_stzone_logout_notify_;
  m_stzone_logout_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_logout_notify(::Zone_Logout_Notify* m_stzone_logout_notify) {
  delete m_stzone_logout_notify_;
  m_stzone_logout_notify_ = m_stzone_logout_notify;
  if (m_stzone_logout_notify) {
    set_has_m_stzone_logout_notify();
  } else {
    clear_has_m_stzone_logout_notify();
  }
}

// optional .World_UpdateRole_Request m_stWorld_UpdateRole_Request = 37;
inline bool CSMsgBody::has_m_stworld_updaterole_request() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updaterole_request() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stworld_updaterole_request() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stworld_updaterole_request() {
  if (m_stworld_updaterole_request_ != NULL) m_stworld_updaterole_request_->::World_UpdateRole_Request::Clear();
  clear_has_m_stworld_updaterole_request();
}
inline const ::World_UpdateRole_Request& CSMsgBody::m_stworld_updaterole_request() const {
  return m_stworld_updaterole_request_ != NULL ? *m_stworld_updaterole_request_ : *default_instance_->m_stworld_updaterole_request_;
}
inline ::World_UpdateRole_Request* CSMsgBody::mutable_m_stworld_updaterole_request() {
  set_has_m_stworld_updaterole_request();
  if (m_stworld_updaterole_request_ == NULL) m_stworld_updaterole_request_ = new ::World_UpdateRole_Request;
  return m_stworld_updaterole_request_;
}
inline ::World_UpdateRole_Request* CSMsgBody::release_m_stworld_updaterole_request() {
  clear_has_m_stworld_updaterole_request();
  ::World_UpdateRole_Request* temp = m_stworld_updaterole_request_;
  m_stworld_updaterole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updaterole_request(::World_UpdateRole_Request* m_stworld_updaterole_request) {
  delete m_stworld_updaterole_request_;
  m_stworld_updaterole_request_ = m_stworld_updaterole_request;
  if (m_stworld_updaterole_request) {
    set_has_m_stworld_updaterole_request();
  } else {
    clear_has_m_stworld_updaterole_request();
  }
}

// optional .World_UpdateRole_Response m_stWorld_UpdateRole_Response = 38;
inline bool CSMsgBody::has_m_stworld_updaterole_response() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updaterole_response() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stworld_updaterole_response() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stworld_updaterole_response() {
  if (m_stworld_updaterole_response_ != NULL) m_stworld_updaterole_response_->::World_UpdateRole_Response::Clear();
  clear_has_m_stworld_updaterole_response();
}
inline const ::World_UpdateRole_Response& CSMsgBody::m_stworld_updaterole_response() const {
  return m_stworld_updaterole_response_ != NULL ? *m_stworld_updaterole_response_ : *default_instance_->m_stworld_updaterole_response_;
}
inline ::World_UpdateRole_Response* CSMsgBody::mutable_m_stworld_updaterole_response() {
  set_has_m_stworld_updaterole_response();
  if (m_stworld_updaterole_response_ == NULL) m_stworld_updaterole_response_ = new ::World_UpdateRole_Response;
  return m_stworld_updaterole_response_;
}
inline ::World_UpdateRole_Response* CSMsgBody::release_m_stworld_updaterole_response() {
  clear_has_m_stworld_updaterole_response();
  ::World_UpdateRole_Response* temp = m_stworld_updaterole_response_;
  m_stworld_updaterole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updaterole_response(::World_UpdateRole_Response* m_stworld_updaterole_response) {
  delete m_stworld_updaterole_response_;
  m_stworld_updaterole_response_ = m_stworld_updaterole_response;
  if (m_stworld_updaterole_response) {
    set_has_m_stworld_updaterole_response();
  } else {
    clear_has_m_stworld_updaterole_response();
  }
}

// optional .Zone_GetFriendInfo_Request m_stZone_GetFriendInfo_Request = 39;
inline bool CSMsgBody::has_m_stzone_getfriendinfo_request() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getfriendinfo_request() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getfriendinfo_request() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CSMsgBody::clear_m_stzone_getfriendinfo_request() {
  if (m_stzone_getfriendinfo_request_ != NULL) m_stzone_getfriendinfo_request_->::Zone_GetFriendInfo_Request::Clear();
  clear_has_m_stzone_getfriendinfo_request();
}
inline const ::Zone_GetFriendInfo_Request& CSMsgBody::m_stzone_getfriendinfo_request() const {
  return m_stzone_getfriendinfo_request_ != NULL ? *m_stzone_getfriendinfo_request_ : *default_instance_->m_stzone_getfriendinfo_request_;
}
inline ::Zone_GetFriendInfo_Request* CSMsgBody::mutable_m_stzone_getfriendinfo_request() {
  set_has_m_stzone_getfriendinfo_request();
  if (m_stzone_getfriendinfo_request_ == NULL) m_stzone_getfriendinfo_request_ = new ::Zone_GetFriendInfo_Request;
  return m_stzone_getfriendinfo_request_;
}
inline ::Zone_GetFriendInfo_Request* CSMsgBody::release_m_stzone_getfriendinfo_request() {
  clear_has_m_stzone_getfriendinfo_request();
  ::Zone_GetFriendInfo_Request* temp = m_stzone_getfriendinfo_request_;
  m_stzone_getfriendinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getfriendinfo_request(::Zone_GetFriendInfo_Request* m_stzone_getfriendinfo_request) {
  delete m_stzone_getfriendinfo_request_;
  m_stzone_getfriendinfo_request_ = m_stzone_getfriendinfo_request;
  if (m_stzone_getfriendinfo_request) {
    set_has_m_stzone_getfriendinfo_request();
  } else {
    clear_has_m_stzone_getfriendinfo_request();
  }
}

// optional .Zone_GetFriendInfo_Response m_stZone_GetFriendInfo_Response = 40;
inline bool CSMsgBody::has_m_stzone_getfriendinfo_response() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getfriendinfo_response() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getfriendinfo_response() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CSMsgBody::clear_m_stzone_getfriendinfo_response() {
  if (m_stzone_getfriendinfo_response_ != NULL) m_stzone_getfriendinfo_response_->::Zone_GetFriendInfo_Response::Clear();
  clear_has_m_stzone_getfriendinfo_response();
}
inline const ::Zone_GetFriendInfo_Response& CSMsgBody::m_stzone_getfriendinfo_response() const {
  return m_stzone_getfriendinfo_response_ != NULL ? *m_stzone_getfriendinfo_response_ : *default_instance_->m_stzone_getfriendinfo_response_;
}
inline ::Zone_GetFriendInfo_Response* CSMsgBody::mutable_m_stzone_getfriendinfo_response() {
  set_has_m_stzone_getfriendinfo_response();
  if (m_stzone_getfriendinfo_response_ == NULL) m_stzone_getfriendinfo_response_ = new ::Zone_GetFriendInfo_Response;
  return m_stzone_getfriendinfo_response_;
}
inline ::Zone_GetFriendInfo_Response* CSMsgBody::release_m_stzone_getfriendinfo_response() {
  clear_has_m_stzone_getfriendinfo_response();
  ::Zone_GetFriendInfo_Response* temp = m_stzone_getfriendinfo_response_;
  m_stzone_getfriendinfo_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getfriendinfo_response(::Zone_GetFriendInfo_Response* m_stzone_getfriendinfo_response) {
  delete m_stzone_getfriendinfo_response_;
  m_stzone_getfriendinfo_response_ = m_stzone_getfriendinfo_response;
  if (m_stzone_getfriendinfo_response) {
    set_has_m_stzone_getfriendinfo_response();
  } else {
    clear_has_m_stzone_getfriendinfo_response();
  }
}

// optional .Zone_LoginServer_Request m_stZone_LoginServer_Request = 41;
inline bool CSMsgBody::has_m_stzone_loginserver_request() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_loginserver_request() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stzone_loginserver_request() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stzone_loginserver_request() {
  if (m_stzone_loginserver_request_ != NULL) m_stzone_loginserver_request_->::Zone_LoginServer_Request::Clear();
  clear_has_m_stzone_loginserver_request();
}
inline const ::Zone_LoginServer_Request& CSMsgBody::m_stzone_loginserver_request() const {
  return m_stzone_loginserver_request_ != NULL ? *m_stzone_loginserver_request_ : *default_instance_->m_stzone_loginserver_request_;
}
inline ::Zone_LoginServer_Request* CSMsgBody::mutable_m_stzone_loginserver_request() {
  set_has_m_stzone_loginserver_request();
  if (m_stzone_loginserver_request_ == NULL) m_stzone_loginserver_request_ = new ::Zone_LoginServer_Request;
  return m_stzone_loginserver_request_;
}
inline ::Zone_LoginServer_Request* CSMsgBody::release_m_stzone_loginserver_request() {
  clear_has_m_stzone_loginserver_request();
  ::Zone_LoginServer_Request* temp = m_stzone_loginserver_request_;
  m_stzone_loginserver_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_loginserver_request(::Zone_LoginServer_Request* m_stzone_loginserver_request) {
  delete m_stzone_loginserver_request_;
  m_stzone_loginserver_request_ = m_stzone_loginserver_request;
  if (m_stzone_loginserver_request) {
    set_has_m_stzone_loginserver_request();
  } else {
    clear_has_m_stzone_loginserver_request();
  }
}

// optional .Zone_LoginServer_Response m_stZone_LoginServer_Response = 42;
inline bool CSMsgBody::has_m_stzone_loginserver_response() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_loginserver_response() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stzone_loginserver_response() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stzone_loginserver_response() {
  if (m_stzone_loginserver_response_ != NULL) m_stzone_loginserver_response_->::Zone_LoginServer_Response::Clear();
  clear_has_m_stzone_loginserver_response();
}
inline const ::Zone_LoginServer_Response& CSMsgBody::m_stzone_loginserver_response() const {
  return m_stzone_loginserver_response_ != NULL ? *m_stzone_loginserver_response_ : *default_instance_->m_stzone_loginserver_response_;
}
inline ::Zone_LoginServer_Response* CSMsgBody::mutable_m_stzone_loginserver_response() {
  set_has_m_stzone_loginserver_response();
  if (m_stzone_loginserver_response_ == NULL) m_stzone_loginserver_response_ = new ::Zone_LoginServer_Response;
  return m_stzone_loginserver_response_;
}
inline ::Zone_LoginServer_Response* CSMsgBody::release_m_stzone_loginserver_response() {
  clear_has_m_stzone_loginserver_response();
  ::Zone_LoginServer_Response* temp = m_stzone_loginserver_response_;
  m_stzone_loginserver_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_loginserver_response(::Zone_LoginServer_Response* m_stzone_loginserver_response) {
  delete m_stzone_loginserver_response_;
  m_stzone_loginserver_response_ = m_stzone_loginserver_response;
  if (m_stzone_loginserver_response) {
    set_has_m_stzone_loginserver_response();
  } else {
    clear_has_m_stzone_loginserver_response();
  }
}

// optional .World_KickRole_Request m_stWorld_KickRole_Request = 43;
inline bool CSMsgBody::has_m_stworld_kickrole_request() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_kickrole_request() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stworld_kickrole_request() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stworld_kickrole_request() {
  if (m_stworld_kickrole_request_ != NULL) m_stworld_kickrole_request_->::World_KickRole_Request::Clear();
  clear_has_m_stworld_kickrole_request();
}
inline const ::World_KickRole_Request& CSMsgBody::m_stworld_kickrole_request() const {
  return m_stworld_kickrole_request_ != NULL ? *m_stworld_kickrole_request_ : *default_instance_->m_stworld_kickrole_request_;
}
inline ::World_KickRole_Request* CSMsgBody::mutable_m_stworld_kickrole_request() {
  set_has_m_stworld_kickrole_request();
  if (m_stworld_kickrole_request_ == NULL) m_stworld_kickrole_request_ = new ::World_KickRole_Request;
  return m_stworld_kickrole_request_;
}
inline ::World_KickRole_Request* CSMsgBody::release_m_stworld_kickrole_request() {
  clear_has_m_stworld_kickrole_request();
  ::World_KickRole_Request* temp = m_stworld_kickrole_request_;
  m_stworld_kickrole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_kickrole_request(::World_KickRole_Request* m_stworld_kickrole_request) {
  delete m_stworld_kickrole_request_;
  m_stworld_kickrole_request_ = m_stworld_kickrole_request;
  if (m_stworld_kickrole_request) {
    set_has_m_stworld_kickrole_request();
  } else {
    clear_has_m_stworld_kickrole_request();
  }
}

// optional .World_KickRole_Response m_stWorld_KickRole_Response = 44;
inline bool CSMsgBody::has_m_stworld_kickrole_response() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_kickrole_response() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_stworld_kickrole_response() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_stworld_kickrole_response() {
  if (m_stworld_kickrole_response_ != NULL) m_stworld_kickrole_response_->::World_KickRole_Response::Clear();
  clear_has_m_stworld_kickrole_response();
}
inline const ::World_KickRole_Response& CSMsgBody::m_stworld_kickrole_response() const {
  return m_stworld_kickrole_response_ != NULL ? *m_stworld_kickrole_response_ : *default_instance_->m_stworld_kickrole_response_;
}
inline ::World_KickRole_Response* CSMsgBody::mutable_m_stworld_kickrole_response() {
  set_has_m_stworld_kickrole_response();
  if (m_stworld_kickrole_response_ == NULL) m_stworld_kickrole_response_ = new ::World_KickRole_Response;
  return m_stworld_kickrole_response_;
}
inline ::World_KickRole_Response* CSMsgBody::release_m_stworld_kickrole_response() {
  clear_has_m_stworld_kickrole_response();
  ::World_KickRole_Response* temp = m_stworld_kickrole_response_;
  m_stworld_kickrole_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_kickrole_response(::World_KickRole_Response* m_stworld_kickrole_response) {
  delete m_stworld_kickrole_response_;
  m_stworld_kickrole_response_ = m_stworld_kickrole_response;
  if (m_stworld_kickrole_response) {
    set_has_m_stworld_kickrole_response();
  } else {
    clear_has_m_stworld_kickrole_response();
  }
}

// optional .Zone_OnlineRole_Request m_stZone_OnlineRole_Request = 45;
inline bool CSMsgBody::has_m_stzone_onlinerole_request() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_onlinerole_request() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_stzone_onlinerole_request() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_stzone_onlinerole_request() {
  if (m_stzone_onlinerole_request_ != NULL) m_stzone_onlinerole_request_->::Zone_OnlineRole_Request::Clear();
  clear_has_m_stzone_onlinerole_request();
}
inline const ::Zone_OnlineRole_Request& CSMsgBody::m_stzone_onlinerole_request() const {
  return m_stzone_onlinerole_request_ != NULL ? *m_stzone_onlinerole_request_ : *default_instance_->m_stzone_onlinerole_request_;
}
inline ::Zone_OnlineRole_Request* CSMsgBody::mutable_m_stzone_onlinerole_request() {
  set_has_m_stzone_onlinerole_request();
  if (m_stzone_onlinerole_request_ == NULL) m_stzone_onlinerole_request_ = new ::Zone_OnlineRole_Request;
  return m_stzone_onlinerole_request_;
}
inline ::Zone_OnlineRole_Request* CSMsgBody::release_m_stzone_onlinerole_request() {
  clear_has_m_stzone_onlinerole_request();
  ::Zone_OnlineRole_Request* temp = m_stzone_onlinerole_request_;
  m_stzone_onlinerole_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_onlinerole_request(::Zone_OnlineRole_Request* m_stzone_onlinerole_request) {
  delete m_stzone_onlinerole_request_;
  m_stzone_onlinerole_request_ = m_stzone_onlinerole_request;
  if (m_stzone_onlinerole_request) {
    set_has_m_stzone_onlinerole_request();
  } else {
    clear_has_m_stzone_onlinerole_request();
  }
}

// optional .World_OnlineStat_Request m_stWorld_OnlineStat_Request = 46;
inline bool CSMsgBody::has_m_stworld_onlinestat_request() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_onlinestat_request() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_stworld_onlinestat_request() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_stworld_onlinestat_request() {
  if (m_stworld_onlinestat_request_ != NULL) m_stworld_onlinestat_request_->::World_OnlineStat_Request::Clear();
  clear_has_m_stworld_onlinestat_request();
}
inline const ::World_OnlineStat_Request& CSMsgBody::m_stworld_onlinestat_request() const {
  return m_stworld_onlinestat_request_ != NULL ? *m_stworld_onlinestat_request_ : *default_instance_->m_stworld_onlinestat_request_;
}
inline ::World_OnlineStat_Request* CSMsgBody::mutable_m_stworld_onlinestat_request() {
  set_has_m_stworld_onlinestat_request();
  if (m_stworld_onlinestat_request_ == NULL) m_stworld_onlinestat_request_ = new ::World_OnlineStat_Request;
  return m_stworld_onlinestat_request_;
}
inline ::World_OnlineStat_Request* CSMsgBody::release_m_stworld_onlinestat_request() {
  clear_has_m_stworld_onlinestat_request();
  ::World_OnlineStat_Request* temp = m_stworld_onlinestat_request_;
  m_stworld_onlinestat_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_onlinestat_request(::World_OnlineStat_Request* m_stworld_onlinestat_request) {
  delete m_stworld_onlinestat_request_;
  m_stworld_onlinestat_request_ = m_stworld_onlinestat_request;
  if (m_stworld_onlinestat_request) {
    set_has_m_stworld_onlinestat_request();
  } else {
    clear_has_m_stworld_onlinestat_request();
  }
}

// optional .World_OnlineStat_Response m_stWorld_OnlineStat_Response = 47;
inline bool CSMsgBody::has_m_stworld_onlinestat_response() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_onlinestat_response() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_stworld_onlinestat_response() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_stworld_onlinestat_response() {
  if (m_stworld_onlinestat_response_ != NULL) m_stworld_onlinestat_response_->::World_OnlineStat_Response::Clear();
  clear_has_m_stworld_onlinestat_response();
}
inline const ::World_OnlineStat_Response& CSMsgBody::m_stworld_onlinestat_response() const {
  return m_stworld_onlinestat_response_ != NULL ? *m_stworld_onlinestat_response_ : *default_instance_->m_stworld_onlinestat_response_;
}
inline ::World_OnlineStat_Response* CSMsgBody::mutable_m_stworld_onlinestat_response() {
  set_has_m_stworld_onlinestat_response();
  if (m_stworld_onlinestat_response_ == NULL) m_stworld_onlinestat_response_ = new ::World_OnlineStat_Response;
  return m_stworld_onlinestat_response_;
}
inline ::World_OnlineStat_Response* CSMsgBody::release_m_stworld_onlinestat_response() {
  clear_has_m_stworld_onlinestat_response();
  ::World_OnlineStat_Response* temp = m_stworld_onlinestat_response_;
  m_stworld_onlinestat_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_onlinestat_response(::World_OnlineStat_Response* m_stworld_onlinestat_response) {
  delete m_stworld_onlinestat_response_;
  m_stworld_onlinestat_response_ = m_stworld_onlinestat_response;
  if (m_stworld_onlinestat_response) {
    set_has_m_stworld_onlinestat_response();
  } else {
    clear_has_m_stworld_onlinestat_response();
  }
}

// optional .GameMaster_Request m_stZone_GameMaster_Request = 48;
inline bool CSMsgBody::has_m_stzone_gamemaster_request() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_gamemaster_request() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_stzone_gamemaster_request() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_stzone_gamemaster_request() {
  if (m_stzone_gamemaster_request_ != NULL) m_stzone_gamemaster_request_->::GameMaster_Request::Clear();
  clear_has_m_stzone_gamemaster_request();
}
inline const ::GameMaster_Request& CSMsgBody::m_stzone_gamemaster_request() const {
  return m_stzone_gamemaster_request_ != NULL ? *m_stzone_gamemaster_request_ : *default_instance_->m_stzone_gamemaster_request_;
}
inline ::GameMaster_Request* CSMsgBody::mutable_m_stzone_gamemaster_request() {
  set_has_m_stzone_gamemaster_request();
  if (m_stzone_gamemaster_request_ == NULL) m_stzone_gamemaster_request_ = new ::GameMaster_Request;
  return m_stzone_gamemaster_request_;
}
inline ::GameMaster_Request* CSMsgBody::release_m_stzone_gamemaster_request() {
  clear_has_m_stzone_gamemaster_request();
  ::GameMaster_Request* temp = m_stzone_gamemaster_request_;
  m_stzone_gamemaster_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_gamemaster_request(::GameMaster_Request* m_stzone_gamemaster_request) {
  delete m_stzone_gamemaster_request_;
  m_stzone_gamemaster_request_ = m_stzone_gamemaster_request;
  if (m_stzone_gamemaster_request) {
    set_has_m_stzone_gamemaster_request();
  } else {
    clear_has_m_stzone_gamemaster_request();
  }
}

// optional .GameMaster_Response m_stZone_GameMaster_Response = 49;
inline bool CSMsgBody::has_m_stzone_gamemaster_response() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_gamemaster_response() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stzone_gamemaster_response() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stzone_gamemaster_response() {
  if (m_stzone_gamemaster_response_ != NULL) m_stzone_gamemaster_response_->::GameMaster_Response::Clear();
  clear_has_m_stzone_gamemaster_response();
}
inline const ::GameMaster_Response& CSMsgBody::m_stzone_gamemaster_response() const {
  return m_stzone_gamemaster_response_ != NULL ? *m_stzone_gamemaster_response_ : *default_instance_->m_stzone_gamemaster_response_;
}
inline ::GameMaster_Response* CSMsgBody::mutable_m_stzone_gamemaster_response() {
  set_has_m_stzone_gamemaster_response();
  if (m_stzone_gamemaster_response_ == NULL) m_stzone_gamemaster_response_ = new ::GameMaster_Response;
  return m_stzone_gamemaster_response_;
}
inline ::GameMaster_Response* CSMsgBody::release_m_stzone_gamemaster_response() {
  clear_has_m_stzone_gamemaster_response();
  ::GameMaster_Response* temp = m_stzone_gamemaster_response_;
  m_stzone_gamemaster_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_gamemaster_response(::GameMaster_Response* m_stzone_gamemaster_response) {
  delete m_stzone_gamemaster_response_;
  m_stzone_gamemaster_response_ = m_stzone_gamemaster_response;
  if (m_stzone_gamemaster_response) {
    set_has_m_stzone_gamemaster_response();
  } else {
    clear_has_m_stzone_gamemaster_response();
  }
}

// optional .GameMaster_Request m_stWorld_GameMaster_Request = 50;
inline bool CSMsgBody::has_m_stworld_gamemaster_request() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_gamemaster_request() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stworld_gamemaster_request() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stworld_gamemaster_request() {
  if (m_stworld_gamemaster_request_ != NULL) m_stworld_gamemaster_request_->::GameMaster_Request::Clear();
  clear_has_m_stworld_gamemaster_request();
}
inline const ::GameMaster_Request& CSMsgBody::m_stworld_gamemaster_request() const {
  return m_stworld_gamemaster_request_ != NULL ? *m_stworld_gamemaster_request_ : *default_instance_->m_stworld_gamemaster_request_;
}
inline ::GameMaster_Request* CSMsgBody::mutable_m_stworld_gamemaster_request() {
  set_has_m_stworld_gamemaster_request();
  if (m_stworld_gamemaster_request_ == NULL) m_stworld_gamemaster_request_ = new ::GameMaster_Request;
  return m_stworld_gamemaster_request_;
}
inline ::GameMaster_Request* CSMsgBody::release_m_stworld_gamemaster_request() {
  clear_has_m_stworld_gamemaster_request();
  ::GameMaster_Request* temp = m_stworld_gamemaster_request_;
  m_stworld_gamemaster_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_gamemaster_request(::GameMaster_Request* m_stworld_gamemaster_request) {
  delete m_stworld_gamemaster_request_;
  m_stworld_gamemaster_request_ = m_stworld_gamemaster_request;
  if (m_stworld_gamemaster_request) {
    set_has_m_stworld_gamemaster_request();
  } else {
    clear_has_m_stworld_gamemaster_request();
  }
}

// optional .GameMaster_Response m_stWorld_GameMaster_Response = 51;
inline bool CSMsgBody::has_m_stworld_gamemaster_response() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_gamemaster_response() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_stworld_gamemaster_response() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_stworld_gamemaster_response() {
  if (m_stworld_gamemaster_response_ != NULL) m_stworld_gamemaster_response_->::GameMaster_Response::Clear();
  clear_has_m_stworld_gamemaster_response();
}
inline const ::GameMaster_Response& CSMsgBody::m_stworld_gamemaster_response() const {
  return m_stworld_gamemaster_response_ != NULL ? *m_stworld_gamemaster_response_ : *default_instance_->m_stworld_gamemaster_response_;
}
inline ::GameMaster_Response* CSMsgBody::mutable_m_stworld_gamemaster_response() {
  set_has_m_stworld_gamemaster_response();
  if (m_stworld_gamemaster_response_ == NULL) m_stworld_gamemaster_response_ = new ::GameMaster_Response;
  return m_stworld_gamemaster_response_;
}
inline ::GameMaster_Response* CSMsgBody::release_m_stworld_gamemaster_response() {
  clear_has_m_stworld_gamemaster_response();
  ::GameMaster_Response* temp = m_stworld_gamemaster_response_;
  m_stworld_gamemaster_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_gamemaster_response(::GameMaster_Response* m_stworld_gamemaster_response) {
  delete m_stworld_gamemaster_response_;
  m_stworld_gamemaster_response_ = m_stworld_gamemaster_response;
  if (m_stworld_gamemaster_response) {
    set_has_m_stworld_gamemaster_response();
  } else {
    clear_has_m_stworld_gamemaster_response();
  }
}

// optional .AddNewName_Request m_stAddNewName_Request = 52;
inline bool CSMsgBody::has_m_staddnewname_request() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_staddnewname_request() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_staddnewname_request() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_staddnewname_request() {
  if (m_staddnewname_request_ != NULL) m_staddnewname_request_->::AddNewName_Request::Clear();
  clear_has_m_staddnewname_request();
}
inline const ::AddNewName_Request& CSMsgBody::m_staddnewname_request() const {
  return m_staddnewname_request_ != NULL ? *m_staddnewname_request_ : *default_instance_->m_staddnewname_request_;
}
inline ::AddNewName_Request* CSMsgBody::mutable_m_staddnewname_request() {
  set_has_m_staddnewname_request();
  if (m_staddnewname_request_ == NULL) m_staddnewname_request_ = new ::AddNewName_Request;
  return m_staddnewname_request_;
}
inline ::AddNewName_Request* CSMsgBody::release_m_staddnewname_request() {
  clear_has_m_staddnewname_request();
  ::AddNewName_Request* temp = m_staddnewname_request_;
  m_staddnewname_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staddnewname_request(::AddNewName_Request* m_staddnewname_request) {
  delete m_staddnewname_request_;
  m_staddnewname_request_ = m_staddnewname_request;
  if (m_staddnewname_request) {
    set_has_m_staddnewname_request();
  } else {
    clear_has_m_staddnewname_request();
  }
}

// optional .AddNewName_Response m_stAddNewName_Response = 53;
inline bool CSMsgBody::has_m_staddnewname_response() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_staddnewname_response() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_staddnewname_response() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_staddnewname_response() {
  if (m_staddnewname_response_ != NULL) m_staddnewname_response_->::AddNewName_Response::Clear();
  clear_has_m_staddnewname_response();
}
inline const ::AddNewName_Response& CSMsgBody::m_staddnewname_response() const {
  return m_staddnewname_response_ != NULL ? *m_staddnewname_response_ : *default_instance_->m_staddnewname_response_;
}
inline ::AddNewName_Response* CSMsgBody::mutable_m_staddnewname_response() {
  set_has_m_staddnewname_response();
  if (m_staddnewname_response_ == NULL) m_staddnewname_response_ = new ::AddNewName_Response;
  return m_staddnewname_response_;
}
inline ::AddNewName_Response* CSMsgBody::release_m_staddnewname_response() {
  clear_has_m_staddnewname_response();
  ::AddNewName_Response* temp = m_staddnewname_response_;
  m_staddnewname_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_staddnewname_response(::AddNewName_Response* m_staddnewname_response) {
  delete m_staddnewname_response_;
  m_staddnewname_response_ = m_staddnewname_response;
  if (m_staddnewname_response) {
    set_has_m_staddnewname_response();
  } else {
    clear_has_m_staddnewname_response();
  }
}

// optional .DeleteName_Request m_stDeleteName_Request = 54;
inline bool CSMsgBody::has_m_stdeletename_request() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_stdeletename_request() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_stdeletename_request() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_stdeletename_request() {
  if (m_stdeletename_request_ != NULL) m_stdeletename_request_->::DeleteName_Request::Clear();
  clear_has_m_stdeletename_request();
}
inline const ::DeleteName_Request& CSMsgBody::m_stdeletename_request() const {
  return m_stdeletename_request_ != NULL ? *m_stdeletename_request_ : *default_instance_->m_stdeletename_request_;
}
inline ::DeleteName_Request* CSMsgBody::mutable_m_stdeletename_request() {
  set_has_m_stdeletename_request();
  if (m_stdeletename_request_ == NULL) m_stdeletename_request_ = new ::DeleteName_Request;
  return m_stdeletename_request_;
}
inline ::DeleteName_Request* CSMsgBody::release_m_stdeletename_request() {
  clear_has_m_stdeletename_request();
  ::DeleteName_Request* temp = m_stdeletename_request_;
  m_stdeletename_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stdeletename_request(::DeleteName_Request* m_stdeletename_request) {
  delete m_stdeletename_request_;
  m_stdeletename_request_ = m_stdeletename_request;
  if (m_stdeletename_request) {
    set_has_m_stdeletename_request();
  } else {
    clear_has_m_stdeletename_request();
  }
}

// optional .DeleteName_Response m_stDeleteName_Response = 55;
inline bool CSMsgBody::has_m_stdeletename_response() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_stdeletename_response() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_stdeletename_response() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_stdeletename_response() {
  if (m_stdeletename_response_ != NULL) m_stdeletename_response_->::DeleteName_Response::Clear();
  clear_has_m_stdeletename_response();
}
inline const ::DeleteName_Response& CSMsgBody::m_stdeletename_response() const {
  return m_stdeletename_response_ != NULL ? *m_stdeletename_response_ : *default_instance_->m_stdeletename_response_;
}
inline ::DeleteName_Response* CSMsgBody::mutable_m_stdeletename_response() {
  set_has_m_stdeletename_response();
  if (m_stdeletename_response_ == NULL) m_stdeletename_response_ = new ::DeleteName_Response;
  return m_stdeletename_response_;
}
inline ::DeleteName_Response* CSMsgBody::release_m_stdeletename_response() {
  clear_has_m_stdeletename_response();
  ::DeleteName_Response* temp = m_stdeletename_response_;
  m_stdeletename_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stdeletename_response(::DeleteName_Response* m_stdeletename_response) {
  delete m_stdeletename_response_;
  m_stdeletename_response_ = m_stdeletename_response;
  if (m_stdeletename_response) {
    set_has_m_stdeletename_response();
  } else {
    clear_has_m_stdeletename_response();
  }
}

// optional .Zone_LoginServer_Notify m_stLoginServer_Notify = 57;
inline bool CSMsgBody::has_m_stloginserver_notify() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_stloginserver_notify() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_stloginserver_notify() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_stloginserver_notify() {
  if (m_stloginserver_notify_ != NULL) m_stloginserver_notify_->::Zone_LoginServer_Notify::Clear();
  clear_has_m_stloginserver_notify();
}
inline const ::Zone_LoginServer_Notify& CSMsgBody::m_stloginserver_notify() const {
  return m_stloginserver_notify_ != NULL ? *m_stloginserver_notify_ : *default_instance_->m_stloginserver_notify_;
}
inline ::Zone_LoginServer_Notify* CSMsgBody::mutable_m_stloginserver_notify() {
  set_has_m_stloginserver_notify();
  if (m_stloginserver_notify_ == NULL) m_stloginserver_notify_ = new ::Zone_LoginServer_Notify;
  return m_stloginserver_notify_;
}
inline ::Zone_LoginServer_Notify* CSMsgBody::release_m_stloginserver_notify() {
  clear_has_m_stloginserver_notify();
  ::Zone_LoginServer_Notify* temp = m_stloginserver_notify_;
  m_stloginserver_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stloginserver_notify(::Zone_LoginServer_Notify* m_stloginserver_notify) {
  delete m_stloginserver_notify_;
  m_stloginserver_notify_ = m_stloginserver_notify;
  if (m_stloginserver_notify) {
    set_has_m_stloginserver_notify();
  } else {
    clear_has_m_stloginserver_notify();
  }
}

// optional .Zone_RepOpera_Request m_stZone_RepOpera_Request = 64;
inline bool CSMsgBody::has_m_stzone_repopera_request() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_repopera_request() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_stzone_repopera_request() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_stzone_repopera_request() {
  if (m_stzone_repopera_request_ != NULL) m_stzone_repopera_request_->::Zone_RepOpera_Request::Clear();
  clear_has_m_stzone_repopera_request();
}
inline const ::Zone_RepOpera_Request& CSMsgBody::m_stzone_repopera_request() const {
  return m_stzone_repopera_request_ != NULL ? *m_stzone_repopera_request_ : *default_instance_->m_stzone_repopera_request_;
}
inline ::Zone_RepOpera_Request* CSMsgBody::mutable_m_stzone_repopera_request() {
  set_has_m_stzone_repopera_request();
  if (m_stzone_repopera_request_ == NULL) m_stzone_repopera_request_ = new ::Zone_RepOpera_Request;
  return m_stzone_repopera_request_;
}
inline ::Zone_RepOpera_Request* CSMsgBody::release_m_stzone_repopera_request() {
  clear_has_m_stzone_repopera_request();
  ::Zone_RepOpera_Request* temp = m_stzone_repopera_request_;
  m_stzone_repopera_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_repopera_request(::Zone_RepOpera_Request* m_stzone_repopera_request) {
  delete m_stzone_repopera_request_;
  m_stzone_repopera_request_ = m_stzone_repopera_request;
  if (m_stzone_repopera_request) {
    set_has_m_stzone_repopera_request();
  } else {
    clear_has_m_stzone_repopera_request();
  }
}

// optional .Zone_RepOpera_Response m_stZone_RepOpera_Response = 65;
inline bool CSMsgBody::has_m_stzone_repopera_response() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_repopera_response() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_stzone_repopera_response() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_stzone_repopera_response() {
  if (m_stzone_repopera_response_ != NULL) m_stzone_repopera_response_->::Zone_RepOpera_Response::Clear();
  clear_has_m_stzone_repopera_response();
}
inline const ::Zone_RepOpera_Response& CSMsgBody::m_stzone_repopera_response() const {
  return m_stzone_repopera_response_ != NULL ? *m_stzone_repopera_response_ : *default_instance_->m_stzone_repopera_response_;
}
inline ::Zone_RepOpera_Response* CSMsgBody::mutable_m_stzone_repopera_response() {
  set_has_m_stzone_repopera_response();
  if (m_stzone_repopera_response_ == NULL) m_stzone_repopera_response_ = new ::Zone_RepOpera_Response;
  return m_stzone_repopera_response_;
}
inline ::Zone_RepOpera_Response* CSMsgBody::release_m_stzone_repopera_response() {
  clear_has_m_stzone_repopera_response();
  ::Zone_RepOpera_Response* temp = m_stzone_repopera_response_;
  m_stzone_repopera_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_repopera_response(::Zone_RepOpera_Response* m_stzone_repopera_response) {
  delete m_stzone_repopera_response_;
  m_stzone_repopera_response_ = m_stzone_repopera_response;
  if (m_stzone_repopera_response) {
    set_has_m_stzone_repopera_response();
  } else {
    clear_has_m_stzone_repopera_response();
  }
}

// optional .Zone_RepChange_Notify m_stZone_RepChange_Notify = 70;
inline bool CSMsgBody::has_m_stzone_repchange_notify() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_repchange_notify() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_stzone_repchange_notify() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_stzone_repchange_notify() {
  if (m_stzone_repchange_notify_ != NULL) m_stzone_repchange_notify_->::Zone_RepChange_Notify::Clear();
  clear_has_m_stzone_repchange_notify();
}
inline const ::Zone_RepChange_Notify& CSMsgBody::m_stzone_repchange_notify() const {
  return m_stzone_repchange_notify_ != NULL ? *m_stzone_repchange_notify_ : *default_instance_->m_stzone_repchange_notify_;
}
inline ::Zone_RepChange_Notify* CSMsgBody::mutable_m_stzone_repchange_notify() {
  set_has_m_stzone_repchange_notify();
  if (m_stzone_repchange_notify_ == NULL) m_stzone_repchange_notify_ = new ::Zone_RepChange_Notify;
  return m_stzone_repchange_notify_;
}
inline ::Zone_RepChange_Notify* CSMsgBody::release_m_stzone_repchange_notify() {
  clear_has_m_stzone_repchange_notify();
  ::Zone_RepChange_Notify* temp = m_stzone_repchange_notify_;
  m_stzone_repchange_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_repchange_notify(::Zone_RepChange_Notify* m_stzone_repchange_notify) {
  delete m_stzone_repchange_notify_;
  m_stzone_repchange_notify_ = m_stzone_repchange_notify;
  if (m_stzone_repchange_notify) {
    set_has_m_stzone_repchange_notify();
  } else {
    clear_has_m_stzone_repchange_notify();
  }
}

// optional .World_OnlineExchange_Request m_stWorld_OnlineExchange_Request = 71;
inline bool CSMsgBody::has_m_stworld_onlineexchange_request() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_onlineexchange_request() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_stworld_onlineexchange_request() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_stworld_onlineexchange_request() {
  if (m_stworld_onlineexchange_request_ != NULL) m_stworld_onlineexchange_request_->::World_OnlineExchange_Request::Clear();
  clear_has_m_stworld_onlineexchange_request();
}
inline const ::World_OnlineExchange_Request& CSMsgBody::m_stworld_onlineexchange_request() const {
  return m_stworld_onlineexchange_request_ != NULL ? *m_stworld_onlineexchange_request_ : *default_instance_->m_stworld_onlineexchange_request_;
}
inline ::World_OnlineExchange_Request* CSMsgBody::mutable_m_stworld_onlineexchange_request() {
  set_has_m_stworld_onlineexchange_request();
  if (m_stworld_onlineexchange_request_ == NULL) m_stworld_onlineexchange_request_ = new ::World_OnlineExchange_Request;
  return m_stworld_onlineexchange_request_;
}
inline ::World_OnlineExchange_Request* CSMsgBody::release_m_stworld_onlineexchange_request() {
  clear_has_m_stworld_onlineexchange_request();
  ::World_OnlineExchange_Request* temp = m_stworld_onlineexchange_request_;
  m_stworld_onlineexchange_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_onlineexchange_request(::World_OnlineExchange_Request* m_stworld_onlineexchange_request) {
  delete m_stworld_onlineexchange_request_;
  m_stworld_onlineexchange_request_ = m_stworld_onlineexchange_request;
  if (m_stworld_onlineexchange_request) {
    set_has_m_stworld_onlineexchange_request();
  } else {
    clear_has_m_stworld_onlineexchange_request();
  }
}

// optional .World_OnlineExchange_Response m_stWorld_OnlineExchange_Response = 72;
inline bool CSMsgBody::has_m_stworld_onlineexchange_response() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_onlineexchange_response() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_stworld_onlineexchange_response() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_stworld_onlineexchange_response() {
  if (m_stworld_onlineexchange_response_ != NULL) m_stworld_onlineexchange_response_->::World_OnlineExchange_Response::Clear();
  clear_has_m_stworld_onlineexchange_response();
}
inline const ::World_OnlineExchange_Response& CSMsgBody::m_stworld_onlineexchange_response() const {
  return m_stworld_onlineexchange_response_ != NULL ? *m_stworld_onlineexchange_response_ : *default_instance_->m_stworld_onlineexchange_response_;
}
inline ::World_OnlineExchange_Response* CSMsgBody::mutable_m_stworld_onlineexchange_response() {
  set_has_m_stworld_onlineexchange_response();
  if (m_stworld_onlineexchange_response_ == NULL) m_stworld_onlineexchange_response_ = new ::World_OnlineExchange_Response;
  return m_stworld_onlineexchange_response_;
}
inline ::World_OnlineExchange_Response* CSMsgBody::release_m_stworld_onlineexchange_response() {
  clear_has_m_stworld_onlineexchange_response();
  ::World_OnlineExchange_Response* temp = m_stworld_onlineexchange_response_;
  m_stworld_onlineexchange_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_onlineexchange_response(::World_OnlineExchange_Response* m_stworld_onlineexchange_response) {
  delete m_stworld_onlineexchange_response_;
  m_stworld_onlineexchange_response_ = m_stworld_onlineexchange_response;
  if (m_stworld_onlineexchange_response) {
    set_has_m_stworld_onlineexchange_response();
  } else {
    clear_has_m_stworld_onlineexchange_response();
  }
}

// optional .Zone_ResourceChange_Notify m_stZone_ResourceChange_Notify = 73;
inline bool CSMsgBody::has_m_stzone_resourcechange_notify() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_resourcechange_notify() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_stzone_resourcechange_notify() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_stzone_resourcechange_notify() {
  if (m_stzone_resourcechange_notify_ != NULL) m_stzone_resourcechange_notify_->::Zone_ResourceChange_Notify::Clear();
  clear_has_m_stzone_resourcechange_notify();
}
inline const ::Zone_ResourceChange_Notify& CSMsgBody::m_stzone_resourcechange_notify() const {
  return m_stzone_resourcechange_notify_ != NULL ? *m_stzone_resourcechange_notify_ : *default_instance_->m_stzone_resourcechange_notify_;
}
inline ::Zone_ResourceChange_Notify* CSMsgBody::mutable_m_stzone_resourcechange_notify() {
  set_has_m_stzone_resourcechange_notify();
  if (m_stzone_resourcechange_notify_ == NULL) m_stzone_resourcechange_notify_ = new ::Zone_ResourceChange_Notify;
  return m_stzone_resourcechange_notify_;
}
inline ::Zone_ResourceChange_Notify* CSMsgBody::release_m_stzone_resourcechange_notify() {
  clear_has_m_stzone_resourcechange_notify();
  ::Zone_ResourceChange_Notify* temp = m_stzone_resourcechange_notify_;
  m_stzone_resourcechange_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_resourcechange_notify(::Zone_ResourceChange_Notify* m_stzone_resourcechange_notify) {
  delete m_stzone_resourcechange_notify_;
  m_stzone_resourcechange_notify_ = m_stzone_resourcechange_notify;
  if (m_stzone_resourcechange_notify) {
    set_has_m_stzone_resourcechange_notify();
  } else {
    clear_has_m_stzone_resourcechange_notify();
  }
}

// optional .Zone_Chat_Request m_stZone_Chat_Request = 76;
inline bool CSMsgBody::has_m_stzone_chat_request() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_chat_request() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stzone_chat_request() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stzone_chat_request() {
  if (m_stzone_chat_request_ != NULL) m_stzone_chat_request_->::Zone_Chat_Request::Clear();
  clear_has_m_stzone_chat_request();
}
inline const ::Zone_Chat_Request& CSMsgBody::m_stzone_chat_request() const {
  return m_stzone_chat_request_ != NULL ? *m_stzone_chat_request_ : *default_instance_->m_stzone_chat_request_;
}
inline ::Zone_Chat_Request* CSMsgBody::mutable_m_stzone_chat_request() {
  set_has_m_stzone_chat_request();
  if (m_stzone_chat_request_ == NULL) m_stzone_chat_request_ = new ::Zone_Chat_Request;
  return m_stzone_chat_request_;
}
inline ::Zone_Chat_Request* CSMsgBody::release_m_stzone_chat_request() {
  clear_has_m_stzone_chat_request();
  ::Zone_Chat_Request* temp = m_stzone_chat_request_;
  m_stzone_chat_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_chat_request(::Zone_Chat_Request* m_stzone_chat_request) {
  delete m_stzone_chat_request_;
  m_stzone_chat_request_ = m_stzone_chat_request;
  if (m_stzone_chat_request) {
    set_has_m_stzone_chat_request();
  } else {
    clear_has_m_stzone_chat_request();
  }
}

// optional .Zone_Chat_Response m_stZone_Chat_Response = 77;
inline bool CSMsgBody::has_m_stzone_chat_response() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_chat_response() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stzone_chat_response() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stzone_chat_response() {
  if (m_stzone_chat_response_ != NULL) m_stzone_chat_response_->::Zone_Chat_Response::Clear();
  clear_has_m_stzone_chat_response();
}
inline const ::Zone_Chat_Response& CSMsgBody::m_stzone_chat_response() const {
  return m_stzone_chat_response_ != NULL ? *m_stzone_chat_response_ : *default_instance_->m_stzone_chat_response_;
}
inline ::Zone_Chat_Response* CSMsgBody::mutable_m_stzone_chat_response() {
  set_has_m_stzone_chat_response();
  if (m_stzone_chat_response_ == NULL) m_stzone_chat_response_ = new ::Zone_Chat_Response;
  return m_stzone_chat_response_;
}
inline ::Zone_Chat_Response* CSMsgBody::release_m_stzone_chat_response() {
  clear_has_m_stzone_chat_response();
  ::Zone_Chat_Response* temp = m_stzone_chat_response_;
  m_stzone_chat_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_chat_response(::Zone_Chat_Response* m_stzone_chat_response) {
  delete m_stzone_chat_response_;
  m_stzone_chat_response_ = m_stzone_chat_response;
  if (m_stzone_chat_response) {
    set_has_m_stzone_chat_response();
  } else {
    clear_has_m_stzone_chat_response();
  }
}

// optional .World_Chat_Notify m_stWorld_Chat_Notify = 78;
inline bool CSMsgBody::has_m_stworld_chat_notify() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_chat_notify() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stworld_chat_notify() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stworld_chat_notify() {
  if (m_stworld_chat_notify_ != NULL) m_stworld_chat_notify_->::World_Chat_Notify::Clear();
  clear_has_m_stworld_chat_notify();
}
inline const ::World_Chat_Notify& CSMsgBody::m_stworld_chat_notify() const {
  return m_stworld_chat_notify_ != NULL ? *m_stworld_chat_notify_ : *default_instance_->m_stworld_chat_notify_;
}
inline ::World_Chat_Notify* CSMsgBody::mutable_m_stworld_chat_notify() {
  set_has_m_stworld_chat_notify();
  if (m_stworld_chat_notify_ == NULL) m_stworld_chat_notify_ = new ::World_Chat_Notify;
  return m_stworld_chat_notify_;
}
inline ::World_Chat_Notify* CSMsgBody::release_m_stworld_chat_notify() {
  clear_has_m_stworld_chat_notify();
  ::World_Chat_Notify* temp = m_stworld_chat_notify_;
  m_stworld_chat_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_chat_notify(::World_Chat_Notify* m_stworld_chat_notify) {
  delete m_stworld_chat_notify_;
  m_stworld_chat_notify_ = m_stworld_chat_notify;
  if (m_stworld_chat_notify) {
    set_has_m_stworld_chat_notify();
  } else {
    clear_has_m_stworld_chat_notify();
  }
}

// optional .Zone_DoFish_Request m_stZone_DoFish_Request = 81;
inline bool CSMsgBody::has_m_stzone_dofish_request() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_dofish_request() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stzone_dofish_request() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stzone_dofish_request() {
  if (m_stzone_dofish_request_ != NULL) m_stzone_dofish_request_->::Zone_DoFish_Request::Clear();
  clear_has_m_stzone_dofish_request();
}
inline const ::Zone_DoFish_Request& CSMsgBody::m_stzone_dofish_request() const {
  return m_stzone_dofish_request_ != NULL ? *m_stzone_dofish_request_ : *default_instance_->m_stzone_dofish_request_;
}
inline ::Zone_DoFish_Request* CSMsgBody::mutable_m_stzone_dofish_request() {
  set_has_m_stzone_dofish_request();
  if (m_stzone_dofish_request_ == NULL) m_stzone_dofish_request_ = new ::Zone_DoFish_Request;
  return m_stzone_dofish_request_;
}
inline ::Zone_DoFish_Request* CSMsgBody::release_m_stzone_dofish_request() {
  clear_has_m_stzone_dofish_request();
  ::Zone_DoFish_Request* temp = m_stzone_dofish_request_;
  m_stzone_dofish_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_dofish_request(::Zone_DoFish_Request* m_stzone_dofish_request) {
  delete m_stzone_dofish_request_;
  m_stzone_dofish_request_ = m_stzone_dofish_request;
  if (m_stzone_dofish_request) {
    set_has_m_stzone_dofish_request();
  } else {
    clear_has_m_stzone_dofish_request();
  }
}

// optional .Zone_DoFish_Response m_stZone_DoFish_Response = 82;
inline bool CSMsgBody::has_m_stzone_dofish_response() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_dofish_response() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stzone_dofish_response() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stzone_dofish_response() {
  if (m_stzone_dofish_response_ != NULL) m_stzone_dofish_response_->::Zone_DoFish_Response::Clear();
  clear_has_m_stzone_dofish_response();
}
inline const ::Zone_DoFish_Response& CSMsgBody::m_stzone_dofish_response() const {
  return m_stzone_dofish_response_ != NULL ? *m_stzone_dofish_response_ : *default_instance_->m_stzone_dofish_response_;
}
inline ::Zone_DoFish_Response* CSMsgBody::mutable_m_stzone_dofish_response() {
  set_has_m_stzone_dofish_response();
  if (m_stzone_dofish_response_ == NULL) m_stzone_dofish_response_ = new ::Zone_DoFish_Response;
  return m_stzone_dofish_response_;
}
inline ::Zone_DoFish_Response* CSMsgBody::release_m_stzone_dofish_response() {
  clear_has_m_stzone_dofish_response();
  ::Zone_DoFish_Response* temp = m_stzone_dofish_response_;
  m_stzone_dofish_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_dofish_response(::Zone_DoFish_Response* m_stzone_dofish_response) {
  delete m_stzone_dofish_response_;
  m_stzone_dofish_response_ = m_stzone_dofish_response;
  if (m_stzone_dofish_response) {
    set_has_m_stzone_dofish_response();
  } else {
    clear_has_m_stzone_dofish_response();
  }
}

// optional .Zone_FormTime_Notify m_stZone_FormTime_Notify = 83;
inline bool CSMsgBody::has_m_stzone_formtime_notify() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_formtime_notify() {
  _has_bits_[1] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stzone_formtime_notify() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stzone_formtime_notify() {
  if (m_stzone_formtime_notify_ != NULL) m_stzone_formtime_notify_->::Zone_FormTime_Notify::Clear();
  clear_has_m_stzone_formtime_notify();
}
inline const ::Zone_FormTime_Notify& CSMsgBody::m_stzone_formtime_notify() const {
  return m_stzone_formtime_notify_ != NULL ? *m_stzone_formtime_notify_ : *default_instance_->m_stzone_formtime_notify_;
}
inline ::Zone_FormTime_Notify* CSMsgBody::mutable_m_stzone_formtime_notify() {
  set_has_m_stzone_formtime_notify();
  if (m_stzone_formtime_notify_ == NULL) m_stzone_formtime_notify_ = new ::Zone_FormTime_Notify;
  return m_stzone_formtime_notify_;
}
inline ::Zone_FormTime_Notify* CSMsgBody::release_m_stzone_formtime_notify() {
  clear_has_m_stzone_formtime_notify();
  ::Zone_FormTime_Notify* temp = m_stzone_formtime_notify_;
  m_stzone_formtime_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_formtime_notify(::Zone_FormTime_Notify* m_stzone_formtime_notify) {
  delete m_stzone_formtime_notify_;
  m_stzone_formtime_notify_ = m_stzone_formtime_notify;
  if (m_stzone_formtime_notify) {
    set_has_m_stzone_formtime_notify();
  } else {
    clear_has_m_stzone_formtime_notify();
  }
}

// optional .Zone_SyncTime_Notify m_stZone_SyncTime_Notify = 84;
inline bool CSMsgBody::has_m_stzone_synctime_notify() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_synctime_notify() {
  _has_bits_[1] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stzone_synctime_notify() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stzone_synctime_notify() {
  if (m_stzone_synctime_notify_ != NULL) m_stzone_synctime_notify_->::Zone_SyncTime_Notify::Clear();
  clear_has_m_stzone_synctime_notify();
}
inline const ::Zone_SyncTime_Notify& CSMsgBody::m_stzone_synctime_notify() const {
  return m_stzone_synctime_notify_ != NULL ? *m_stzone_synctime_notify_ : *default_instance_->m_stzone_synctime_notify_;
}
inline ::Zone_SyncTime_Notify* CSMsgBody::mutable_m_stzone_synctime_notify() {
  set_has_m_stzone_synctime_notify();
  if (m_stzone_synctime_notify_ == NULL) m_stzone_synctime_notify_ = new ::Zone_SyncTime_Notify;
  return m_stzone_synctime_notify_;
}
inline ::Zone_SyncTime_Notify* CSMsgBody::release_m_stzone_synctime_notify() {
  clear_has_m_stzone_synctime_notify();
  ::Zone_SyncTime_Notify* temp = m_stzone_synctime_notify_;
  m_stzone_synctime_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_synctime_notify(::Zone_SyncTime_Notify* m_stzone_synctime_notify) {
  delete m_stzone_synctime_notify_;
  m_stzone_synctime_notify_ = m_stzone_synctime_notify;
  if (m_stzone_synctime_notify) {
    set_has_m_stzone_synctime_notify();
  } else {
    clear_has_m_stzone_synctime_notify();
  }
}

// optional .Zone_SeatUser_Notify m_stZone_SeatUser_Notify = 85;
inline bool CSMsgBody::has_m_stzone_seatuser_notify() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_seatuser_notify() {
  _has_bits_[1] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stzone_seatuser_notify() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stzone_seatuser_notify() {
  if (m_stzone_seatuser_notify_ != NULL) m_stzone_seatuser_notify_->::Zone_SeatUser_Notify::Clear();
  clear_has_m_stzone_seatuser_notify();
}
inline const ::Zone_SeatUser_Notify& CSMsgBody::m_stzone_seatuser_notify() const {
  return m_stzone_seatuser_notify_ != NULL ? *m_stzone_seatuser_notify_ : *default_instance_->m_stzone_seatuser_notify_;
}
inline ::Zone_SeatUser_Notify* CSMsgBody::mutable_m_stzone_seatuser_notify() {
  set_has_m_stzone_seatuser_notify();
  if (m_stzone_seatuser_notify_ == NULL) m_stzone_seatuser_notify_ = new ::Zone_SeatUser_Notify;
  return m_stzone_seatuser_notify_;
}
inline ::Zone_SeatUser_Notify* CSMsgBody::release_m_stzone_seatuser_notify() {
  clear_has_m_stzone_seatuser_notify();
  ::Zone_SeatUser_Notify* temp = m_stzone_seatuser_notify_;
  m_stzone_seatuser_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_seatuser_notify(::Zone_SeatUser_Notify* m_stzone_seatuser_notify) {
  delete m_stzone_seatuser_notify_;
  m_stzone_seatuser_notify_ = m_stzone_seatuser_notify;
  if (m_stzone_seatuser_notify) {
    set_has_m_stzone_seatuser_notify();
  } else {
    clear_has_m_stzone_seatuser_notify();
  }
}

// optional .Zone_FishInfo_Notify m_stZone_FishInfo_Notify = 86;
inline bool CSMsgBody::has_m_stzone_fishinfo_notify() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_fishinfo_notify() {
  _has_bits_[1] |= 0x40000000u;
}
inline void CSMsgBody::clear_has_m_stzone_fishinfo_notify() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void CSMsgBody::clear_m_stzone_fishinfo_notify() {
  if (m_stzone_fishinfo_notify_ != NULL) m_stzone_fishinfo_notify_->::Zone_FishInfo_Notify::Clear();
  clear_has_m_stzone_fishinfo_notify();
}
inline const ::Zone_FishInfo_Notify& CSMsgBody::m_stzone_fishinfo_notify() const {
  return m_stzone_fishinfo_notify_ != NULL ? *m_stzone_fishinfo_notify_ : *default_instance_->m_stzone_fishinfo_notify_;
}
inline ::Zone_FishInfo_Notify* CSMsgBody::mutable_m_stzone_fishinfo_notify() {
  set_has_m_stzone_fishinfo_notify();
  if (m_stzone_fishinfo_notify_ == NULL) m_stzone_fishinfo_notify_ = new ::Zone_FishInfo_Notify;
  return m_stzone_fishinfo_notify_;
}
inline ::Zone_FishInfo_Notify* CSMsgBody::release_m_stzone_fishinfo_notify() {
  clear_has_m_stzone_fishinfo_notify();
  ::Zone_FishInfo_Notify* temp = m_stzone_fishinfo_notify_;
  m_stzone_fishinfo_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_fishinfo_notify(::Zone_FishInfo_Notify* m_stzone_fishinfo_notify) {
  delete m_stzone_fishinfo_notify_;
  m_stzone_fishinfo_notify_ = m_stzone_fishinfo_notify;
  if (m_stzone_fishinfo_notify) {
    set_has_m_stzone_fishinfo_notify();
  } else {
    clear_has_m_stzone_fishinfo_notify();
  }
}

// optional .Zone_BulletInfo_Notify m_stZone_BulletInfo_Notify = 87;
inline bool CSMsgBody::has_m_stzone_bulletinfo_notify() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_bulletinfo_notify() {
  _has_bits_[1] |= 0x80000000u;
}
inline void CSMsgBody::clear_has_m_stzone_bulletinfo_notify() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void CSMsgBody::clear_m_stzone_bulletinfo_notify() {
  if (m_stzone_bulletinfo_notify_ != NULL) m_stzone_bulletinfo_notify_->::Zone_BulletInfo_Notify::Clear();
  clear_has_m_stzone_bulletinfo_notify();
}
inline const ::Zone_BulletInfo_Notify& CSMsgBody::m_stzone_bulletinfo_notify() const {
  return m_stzone_bulletinfo_notify_ != NULL ? *m_stzone_bulletinfo_notify_ : *default_instance_->m_stzone_bulletinfo_notify_;
}
inline ::Zone_BulletInfo_Notify* CSMsgBody::mutable_m_stzone_bulletinfo_notify() {
  set_has_m_stzone_bulletinfo_notify();
  if (m_stzone_bulletinfo_notify_ == NULL) m_stzone_bulletinfo_notify_ = new ::Zone_BulletInfo_Notify;
  return m_stzone_bulletinfo_notify_;
}
inline ::Zone_BulletInfo_Notify* CSMsgBody::release_m_stzone_bulletinfo_notify() {
  clear_has_m_stzone_bulletinfo_notify();
  ::Zone_BulletInfo_Notify* temp = m_stzone_bulletinfo_notify_;
  m_stzone_bulletinfo_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_bulletinfo_notify(::Zone_BulletInfo_Notify* m_stzone_bulletinfo_notify) {
  delete m_stzone_bulletinfo_notify_;
  m_stzone_bulletinfo_notify_ = m_stzone_bulletinfo_notify;
  if (m_stzone_bulletinfo_notify) {
    set_has_m_stzone_bulletinfo_notify();
  } else {
    clear_has_m_stzone_bulletinfo_notify();
  }
}

// optional .Zone_FormInfo_Notify m_stZone_FormInfo_Notify = 88;
inline bool CSMsgBody::has_m_stzone_forminfo_notify() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_forminfo_notify() {
  _has_bits_[2] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stzone_forminfo_notify() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stzone_forminfo_notify() {
  if (m_stzone_forminfo_notify_ != NULL) m_stzone_forminfo_notify_->::Zone_FormInfo_Notify::Clear();
  clear_has_m_stzone_forminfo_notify();
}
inline const ::Zone_FormInfo_Notify& CSMsgBody::m_stzone_forminfo_notify() const {
  return m_stzone_forminfo_notify_ != NULL ? *m_stzone_forminfo_notify_ : *default_instance_->m_stzone_forminfo_notify_;
}
inline ::Zone_FormInfo_Notify* CSMsgBody::mutable_m_stzone_forminfo_notify() {
  set_has_m_stzone_forminfo_notify();
  if (m_stzone_forminfo_notify_ == NULL) m_stzone_forminfo_notify_ = new ::Zone_FormInfo_Notify;
  return m_stzone_forminfo_notify_;
}
inline ::Zone_FormInfo_Notify* CSMsgBody::release_m_stzone_forminfo_notify() {
  clear_has_m_stzone_forminfo_notify();
  ::Zone_FormInfo_Notify* temp = m_stzone_forminfo_notify_;
  m_stzone_forminfo_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_forminfo_notify(::Zone_FormInfo_Notify* m_stzone_forminfo_notify) {
  delete m_stzone_forminfo_notify_;
  m_stzone_forminfo_notify_ = m_stzone_forminfo_notify;
  if (m_stzone_forminfo_notify) {
    set_has_m_stzone_forminfo_notify();
  } else {
    clear_has_m_stzone_forminfo_notify();
  }
}

// optional .Zone_ExitFish_Request m_stZone_ExitFish_Request = 89;
inline bool CSMsgBody::has_m_stzone_exitfish_request() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_exitfish_request() {
  _has_bits_[2] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stzone_exitfish_request() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stzone_exitfish_request() {
  if (m_stzone_exitfish_request_ != NULL) m_stzone_exitfish_request_->::Zone_ExitFish_Request::Clear();
  clear_has_m_stzone_exitfish_request();
}
inline const ::Zone_ExitFish_Request& CSMsgBody::m_stzone_exitfish_request() const {
  return m_stzone_exitfish_request_ != NULL ? *m_stzone_exitfish_request_ : *default_instance_->m_stzone_exitfish_request_;
}
inline ::Zone_ExitFish_Request* CSMsgBody::mutable_m_stzone_exitfish_request() {
  set_has_m_stzone_exitfish_request();
  if (m_stzone_exitfish_request_ == NULL) m_stzone_exitfish_request_ = new ::Zone_ExitFish_Request;
  return m_stzone_exitfish_request_;
}
inline ::Zone_ExitFish_Request* CSMsgBody::release_m_stzone_exitfish_request() {
  clear_has_m_stzone_exitfish_request();
  ::Zone_ExitFish_Request* temp = m_stzone_exitfish_request_;
  m_stzone_exitfish_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_exitfish_request(::Zone_ExitFish_Request* m_stzone_exitfish_request) {
  delete m_stzone_exitfish_request_;
  m_stzone_exitfish_request_ = m_stzone_exitfish_request;
  if (m_stzone_exitfish_request) {
    set_has_m_stzone_exitfish_request();
  } else {
    clear_has_m_stzone_exitfish_request();
  }
}

// optional .Zone_ExitFish_Response m_stZone_ExitFish_Response = 90;
inline bool CSMsgBody::has_m_stzone_exitfish_response() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_exitfish_response() {
  _has_bits_[2] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stzone_exitfish_response() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stzone_exitfish_response() {
  if (m_stzone_exitfish_response_ != NULL) m_stzone_exitfish_response_->::Zone_ExitFish_Response::Clear();
  clear_has_m_stzone_exitfish_response();
}
inline const ::Zone_ExitFish_Response& CSMsgBody::m_stzone_exitfish_response() const {
  return m_stzone_exitfish_response_ != NULL ? *m_stzone_exitfish_response_ : *default_instance_->m_stzone_exitfish_response_;
}
inline ::Zone_ExitFish_Response* CSMsgBody::mutable_m_stzone_exitfish_response() {
  set_has_m_stzone_exitfish_response();
  if (m_stzone_exitfish_response_ == NULL) m_stzone_exitfish_response_ = new ::Zone_ExitFish_Response;
  return m_stzone_exitfish_response_;
}
inline ::Zone_ExitFish_Response* CSMsgBody::release_m_stzone_exitfish_response() {
  clear_has_m_stzone_exitfish_response();
  ::Zone_ExitFish_Response* temp = m_stzone_exitfish_response_;
  m_stzone_exitfish_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_exitfish_response(::Zone_ExitFish_Response* m_stzone_exitfish_response) {
  delete m_stzone_exitfish_response_;
  m_stzone_exitfish_response_ = m_stzone_exitfish_response;
  if (m_stzone_exitfish_response) {
    set_has_m_stzone_exitfish_response();
  } else {
    clear_has_m_stzone_exitfish_response();
  }
}

// optional .Zone_ExitFish_Notify m_stZone_ExitFish_Notify = 91;
inline bool CSMsgBody::has_m_stzone_exitfish_notify() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_exitfish_notify() {
  _has_bits_[2] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_stzone_exitfish_notify() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_stzone_exitfish_notify() {
  if (m_stzone_exitfish_notify_ != NULL) m_stzone_exitfish_notify_->::Zone_ExitFish_Notify::Clear();
  clear_has_m_stzone_exitfish_notify();
}
inline const ::Zone_ExitFish_Notify& CSMsgBody::m_stzone_exitfish_notify() const {
  return m_stzone_exitfish_notify_ != NULL ? *m_stzone_exitfish_notify_ : *default_instance_->m_stzone_exitfish_notify_;
}
inline ::Zone_ExitFish_Notify* CSMsgBody::mutable_m_stzone_exitfish_notify() {
  set_has_m_stzone_exitfish_notify();
  if (m_stzone_exitfish_notify_ == NULL) m_stzone_exitfish_notify_ = new ::Zone_ExitFish_Notify;
  return m_stzone_exitfish_notify_;
}
inline ::Zone_ExitFish_Notify* CSMsgBody::release_m_stzone_exitfish_notify() {
  clear_has_m_stzone_exitfish_notify();
  ::Zone_ExitFish_Notify* temp = m_stzone_exitfish_notify_;
  m_stzone_exitfish_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_exitfish_notify(::Zone_ExitFish_Notify* m_stzone_exitfish_notify) {
  delete m_stzone_exitfish_notify_;
  m_stzone_exitfish_notify_ = m_stzone_exitfish_notify;
  if (m_stzone_exitfish_notify) {
    set_has_m_stzone_exitfish_notify();
  } else {
    clear_has_m_stzone_exitfish_notify();
  }
}

// optional .Zone_ChangeGun_Request m_stZone_ChangeGun_Request = 92;
inline bool CSMsgBody::has_m_stzone_changegun_request() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_changegun_request() {
  _has_bits_[2] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_stzone_changegun_request() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_stzone_changegun_request() {
  if (m_stzone_changegun_request_ != NULL) m_stzone_changegun_request_->::Zone_ChangeGun_Request::Clear();
  clear_has_m_stzone_changegun_request();
}
inline const ::Zone_ChangeGun_Request& CSMsgBody::m_stzone_changegun_request() const {
  return m_stzone_changegun_request_ != NULL ? *m_stzone_changegun_request_ : *default_instance_->m_stzone_changegun_request_;
}
inline ::Zone_ChangeGun_Request* CSMsgBody::mutable_m_stzone_changegun_request() {
  set_has_m_stzone_changegun_request();
  if (m_stzone_changegun_request_ == NULL) m_stzone_changegun_request_ = new ::Zone_ChangeGun_Request;
  return m_stzone_changegun_request_;
}
inline ::Zone_ChangeGun_Request* CSMsgBody::release_m_stzone_changegun_request() {
  clear_has_m_stzone_changegun_request();
  ::Zone_ChangeGun_Request* temp = m_stzone_changegun_request_;
  m_stzone_changegun_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_changegun_request(::Zone_ChangeGun_Request* m_stzone_changegun_request) {
  delete m_stzone_changegun_request_;
  m_stzone_changegun_request_ = m_stzone_changegun_request;
  if (m_stzone_changegun_request) {
    set_has_m_stzone_changegun_request();
  } else {
    clear_has_m_stzone_changegun_request();
  }
}

// optional .Zone_ChangeGun_Response m_stZone_ChangeGun_Response = 93;
inline bool CSMsgBody::has_m_stzone_changegun_response() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_changegun_response() {
  _has_bits_[2] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_stzone_changegun_response() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_stzone_changegun_response() {
  if (m_stzone_changegun_response_ != NULL) m_stzone_changegun_response_->::Zone_ChangeGun_Response::Clear();
  clear_has_m_stzone_changegun_response();
}
inline const ::Zone_ChangeGun_Response& CSMsgBody::m_stzone_changegun_response() const {
  return m_stzone_changegun_response_ != NULL ? *m_stzone_changegun_response_ : *default_instance_->m_stzone_changegun_response_;
}
inline ::Zone_ChangeGun_Response* CSMsgBody::mutable_m_stzone_changegun_response() {
  set_has_m_stzone_changegun_response();
  if (m_stzone_changegun_response_ == NULL) m_stzone_changegun_response_ = new ::Zone_ChangeGun_Response;
  return m_stzone_changegun_response_;
}
inline ::Zone_ChangeGun_Response* CSMsgBody::release_m_stzone_changegun_response() {
  clear_has_m_stzone_changegun_response();
  ::Zone_ChangeGun_Response* temp = m_stzone_changegun_response_;
  m_stzone_changegun_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_changegun_response(::Zone_ChangeGun_Response* m_stzone_changegun_response) {
  delete m_stzone_changegun_response_;
  m_stzone_changegun_response_ = m_stzone_changegun_response;
  if (m_stzone_changegun_response) {
    set_has_m_stzone_changegun_response();
  } else {
    clear_has_m_stzone_changegun_response();
  }
}

// optional .Zone_ChangeGun_Notify m_stZone_ChangeGun_Notify = 94;
inline bool CSMsgBody::has_m_stzone_changegun_notify() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_changegun_notify() {
  _has_bits_[2] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_stzone_changegun_notify() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_stzone_changegun_notify() {
  if (m_stzone_changegun_notify_ != NULL) m_stzone_changegun_notify_->::Zone_ChangeGun_Notify::Clear();
  clear_has_m_stzone_changegun_notify();
}
inline const ::Zone_ChangeGun_Notify& CSMsgBody::m_stzone_changegun_notify() const {
  return m_stzone_changegun_notify_ != NULL ? *m_stzone_changegun_notify_ : *default_instance_->m_stzone_changegun_notify_;
}
inline ::Zone_ChangeGun_Notify* CSMsgBody::mutable_m_stzone_changegun_notify() {
  set_has_m_stzone_changegun_notify();
  if (m_stzone_changegun_notify_ == NULL) m_stzone_changegun_notify_ = new ::Zone_ChangeGun_Notify;
  return m_stzone_changegun_notify_;
}
inline ::Zone_ChangeGun_Notify* CSMsgBody::release_m_stzone_changegun_notify() {
  clear_has_m_stzone_changegun_notify();
  ::Zone_ChangeGun_Notify* temp = m_stzone_changegun_notify_;
  m_stzone_changegun_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_changegun_notify(::Zone_ChangeGun_Notify* m_stzone_changegun_notify) {
  delete m_stzone_changegun_notify_;
  m_stzone_changegun_notify_ = m_stzone_changegun_notify;
  if (m_stzone_changegun_notify) {
    set_has_m_stzone_changegun_notify();
  } else {
    clear_has_m_stzone_changegun_notify();
  }
}

// optional .Zone_ShootBullet_Request m_stZone_ShootBullet_Request = 95;
inline bool CSMsgBody::has_m_stzone_shootbullet_request() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_shootbullet_request() {
  _has_bits_[2] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_stzone_shootbullet_request() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_stzone_shootbullet_request() {
  if (m_stzone_shootbullet_request_ != NULL) m_stzone_shootbullet_request_->::Zone_ShootBullet_Request::Clear();
  clear_has_m_stzone_shootbullet_request();
}
inline const ::Zone_ShootBullet_Request& CSMsgBody::m_stzone_shootbullet_request() const {
  return m_stzone_shootbullet_request_ != NULL ? *m_stzone_shootbullet_request_ : *default_instance_->m_stzone_shootbullet_request_;
}
inline ::Zone_ShootBullet_Request* CSMsgBody::mutable_m_stzone_shootbullet_request() {
  set_has_m_stzone_shootbullet_request();
  if (m_stzone_shootbullet_request_ == NULL) m_stzone_shootbullet_request_ = new ::Zone_ShootBullet_Request;
  return m_stzone_shootbullet_request_;
}
inline ::Zone_ShootBullet_Request* CSMsgBody::release_m_stzone_shootbullet_request() {
  clear_has_m_stzone_shootbullet_request();
  ::Zone_ShootBullet_Request* temp = m_stzone_shootbullet_request_;
  m_stzone_shootbullet_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_shootbullet_request(::Zone_ShootBullet_Request* m_stzone_shootbullet_request) {
  delete m_stzone_shootbullet_request_;
  m_stzone_shootbullet_request_ = m_stzone_shootbullet_request;
  if (m_stzone_shootbullet_request) {
    set_has_m_stzone_shootbullet_request();
  } else {
    clear_has_m_stzone_shootbullet_request();
  }
}

// optional .Zone_ShootBullet_Response m_stZone_ShootBullet_Response = 96;
inline bool CSMsgBody::has_m_stzone_shootbullet_response() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_shootbullet_response() {
  _has_bits_[2] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stzone_shootbullet_response() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stzone_shootbullet_response() {
  if (m_stzone_shootbullet_response_ != NULL) m_stzone_shootbullet_response_->::Zone_ShootBullet_Response::Clear();
  clear_has_m_stzone_shootbullet_response();
}
inline const ::Zone_ShootBullet_Response& CSMsgBody::m_stzone_shootbullet_response() const {
  return m_stzone_shootbullet_response_ != NULL ? *m_stzone_shootbullet_response_ : *default_instance_->m_stzone_shootbullet_response_;
}
inline ::Zone_ShootBullet_Response* CSMsgBody::mutable_m_stzone_shootbullet_response() {
  set_has_m_stzone_shootbullet_response();
  if (m_stzone_shootbullet_response_ == NULL) m_stzone_shootbullet_response_ = new ::Zone_ShootBullet_Response;
  return m_stzone_shootbullet_response_;
}
inline ::Zone_ShootBullet_Response* CSMsgBody::release_m_stzone_shootbullet_response() {
  clear_has_m_stzone_shootbullet_response();
  ::Zone_ShootBullet_Response* temp = m_stzone_shootbullet_response_;
  m_stzone_shootbullet_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_shootbullet_response(::Zone_ShootBullet_Response* m_stzone_shootbullet_response) {
  delete m_stzone_shootbullet_response_;
  m_stzone_shootbullet_response_ = m_stzone_shootbullet_response;
  if (m_stzone_shootbullet_response) {
    set_has_m_stzone_shootbullet_response();
  } else {
    clear_has_m_stzone_shootbullet_response();
  }
}

// optional .Zone_ShootBullet_Notify m_stZone_ShootBullet_Notify = 97;
inline bool CSMsgBody::has_m_stzone_shootbullet_notify() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_shootbullet_notify() {
  _has_bits_[2] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stzone_shootbullet_notify() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stzone_shootbullet_notify() {
  if (m_stzone_shootbullet_notify_ != NULL) m_stzone_shootbullet_notify_->::Zone_ShootBullet_Notify::Clear();
  clear_has_m_stzone_shootbullet_notify();
}
inline const ::Zone_ShootBullet_Notify& CSMsgBody::m_stzone_shootbullet_notify() const {
  return m_stzone_shootbullet_notify_ != NULL ? *m_stzone_shootbullet_notify_ : *default_instance_->m_stzone_shootbullet_notify_;
}
inline ::Zone_ShootBullet_Notify* CSMsgBody::mutable_m_stzone_shootbullet_notify() {
  set_has_m_stzone_shootbullet_notify();
  if (m_stzone_shootbullet_notify_ == NULL) m_stzone_shootbullet_notify_ = new ::Zone_ShootBullet_Notify;
  return m_stzone_shootbullet_notify_;
}
inline ::Zone_ShootBullet_Notify* CSMsgBody::release_m_stzone_shootbullet_notify() {
  clear_has_m_stzone_shootbullet_notify();
  ::Zone_ShootBullet_Notify* temp = m_stzone_shootbullet_notify_;
  m_stzone_shootbullet_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_shootbullet_notify(::Zone_ShootBullet_Notify* m_stzone_shootbullet_notify) {
  delete m_stzone_shootbullet_notify_;
  m_stzone_shootbullet_notify_ = m_stzone_shootbullet_notify;
  if (m_stzone_shootbullet_notify) {
    set_has_m_stzone_shootbullet_notify();
  } else {
    clear_has_m_stzone_shootbullet_notify();
  }
}

// optional .Zone_HitFish_Request m_stZone_HitFish_Request = 98;
inline bool CSMsgBody::has_m_stzone_hitfish_request() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_hitfish_request() {
  _has_bits_[2] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_stzone_hitfish_request() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_stzone_hitfish_request() {
  if (m_stzone_hitfish_request_ != NULL) m_stzone_hitfish_request_->::Zone_HitFish_Request::Clear();
  clear_has_m_stzone_hitfish_request();
}
inline const ::Zone_HitFish_Request& CSMsgBody::m_stzone_hitfish_request() const {
  return m_stzone_hitfish_request_ != NULL ? *m_stzone_hitfish_request_ : *default_instance_->m_stzone_hitfish_request_;
}
inline ::Zone_HitFish_Request* CSMsgBody::mutable_m_stzone_hitfish_request() {
  set_has_m_stzone_hitfish_request();
  if (m_stzone_hitfish_request_ == NULL) m_stzone_hitfish_request_ = new ::Zone_HitFish_Request;
  return m_stzone_hitfish_request_;
}
inline ::Zone_HitFish_Request* CSMsgBody::release_m_stzone_hitfish_request() {
  clear_has_m_stzone_hitfish_request();
  ::Zone_HitFish_Request* temp = m_stzone_hitfish_request_;
  m_stzone_hitfish_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_hitfish_request(::Zone_HitFish_Request* m_stzone_hitfish_request) {
  delete m_stzone_hitfish_request_;
  m_stzone_hitfish_request_ = m_stzone_hitfish_request;
  if (m_stzone_hitfish_request) {
    set_has_m_stzone_hitfish_request();
  } else {
    clear_has_m_stzone_hitfish_request();
  }
}

// optional .Zone_HitFish_Response m_stZone_HitFish_Response = 99;
inline bool CSMsgBody::has_m_stzone_hitfish_response() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_hitfish_response() {
  _has_bits_[2] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_stzone_hitfish_response() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_stzone_hitfish_response() {
  if (m_stzone_hitfish_response_ != NULL) m_stzone_hitfish_response_->::Zone_HitFish_Response::Clear();
  clear_has_m_stzone_hitfish_response();
}
inline const ::Zone_HitFish_Response& CSMsgBody::m_stzone_hitfish_response() const {
  return m_stzone_hitfish_response_ != NULL ? *m_stzone_hitfish_response_ : *default_instance_->m_stzone_hitfish_response_;
}
inline ::Zone_HitFish_Response* CSMsgBody::mutable_m_stzone_hitfish_response() {
  set_has_m_stzone_hitfish_response();
  if (m_stzone_hitfish_response_ == NULL) m_stzone_hitfish_response_ = new ::Zone_HitFish_Response;
  return m_stzone_hitfish_response_;
}
inline ::Zone_HitFish_Response* CSMsgBody::release_m_stzone_hitfish_response() {
  clear_has_m_stzone_hitfish_response();
  ::Zone_HitFish_Response* temp = m_stzone_hitfish_response_;
  m_stzone_hitfish_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_hitfish_response(::Zone_HitFish_Response* m_stzone_hitfish_response) {
  delete m_stzone_hitfish_response_;
  m_stzone_hitfish_response_ = m_stzone_hitfish_response;
  if (m_stzone_hitfish_response) {
    set_has_m_stzone_hitfish_response();
  } else {
    clear_has_m_stzone_hitfish_response();
  }
}

// optional .Zone_HitFish_Notify m_stZone_HitFish_Notify = 100;
inline bool CSMsgBody::has_m_stzone_hitfish_notify() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_hitfish_notify() {
  _has_bits_[2] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_stzone_hitfish_notify() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_stzone_hitfish_notify() {
  if (m_stzone_hitfish_notify_ != NULL) m_stzone_hitfish_notify_->::Zone_HitFish_Notify::Clear();
  clear_has_m_stzone_hitfish_notify();
}
inline const ::Zone_HitFish_Notify& CSMsgBody::m_stzone_hitfish_notify() const {
  return m_stzone_hitfish_notify_ != NULL ? *m_stzone_hitfish_notify_ : *default_instance_->m_stzone_hitfish_notify_;
}
inline ::Zone_HitFish_Notify* CSMsgBody::mutable_m_stzone_hitfish_notify() {
  set_has_m_stzone_hitfish_notify();
  if (m_stzone_hitfish_notify_ == NULL) m_stzone_hitfish_notify_ = new ::Zone_HitFish_Notify;
  return m_stzone_hitfish_notify_;
}
inline ::Zone_HitFish_Notify* CSMsgBody::release_m_stzone_hitfish_notify() {
  clear_has_m_stzone_hitfish_notify();
  ::Zone_HitFish_Notify* temp = m_stzone_hitfish_notify_;
  m_stzone_hitfish_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_hitfish_notify(::Zone_HitFish_Notify* m_stzone_hitfish_notify) {
  delete m_stzone_hitfish_notify_;
  m_stzone_hitfish_notify_ = m_stzone_hitfish_notify;
  if (m_stzone_hitfish_notify) {
    set_has_m_stzone_hitfish_notify();
  } else {
    clear_has_m_stzone_hitfish_notify();
  }
}

// optional .Zone_HitFormFish_Request m_stZone_HitFormFish_Request = 101;
inline bool CSMsgBody::has_m_stzone_hitformfish_request() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_hitformfish_request() {
  _has_bits_[2] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_stzone_hitformfish_request() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_stzone_hitformfish_request() {
  if (m_stzone_hitformfish_request_ != NULL) m_stzone_hitformfish_request_->::Zone_HitFormFish_Request::Clear();
  clear_has_m_stzone_hitformfish_request();
}
inline const ::Zone_HitFormFish_Request& CSMsgBody::m_stzone_hitformfish_request() const {
  return m_stzone_hitformfish_request_ != NULL ? *m_stzone_hitformfish_request_ : *default_instance_->m_stzone_hitformfish_request_;
}
inline ::Zone_HitFormFish_Request* CSMsgBody::mutable_m_stzone_hitformfish_request() {
  set_has_m_stzone_hitformfish_request();
  if (m_stzone_hitformfish_request_ == NULL) m_stzone_hitformfish_request_ = new ::Zone_HitFormFish_Request;
  return m_stzone_hitformfish_request_;
}
inline ::Zone_HitFormFish_Request* CSMsgBody::release_m_stzone_hitformfish_request() {
  clear_has_m_stzone_hitformfish_request();
  ::Zone_HitFormFish_Request* temp = m_stzone_hitformfish_request_;
  m_stzone_hitformfish_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_hitformfish_request(::Zone_HitFormFish_Request* m_stzone_hitformfish_request) {
  delete m_stzone_hitformfish_request_;
  m_stzone_hitformfish_request_ = m_stzone_hitformfish_request;
  if (m_stzone_hitformfish_request) {
    set_has_m_stzone_hitformfish_request();
  } else {
    clear_has_m_stzone_hitformfish_request();
  }
}

// optional .Zone_HitFormFish_Response m_stZone_HitFormFish_Response = 102;
inline bool CSMsgBody::has_m_stzone_hitformfish_response() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_hitformfish_response() {
  _has_bits_[2] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_stzone_hitformfish_response() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_stzone_hitformfish_response() {
  if (m_stzone_hitformfish_response_ != NULL) m_stzone_hitformfish_response_->::Zone_HitFormFish_Response::Clear();
  clear_has_m_stzone_hitformfish_response();
}
inline const ::Zone_HitFormFish_Response& CSMsgBody::m_stzone_hitformfish_response() const {
  return m_stzone_hitformfish_response_ != NULL ? *m_stzone_hitformfish_response_ : *default_instance_->m_stzone_hitformfish_response_;
}
inline ::Zone_HitFormFish_Response* CSMsgBody::mutable_m_stzone_hitformfish_response() {
  set_has_m_stzone_hitformfish_response();
  if (m_stzone_hitformfish_response_ == NULL) m_stzone_hitformfish_response_ = new ::Zone_HitFormFish_Response;
  return m_stzone_hitformfish_response_;
}
inline ::Zone_HitFormFish_Response* CSMsgBody::release_m_stzone_hitformfish_response() {
  clear_has_m_stzone_hitformfish_response();
  ::Zone_HitFormFish_Response* temp = m_stzone_hitformfish_response_;
  m_stzone_hitformfish_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_hitformfish_response(::Zone_HitFormFish_Response* m_stzone_hitformfish_response) {
  delete m_stzone_hitformfish_response_;
  m_stzone_hitformfish_response_ = m_stzone_hitformfish_response;
  if (m_stzone_hitformfish_response) {
    set_has_m_stzone_hitformfish_response();
  } else {
    clear_has_m_stzone_hitformfish_response();
  }
}

// optional .Zone_BoomFishInfo_Notify m_stZone_BoomFishInfo_Notify = 103;
inline bool CSMsgBody::has_m_stzone_boomfishinfo_notify() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_boomfishinfo_notify() {
  _has_bits_[2] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_stzone_boomfishinfo_notify() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_stzone_boomfishinfo_notify() {
  if (m_stzone_boomfishinfo_notify_ != NULL) m_stzone_boomfishinfo_notify_->::Zone_BoomFishInfo_Notify::Clear();
  clear_has_m_stzone_boomfishinfo_notify();
}
inline const ::Zone_BoomFishInfo_Notify& CSMsgBody::m_stzone_boomfishinfo_notify() const {
  return m_stzone_boomfishinfo_notify_ != NULL ? *m_stzone_boomfishinfo_notify_ : *default_instance_->m_stzone_boomfishinfo_notify_;
}
inline ::Zone_BoomFishInfo_Notify* CSMsgBody::mutable_m_stzone_boomfishinfo_notify() {
  set_has_m_stzone_boomfishinfo_notify();
  if (m_stzone_boomfishinfo_notify_ == NULL) m_stzone_boomfishinfo_notify_ = new ::Zone_BoomFishInfo_Notify;
  return m_stzone_boomfishinfo_notify_;
}
inline ::Zone_BoomFishInfo_Notify* CSMsgBody::release_m_stzone_boomfishinfo_notify() {
  clear_has_m_stzone_boomfishinfo_notify();
  ::Zone_BoomFishInfo_Notify* temp = m_stzone_boomfishinfo_notify_;
  m_stzone_boomfishinfo_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_boomfishinfo_notify(::Zone_BoomFishInfo_Notify* m_stzone_boomfishinfo_notify) {
  delete m_stzone_boomfishinfo_notify_;
  m_stzone_boomfishinfo_notify_ = m_stzone_boomfishinfo_notify;
  if (m_stzone_boomfishinfo_notify) {
    set_has_m_stzone_boomfishinfo_notify();
  } else {
    clear_has_m_stzone_boomfishinfo_notify();
  }
}

// optional .Zone_AddTicket_Notify m_stZone_AddTicket_Notify = 104;
inline bool CSMsgBody::has_m_stzone_addticket_notify() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_addticket_notify() {
  _has_bits_[2] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_stzone_addticket_notify() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_stzone_addticket_notify() {
  if (m_stzone_addticket_notify_ != NULL) m_stzone_addticket_notify_->::Zone_AddTicket_Notify::Clear();
  clear_has_m_stzone_addticket_notify();
}
inline const ::Zone_AddTicket_Notify& CSMsgBody::m_stzone_addticket_notify() const {
  return m_stzone_addticket_notify_ != NULL ? *m_stzone_addticket_notify_ : *default_instance_->m_stzone_addticket_notify_;
}
inline ::Zone_AddTicket_Notify* CSMsgBody::mutable_m_stzone_addticket_notify() {
  set_has_m_stzone_addticket_notify();
  if (m_stzone_addticket_notify_ == NULL) m_stzone_addticket_notify_ = new ::Zone_AddTicket_Notify;
  return m_stzone_addticket_notify_;
}
inline ::Zone_AddTicket_Notify* CSMsgBody::release_m_stzone_addticket_notify() {
  clear_has_m_stzone_addticket_notify();
  ::Zone_AddTicket_Notify* temp = m_stzone_addticket_notify_;
  m_stzone_addticket_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_addticket_notify(::Zone_AddTicket_Notify* m_stzone_addticket_notify) {
  delete m_stzone_addticket_notify_;
  m_stzone_addticket_notify_ = m_stzone_addticket_notify;
  if (m_stzone_addticket_notify) {
    set_has_m_stzone_addticket_notify();
  } else {
    clear_has_m_stzone_addticket_notify();
  }
}

// optional .Zone_FishUserUpdate_Notify m_stZone_FishUserUpdate_Notify = 105;
inline bool CSMsgBody::has_m_stzone_fishuserupdate_notify() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_fishuserupdate_notify() {
  _has_bits_[2] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_stzone_fishuserupdate_notify() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_stzone_fishuserupdate_notify() {
  if (m_stzone_fishuserupdate_notify_ != NULL) m_stzone_fishuserupdate_notify_->::Zone_FishUserUpdate_Notify::Clear();
  clear_has_m_stzone_fishuserupdate_notify();
}
inline const ::Zone_FishUserUpdate_Notify& CSMsgBody::m_stzone_fishuserupdate_notify() const {
  return m_stzone_fishuserupdate_notify_ != NULL ? *m_stzone_fishuserupdate_notify_ : *default_instance_->m_stzone_fishuserupdate_notify_;
}
inline ::Zone_FishUserUpdate_Notify* CSMsgBody::mutable_m_stzone_fishuserupdate_notify() {
  set_has_m_stzone_fishuserupdate_notify();
  if (m_stzone_fishuserupdate_notify_ == NULL) m_stzone_fishuserupdate_notify_ = new ::Zone_FishUserUpdate_Notify;
  return m_stzone_fishuserupdate_notify_;
}
inline ::Zone_FishUserUpdate_Notify* CSMsgBody::release_m_stzone_fishuserupdate_notify() {
  clear_has_m_stzone_fishuserupdate_notify();
  ::Zone_FishUserUpdate_Notify* temp = m_stzone_fishuserupdate_notify_;
  m_stzone_fishuserupdate_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_fishuserupdate_notify(::Zone_FishUserUpdate_Notify* m_stzone_fishuserupdate_notify) {
  delete m_stzone_fishuserupdate_notify_;
  m_stzone_fishuserupdate_notify_ = m_stzone_fishuserupdate_notify;
  if (m_stzone_fishuserupdate_notify) {
    set_has_m_stzone_fishuserupdate_notify();
  } else {
    clear_has_m_stzone_fishuserupdate_notify();
  }
}

// optional .Zone_Lottery_Request m_stZone_Lottery_Request = 120;
inline bool CSMsgBody::has_m_stzone_lottery_request() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_lottery_request() {
  _has_bits_[2] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_stzone_lottery_request() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_stzone_lottery_request() {
  if (m_stzone_lottery_request_ != NULL) m_stzone_lottery_request_->::Zone_Lottery_Request::Clear();
  clear_has_m_stzone_lottery_request();
}
inline const ::Zone_Lottery_Request& CSMsgBody::m_stzone_lottery_request() const {
  return m_stzone_lottery_request_ != NULL ? *m_stzone_lottery_request_ : *default_instance_->m_stzone_lottery_request_;
}
inline ::Zone_Lottery_Request* CSMsgBody::mutable_m_stzone_lottery_request() {
  set_has_m_stzone_lottery_request();
  if (m_stzone_lottery_request_ == NULL) m_stzone_lottery_request_ = new ::Zone_Lottery_Request;
  return m_stzone_lottery_request_;
}
inline ::Zone_Lottery_Request* CSMsgBody::release_m_stzone_lottery_request() {
  clear_has_m_stzone_lottery_request();
  ::Zone_Lottery_Request* temp = m_stzone_lottery_request_;
  m_stzone_lottery_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_lottery_request(::Zone_Lottery_Request* m_stzone_lottery_request) {
  delete m_stzone_lottery_request_;
  m_stzone_lottery_request_ = m_stzone_lottery_request;
  if (m_stzone_lottery_request) {
    set_has_m_stzone_lottery_request();
  } else {
    clear_has_m_stzone_lottery_request();
  }
}

// optional .Zone_Lottery_Response m_stZone_Lottery_Response = 121;
inline bool CSMsgBody::has_m_stzone_lottery_response() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_lottery_response() {
  _has_bits_[2] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_stzone_lottery_response() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_stzone_lottery_response() {
  if (m_stzone_lottery_response_ != NULL) m_stzone_lottery_response_->::Zone_Lottery_Response::Clear();
  clear_has_m_stzone_lottery_response();
}
inline const ::Zone_Lottery_Response& CSMsgBody::m_stzone_lottery_response() const {
  return m_stzone_lottery_response_ != NULL ? *m_stzone_lottery_response_ : *default_instance_->m_stzone_lottery_response_;
}
inline ::Zone_Lottery_Response* CSMsgBody::mutable_m_stzone_lottery_response() {
  set_has_m_stzone_lottery_response();
  if (m_stzone_lottery_response_ == NULL) m_stzone_lottery_response_ = new ::Zone_Lottery_Response;
  return m_stzone_lottery_response_;
}
inline ::Zone_Lottery_Response* CSMsgBody::release_m_stzone_lottery_response() {
  clear_has_m_stzone_lottery_response();
  ::Zone_Lottery_Response* temp = m_stzone_lottery_response_;
  m_stzone_lottery_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_lottery_response(::Zone_Lottery_Response* m_stzone_lottery_response) {
  delete m_stzone_lottery_response_;
  m_stzone_lottery_response_ = m_stzone_lottery_response;
  if (m_stzone_lottery_response) {
    set_has_m_stzone_lottery_response();
  } else {
    clear_has_m_stzone_lottery_response();
  }
}

// optional .Zone_QuestChange_Notify m_stZone_QuestChange_Notify = 130;
inline bool CSMsgBody::has_m_stzone_questchange_notify() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_questchange_notify() {
  _has_bits_[2] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_stzone_questchange_notify() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_stzone_questchange_notify() {
  if (m_stzone_questchange_notify_ != NULL) m_stzone_questchange_notify_->::Zone_QuestChange_Notify::Clear();
  clear_has_m_stzone_questchange_notify();
}
inline const ::Zone_QuestChange_Notify& CSMsgBody::m_stzone_questchange_notify() const {
  return m_stzone_questchange_notify_ != NULL ? *m_stzone_questchange_notify_ : *default_instance_->m_stzone_questchange_notify_;
}
inline ::Zone_QuestChange_Notify* CSMsgBody::mutable_m_stzone_questchange_notify() {
  set_has_m_stzone_questchange_notify();
  if (m_stzone_questchange_notify_ == NULL) m_stzone_questchange_notify_ = new ::Zone_QuestChange_Notify;
  return m_stzone_questchange_notify_;
}
inline ::Zone_QuestChange_Notify* CSMsgBody::release_m_stzone_questchange_notify() {
  clear_has_m_stzone_questchange_notify();
  ::Zone_QuestChange_Notify* temp = m_stzone_questchange_notify_;
  m_stzone_questchange_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_questchange_notify(::Zone_QuestChange_Notify* m_stzone_questchange_notify) {
  delete m_stzone_questchange_notify_;
  m_stzone_questchange_notify_ = m_stzone_questchange_notify;
  if (m_stzone_questchange_notify) {
    set_has_m_stzone_questchange_notify();
  } else {
    clear_has_m_stzone_questchange_notify();
  }
}

// optional .Zone_FinQuest_Request m_stZone_FinQuest_Request = 131;
inline bool CSMsgBody::has_m_stzone_finquest_request() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_finquest_request() {
  _has_bits_[2] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_stzone_finquest_request() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_stzone_finquest_request() {
  if (m_stzone_finquest_request_ != NULL) m_stzone_finquest_request_->::Zone_FinQuest_Request::Clear();
  clear_has_m_stzone_finquest_request();
}
inline const ::Zone_FinQuest_Request& CSMsgBody::m_stzone_finquest_request() const {
  return m_stzone_finquest_request_ != NULL ? *m_stzone_finquest_request_ : *default_instance_->m_stzone_finquest_request_;
}
inline ::Zone_FinQuest_Request* CSMsgBody::mutable_m_stzone_finquest_request() {
  set_has_m_stzone_finquest_request();
  if (m_stzone_finquest_request_ == NULL) m_stzone_finquest_request_ = new ::Zone_FinQuest_Request;
  return m_stzone_finquest_request_;
}
inline ::Zone_FinQuest_Request* CSMsgBody::release_m_stzone_finquest_request() {
  clear_has_m_stzone_finquest_request();
  ::Zone_FinQuest_Request* temp = m_stzone_finquest_request_;
  m_stzone_finquest_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_finquest_request(::Zone_FinQuest_Request* m_stzone_finquest_request) {
  delete m_stzone_finquest_request_;
  m_stzone_finquest_request_ = m_stzone_finquest_request;
  if (m_stzone_finquest_request) {
    set_has_m_stzone_finquest_request();
  } else {
    clear_has_m_stzone_finquest_request();
  }
}

// optional .Zone_FinQuest_Response m_stZone_FinQuest_Response = 132;
inline bool CSMsgBody::has_m_stzone_finquest_response() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_finquest_response() {
  _has_bits_[2] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stzone_finquest_response() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stzone_finquest_response() {
  if (m_stzone_finquest_response_ != NULL) m_stzone_finquest_response_->::Zone_FinQuest_Response::Clear();
  clear_has_m_stzone_finquest_response();
}
inline const ::Zone_FinQuest_Response& CSMsgBody::m_stzone_finquest_response() const {
  return m_stzone_finquest_response_ != NULL ? *m_stzone_finquest_response_ : *default_instance_->m_stzone_finquest_response_;
}
inline ::Zone_FinQuest_Response* CSMsgBody::mutable_m_stzone_finquest_response() {
  set_has_m_stzone_finquest_response();
  if (m_stzone_finquest_response_ == NULL) m_stzone_finquest_response_ = new ::Zone_FinQuest_Response;
  return m_stzone_finquest_response_;
}
inline ::Zone_FinQuest_Response* CSMsgBody::release_m_stzone_finquest_response() {
  clear_has_m_stzone_finquest_response();
  ::Zone_FinQuest_Response* temp = m_stzone_finquest_response_;
  m_stzone_finquest_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_finquest_response(::Zone_FinQuest_Response* m_stzone_finquest_response) {
  delete m_stzone_finquest_response_;
  m_stzone_finquest_response_ = m_stzone_finquest_response;
  if (m_stzone_finquest_response) {
    set_has_m_stzone_finquest_response();
  } else {
    clear_has_m_stzone_finquest_response();
  }
}

// optional .Zone_GetReward_Notify m_stZone_GetReward_Notify = 133;
inline bool CSMsgBody::has_m_stzone_getreward_notify() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getreward_notify() {
  _has_bits_[2] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stzone_getreward_notify() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stzone_getreward_notify() {
  if (m_stzone_getreward_notify_ != NULL) m_stzone_getreward_notify_->::Zone_GetReward_Notify::Clear();
  clear_has_m_stzone_getreward_notify();
}
inline const ::Zone_GetReward_Notify& CSMsgBody::m_stzone_getreward_notify() const {
  return m_stzone_getreward_notify_ != NULL ? *m_stzone_getreward_notify_ : *default_instance_->m_stzone_getreward_notify_;
}
inline ::Zone_GetReward_Notify* CSMsgBody::mutable_m_stzone_getreward_notify() {
  set_has_m_stzone_getreward_notify();
  if (m_stzone_getreward_notify_ == NULL) m_stzone_getreward_notify_ = new ::Zone_GetReward_Notify;
  return m_stzone_getreward_notify_;
}
inline ::Zone_GetReward_Notify* CSMsgBody::release_m_stzone_getreward_notify() {
  clear_has_m_stzone_getreward_notify();
  ::Zone_GetReward_Notify* temp = m_stzone_getreward_notify_;
  m_stzone_getreward_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getreward_notify(::Zone_GetReward_Notify* m_stzone_getreward_notify) {
  delete m_stzone_getreward_notify_;
  m_stzone_getreward_notify_ = m_stzone_getreward_notify;
  if (m_stzone_getreward_notify) {
    set_has_m_stzone_getreward_notify();
  } else {
    clear_has_m_stzone_getreward_notify();
  }
}

// optional .Zone_GetLivness_Request m_stZone_GetLivness_Request = 134;
inline bool CSMsgBody::has_m_stzone_getlivness_request() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getlivness_request() {
  _has_bits_[2] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getlivness_request() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stzone_getlivness_request() {
  if (m_stzone_getlivness_request_ != NULL) m_stzone_getlivness_request_->::Zone_GetLivness_Request::Clear();
  clear_has_m_stzone_getlivness_request();
}
inline const ::Zone_GetLivness_Request& CSMsgBody::m_stzone_getlivness_request() const {
  return m_stzone_getlivness_request_ != NULL ? *m_stzone_getlivness_request_ : *default_instance_->m_stzone_getlivness_request_;
}
inline ::Zone_GetLivness_Request* CSMsgBody::mutable_m_stzone_getlivness_request() {
  set_has_m_stzone_getlivness_request();
  if (m_stzone_getlivness_request_ == NULL) m_stzone_getlivness_request_ = new ::Zone_GetLivness_Request;
  return m_stzone_getlivness_request_;
}
inline ::Zone_GetLivness_Request* CSMsgBody::release_m_stzone_getlivness_request() {
  clear_has_m_stzone_getlivness_request();
  ::Zone_GetLivness_Request* temp = m_stzone_getlivness_request_;
  m_stzone_getlivness_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getlivness_request(::Zone_GetLivness_Request* m_stzone_getlivness_request) {
  delete m_stzone_getlivness_request_;
  m_stzone_getlivness_request_ = m_stzone_getlivness_request;
  if (m_stzone_getlivness_request) {
    set_has_m_stzone_getlivness_request();
  } else {
    clear_has_m_stzone_getlivness_request();
  }
}

// optional .Zone_GetLivness_Response m_stZone_GetLivness_Response = 135;
inline bool CSMsgBody::has_m_stzone_getlivness_response() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getlivness_response() {
  _has_bits_[2] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getlivness_response() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stzone_getlivness_response() {
  if (m_stzone_getlivness_response_ != NULL) m_stzone_getlivness_response_->::Zone_GetLivness_Response::Clear();
  clear_has_m_stzone_getlivness_response();
}
inline const ::Zone_GetLivness_Response& CSMsgBody::m_stzone_getlivness_response() const {
  return m_stzone_getlivness_response_ != NULL ? *m_stzone_getlivness_response_ : *default_instance_->m_stzone_getlivness_response_;
}
inline ::Zone_GetLivness_Response* CSMsgBody::mutable_m_stzone_getlivness_response() {
  set_has_m_stzone_getlivness_response();
  if (m_stzone_getlivness_response_ == NULL) m_stzone_getlivness_response_ = new ::Zone_GetLivness_Response;
  return m_stzone_getlivness_response_;
}
inline ::Zone_GetLivness_Response* CSMsgBody::release_m_stzone_getlivness_response() {
  clear_has_m_stzone_getlivness_response();
  ::Zone_GetLivness_Response* temp = m_stzone_getlivness_response_;
  m_stzone_getlivness_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getlivness_response(::Zone_GetLivness_Response* m_stzone_getlivness_response) {
  delete m_stzone_getlivness_response_;
  m_stzone_getlivness_response_ = m_stzone_getlivness_response;
  if (m_stzone_getlivness_response) {
    set_has_m_stzone_getlivness_response();
  } else {
    clear_has_m_stzone_getlivness_response();
  }
}

// optional .Zone_SetExchange_Request m_stZone_SetExchange_Request = 140;
inline bool CSMsgBody::has_m_stzone_setexchange_request() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_setexchange_request() {
  _has_bits_[2] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stzone_setexchange_request() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stzone_setexchange_request() {
  if (m_stzone_setexchange_request_ != NULL) m_stzone_setexchange_request_->::Zone_SetExchange_Request::Clear();
  clear_has_m_stzone_setexchange_request();
}
inline const ::Zone_SetExchange_Request& CSMsgBody::m_stzone_setexchange_request() const {
  return m_stzone_setexchange_request_ != NULL ? *m_stzone_setexchange_request_ : *default_instance_->m_stzone_setexchange_request_;
}
inline ::Zone_SetExchange_Request* CSMsgBody::mutable_m_stzone_setexchange_request() {
  set_has_m_stzone_setexchange_request();
  if (m_stzone_setexchange_request_ == NULL) m_stzone_setexchange_request_ = new ::Zone_SetExchange_Request;
  return m_stzone_setexchange_request_;
}
inline ::Zone_SetExchange_Request* CSMsgBody::release_m_stzone_setexchange_request() {
  clear_has_m_stzone_setexchange_request();
  ::Zone_SetExchange_Request* temp = m_stzone_setexchange_request_;
  m_stzone_setexchange_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_setexchange_request(::Zone_SetExchange_Request* m_stzone_setexchange_request) {
  delete m_stzone_setexchange_request_;
  m_stzone_setexchange_request_ = m_stzone_setexchange_request;
  if (m_stzone_setexchange_request) {
    set_has_m_stzone_setexchange_request();
  } else {
    clear_has_m_stzone_setexchange_request();
  }
}

// optional .Zone_SetExchange_Response m_stZone_SetExchange_Response = 141;
inline bool CSMsgBody::has_m_stzone_setexchange_response() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_setexchange_response() {
  _has_bits_[2] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stzone_setexchange_response() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stzone_setexchange_response() {
  if (m_stzone_setexchange_response_ != NULL) m_stzone_setexchange_response_->::Zone_SetExchange_Response::Clear();
  clear_has_m_stzone_setexchange_response();
}
inline const ::Zone_SetExchange_Response& CSMsgBody::m_stzone_setexchange_response() const {
  return m_stzone_setexchange_response_ != NULL ? *m_stzone_setexchange_response_ : *default_instance_->m_stzone_setexchange_response_;
}
inline ::Zone_SetExchange_Response* CSMsgBody::mutable_m_stzone_setexchange_response() {
  set_has_m_stzone_setexchange_response();
  if (m_stzone_setexchange_response_ == NULL) m_stzone_setexchange_response_ = new ::Zone_SetExchange_Response;
  return m_stzone_setexchange_response_;
}
inline ::Zone_SetExchange_Response* CSMsgBody::release_m_stzone_setexchange_response() {
  clear_has_m_stzone_setexchange_response();
  ::Zone_SetExchange_Response* temp = m_stzone_setexchange_response_;
  m_stzone_setexchange_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_setexchange_response(::Zone_SetExchange_Response* m_stzone_setexchange_response) {
  delete m_stzone_setexchange_response_;
  m_stzone_setexchange_response_ = m_stzone_setexchange_response;
  if (m_stzone_setexchange_response) {
    set_has_m_stzone_setexchange_response();
  } else {
    clear_has_m_stzone_setexchange_response();
  }
}

// optional .Zone_ExchangeItem_Request m_stZone_ExchangeItem_Request = 142;
inline bool CSMsgBody::has_m_stzone_exchangeitem_request() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_exchangeitem_request() {
  _has_bits_[2] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stzone_exchangeitem_request() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stzone_exchangeitem_request() {
  if (m_stzone_exchangeitem_request_ != NULL) m_stzone_exchangeitem_request_->::Zone_ExchangeItem_Request::Clear();
  clear_has_m_stzone_exchangeitem_request();
}
inline const ::Zone_ExchangeItem_Request& CSMsgBody::m_stzone_exchangeitem_request() const {
  return m_stzone_exchangeitem_request_ != NULL ? *m_stzone_exchangeitem_request_ : *default_instance_->m_stzone_exchangeitem_request_;
}
inline ::Zone_ExchangeItem_Request* CSMsgBody::mutable_m_stzone_exchangeitem_request() {
  set_has_m_stzone_exchangeitem_request();
  if (m_stzone_exchangeitem_request_ == NULL) m_stzone_exchangeitem_request_ = new ::Zone_ExchangeItem_Request;
  return m_stzone_exchangeitem_request_;
}
inline ::Zone_ExchangeItem_Request* CSMsgBody::release_m_stzone_exchangeitem_request() {
  clear_has_m_stzone_exchangeitem_request();
  ::Zone_ExchangeItem_Request* temp = m_stzone_exchangeitem_request_;
  m_stzone_exchangeitem_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_exchangeitem_request(::Zone_ExchangeItem_Request* m_stzone_exchangeitem_request) {
  delete m_stzone_exchangeitem_request_;
  m_stzone_exchangeitem_request_ = m_stzone_exchangeitem_request;
  if (m_stzone_exchangeitem_request) {
    set_has_m_stzone_exchangeitem_request();
  } else {
    clear_has_m_stzone_exchangeitem_request();
  }
}

// optional .Zone_ExchangeItem_Response m_stZone_ExchangeItem_Response = 143;
inline bool CSMsgBody::has_m_stzone_exchangeitem_response() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_exchangeitem_response() {
  _has_bits_[2] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stzone_exchangeitem_response() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stzone_exchangeitem_response() {
  if (m_stzone_exchangeitem_response_ != NULL) m_stzone_exchangeitem_response_->::Zone_ExchangeItem_Response::Clear();
  clear_has_m_stzone_exchangeitem_response();
}
inline const ::Zone_ExchangeItem_Response& CSMsgBody::m_stzone_exchangeitem_response() const {
  return m_stzone_exchangeitem_response_ != NULL ? *m_stzone_exchangeitem_response_ : *default_instance_->m_stzone_exchangeitem_response_;
}
inline ::Zone_ExchangeItem_Response* CSMsgBody::mutable_m_stzone_exchangeitem_response() {
  set_has_m_stzone_exchangeitem_response();
  if (m_stzone_exchangeitem_response_ == NULL) m_stzone_exchangeitem_response_ = new ::Zone_ExchangeItem_Response;
  return m_stzone_exchangeitem_response_;
}
inline ::Zone_ExchangeItem_Response* CSMsgBody::release_m_stzone_exchangeitem_response() {
  clear_has_m_stzone_exchangeitem_response();
  ::Zone_ExchangeItem_Response* temp = m_stzone_exchangeitem_response_;
  m_stzone_exchangeitem_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_exchangeitem_response(::Zone_ExchangeItem_Response* m_stzone_exchangeitem_response) {
  delete m_stzone_exchangeitem_response_;
  m_stzone_exchangeitem_response_ = m_stzone_exchangeitem_response;
  if (m_stzone_exchangeitem_response) {
    set_has_m_stzone_exchangeitem_response();
  } else {
    clear_has_m_stzone_exchangeitem_response();
  }
}

// optional .World_AddLimitNum_Request m_stWorld_AddLimitNum_Request = 144;
inline bool CSMsgBody::has_m_stworld_addlimitnum_request() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_addlimitnum_request() {
  _has_bits_[2] |= 0x40000000u;
}
inline void CSMsgBody::clear_has_m_stworld_addlimitnum_request() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void CSMsgBody::clear_m_stworld_addlimitnum_request() {
  if (m_stworld_addlimitnum_request_ != NULL) m_stworld_addlimitnum_request_->::World_AddLimitNum_Request::Clear();
  clear_has_m_stworld_addlimitnum_request();
}
inline const ::World_AddLimitNum_Request& CSMsgBody::m_stworld_addlimitnum_request() const {
  return m_stworld_addlimitnum_request_ != NULL ? *m_stworld_addlimitnum_request_ : *default_instance_->m_stworld_addlimitnum_request_;
}
inline ::World_AddLimitNum_Request* CSMsgBody::mutable_m_stworld_addlimitnum_request() {
  set_has_m_stworld_addlimitnum_request();
  if (m_stworld_addlimitnum_request_ == NULL) m_stworld_addlimitnum_request_ = new ::World_AddLimitNum_Request;
  return m_stworld_addlimitnum_request_;
}
inline ::World_AddLimitNum_Request* CSMsgBody::release_m_stworld_addlimitnum_request() {
  clear_has_m_stworld_addlimitnum_request();
  ::World_AddLimitNum_Request* temp = m_stworld_addlimitnum_request_;
  m_stworld_addlimitnum_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_addlimitnum_request(::World_AddLimitNum_Request* m_stworld_addlimitnum_request) {
  delete m_stworld_addlimitnum_request_;
  m_stworld_addlimitnum_request_ = m_stworld_addlimitnum_request;
  if (m_stworld_addlimitnum_request) {
    set_has_m_stworld_addlimitnum_request();
  } else {
    clear_has_m_stworld_addlimitnum_request();
  }
}

// optional .World_AddLimitNum_Response m_stWorld_AddLimitNum_Response = 145;
inline bool CSMsgBody::has_m_stworld_addlimitnum_response() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_addlimitnum_response() {
  _has_bits_[2] |= 0x80000000u;
}
inline void CSMsgBody::clear_has_m_stworld_addlimitnum_response() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void CSMsgBody::clear_m_stworld_addlimitnum_response() {
  if (m_stworld_addlimitnum_response_ != NULL) m_stworld_addlimitnum_response_->::World_AddLimitNum_Response::Clear();
  clear_has_m_stworld_addlimitnum_response();
}
inline const ::World_AddLimitNum_Response& CSMsgBody::m_stworld_addlimitnum_response() const {
  return m_stworld_addlimitnum_response_ != NULL ? *m_stworld_addlimitnum_response_ : *default_instance_->m_stworld_addlimitnum_response_;
}
inline ::World_AddLimitNum_Response* CSMsgBody::mutable_m_stworld_addlimitnum_response() {
  set_has_m_stworld_addlimitnum_response();
  if (m_stworld_addlimitnum_response_ == NULL) m_stworld_addlimitnum_response_ = new ::World_AddLimitNum_Response;
  return m_stworld_addlimitnum_response_;
}
inline ::World_AddLimitNum_Response* CSMsgBody::release_m_stworld_addlimitnum_response() {
  clear_has_m_stworld_addlimitnum_response();
  ::World_AddLimitNum_Response* temp = m_stworld_addlimitnum_response_;
  m_stworld_addlimitnum_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_addlimitnum_response(::World_AddLimitNum_Response* m_stworld_addlimitnum_response) {
  delete m_stworld_addlimitnum_response_;
  m_stworld_addlimitnum_response_ = m_stworld_addlimitnum_response;
  if (m_stworld_addlimitnum_response) {
    set_has_m_stworld_addlimitnum_response();
  } else {
    clear_has_m_stworld_addlimitnum_response();
  }
}

// optional .Zone_GetLimitNum_Request m_stZone_GetLimitNum_Request = 146;
inline bool CSMsgBody::has_m_stzone_getlimitnum_request() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getlimitnum_request() {
  _has_bits_[3] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stzone_getlimitnum_request() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stzone_getlimitnum_request() {
  if (m_stzone_getlimitnum_request_ != NULL) m_stzone_getlimitnum_request_->::Zone_GetLimitNum_Request::Clear();
  clear_has_m_stzone_getlimitnum_request();
}
inline const ::Zone_GetLimitNum_Request& CSMsgBody::m_stzone_getlimitnum_request() const {
  return m_stzone_getlimitnum_request_ != NULL ? *m_stzone_getlimitnum_request_ : *default_instance_->m_stzone_getlimitnum_request_;
}
inline ::Zone_GetLimitNum_Request* CSMsgBody::mutable_m_stzone_getlimitnum_request() {
  set_has_m_stzone_getlimitnum_request();
  if (m_stzone_getlimitnum_request_ == NULL) m_stzone_getlimitnum_request_ = new ::Zone_GetLimitNum_Request;
  return m_stzone_getlimitnum_request_;
}
inline ::Zone_GetLimitNum_Request* CSMsgBody::release_m_stzone_getlimitnum_request() {
  clear_has_m_stzone_getlimitnum_request();
  ::Zone_GetLimitNum_Request* temp = m_stzone_getlimitnum_request_;
  m_stzone_getlimitnum_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getlimitnum_request(::Zone_GetLimitNum_Request* m_stzone_getlimitnum_request) {
  delete m_stzone_getlimitnum_request_;
  m_stzone_getlimitnum_request_ = m_stzone_getlimitnum_request;
  if (m_stzone_getlimitnum_request) {
    set_has_m_stzone_getlimitnum_request();
  } else {
    clear_has_m_stzone_getlimitnum_request();
  }
}

// optional .Zone_GetLimitNum_Response m_stZone_GetLimitNum_Response = 147;
inline bool CSMsgBody::has_m_stzone_getlimitnum_response() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getlimitnum_response() {
  _has_bits_[3] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stzone_getlimitnum_response() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stzone_getlimitnum_response() {
  if (m_stzone_getlimitnum_response_ != NULL) m_stzone_getlimitnum_response_->::Zone_GetLimitNum_Response::Clear();
  clear_has_m_stzone_getlimitnum_response();
}
inline const ::Zone_GetLimitNum_Response& CSMsgBody::m_stzone_getlimitnum_response() const {
  return m_stzone_getlimitnum_response_ != NULL ? *m_stzone_getlimitnum_response_ : *default_instance_->m_stzone_getlimitnum_response_;
}
inline ::Zone_GetLimitNum_Response* CSMsgBody::mutable_m_stzone_getlimitnum_response() {
  set_has_m_stzone_getlimitnum_response();
  if (m_stzone_getlimitnum_response_ == NULL) m_stzone_getlimitnum_response_ = new ::Zone_GetLimitNum_Response;
  return m_stzone_getlimitnum_response_;
}
inline ::Zone_GetLimitNum_Response* CSMsgBody::release_m_stzone_getlimitnum_response() {
  clear_has_m_stzone_getlimitnum_response();
  ::Zone_GetLimitNum_Response* temp = m_stzone_getlimitnum_response_;
  m_stzone_getlimitnum_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getlimitnum_response(::Zone_GetLimitNum_Response* m_stzone_getlimitnum_response) {
  delete m_stzone_getlimitnum_response_;
  m_stzone_getlimitnum_response_ = m_stzone_getlimitnum_response;
  if (m_stzone_getlimitnum_response) {
    set_has_m_stzone_getlimitnum_response();
  } else {
    clear_has_m_stzone_getlimitnum_response();
  }
}

// optional .World_GetCardNo_Request m_stWorld_GetCardNo_Request = 148;
inline bool CSMsgBody::has_m_stworld_getcardno_request() const {
  return (_has_bits_[3] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getcardno_request() {
  _has_bits_[3] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stworld_getcardno_request() {
  _has_bits_[3] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stworld_getcardno_request() {
  if (m_stworld_getcardno_request_ != NULL) m_stworld_getcardno_request_->::World_GetCardNo_Request::Clear();
  clear_has_m_stworld_getcardno_request();
}
inline const ::World_GetCardNo_Request& CSMsgBody::m_stworld_getcardno_request() const {
  return m_stworld_getcardno_request_ != NULL ? *m_stworld_getcardno_request_ : *default_instance_->m_stworld_getcardno_request_;
}
inline ::World_GetCardNo_Request* CSMsgBody::mutable_m_stworld_getcardno_request() {
  set_has_m_stworld_getcardno_request();
  if (m_stworld_getcardno_request_ == NULL) m_stworld_getcardno_request_ = new ::World_GetCardNo_Request;
  return m_stworld_getcardno_request_;
}
inline ::World_GetCardNo_Request* CSMsgBody::release_m_stworld_getcardno_request() {
  clear_has_m_stworld_getcardno_request();
  ::World_GetCardNo_Request* temp = m_stworld_getcardno_request_;
  m_stworld_getcardno_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getcardno_request(::World_GetCardNo_Request* m_stworld_getcardno_request) {
  delete m_stworld_getcardno_request_;
  m_stworld_getcardno_request_ = m_stworld_getcardno_request;
  if (m_stworld_getcardno_request) {
    set_has_m_stworld_getcardno_request();
  } else {
    clear_has_m_stworld_getcardno_request();
  }
}

// optional .World_GetCardNo_Response m_stWorld_GetCardNo_Response = 149;
inline bool CSMsgBody::has_m_stworld_getcardno_response() const {
  return (_has_bits_[3] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getcardno_response() {
  _has_bits_[3] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_stworld_getcardno_response() {
  _has_bits_[3] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_stworld_getcardno_response() {
  if (m_stworld_getcardno_response_ != NULL) m_stworld_getcardno_response_->::World_GetCardNo_Response::Clear();
  clear_has_m_stworld_getcardno_response();
}
inline const ::World_GetCardNo_Response& CSMsgBody::m_stworld_getcardno_response() const {
  return m_stworld_getcardno_response_ != NULL ? *m_stworld_getcardno_response_ : *default_instance_->m_stworld_getcardno_response_;
}
inline ::World_GetCardNo_Response* CSMsgBody::mutable_m_stworld_getcardno_response() {
  set_has_m_stworld_getcardno_response();
  if (m_stworld_getcardno_response_ == NULL) m_stworld_getcardno_response_ = new ::World_GetCardNo_Response;
  return m_stworld_getcardno_response_;
}
inline ::World_GetCardNo_Response* CSMsgBody::release_m_stworld_getcardno_response() {
  clear_has_m_stworld_getcardno_response();
  ::World_GetCardNo_Response* temp = m_stworld_getcardno_response_;
  m_stworld_getcardno_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getcardno_response(::World_GetCardNo_Response* m_stworld_getcardno_response) {
  delete m_stworld_getcardno_response_;
  m_stworld_getcardno_response_ = m_stworld_getcardno_response;
  if (m_stworld_getcardno_response) {
    set_has_m_stworld_getcardno_response();
  } else {
    clear_has_m_stworld_getcardno_response();
  }
}

// optional .Zone_NewMailInfo_Notify m_stZone_NewMailInfo_Notify = 150;
inline bool CSMsgBody::has_m_stzone_newmailinfo_notify() const {
  return (_has_bits_[3] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_newmailinfo_notify() {
  _has_bits_[3] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_stzone_newmailinfo_notify() {
  _has_bits_[3] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_stzone_newmailinfo_notify() {
  if (m_stzone_newmailinfo_notify_ != NULL) m_stzone_newmailinfo_notify_->::Zone_NewMailInfo_Notify::Clear();
  clear_has_m_stzone_newmailinfo_notify();
}
inline const ::Zone_NewMailInfo_Notify& CSMsgBody::m_stzone_newmailinfo_notify() const {
  return m_stzone_newmailinfo_notify_ != NULL ? *m_stzone_newmailinfo_notify_ : *default_instance_->m_stzone_newmailinfo_notify_;
}
inline ::Zone_NewMailInfo_Notify* CSMsgBody::mutable_m_stzone_newmailinfo_notify() {
  set_has_m_stzone_newmailinfo_notify();
  if (m_stzone_newmailinfo_notify_ == NULL) m_stzone_newmailinfo_notify_ = new ::Zone_NewMailInfo_Notify;
  return m_stzone_newmailinfo_notify_;
}
inline ::Zone_NewMailInfo_Notify* CSMsgBody::release_m_stzone_newmailinfo_notify() {
  clear_has_m_stzone_newmailinfo_notify();
  ::Zone_NewMailInfo_Notify* temp = m_stzone_newmailinfo_notify_;
  m_stzone_newmailinfo_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_newmailinfo_notify(::Zone_NewMailInfo_Notify* m_stzone_newmailinfo_notify) {
  delete m_stzone_newmailinfo_notify_;
  m_stzone_newmailinfo_notify_ = m_stzone_newmailinfo_notify;
  if (m_stzone_newmailinfo_notify) {
    set_has_m_stzone_newmailinfo_notify();
  } else {
    clear_has_m_stzone_newmailinfo_notify();
  }
}

// optional .Zone_MailOpera_Request m_stZone_MailOpera_Request = 151;
inline bool CSMsgBody::has_m_stzone_mailopera_request() const {
  return (_has_bits_[3] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_mailopera_request() {
  _has_bits_[3] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_stzone_mailopera_request() {
  _has_bits_[3] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_stzone_mailopera_request() {
  if (m_stzone_mailopera_request_ != NULL) m_stzone_mailopera_request_->::Zone_MailOpera_Request::Clear();
  clear_has_m_stzone_mailopera_request();
}
inline const ::Zone_MailOpera_Request& CSMsgBody::m_stzone_mailopera_request() const {
  return m_stzone_mailopera_request_ != NULL ? *m_stzone_mailopera_request_ : *default_instance_->m_stzone_mailopera_request_;
}
inline ::Zone_MailOpera_Request* CSMsgBody::mutable_m_stzone_mailopera_request() {
  set_has_m_stzone_mailopera_request();
  if (m_stzone_mailopera_request_ == NULL) m_stzone_mailopera_request_ = new ::Zone_MailOpera_Request;
  return m_stzone_mailopera_request_;
}
inline ::Zone_MailOpera_Request* CSMsgBody::release_m_stzone_mailopera_request() {
  clear_has_m_stzone_mailopera_request();
  ::Zone_MailOpera_Request* temp = m_stzone_mailopera_request_;
  m_stzone_mailopera_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_mailopera_request(::Zone_MailOpera_Request* m_stzone_mailopera_request) {
  delete m_stzone_mailopera_request_;
  m_stzone_mailopera_request_ = m_stzone_mailopera_request;
  if (m_stzone_mailopera_request) {
    set_has_m_stzone_mailopera_request();
  } else {
    clear_has_m_stzone_mailopera_request();
  }
}

// optional .Zone_MailOpera_Response m_stZone_MailOpera_Response = 152;
inline bool CSMsgBody::has_m_stzone_mailopera_response() const {
  return (_has_bits_[3] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_mailopera_response() {
  _has_bits_[3] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_stzone_mailopera_response() {
  _has_bits_[3] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_stzone_mailopera_response() {
  if (m_stzone_mailopera_response_ != NULL) m_stzone_mailopera_response_->::Zone_MailOpera_Response::Clear();
  clear_has_m_stzone_mailopera_response();
}
inline const ::Zone_MailOpera_Response& CSMsgBody::m_stzone_mailopera_response() const {
  return m_stzone_mailopera_response_ != NULL ? *m_stzone_mailopera_response_ : *default_instance_->m_stzone_mailopera_response_;
}
inline ::Zone_MailOpera_Response* CSMsgBody::mutable_m_stzone_mailopera_response() {
  set_has_m_stzone_mailopera_response();
  if (m_stzone_mailopera_response_ == NULL) m_stzone_mailopera_response_ = new ::Zone_MailOpera_Response;
  return m_stzone_mailopera_response_;
}
inline ::Zone_MailOpera_Response* CSMsgBody::release_m_stzone_mailopera_response() {
  clear_has_m_stzone_mailopera_response();
  ::Zone_MailOpera_Response* temp = m_stzone_mailopera_response_;
  m_stzone_mailopera_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_mailopera_response(::Zone_MailOpera_Response* m_stzone_mailopera_response) {
  delete m_stzone_mailopera_response_;
  m_stzone_mailopera_response_ = m_stzone_mailopera_response;
  if (m_stzone_mailopera_response) {
    set_has_m_stzone_mailopera_response();
  } else {
    clear_has_m_stzone_mailopera_response();
  }
}

// optional .World_SendMail_Request m_stWorld_SendMail_Request = 153;
inline bool CSMsgBody::has_m_stworld_sendmail_request() const {
  return (_has_bits_[3] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_sendmail_request() {
  _has_bits_[3] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_stworld_sendmail_request() {
  _has_bits_[3] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_stworld_sendmail_request() {
  if (m_stworld_sendmail_request_ != NULL) m_stworld_sendmail_request_->::World_SendMail_Request::Clear();
  clear_has_m_stworld_sendmail_request();
}
inline const ::World_SendMail_Request& CSMsgBody::m_stworld_sendmail_request() const {
  return m_stworld_sendmail_request_ != NULL ? *m_stworld_sendmail_request_ : *default_instance_->m_stworld_sendmail_request_;
}
inline ::World_SendMail_Request* CSMsgBody::mutable_m_stworld_sendmail_request() {
  set_has_m_stworld_sendmail_request();
  if (m_stworld_sendmail_request_ == NULL) m_stworld_sendmail_request_ = new ::World_SendMail_Request;
  return m_stworld_sendmail_request_;
}
inline ::World_SendMail_Request* CSMsgBody::release_m_stworld_sendmail_request() {
  clear_has_m_stworld_sendmail_request();
  ::World_SendMail_Request* temp = m_stworld_sendmail_request_;
  m_stworld_sendmail_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_sendmail_request(::World_SendMail_Request* m_stworld_sendmail_request) {
  delete m_stworld_sendmail_request_;
  m_stworld_sendmail_request_ = m_stworld_sendmail_request;
  if (m_stworld_sendmail_request) {
    set_has_m_stworld_sendmail_request();
  } else {
    clear_has_m_stworld_sendmail_request();
  }
}

// optional .World_SendMail_Response m_stWorld_SendMail_Response = 154;
inline bool CSMsgBody::has_m_stworld_sendmail_response() const {
  return (_has_bits_[3] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_sendmail_response() {
  _has_bits_[3] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stworld_sendmail_response() {
  _has_bits_[3] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stworld_sendmail_response() {
  if (m_stworld_sendmail_response_ != NULL) m_stworld_sendmail_response_->::World_SendMail_Response::Clear();
  clear_has_m_stworld_sendmail_response();
}
inline const ::World_SendMail_Response& CSMsgBody::m_stworld_sendmail_response() const {
  return m_stworld_sendmail_response_ != NULL ? *m_stworld_sendmail_response_ : *default_instance_->m_stworld_sendmail_response_;
}
inline ::World_SendMail_Response* CSMsgBody::mutable_m_stworld_sendmail_response() {
  set_has_m_stworld_sendmail_response();
  if (m_stworld_sendmail_response_ == NULL) m_stworld_sendmail_response_ = new ::World_SendMail_Response;
  return m_stworld_sendmail_response_;
}
inline ::World_SendMail_Response* CSMsgBody::release_m_stworld_sendmail_response() {
  clear_has_m_stworld_sendmail_response();
  ::World_SendMail_Response* temp = m_stworld_sendmail_response_;
  m_stworld_sendmail_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_sendmail_response(::World_SendMail_Response* m_stworld_sendmail_response) {
  delete m_stworld_sendmail_response_;
  m_stworld_sendmail_response_ = m_stworld_sendmail_response;
  if (m_stworld_sendmail_response) {
    set_has_m_stworld_sendmail_response();
  } else {
    clear_has_m_stworld_sendmail_response();
  }
}

// optional .World_SystemMailID_Notify m_stWorld_SystemMailID_Notify = 155;
inline bool CSMsgBody::has_m_stworld_systemmailid_notify() const {
  return (_has_bits_[3] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_systemmailid_notify() {
  _has_bits_[3] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stworld_systemmailid_notify() {
  _has_bits_[3] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stworld_systemmailid_notify() {
  if (m_stworld_systemmailid_notify_ != NULL) m_stworld_systemmailid_notify_->::World_SystemMailID_Notify::Clear();
  clear_has_m_stworld_systemmailid_notify();
}
inline const ::World_SystemMailID_Notify& CSMsgBody::m_stworld_systemmailid_notify() const {
  return m_stworld_systemmailid_notify_ != NULL ? *m_stworld_systemmailid_notify_ : *default_instance_->m_stworld_systemmailid_notify_;
}
inline ::World_SystemMailID_Notify* CSMsgBody::mutable_m_stworld_systemmailid_notify() {
  set_has_m_stworld_systemmailid_notify();
  if (m_stworld_systemmailid_notify_ == NULL) m_stworld_systemmailid_notify_ = new ::World_SystemMailID_Notify;
  return m_stworld_systemmailid_notify_;
}
inline ::World_SystemMailID_Notify* CSMsgBody::release_m_stworld_systemmailid_notify() {
  clear_has_m_stworld_systemmailid_notify();
  ::World_SystemMailID_Notify* temp = m_stworld_systemmailid_notify_;
  m_stworld_systemmailid_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_systemmailid_notify(::World_SystemMailID_Notify* m_stworld_systemmailid_notify) {
  delete m_stworld_systemmailid_notify_;
  m_stworld_systemmailid_notify_ = m_stworld_systemmailid_notify;
  if (m_stworld_systemmailid_notify) {
    set_has_m_stworld_systemmailid_notify();
  } else {
    clear_has_m_stworld_systemmailid_notify();
  }
}

// optional .World_GetSystemMail_Request m_stWorld_GetSystemMail_Request = 156;
inline bool CSMsgBody::has_m_stworld_getsystemmail_request() const {
  return (_has_bits_[3] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getsystemmail_request() {
  _has_bits_[3] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_stworld_getsystemmail_request() {
  _has_bits_[3] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_stworld_getsystemmail_request() {
  if (m_stworld_getsystemmail_request_ != NULL) m_stworld_getsystemmail_request_->::World_GetSystemMail_Request::Clear();
  clear_has_m_stworld_getsystemmail_request();
}
inline const ::World_GetSystemMail_Request& CSMsgBody::m_stworld_getsystemmail_request() const {
  return m_stworld_getsystemmail_request_ != NULL ? *m_stworld_getsystemmail_request_ : *default_instance_->m_stworld_getsystemmail_request_;
}
inline ::World_GetSystemMail_Request* CSMsgBody::mutable_m_stworld_getsystemmail_request() {
  set_has_m_stworld_getsystemmail_request();
  if (m_stworld_getsystemmail_request_ == NULL) m_stworld_getsystemmail_request_ = new ::World_GetSystemMail_Request;
  return m_stworld_getsystemmail_request_;
}
inline ::World_GetSystemMail_Request* CSMsgBody::release_m_stworld_getsystemmail_request() {
  clear_has_m_stworld_getsystemmail_request();
  ::World_GetSystemMail_Request* temp = m_stworld_getsystemmail_request_;
  m_stworld_getsystemmail_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getsystemmail_request(::World_GetSystemMail_Request* m_stworld_getsystemmail_request) {
  delete m_stworld_getsystemmail_request_;
  m_stworld_getsystemmail_request_ = m_stworld_getsystemmail_request;
  if (m_stworld_getsystemmail_request) {
    set_has_m_stworld_getsystemmail_request();
  } else {
    clear_has_m_stworld_getsystemmail_request();
  }
}

// optional .World_GetSystemMail_Response m_stWorld_GetSystemMail_Response = 157;
inline bool CSMsgBody::has_m_stworld_getsystemmail_response() const {
  return (_has_bits_[3] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getsystemmail_response() {
  _has_bits_[3] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_stworld_getsystemmail_response() {
  _has_bits_[3] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_stworld_getsystemmail_response() {
  if (m_stworld_getsystemmail_response_ != NULL) m_stworld_getsystemmail_response_->::World_GetSystemMail_Response::Clear();
  clear_has_m_stworld_getsystemmail_response();
}
inline const ::World_GetSystemMail_Response& CSMsgBody::m_stworld_getsystemmail_response() const {
  return m_stworld_getsystemmail_response_ != NULL ? *m_stworld_getsystemmail_response_ : *default_instance_->m_stworld_getsystemmail_response_;
}
inline ::World_GetSystemMail_Response* CSMsgBody::mutable_m_stworld_getsystemmail_response() {
  set_has_m_stworld_getsystemmail_response();
  if (m_stworld_getsystemmail_response_ == NULL) m_stworld_getsystemmail_response_ = new ::World_GetSystemMail_Response;
  return m_stworld_getsystemmail_response_;
}
inline ::World_GetSystemMail_Response* CSMsgBody::release_m_stworld_getsystemmail_response() {
  clear_has_m_stworld_getsystemmail_response();
  ::World_GetSystemMail_Response* temp = m_stworld_getsystemmail_response_;
  m_stworld_getsystemmail_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getsystemmail_response(::World_GetSystemMail_Response* m_stworld_getsystemmail_response) {
  delete m_stworld_getsystemmail_response_;
  m_stworld_getsystemmail_response_ = m_stworld_getsystemmail_response;
  if (m_stworld_getsystemmail_response) {
    set_has_m_stworld_getsystemmail_response();
  } else {
    clear_has_m_stworld_getsystemmail_response();
  }
}

// optional .Zone_GetRankInfo_Request m_stZone_GetRankInfo_Request = 160;
inline bool CSMsgBody::has_m_stzone_getrankinfo_request() const {
  return (_has_bits_[3] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getrankinfo_request() {
  _has_bits_[3] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_stzone_getrankinfo_request() {
  _has_bits_[3] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_stzone_getrankinfo_request() {
  if (m_stzone_getrankinfo_request_ != NULL) m_stzone_getrankinfo_request_->::Zone_GetRankInfo_Request::Clear();
  clear_has_m_stzone_getrankinfo_request();
}
inline const ::Zone_GetRankInfo_Request& CSMsgBody::m_stzone_getrankinfo_request() const {
  return m_stzone_getrankinfo_request_ != NULL ? *m_stzone_getrankinfo_request_ : *default_instance_->m_stzone_getrankinfo_request_;
}
inline ::Zone_GetRankInfo_Request* CSMsgBody::mutable_m_stzone_getrankinfo_request() {
  set_has_m_stzone_getrankinfo_request();
  if (m_stzone_getrankinfo_request_ == NULL) m_stzone_getrankinfo_request_ = new ::Zone_GetRankInfo_Request;
  return m_stzone_getrankinfo_request_;
}
inline ::Zone_GetRankInfo_Request* CSMsgBody::release_m_stzone_getrankinfo_request() {
  clear_has_m_stzone_getrankinfo_request();
  ::Zone_GetRankInfo_Request* temp = m_stzone_getrankinfo_request_;
  m_stzone_getrankinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getrankinfo_request(::Zone_GetRankInfo_Request* m_stzone_getrankinfo_request) {
  delete m_stzone_getrankinfo_request_;
  m_stzone_getrankinfo_request_ = m_stzone_getrankinfo_request;
  if (m_stzone_getrankinfo_request) {
    set_has_m_stzone_getrankinfo_request();
  } else {
    clear_has_m_stzone_getrankinfo_request();
  }
}

// optional .Zone_GetRankInfo_Response m_stZone_GetRankInfo_Response = 161;
inline bool CSMsgBody::has_m_stzone_getrankinfo_response() const {
  return (_has_bits_[3] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getrankinfo_response() {
  _has_bits_[3] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_stzone_getrankinfo_response() {
  _has_bits_[3] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_stzone_getrankinfo_response() {
  if (m_stzone_getrankinfo_response_ != NULL) m_stzone_getrankinfo_response_->::Zone_GetRankInfo_Response::Clear();
  clear_has_m_stzone_getrankinfo_response();
}
inline const ::Zone_GetRankInfo_Response& CSMsgBody::m_stzone_getrankinfo_response() const {
  return m_stzone_getrankinfo_response_ != NULL ? *m_stzone_getrankinfo_response_ : *default_instance_->m_stzone_getrankinfo_response_;
}
inline ::Zone_GetRankInfo_Response* CSMsgBody::mutable_m_stzone_getrankinfo_response() {
  set_has_m_stzone_getrankinfo_response();
  if (m_stzone_getrankinfo_response_ == NULL) m_stzone_getrankinfo_response_ = new ::Zone_GetRankInfo_Response;
  return m_stzone_getrankinfo_response_;
}
inline ::Zone_GetRankInfo_Response* CSMsgBody::release_m_stzone_getrankinfo_response() {
  clear_has_m_stzone_getrankinfo_response();
  ::Zone_GetRankInfo_Response* temp = m_stzone_getrankinfo_response_;
  m_stzone_getrankinfo_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getrankinfo_response(::Zone_GetRankInfo_Response* m_stzone_getrankinfo_response) {
  delete m_stzone_getrankinfo_response_;
  m_stzone_getrankinfo_response_ = m_stzone_getrankinfo_response;
  if (m_stzone_getrankinfo_response) {
    set_has_m_stzone_getrankinfo_response();
  } else {
    clear_has_m_stzone_getrankinfo_response();
  }
}

// optional .World_UpdateRank_Request m_stWorld_UpdateRank_Request = 162;
inline bool CSMsgBody::has_m_stworld_updaterank_request() const {
  return (_has_bits_[3] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updaterank_request() {
  _has_bits_[3] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_stworld_updaterank_request() {
  _has_bits_[3] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_stworld_updaterank_request() {
  if (m_stworld_updaterank_request_ != NULL) m_stworld_updaterank_request_->::World_UpdateRank_Request::Clear();
  clear_has_m_stworld_updaterank_request();
}
inline const ::World_UpdateRank_Request& CSMsgBody::m_stworld_updaterank_request() const {
  return m_stworld_updaterank_request_ != NULL ? *m_stworld_updaterank_request_ : *default_instance_->m_stworld_updaterank_request_;
}
inline ::World_UpdateRank_Request* CSMsgBody::mutable_m_stworld_updaterank_request() {
  set_has_m_stworld_updaterank_request();
  if (m_stworld_updaterank_request_ == NULL) m_stworld_updaterank_request_ = new ::World_UpdateRank_Request;
  return m_stworld_updaterank_request_;
}
inline ::World_UpdateRank_Request* CSMsgBody::release_m_stworld_updaterank_request() {
  clear_has_m_stworld_updaterank_request();
  ::World_UpdateRank_Request* temp = m_stworld_updaterank_request_;
  m_stworld_updaterank_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updaterank_request(::World_UpdateRank_Request* m_stworld_updaterank_request) {
  delete m_stworld_updaterank_request_;
  m_stworld_updaterank_request_ = m_stworld_updaterank_request;
  if (m_stworld_updaterank_request) {
    set_has_m_stworld_updaterank_request();
  } else {
    clear_has_m_stworld_updaterank_request();
  }
}

// optional .World_UpdateRank_Response m_stWorld_UpdateRank_Response = 163;
inline bool CSMsgBody::has_m_stworld_updaterank_response() const {
  return (_has_bits_[3] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updaterank_response() {
  _has_bits_[3] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_stworld_updaterank_response() {
  _has_bits_[3] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_stworld_updaterank_response() {
  if (m_stworld_updaterank_response_ != NULL) m_stworld_updaterank_response_->::World_UpdateRank_Response::Clear();
  clear_has_m_stworld_updaterank_response();
}
inline const ::World_UpdateRank_Response& CSMsgBody::m_stworld_updaterank_response() const {
  return m_stworld_updaterank_response_ != NULL ? *m_stworld_updaterank_response_ : *default_instance_->m_stworld_updaterank_response_;
}
inline ::World_UpdateRank_Response* CSMsgBody::mutable_m_stworld_updaterank_response() {
  set_has_m_stworld_updaterank_response();
  if (m_stworld_updaterank_response_ == NULL) m_stworld_updaterank_response_ = new ::World_UpdateRank_Response;
  return m_stworld_updaterank_response_;
}
inline ::World_UpdateRank_Response* CSMsgBody::release_m_stworld_updaterank_response() {
  clear_has_m_stworld_updaterank_response();
  ::World_UpdateRank_Response* temp = m_stworld_updaterank_response_;
  m_stworld_updaterank_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updaterank_response(::World_UpdateRank_Response* m_stworld_updaterank_response) {
  delete m_stworld_updaterank_response_;
  m_stworld_updaterank_response_ = m_stworld_updaterank_response;
  if (m_stworld_updaterank_response) {
    set_has_m_stworld_updaterank_response();
  } else {
    clear_has_m_stworld_updaterank_response();
  }
}

// optional .World_GetRankInfo_Request m_stWorld_GetRankInfo_Request = 164;
inline bool CSMsgBody::has_m_stworld_getrankinfo_request() const {
  return (_has_bits_[3] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getrankinfo_request() {
  _has_bits_[3] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_stworld_getrankinfo_request() {
  _has_bits_[3] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_stworld_getrankinfo_request() {
  if (m_stworld_getrankinfo_request_ != NULL) m_stworld_getrankinfo_request_->::World_GetRankInfo_Request::Clear();
  clear_has_m_stworld_getrankinfo_request();
}
inline const ::World_GetRankInfo_Request& CSMsgBody::m_stworld_getrankinfo_request() const {
  return m_stworld_getrankinfo_request_ != NULL ? *m_stworld_getrankinfo_request_ : *default_instance_->m_stworld_getrankinfo_request_;
}
inline ::World_GetRankInfo_Request* CSMsgBody::mutable_m_stworld_getrankinfo_request() {
  set_has_m_stworld_getrankinfo_request();
  if (m_stworld_getrankinfo_request_ == NULL) m_stworld_getrankinfo_request_ = new ::World_GetRankInfo_Request;
  return m_stworld_getrankinfo_request_;
}
inline ::World_GetRankInfo_Request* CSMsgBody::release_m_stworld_getrankinfo_request() {
  clear_has_m_stworld_getrankinfo_request();
  ::World_GetRankInfo_Request* temp = m_stworld_getrankinfo_request_;
  m_stworld_getrankinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getrankinfo_request(::World_GetRankInfo_Request* m_stworld_getrankinfo_request) {
  delete m_stworld_getrankinfo_request_;
  m_stworld_getrankinfo_request_ = m_stworld_getrankinfo_request;
  if (m_stworld_getrankinfo_request) {
    set_has_m_stworld_getrankinfo_request();
  } else {
    clear_has_m_stworld_getrankinfo_request();
  }
}

// optional .World_GetRankInfo_Response m_stWorld_GetRankInfo_Response = 165;
inline bool CSMsgBody::has_m_stworld_getrankinfo_response() const {
  return (_has_bits_[3] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getrankinfo_response() {
  _has_bits_[3] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_stworld_getrankinfo_response() {
  _has_bits_[3] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_stworld_getrankinfo_response() {
  if (m_stworld_getrankinfo_response_ != NULL) m_stworld_getrankinfo_response_->::World_GetRankInfo_Response::Clear();
  clear_has_m_stworld_getrankinfo_response();
}
inline const ::World_GetRankInfo_Response& CSMsgBody::m_stworld_getrankinfo_response() const {
  return m_stworld_getrankinfo_response_ != NULL ? *m_stworld_getrankinfo_response_ : *default_instance_->m_stworld_getrankinfo_response_;
}
inline ::World_GetRankInfo_Response* CSMsgBody::mutable_m_stworld_getrankinfo_response() {
  set_has_m_stworld_getrankinfo_response();
  if (m_stworld_getrankinfo_response_ == NULL) m_stworld_getrankinfo_response_ = new ::World_GetRankInfo_Response;
  return m_stworld_getrankinfo_response_;
}
inline ::World_GetRankInfo_Response* CSMsgBody::release_m_stworld_getrankinfo_response() {
  clear_has_m_stworld_getrankinfo_response();
  ::World_GetRankInfo_Response* temp = m_stworld_getrankinfo_response_;
  m_stworld_getrankinfo_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getrankinfo_response(::World_GetRankInfo_Response* m_stworld_getrankinfo_response) {
  delete m_stworld_getrankinfo_response_;
  m_stworld_getrankinfo_response_ = m_stworld_getrankinfo_response;
  if (m_stworld_getrankinfo_response) {
    set_has_m_stworld_getrankinfo_response();
  } else {
    clear_has_m_stworld_getrankinfo_response();
  }
}

// optional .Zone_UseSkill_Request m_stZone_UseSkill_Request = 170;
inline bool CSMsgBody::has_m_stzone_useskill_request() const {
  return (_has_bits_[3] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_useskill_request() {
  _has_bits_[3] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_stzone_useskill_request() {
  _has_bits_[3] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_stzone_useskill_request() {
  if (m_stzone_useskill_request_ != NULL) m_stzone_useskill_request_->::Zone_UseSkill_Request::Clear();
  clear_has_m_stzone_useskill_request();
}
inline const ::Zone_UseSkill_Request& CSMsgBody::m_stzone_useskill_request() const {
  return m_stzone_useskill_request_ != NULL ? *m_stzone_useskill_request_ : *default_instance_->m_stzone_useskill_request_;
}
inline ::Zone_UseSkill_Request* CSMsgBody::mutable_m_stzone_useskill_request() {
  set_has_m_stzone_useskill_request();
  if (m_stzone_useskill_request_ == NULL) m_stzone_useskill_request_ = new ::Zone_UseSkill_Request;
  return m_stzone_useskill_request_;
}
inline ::Zone_UseSkill_Request* CSMsgBody::release_m_stzone_useskill_request() {
  clear_has_m_stzone_useskill_request();
  ::Zone_UseSkill_Request* temp = m_stzone_useskill_request_;
  m_stzone_useskill_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_useskill_request(::Zone_UseSkill_Request* m_stzone_useskill_request) {
  delete m_stzone_useskill_request_;
  m_stzone_useskill_request_ = m_stzone_useskill_request;
  if (m_stzone_useskill_request) {
    set_has_m_stzone_useskill_request();
  } else {
    clear_has_m_stzone_useskill_request();
  }
}

// optional .Zone_UseSkill_Response m_stZone_UseSkill_Response = 171;
inline bool CSMsgBody::has_m_stzone_useskill_response() const {
  return (_has_bits_[3] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_useskill_response() {
  _has_bits_[3] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_stzone_useskill_response() {
  _has_bits_[3] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_stzone_useskill_response() {
  if (m_stzone_useskill_response_ != NULL) m_stzone_useskill_response_->::Zone_UseSkill_Response::Clear();
  clear_has_m_stzone_useskill_response();
}
inline const ::Zone_UseSkill_Response& CSMsgBody::m_stzone_useskill_response() const {
  return m_stzone_useskill_response_ != NULL ? *m_stzone_useskill_response_ : *default_instance_->m_stzone_useskill_response_;
}
inline ::Zone_UseSkill_Response* CSMsgBody::mutable_m_stzone_useskill_response() {
  set_has_m_stzone_useskill_response();
  if (m_stzone_useskill_response_ == NULL) m_stzone_useskill_response_ = new ::Zone_UseSkill_Response;
  return m_stzone_useskill_response_;
}
inline ::Zone_UseSkill_Response* CSMsgBody::release_m_stzone_useskill_response() {
  clear_has_m_stzone_useskill_response();
  ::Zone_UseSkill_Response* temp = m_stzone_useskill_response_;
  m_stzone_useskill_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_useskill_response(::Zone_UseSkill_Response* m_stzone_useskill_response) {
  delete m_stzone_useskill_response_;
  m_stzone_useskill_response_ = m_stzone_useskill_response;
  if (m_stzone_useskill_response) {
    set_has_m_stzone_useskill_response();
  } else {
    clear_has_m_stzone_useskill_response();
  }
}

// optional .Zone_UseSkill_Notify m_stZone_UseSkill_Notify = 172;
inline bool CSMsgBody::has_m_stzone_useskill_notify() const {
  return (_has_bits_[3] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_useskill_notify() {
  _has_bits_[3] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_stzone_useskill_notify() {
  _has_bits_[3] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_stzone_useskill_notify() {
  if (m_stzone_useskill_notify_ != NULL) m_stzone_useskill_notify_->::Zone_UseSkill_Notify::Clear();
  clear_has_m_stzone_useskill_notify();
}
inline const ::Zone_UseSkill_Notify& CSMsgBody::m_stzone_useskill_notify() const {
  return m_stzone_useskill_notify_ != NULL ? *m_stzone_useskill_notify_ : *default_instance_->m_stzone_useskill_notify_;
}
inline ::Zone_UseSkill_Notify* CSMsgBody::mutable_m_stzone_useskill_notify() {
  set_has_m_stzone_useskill_notify();
  if (m_stzone_useskill_notify_ == NULL) m_stzone_useskill_notify_ = new ::Zone_UseSkill_Notify;
  return m_stzone_useskill_notify_;
}
inline ::Zone_UseSkill_Notify* CSMsgBody::release_m_stzone_useskill_notify() {
  clear_has_m_stzone_useskill_notify();
  ::Zone_UseSkill_Notify* temp = m_stzone_useskill_notify_;
  m_stzone_useskill_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_useskill_notify(::Zone_UseSkill_Notify* m_stzone_useskill_notify) {
  delete m_stzone_useskill_notify_;
  m_stzone_useskill_notify_ = m_stzone_useskill_notify;
  if (m_stzone_useskill_notify) {
    set_has_m_stzone_useskill_notify();
  } else {
    clear_has_m_stzone_useskill_notify();
  }
}

// optional .Zone_ChooseAimFish_Request m_stZone_ChooseAimFish_Request = 173;
inline bool CSMsgBody::has_m_stzone_chooseaimfish_request() const {
  return (_has_bits_[3] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_chooseaimfish_request() {
  _has_bits_[3] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_stzone_chooseaimfish_request() {
  _has_bits_[3] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_stzone_chooseaimfish_request() {
  if (m_stzone_chooseaimfish_request_ != NULL) m_stzone_chooseaimfish_request_->::Zone_ChooseAimFish_Request::Clear();
  clear_has_m_stzone_chooseaimfish_request();
}
inline const ::Zone_ChooseAimFish_Request& CSMsgBody::m_stzone_chooseaimfish_request() const {
  return m_stzone_chooseaimfish_request_ != NULL ? *m_stzone_chooseaimfish_request_ : *default_instance_->m_stzone_chooseaimfish_request_;
}
inline ::Zone_ChooseAimFish_Request* CSMsgBody::mutable_m_stzone_chooseaimfish_request() {
  set_has_m_stzone_chooseaimfish_request();
  if (m_stzone_chooseaimfish_request_ == NULL) m_stzone_chooseaimfish_request_ = new ::Zone_ChooseAimFish_Request;
  return m_stzone_chooseaimfish_request_;
}
inline ::Zone_ChooseAimFish_Request* CSMsgBody::release_m_stzone_chooseaimfish_request() {
  clear_has_m_stzone_chooseaimfish_request();
  ::Zone_ChooseAimFish_Request* temp = m_stzone_chooseaimfish_request_;
  m_stzone_chooseaimfish_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_chooseaimfish_request(::Zone_ChooseAimFish_Request* m_stzone_chooseaimfish_request) {
  delete m_stzone_chooseaimfish_request_;
  m_stzone_chooseaimfish_request_ = m_stzone_chooseaimfish_request;
  if (m_stzone_chooseaimfish_request) {
    set_has_m_stzone_chooseaimfish_request();
  } else {
    clear_has_m_stzone_chooseaimfish_request();
  }
}

// optional .Zone_ChooseAimFish_Response m_stZone_ChooseAimFish_Response = 174;
inline bool CSMsgBody::has_m_stzone_chooseaimfish_response() const {
  return (_has_bits_[3] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_chooseaimfish_response() {
  _has_bits_[3] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stzone_chooseaimfish_response() {
  _has_bits_[3] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stzone_chooseaimfish_response() {
  if (m_stzone_chooseaimfish_response_ != NULL) m_stzone_chooseaimfish_response_->::Zone_ChooseAimFish_Response::Clear();
  clear_has_m_stzone_chooseaimfish_response();
}
inline const ::Zone_ChooseAimFish_Response& CSMsgBody::m_stzone_chooseaimfish_response() const {
  return m_stzone_chooseaimfish_response_ != NULL ? *m_stzone_chooseaimfish_response_ : *default_instance_->m_stzone_chooseaimfish_response_;
}
inline ::Zone_ChooseAimFish_Response* CSMsgBody::mutable_m_stzone_chooseaimfish_response() {
  set_has_m_stzone_chooseaimfish_response();
  if (m_stzone_chooseaimfish_response_ == NULL) m_stzone_chooseaimfish_response_ = new ::Zone_ChooseAimFish_Response;
  return m_stzone_chooseaimfish_response_;
}
inline ::Zone_ChooseAimFish_Response* CSMsgBody::release_m_stzone_chooseaimfish_response() {
  clear_has_m_stzone_chooseaimfish_response();
  ::Zone_ChooseAimFish_Response* temp = m_stzone_chooseaimfish_response_;
  m_stzone_chooseaimfish_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_chooseaimfish_response(::Zone_ChooseAimFish_Response* m_stzone_chooseaimfish_response) {
  delete m_stzone_chooseaimfish_response_;
  m_stzone_chooseaimfish_response_ = m_stzone_chooseaimfish_response;
  if (m_stzone_chooseaimfish_response) {
    set_has_m_stzone_chooseaimfish_response();
  } else {
    clear_has_m_stzone_chooseaimfish_response();
  }
}

// optional .Zone_ChooseAimFish_Notify m_stZone_ChooseAimFish_Notify = 175;
inline bool CSMsgBody::has_m_stzone_chooseaimfish_notify() const {
  return (_has_bits_[3] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_chooseaimfish_notify() {
  _has_bits_[3] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stzone_chooseaimfish_notify() {
  _has_bits_[3] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stzone_chooseaimfish_notify() {
  if (m_stzone_chooseaimfish_notify_ != NULL) m_stzone_chooseaimfish_notify_->::Zone_ChooseAimFish_Notify::Clear();
  clear_has_m_stzone_chooseaimfish_notify();
}
inline const ::Zone_ChooseAimFish_Notify& CSMsgBody::m_stzone_chooseaimfish_notify() const {
  return m_stzone_chooseaimfish_notify_ != NULL ? *m_stzone_chooseaimfish_notify_ : *default_instance_->m_stzone_chooseaimfish_notify_;
}
inline ::Zone_ChooseAimFish_Notify* CSMsgBody::mutable_m_stzone_chooseaimfish_notify() {
  set_has_m_stzone_chooseaimfish_notify();
  if (m_stzone_chooseaimfish_notify_ == NULL) m_stzone_chooseaimfish_notify_ = new ::Zone_ChooseAimFish_Notify;
  return m_stzone_chooseaimfish_notify_;
}
inline ::Zone_ChooseAimFish_Notify* CSMsgBody::release_m_stzone_chooseaimfish_notify() {
  clear_has_m_stzone_chooseaimfish_notify();
  ::Zone_ChooseAimFish_Notify* temp = m_stzone_chooseaimfish_notify_;
  m_stzone_chooseaimfish_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_chooseaimfish_notify(::Zone_ChooseAimFish_Notify* m_stzone_chooseaimfish_notify) {
  delete m_stzone_chooseaimfish_notify_;
  m_stzone_chooseaimfish_notify_ = m_stzone_chooseaimfish_notify;
  if (m_stzone_chooseaimfish_notify) {
    set_has_m_stzone_chooseaimfish_notify();
  } else {
    clear_has_m_stzone_chooseaimfish_notify();
  }
}

// optional .Zone_GetUserAlms_Request m_stZone_GetUserAlms_Request = 180;
inline bool CSMsgBody::has_m_stzone_getuseralms_request() const {
  return (_has_bits_[3] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getuseralms_request() {
  _has_bits_[3] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getuseralms_request() {
  _has_bits_[3] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stzone_getuseralms_request() {
  if (m_stzone_getuseralms_request_ != NULL) m_stzone_getuseralms_request_->::Zone_GetUserAlms_Request::Clear();
  clear_has_m_stzone_getuseralms_request();
}
inline const ::Zone_GetUserAlms_Request& CSMsgBody::m_stzone_getuseralms_request() const {
  return m_stzone_getuseralms_request_ != NULL ? *m_stzone_getuseralms_request_ : *default_instance_->m_stzone_getuseralms_request_;
}
inline ::Zone_GetUserAlms_Request* CSMsgBody::mutable_m_stzone_getuseralms_request() {
  set_has_m_stzone_getuseralms_request();
  if (m_stzone_getuseralms_request_ == NULL) m_stzone_getuseralms_request_ = new ::Zone_GetUserAlms_Request;
  return m_stzone_getuseralms_request_;
}
inline ::Zone_GetUserAlms_Request* CSMsgBody::release_m_stzone_getuseralms_request() {
  clear_has_m_stzone_getuseralms_request();
  ::Zone_GetUserAlms_Request* temp = m_stzone_getuseralms_request_;
  m_stzone_getuseralms_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getuseralms_request(::Zone_GetUserAlms_Request* m_stzone_getuseralms_request) {
  delete m_stzone_getuseralms_request_;
  m_stzone_getuseralms_request_ = m_stzone_getuseralms_request;
  if (m_stzone_getuseralms_request) {
    set_has_m_stzone_getuseralms_request();
  } else {
    clear_has_m_stzone_getuseralms_request();
  }
}

// optional .Zone_GetUserAlms_Response m_stZone_GetUserAlms_Response = 181;
inline bool CSMsgBody::has_m_stzone_getuseralms_response() const {
  return (_has_bits_[3] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getuseralms_response() {
  _has_bits_[3] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getuseralms_response() {
  _has_bits_[3] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stzone_getuseralms_response() {
  if (m_stzone_getuseralms_response_ != NULL) m_stzone_getuseralms_response_->::Zone_GetUserAlms_Response::Clear();
  clear_has_m_stzone_getuseralms_response();
}
inline const ::Zone_GetUserAlms_Response& CSMsgBody::m_stzone_getuseralms_response() const {
  return m_stzone_getuseralms_response_ != NULL ? *m_stzone_getuseralms_response_ : *default_instance_->m_stzone_getuseralms_response_;
}
inline ::Zone_GetUserAlms_Response* CSMsgBody::mutable_m_stzone_getuseralms_response() {
  set_has_m_stzone_getuseralms_response();
  if (m_stzone_getuseralms_response_ == NULL) m_stzone_getuseralms_response_ = new ::Zone_GetUserAlms_Response;
  return m_stzone_getuseralms_response_;
}
inline ::Zone_GetUserAlms_Response* CSMsgBody::release_m_stzone_getuseralms_response() {
  clear_has_m_stzone_getuseralms_response();
  ::Zone_GetUserAlms_Response* temp = m_stzone_getuseralms_response_;
  m_stzone_getuseralms_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getuseralms_response(::Zone_GetUserAlms_Response* m_stzone_getuseralms_response) {
  delete m_stzone_getuseralms_response_;
  m_stzone_getuseralms_response_ = m_stzone_getuseralms_response;
  if (m_stzone_getuseralms_response) {
    set_has_m_stzone_getuseralms_response();
  } else {
    clear_has_m_stzone_getuseralms_response();
  }
}

// optional .Zone_UpdateAlms_Notify m_stZone_UpdateAlms_Notify = 182;
inline bool CSMsgBody::has_m_stzone_updatealms_notify() const {
  return (_has_bits_[3] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_updatealms_notify() {
  _has_bits_[3] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stzone_updatealms_notify() {
  _has_bits_[3] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stzone_updatealms_notify() {
  if (m_stzone_updatealms_notify_ != NULL) m_stzone_updatealms_notify_->::Zone_UpdateAlms_Notify::Clear();
  clear_has_m_stzone_updatealms_notify();
}
inline const ::Zone_UpdateAlms_Notify& CSMsgBody::m_stzone_updatealms_notify() const {
  return m_stzone_updatealms_notify_ != NULL ? *m_stzone_updatealms_notify_ : *default_instance_->m_stzone_updatealms_notify_;
}
inline ::Zone_UpdateAlms_Notify* CSMsgBody::mutable_m_stzone_updatealms_notify() {
  set_has_m_stzone_updatealms_notify();
  if (m_stzone_updatealms_notify_ == NULL) m_stzone_updatealms_notify_ = new ::Zone_UpdateAlms_Notify;
  return m_stzone_updatealms_notify_;
}
inline ::Zone_UpdateAlms_Notify* CSMsgBody::release_m_stzone_updatealms_notify() {
  clear_has_m_stzone_updatealms_notify();
  ::Zone_UpdateAlms_Notify* temp = m_stzone_updatealms_notify_;
  m_stzone_updatealms_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_updatealms_notify(::Zone_UpdateAlms_Notify* m_stzone_updatealms_notify) {
  delete m_stzone_updatealms_notify_;
  m_stzone_updatealms_notify_ = m_stzone_updatealms_notify;
  if (m_stzone_updatealms_notify) {
    set_has_m_stzone_updatealms_notify();
  } else {
    clear_has_m_stzone_updatealms_notify();
  }
}

// optional .Zone_LimitLottery_Request m_stZone_LimitLottery_Request = 190;
inline bool CSMsgBody::has_m_stzone_limitlottery_request() const {
  return (_has_bits_[3] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_limitlottery_request() {
  _has_bits_[3] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stzone_limitlottery_request() {
  _has_bits_[3] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stzone_limitlottery_request() {
  if (m_stzone_limitlottery_request_ != NULL) m_stzone_limitlottery_request_->::Zone_LimitLottery_Request::Clear();
  clear_has_m_stzone_limitlottery_request();
}
inline const ::Zone_LimitLottery_Request& CSMsgBody::m_stzone_limitlottery_request() const {
  return m_stzone_limitlottery_request_ != NULL ? *m_stzone_limitlottery_request_ : *default_instance_->m_stzone_limitlottery_request_;
}
inline ::Zone_LimitLottery_Request* CSMsgBody::mutable_m_stzone_limitlottery_request() {
  set_has_m_stzone_limitlottery_request();
  if (m_stzone_limitlottery_request_ == NULL) m_stzone_limitlottery_request_ = new ::Zone_LimitLottery_Request;
  return m_stzone_limitlottery_request_;
}
inline ::Zone_LimitLottery_Request* CSMsgBody::release_m_stzone_limitlottery_request() {
  clear_has_m_stzone_limitlottery_request();
  ::Zone_LimitLottery_Request* temp = m_stzone_limitlottery_request_;
  m_stzone_limitlottery_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_limitlottery_request(::Zone_LimitLottery_Request* m_stzone_limitlottery_request) {
  delete m_stzone_limitlottery_request_;
  m_stzone_limitlottery_request_ = m_stzone_limitlottery_request;
  if (m_stzone_limitlottery_request) {
    set_has_m_stzone_limitlottery_request();
  } else {
    clear_has_m_stzone_limitlottery_request();
  }
}

// optional .Zone_LimitLottery_Response m_stZone_LimitLottery_Response = 191;
inline bool CSMsgBody::has_m_stzone_limitlottery_response() const {
  return (_has_bits_[3] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_limitlottery_response() {
  _has_bits_[3] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stzone_limitlottery_response() {
  _has_bits_[3] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stzone_limitlottery_response() {
  if (m_stzone_limitlottery_response_ != NULL) m_stzone_limitlottery_response_->::Zone_LimitLottery_Response::Clear();
  clear_has_m_stzone_limitlottery_response();
}
inline const ::Zone_LimitLottery_Response& CSMsgBody::m_stzone_limitlottery_response() const {
  return m_stzone_limitlottery_response_ != NULL ? *m_stzone_limitlottery_response_ : *default_instance_->m_stzone_limitlottery_response_;
}
inline ::Zone_LimitLottery_Response* CSMsgBody::mutable_m_stzone_limitlottery_response() {
  set_has_m_stzone_limitlottery_response();
  if (m_stzone_limitlottery_response_ == NULL) m_stzone_limitlottery_response_ = new ::Zone_LimitLottery_Response;
  return m_stzone_limitlottery_response_;
}
inline ::Zone_LimitLottery_Response* CSMsgBody::release_m_stzone_limitlottery_response() {
  clear_has_m_stzone_limitlottery_response();
  ::Zone_LimitLottery_Response* temp = m_stzone_limitlottery_response_;
  m_stzone_limitlottery_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_limitlottery_response(::Zone_LimitLottery_Response* m_stzone_limitlottery_response) {
  delete m_stzone_limitlottery_response_;
  m_stzone_limitlottery_response_ = m_stzone_limitlottery_response;
  if (m_stzone_limitlottery_response) {
    set_has_m_stzone_limitlottery_response();
  } else {
    clear_has_m_stzone_limitlottery_response();
  }
}

// optional .Zone_PayLotteryRecord_Request m_stZone_PayLotteryRecord_Request = 192;
inline bool CSMsgBody::has_m_stzone_paylotteryrecord_request() const {
  return (_has_bits_[3] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_paylotteryrecord_request() {
  _has_bits_[3] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stzone_paylotteryrecord_request() {
  _has_bits_[3] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stzone_paylotteryrecord_request() {
  if (m_stzone_paylotteryrecord_request_ != NULL) m_stzone_paylotteryrecord_request_->::Zone_PayLotteryRecord_Request::Clear();
  clear_has_m_stzone_paylotteryrecord_request();
}
inline const ::Zone_PayLotteryRecord_Request& CSMsgBody::m_stzone_paylotteryrecord_request() const {
  return m_stzone_paylotteryrecord_request_ != NULL ? *m_stzone_paylotteryrecord_request_ : *default_instance_->m_stzone_paylotteryrecord_request_;
}
inline ::Zone_PayLotteryRecord_Request* CSMsgBody::mutable_m_stzone_paylotteryrecord_request() {
  set_has_m_stzone_paylotteryrecord_request();
  if (m_stzone_paylotteryrecord_request_ == NULL) m_stzone_paylotteryrecord_request_ = new ::Zone_PayLotteryRecord_Request;
  return m_stzone_paylotteryrecord_request_;
}
inline ::Zone_PayLotteryRecord_Request* CSMsgBody::release_m_stzone_paylotteryrecord_request() {
  clear_has_m_stzone_paylotteryrecord_request();
  ::Zone_PayLotteryRecord_Request* temp = m_stzone_paylotteryrecord_request_;
  m_stzone_paylotteryrecord_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_paylotteryrecord_request(::Zone_PayLotteryRecord_Request* m_stzone_paylotteryrecord_request) {
  delete m_stzone_paylotteryrecord_request_;
  m_stzone_paylotteryrecord_request_ = m_stzone_paylotteryrecord_request;
  if (m_stzone_paylotteryrecord_request) {
    set_has_m_stzone_paylotteryrecord_request();
  } else {
    clear_has_m_stzone_paylotteryrecord_request();
  }
}

// optional .Zone_PayLotteryRecord_Response m_stZone_PayLotteryRecord_Response = 193;
inline bool CSMsgBody::has_m_stzone_paylotteryrecord_response() const {
  return (_has_bits_[3] & 0x40000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_paylotteryrecord_response() {
  _has_bits_[3] |= 0x40000000u;
}
inline void CSMsgBody::clear_has_m_stzone_paylotteryrecord_response() {
  _has_bits_[3] &= ~0x40000000u;
}
inline void CSMsgBody::clear_m_stzone_paylotteryrecord_response() {
  if (m_stzone_paylotteryrecord_response_ != NULL) m_stzone_paylotteryrecord_response_->::Zone_PayLotteryRecord_Response::Clear();
  clear_has_m_stzone_paylotteryrecord_response();
}
inline const ::Zone_PayLotteryRecord_Response& CSMsgBody::m_stzone_paylotteryrecord_response() const {
  return m_stzone_paylotteryrecord_response_ != NULL ? *m_stzone_paylotteryrecord_response_ : *default_instance_->m_stzone_paylotteryrecord_response_;
}
inline ::Zone_PayLotteryRecord_Response* CSMsgBody::mutable_m_stzone_paylotteryrecord_response() {
  set_has_m_stzone_paylotteryrecord_response();
  if (m_stzone_paylotteryrecord_response_ == NULL) m_stzone_paylotteryrecord_response_ = new ::Zone_PayLotteryRecord_Response;
  return m_stzone_paylotteryrecord_response_;
}
inline ::Zone_PayLotteryRecord_Response* CSMsgBody::release_m_stzone_paylotteryrecord_response() {
  clear_has_m_stzone_paylotteryrecord_response();
  ::Zone_PayLotteryRecord_Response* temp = m_stzone_paylotteryrecord_response_;
  m_stzone_paylotteryrecord_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_paylotteryrecord_response(::Zone_PayLotteryRecord_Response* m_stzone_paylotteryrecord_response) {
  delete m_stzone_paylotteryrecord_response_;
  m_stzone_paylotteryrecord_response_ = m_stzone_paylotteryrecord_response;
  if (m_stzone_paylotteryrecord_response) {
    set_has_m_stzone_paylotteryrecord_response();
  } else {
    clear_has_m_stzone_paylotteryrecord_response();
  }
}

// optional .Zone_GetPayOrder_Request m_stZone_GetPayOrder_Request = 194;
inline bool CSMsgBody::has_m_stzone_getpayorder_request() const {
  return (_has_bits_[3] & 0x80000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getpayorder_request() {
  _has_bits_[3] |= 0x80000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getpayorder_request() {
  _has_bits_[3] &= ~0x80000000u;
}
inline void CSMsgBody::clear_m_stzone_getpayorder_request() {
  if (m_stzone_getpayorder_request_ != NULL) m_stzone_getpayorder_request_->::Zone_GetPayOrder_Request::Clear();
  clear_has_m_stzone_getpayorder_request();
}
inline const ::Zone_GetPayOrder_Request& CSMsgBody::m_stzone_getpayorder_request() const {
  return m_stzone_getpayorder_request_ != NULL ? *m_stzone_getpayorder_request_ : *default_instance_->m_stzone_getpayorder_request_;
}
inline ::Zone_GetPayOrder_Request* CSMsgBody::mutable_m_stzone_getpayorder_request() {
  set_has_m_stzone_getpayorder_request();
  if (m_stzone_getpayorder_request_ == NULL) m_stzone_getpayorder_request_ = new ::Zone_GetPayOrder_Request;
  return m_stzone_getpayorder_request_;
}
inline ::Zone_GetPayOrder_Request* CSMsgBody::release_m_stzone_getpayorder_request() {
  clear_has_m_stzone_getpayorder_request();
  ::Zone_GetPayOrder_Request* temp = m_stzone_getpayorder_request_;
  m_stzone_getpayorder_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getpayorder_request(::Zone_GetPayOrder_Request* m_stzone_getpayorder_request) {
  delete m_stzone_getpayorder_request_;
  m_stzone_getpayorder_request_ = m_stzone_getpayorder_request;
  if (m_stzone_getpayorder_request) {
    set_has_m_stzone_getpayorder_request();
  } else {
    clear_has_m_stzone_getpayorder_request();
  }
}

// optional .Zone_GetPayOrder_Response m_stZone_GetPayOrder_Response = 195;
inline bool CSMsgBody::has_m_stzone_getpayorder_response() const {
  return (_has_bits_[4] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getpayorder_response() {
  _has_bits_[4] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stzone_getpayorder_response() {
  _has_bits_[4] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stzone_getpayorder_response() {
  if (m_stzone_getpayorder_response_ != NULL) m_stzone_getpayorder_response_->::Zone_GetPayOrder_Response::Clear();
  clear_has_m_stzone_getpayorder_response();
}
inline const ::Zone_GetPayOrder_Response& CSMsgBody::m_stzone_getpayorder_response() const {
  return m_stzone_getpayorder_response_ != NULL ? *m_stzone_getpayorder_response_ : *default_instance_->m_stzone_getpayorder_response_;
}
inline ::Zone_GetPayOrder_Response* CSMsgBody::mutable_m_stzone_getpayorder_response() {
  set_has_m_stzone_getpayorder_response();
  if (m_stzone_getpayorder_response_ == NULL) m_stzone_getpayorder_response_ = new ::Zone_GetPayOrder_Response;
  return m_stzone_getpayorder_response_;
}
inline ::Zone_GetPayOrder_Response* CSMsgBody::release_m_stzone_getpayorder_response() {
  clear_has_m_stzone_getpayorder_response();
  ::Zone_GetPayOrder_Response* temp = m_stzone_getpayorder_response_;
  m_stzone_getpayorder_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getpayorder_response(::Zone_GetPayOrder_Response* m_stzone_getpayorder_response) {
  delete m_stzone_getpayorder_response_;
  m_stzone_getpayorder_response_ = m_stzone_getpayorder_response;
  if (m_stzone_getpayorder_response) {
    set_has_m_stzone_getpayorder_response();
  } else {
    clear_has_m_stzone_getpayorder_response();
  }
}

// optional .Zone_HorseLamp_Notify m_stZone_HorseLamp_Notify = 200;
inline bool CSMsgBody::has_m_stzone_horselamp_notify() const {
  return (_has_bits_[4] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_horselamp_notify() {
  _has_bits_[4] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stzone_horselamp_notify() {
  _has_bits_[4] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stzone_horselamp_notify() {
  if (m_stzone_horselamp_notify_ != NULL) m_stzone_horselamp_notify_->::Zone_HorseLamp_Notify::Clear();
  clear_has_m_stzone_horselamp_notify();
}
inline const ::Zone_HorseLamp_Notify& CSMsgBody::m_stzone_horselamp_notify() const {
  return m_stzone_horselamp_notify_ != NULL ? *m_stzone_horselamp_notify_ : *default_instance_->m_stzone_horselamp_notify_;
}
inline ::Zone_HorseLamp_Notify* CSMsgBody::mutable_m_stzone_horselamp_notify() {
  set_has_m_stzone_horselamp_notify();
  if (m_stzone_horselamp_notify_ == NULL) m_stzone_horselamp_notify_ = new ::Zone_HorseLamp_Notify;
  return m_stzone_horselamp_notify_;
}
inline ::Zone_HorseLamp_Notify* CSMsgBody::release_m_stzone_horselamp_notify() {
  clear_has_m_stzone_horselamp_notify();
  ::Zone_HorseLamp_Notify* temp = m_stzone_horselamp_notify_;
  m_stzone_horselamp_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_horselamp_notify(::Zone_HorseLamp_Notify* m_stzone_horselamp_notify) {
  delete m_stzone_horselamp_notify_;
  m_stzone_horselamp_notify_ = m_stzone_horselamp_notify;
  if (m_stzone_horselamp_notify) {
    set_has_m_stzone_horselamp_notify();
  } else {
    clear_has_m_stzone_horselamp_notify();
  }
}

// optional .World_UpdatePrizeInfo_Request m_stWorld_UpdatePrizeInfo_Request = 210;
inline bool CSMsgBody::has_m_stworld_updateprizeinfo_request() const {
  return (_has_bits_[4] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updateprizeinfo_request() {
  _has_bits_[4] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stworld_updateprizeinfo_request() {
  _has_bits_[4] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stworld_updateprizeinfo_request() {
  if (m_stworld_updateprizeinfo_request_ != NULL) m_stworld_updateprizeinfo_request_->::World_UpdatePrizeInfo_Request::Clear();
  clear_has_m_stworld_updateprizeinfo_request();
}
inline const ::World_UpdatePrizeInfo_Request& CSMsgBody::m_stworld_updateprizeinfo_request() const {
  return m_stworld_updateprizeinfo_request_ != NULL ? *m_stworld_updateprizeinfo_request_ : *default_instance_->m_stworld_updateprizeinfo_request_;
}
inline ::World_UpdatePrizeInfo_Request* CSMsgBody::mutable_m_stworld_updateprizeinfo_request() {
  set_has_m_stworld_updateprizeinfo_request();
  if (m_stworld_updateprizeinfo_request_ == NULL) m_stworld_updateprizeinfo_request_ = new ::World_UpdatePrizeInfo_Request;
  return m_stworld_updateprizeinfo_request_;
}
inline ::World_UpdatePrizeInfo_Request* CSMsgBody::release_m_stworld_updateprizeinfo_request() {
  clear_has_m_stworld_updateprizeinfo_request();
  ::World_UpdatePrizeInfo_Request* temp = m_stworld_updateprizeinfo_request_;
  m_stworld_updateprizeinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updateprizeinfo_request(::World_UpdatePrizeInfo_Request* m_stworld_updateprizeinfo_request) {
  delete m_stworld_updateprizeinfo_request_;
  m_stworld_updateprizeinfo_request_ = m_stworld_updateprizeinfo_request;
  if (m_stworld_updateprizeinfo_request) {
    set_has_m_stworld_updateprizeinfo_request();
  } else {
    clear_has_m_stworld_updateprizeinfo_request();
  }
}

// optional .World_UpdateBetInfo_Request m_stWorld_UpdateBetInfo_Request = 211;
inline bool CSMsgBody::has_m_stworld_updatebetinfo_request() const {
  return (_has_bits_[4] & 0x00000008u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updatebetinfo_request() {
  _has_bits_[4] |= 0x00000008u;
}
inline void CSMsgBody::clear_has_m_stworld_updatebetinfo_request() {
  _has_bits_[4] &= ~0x00000008u;
}
inline void CSMsgBody::clear_m_stworld_updatebetinfo_request() {
  if (m_stworld_updatebetinfo_request_ != NULL) m_stworld_updatebetinfo_request_->::World_UpdateBetInfo_Request::Clear();
  clear_has_m_stworld_updatebetinfo_request();
}
inline const ::World_UpdateBetInfo_Request& CSMsgBody::m_stworld_updatebetinfo_request() const {
  return m_stworld_updatebetinfo_request_ != NULL ? *m_stworld_updatebetinfo_request_ : *default_instance_->m_stworld_updatebetinfo_request_;
}
inline ::World_UpdateBetInfo_Request* CSMsgBody::mutable_m_stworld_updatebetinfo_request() {
  set_has_m_stworld_updatebetinfo_request();
  if (m_stworld_updatebetinfo_request_ == NULL) m_stworld_updatebetinfo_request_ = new ::World_UpdateBetInfo_Request;
  return m_stworld_updatebetinfo_request_;
}
inline ::World_UpdateBetInfo_Request* CSMsgBody::release_m_stworld_updatebetinfo_request() {
  clear_has_m_stworld_updatebetinfo_request();
  ::World_UpdateBetInfo_Request* temp = m_stworld_updatebetinfo_request_;
  m_stworld_updatebetinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updatebetinfo_request(::World_UpdateBetInfo_Request* m_stworld_updatebetinfo_request) {
  delete m_stworld_updatebetinfo_request_;
  m_stworld_updatebetinfo_request_ = m_stworld_updatebetinfo_request;
  if (m_stworld_updatebetinfo_request) {
    set_has_m_stworld_updatebetinfo_request();
  } else {
    clear_has_m_stworld_updatebetinfo_request();
  }
}

// optional .World_UpdateLasvegas_Notify m_stWorld_UpdateLasvegas_Notify = 212;
inline bool CSMsgBody::has_m_stworld_updatelasvegas_notify() const {
  return (_has_bits_[4] & 0x00000010u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_updatelasvegas_notify() {
  _has_bits_[4] |= 0x00000010u;
}
inline void CSMsgBody::clear_has_m_stworld_updatelasvegas_notify() {
  _has_bits_[4] &= ~0x00000010u;
}
inline void CSMsgBody::clear_m_stworld_updatelasvegas_notify() {
  if (m_stworld_updatelasvegas_notify_ != NULL) m_stworld_updatelasvegas_notify_->::World_UpdateLasvegas_Notify::Clear();
  clear_has_m_stworld_updatelasvegas_notify();
}
inline const ::World_UpdateLasvegas_Notify& CSMsgBody::m_stworld_updatelasvegas_notify() const {
  return m_stworld_updatelasvegas_notify_ != NULL ? *m_stworld_updatelasvegas_notify_ : *default_instance_->m_stworld_updatelasvegas_notify_;
}
inline ::World_UpdateLasvegas_Notify* CSMsgBody::mutable_m_stworld_updatelasvegas_notify() {
  set_has_m_stworld_updatelasvegas_notify();
  if (m_stworld_updatelasvegas_notify_ == NULL) m_stworld_updatelasvegas_notify_ = new ::World_UpdateLasvegas_Notify;
  return m_stworld_updatelasvegas_notify_;
}
inline ::World_UpdateLasvegas_Notify* CSMsgBody::release_m_stworld_updatelasvegas_notify() {
  clear_has_m_stworld_updatelasvegas_notify();
  ::World_UpdateLasvegas_Notify* temp = m_stworld_updatelasvegas_notify_;
  m_stworld_updatelasvegas_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_updatelasvegas_notify(::World_UpdateLasvegas_Notify* m_stworld_updatelasvegas_notify) {
  delete m_stworld_updatelasvegas_notify_;
  m_stworld_updatelasvegas_notify_ = m_stworld_updatelasvegas_notify;
  if (m_stworld_updatelasvegas_notify) {
    set_has_m_stworld_updatelasvegas_notify();
  } else {
    clear_has_m_stworld_updatelasvegas_notify();
  }
}

// optional .Zone_EnterLasvegas_Request m_stZone_EnterLasvegas_Request = 213;
inline bool CSMsgBody::has_m_stzone_enterlasvegas_request() const {
  return (_has_bits_[4] & 0x00000020u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_enterlasvegas_request() {
  _has_bits_[4] |= 0x00000020u;
}
inline void CSMsgBody::clear_has_m_stzone_enterlasvegas_request() {
  _has_bits_[4] &= ~0x00000020u;
}
inline void CSMsgBody::clear_m_stzone_enterlasvegas_request() {
  if (m_stzone_enterlasvegas_request_ != NULL) m_stzone_enterlasvegas_request_->::Zone_EnterLasvegas_Request::Clear();
  clear_has_m_stzone_enterlasvegas_request();
}
inline const ::Zone_EnterLasvegas_Request& CSMsgBody::m_stzone_enterlasvegas_request() const {
  return m_stzone_enterlasvegas_request_ != NULL ? *m_stzone_enterlasvegas_request_ : *default_instance_->m_stzone_enterlasvegas_request_;
}
inline ::Zone_EnterLasvegas_Request* CSMsgBody::mutable_m_stzone_enterlasvegas_request() {
  set_has_m_stzone_enterlasvegas_request();
  if (m_stzone_enterlasvegas_request_ == NULL) m_stzone_enterlasvegas_request_ = new ::Zone_EnterLasvegas_Request;
  return m_stzone_enterlasvegas_request_;
}
inline ::Zone_EnterLasvegas_Request* CSMsgBody::release_m_stzone_enterlasvegas_request() {
  clear_has_m_stzone_enterlasvegas_request();
  ::Zone_EnterLasvegas_Request* temp = m_stzone_enterlasvegas_request_;
  m_stzone_enterlasvegas_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_enterlasvegas_request(::Zone_EnterLasvegas_Request* m_stzone_enterlasvegas_request) {
  delete m_stzone_enterlasvegas_request_;
  m_stzone_enterlasvegas_request_ = m_stzone_enterlasvegas_request;
  if (m_stzone_enterlasvegas_request) {
    set_has_m_stzone_enterlasvegas_request();
  } else {
    clear_has_m_stzone_enterlasvegas_request();
  }
}

// optional .Zone_EnterLasvegas_Response m_stZone_EnterLasvegas_Response = 214;
inline bool CSMsgBody::has_m_stzone_enterlasvegas_response() const {
  return (_has_bits_[4] & 0x00000040u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_enterlasvegas_response() {
  _has_bits_[4] |= 0x00000040u;
}
inline void CSMsgBody::clear_has_m_stzone_enterlasvegas_response() {
  _has_bits_[4] &= ~0x00000040u;
}
inline void CSMsgBody::clear_m_stzone_enterlasvegas_response() {
  if (m_stzone_enterlasvegas_response_ != NULL) m_stzone_enterlasvegas_response_->::Zone_EnterLasvegas_Response::Clear();
  clear_has_m_stzone_enterlasvegas_response();
}
inline const ::Zone_EnterLasvegas_Response& CSMsgBody::m_stzone_enterlasvegas_response() const {
  return m_stzone_enterlasvegas_response_ != NULL ? *m_stzone_enterlasvegas_response_ : *default_instance_->m_stzone_enterlasvegas_response_;
}
inline ::Zone_EnterLasvegas_Response* CSMsgBody::mutable_m_stzone_enterlasvegas_response() {
  set_has_m_stzone_enterlasvegas_response();
  if (m_stzone_enterlasvegas_response_ == NULL) m_stzone_enterlasvegas_response_ = new ::Zone_EnterLasvegas_Response;
  return m_stzone_enterlasvegas_response_;
}
inline ::Zone_EnterLasvegas_Response* CSMsgBody::release_m_stzone_enterlasvegas_response() {
  clear_has_m_stzone_enterlasvegas_response();
  ::Zone_EnterLasvegas_Response* temp = m_stzone_enterlasvegas_response_;
  m_stzone_enterlasvegas_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_enterlasvegas_response(::Zone_EnterLasvegas_Response* m_stzone_enterlasvegas_response) {
  delete m_stzone_enterlasvegas_response_;
  m_stzone_enterlasvegas_response_ = m_stzone_enterlasvegas_response;
  if (m_stzone_enterlasvegas_response) {
    set_has_m_stzone_enterlasvegas_response();
  } else {
    clear_has_m_stzone_enterlasvegas_response();
  }
}

// optional .Zone_LasvegasBet_Request m_stZone_LasvegasBet_Request = 215;
inline bool CSMsgBody::has_m_stzone_lasvegasbet_request() const {
  return (_has_bits_[4] & 0x00000080u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_lasvegasbet_request() {
  _has_bits_[4] |= 0x00000080u;
}
inline void CSMsgBody::clear_has_m_stzone_lasvegasbet_request() {
  _has_bits_[4] &= ~0x00000080u;
}
inline void CSMsgBody::clear_m_stzone_lasvegasbet_request() {
  if (m_stzone_lasvegasbet_request_ != NULL) m_stzone_lasvegasbet_request_->::Zone_LasvegasBet_Request::Clear();
  clear_has_m_stzone_lasvegasbet_request();
}
inline const ::Zone_LasvegasBet_Request& CSMsgBody::m_stzone_lasvegasbet_request() const {
  return m_stzone_lasvegasbet_request_ != NULL ? *m_stzone_lasvegasbet_request_ : *default_instance_->m_stzone_lasvegasbet_request_;
}
inline ::Zone_LasvegasBet_Request* CSMsgBody::mutable_m_stzone_lasvegasbet_request() {
  set_has_m_stzone_lasvegasbet_request();
  if (m_stzone_lasvegasbet_request_ == NULL) m_stzone_lasvegasbet_request_ = new ::Zone_LasvegasBet_Request;
  return m_stzone_lasvegasbet_request_;
}
inline ::Zone_LasvegasBet_Request* CSMsgBody::release_m_stzone_lasvegasbet_request() {
  clear_has_m_stzone_lasvegasbet_request();
  ::Zone_LasvegasBet_Request* temp = m_stzone_lasvegasbet_request_;
  m_stzone_lasvegasbet_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_lasvegasbet_request(::Zone_LasvegasBet_Request* m_stzone_lasvegasbet_request) {
  delete m_stzone_lasvegasbet_request_;
  m_stzone_lasvegasbet_request_ = m_stzone_lasvegasbet_request;
  if (m_stzone_lasvegasbet_request) {
    set_has_m_stzone_lasvegasbet_request();
  } else {
    clear_has_m_stzone_lasvegasbet_request();
  }
}

// optional .Zone_LasvegasBet_Response m_stZone_LasvegasBet_Response = 216;
inline bool CSMsgBody::has_m_stzone_lasvegasbet_response() const {
  return (_has_bits_[4] & 0x00000100u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_lasvegasbet_response() {
  _has_bits_[4] |= 0x00000100u;
}
inline void CSMsgBody::clear_has_m_stzone_lasvegasbet_response() {
  _has_bits_[4] &= ~0x00000100u;
}
inline void CSMsgBody::clear_m_stzone_lasvegasbet_response() {
  if (m_stzone_lasvegasbet_response_ != NULL) m_stzone_lasvegasbet_response_->::Zone_LasvegasBet_Response::Clear();
  clear_has_m_stzone_lasvegasbet_response();
}
inline const ::Zone_LasvegasBet_Response& CSMsgBody::m_stzone_lasvegasbet_response() const {
  return m_stzone_lasvegasbet_response_ != NULL ? *m_stzone_lasvegasbet_response_ : *default_instance_->m_stzone_lasvegasbet_response_;
}
inline ::Zone_LasvegasBet_Response* CSMsgBody::mutable_m_stzone_lasvegasbet_response() {
  set_has_m_stzone_lasvegasbet_response();
  if (m_stzone_lasvegasbet_response_ == NULL) m_stzone_lasvegasbet_response_ = new ::Zone_LasvegasBet_Response;
  return m_stzone_lasvegasbet_response_;
}
inline ::Zone_LasvegasBet_Response* CSMsgBody::release_m_stzone_lasvegasbet_response() {
  clear_has_m_stzone_lasvegasbet_response();
  ::Zone_LasvegasBet_Response* temp = m_stzone_lasvegasbet_response_;
  m_stzone_lasvegasbet_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_lasvegasbet_response(::Zone_LasvegasBet_Response* m_stzone_lasvegasbet_response) {
  delete m_stzone_lasvegasbet_response_;
  m_stzone_lasvegasbet_response_ = m_stzone_lasvegasbet_response;
  if (m_stzone_lasvegasbet_response) {
    set_has_m_stzone_lasvegasbet_response();
  } else {
    clear_has_m_stzone_lasvegasbet_response();
  }
}

// optional .Zone_UpdateLasvegas_Notify m_stZone_UpdateLasvegas_Notify = 217;
inline bool CSMsgBody::has_m_stzone_updatelasvegas_notify() const {
  return (_has_bits_[4] & 0x00000200u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_updatelasvegas_notify() {
  _has_bits_[4] |= 0x00000200u;
}
inline void CSMsgBody::clear_has_m_stzone_updatelasvegas_notify() {
  _has_bits_[4] &= ~0x00000200u;
}
inline void CSMsgBody::clear_m_stzone_updatelasvegas_notify() {
  if (m_stzone_updatelasvegas_notify_ != NULL) m_stzone_updatelasvegas_notify_->::Zone_UpdateLasvegas_Notify::Clear();
  clear_has_m_stzone_updatelasvegas_notify();
}
inline const ::Zone_UpdateLasvegas_Notify& CSMsgBody::m_stzone_updatelasvegas_notify() const {
  return m_stzone_updatelasvegas_notify_ != NULL ? *m_stzone_updatelasvegas_notify_ : *default_instance_->m_stzone_updatelasvegas_notify_;
}
inline ::Zone_UpdateLasvegas_Notify* CSMsgBody::mutable_m_stzone_updatelasvegas_notify() {
  set_has_m_stzone_updatelasvegas_notify();
  if (m_stzone_updatelasvegas_notify_ == NULL) m_stzone_updatelasvegas_notify_ = new ::Zone_UpdateLasvegas_Notify;
  return m_stzone_updatelasvegas_notify_;
}
inline ::Zone_UpdateLasvegas_Notify* CSMsgBody::release_m_stzone_updatelasvegas_notify() {
  clear_has_m_stzone_updatelasvegas_notify();
  ::Zone_UpdateLasvegas_Notify* temp = m_stzone_updatelasvegas_notify_;
  m_stzone_updatelasvegas_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_updatelasvegas_notify(::Zone_UpdateLasvegas_Notify* m_stzone_updatelasvegas_notify) {
  delete m_stzone_updatelasvegas_notify_;
  m_stzone_updatelasvegas_notify_ = m_stzone_updatelasvegas_notify;
  if (m_stzone_updatelasvegas_notify) {
    set_has_m_stzone_updatelasvegas_notify();
  } else {
    clear_has_m_stzone_updatelasvegas_notify();
  }
}

// optional .Zone_GetRewardInfo_Request m_stZone_GetRewardInfo_Request = 218;
inline bool CSMsgBody::has_m_stzone_getrewardinfo_request() const {
  return (_has_bits_[4] & 0x00000400u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getrewardinfo_request() {
  _has_bits_[4] |= 0x00000400u;
}
inline void CSMsgBody::clear_has_m_stzone_getrewardinfo_request() {
  _has_bits_[4] &= ~0x00000400u;
}
inline void CSMsgBody::clear_m_stzone_getrewardinfo_request() {
  if (m_stzone_getrewardinfo_request_ != NULL) m_stzone_getrewardinfo_request_->::Zone_GetRewardInfo_Request::Clear();
  clear_has_m_stzone_getrewardinfo_request();
}
inline const ::Zone_GetRewardInfo_Request& CSMsgBody::m_stzone_getrewardinfo_request() const {
  return m_stzone_getrewardinfo_request_ != NULL ? *m_stzone_getrewardinfo_request_ : *default_instance_->m_stzone_getrewardinfo_request_;
}
inline ::Zone_GetRewardInfo_Request* CSMsgBody::mutable_m_stzone_getrewardinfo_request() {
  set_has_m_stzone_getrewardinfo_request();
  if (m_stzone_getrewardinfo_request_ == NULL) m_stzone_getrewardinfo_request_ = new ::Zone_GetRewardInfo_Request;
  return m_stzone_getrewardinfo_request_;
}
inline ::Zone_GetRewardInfo_Request* CSMsgBody::release_m_stzone_getrewardinfo_request() {
  clear_has_m_stzone_getrewardinfo_request();
  ::Zone_GetRewardInfo_Request* temp = m_stzone_getrewardinfo_request_;
  m_stzone_getrewardinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getrewardinfo_request(::Zone_GetRewardInfo_Request* m_stzone_getrewardinfo_request) {
  delete m_stzone_getrewardinfo_request_;
  m_stzone_getrewardinfo_request_ = m_stzone_getrewardinfo_request;
  if (m_stzone_getrewardinfo_request) {
    set_has_m_stzone_getrewardinfo_request();
  } else {
    clear_has_m_stzone_getrewardinfo_request();
  }
}

// optional .Zone_GetRewardInfo_Response m_stZone_GetRewardInfo_Response = 219;
inline bool CSMsgBody::has_m_stzone_getrewardinfo_response() const {
  return (_has_bits_[4] & 0x00000800u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getrewardinfo_response() {
  _has_bits_[4] |= 0x00000800u;
}
inline void CSMsgBody::clear_has_m_stzone_getrewardinfo_response() {
  _has_bits_[4] &= ~0x00000800u;
}
inline void CSMsgBody::clear_m_stzone_getrewardinfo_response() {
  if (m_stzone_getrewardinfo_response_ != NULL) m_stzone_getrewardinfo_response_->::Zone_GetRewardInfo_Response::Clear();
  clear_has_m_stzone_getrewardinfo_response();
}
inline const ::Zone_GetRewardInfo_Response& CSMsgBody::m_stzone_getrewardinfo_response() const {
  return m_stzone_getrewardinfo_response_ != NULL ? *m_stzone_getrewardinfo_response_ : *default_instance_->m_stzone_getrewardinfo_response_;
}
inline ::Zone_GetRewardInfo_Response* CSMsgBody::mutable_m_stzone_getrewardinfo_response() {
  set_has_m_stzone_getrewardinfo_response();
  if (m_stzone_getrewardinfo_response_ == NULL) m_stzone_getrewardinfo_response_ = new ::Zone_GetRewardInfo_Response;
  return m_stzone_getrewardinfo_response_;
}
inline ::Zone_GetRewardInfo_Response* CSMsgBody::release_m_stzone_getrewardinfo_response() {
  clear_has_m_stzone_getrewardinfo_response();
  ::Zone_GetRewardInfo_Response* temp = m_stzone_getrewardinfo_response_;
  m_stzone_getrewardinfo_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getrewardinfo_response(::Zone_GetRewardInfo_Response* m_stzone_getrewardinfo_response) {
  delete m_stzone_getrewardinfo_response_;
  m_stzone_getrewardinfo_response_ = m_stzone_getrewardinfo_response;
  if (m_stzone_getrewardinfo_response) {
    set_has_m_stzone_getrewardinfo_response();
  } else {
    clear_has_m_stzone_getrewardinfo_response();
  }
}

// optional .Zone_GetLoginReward_Request m_stZone_GetLoginReward_Request = 230;
inline bool CSMsgBody::has_m_stzone_getloginreward_request() const {
  return (_has_bits_[4] & 0x00001000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getloginreward_request() {
  _has_bits_[4] |= 0x00001000u;
}
inline void CSMsgBody::clear_has_m_stzone_getloginreward_request() {
  _has_bits_[4] &= ~0x00001000u;
}
inline void CSMsgBody::clear_m_stzone_getloginreward_request() {
  if (m_stzone_getloginreward_request_ != NULL) m_stzone_getloginreward_request_->::Zone_GetLoginReward_Request::Clear();
  clear_has_m_stzone_getloginreward_request();
}
inline const ::Zone_GetLoginReward_Request& CSMsgBody::m_stzone_getloginreward_request() const {
  return m_stzone_getloginreward_request_ != NULL ? *m_stzone_getloginreward_request_ : *default_instance_->m_stzone_getloginreward_request_;
}
inline ::Zone_GetLoginReward_Request* CSMsgBody::mutable_m_stzone_getloginreward_request() {
  set_has_m_stzone_getloginreward_request();
  if (m_stzone_getloginreward_request_ == NULL) m_stzone_getloginreward_request_ = new ::Zone_GetLoginReward_Request;
  return m_stzone_getloginreward_request_;
}
inline ::Zone_GetLoginReward_Request* CSMsgBody::release_m_stzone_getloginreward_request() {
  clear_has_m_stzone_getloginreward_request();
  ::Zone_GetLoginReward_Request* temp = m_stzone_getloginreward_request_;
  m_stzone_getloginreward_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getloginreward_request(::Zone_GetLoginReward_Request* m_stzone_getloginreward_request) {
  delete m_stzone_getloginreward_request_;
  m_stzone_getloginreward_request_ = m_stzone_getloginreward_request;
  if (m_stzone_getloginreward_request) {
    set_has_m_stzone_getloginreward_request();
  } else {
    clear_has_m_stzone_getloginreward_request();
  }
}

// optional .Zone_GetLoginReward_Response m_stZone_GetLoginReward_Response = 231;
inline bool CSMsgBody::has_m_stzone_getloginreward_response() const {
  return (_has_bits_[4] & 0x00002000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getloginreward_response() {
  _has_bits_[4] |= 0x00002000u;
}
inline void CSMsgBody::clear_has_m_stzone_getloginreward_response() {
  _has_bits_[4] &= ~0x00002000u;
}
inline void CSMsgBody::clear_m_stzone_getloginreward_response() {
  if (m_stzone_getloginreward_response_ != NULL) m_stzone_getloginreward_response_->::Zone_GetLoginReward_Response::Clear();
  clear_has_m_stzone_getloginreward_response();
}
inline const ::Zone_GetLoginReward_Response& CSMsgBody::m_stzone_getloginreward_response() const {
  return m_stzone_getloginreward_response_ != NULL ? *m_stzone_getloginreward_response_ : *default_instance_->m_stzone_getloginreward_response_;
}
inline ::Zone_GetLoginReward_Response* CSMsgBody::mutable_m_stzone_getloginreward_response() {
  set_has_m_stzone_getloginreward_response();
  if (m_stzone_getloginreward_response_ == NULL) m_stzone_getloginreward_response_ = new ::Zone_GetLoginReward_Response;
  return m_stzone_getloginreward_response_;
}
inline ::Zone_GetLoginReward_Response* CSMsgBody::release_m_stzone_getloginreward_response() {
  clear_has_m_stzone_getloginreward_response();
  ::Zone_GetLoginReward_Response* temp = m_stzone_getloginreward_response_;
  m_stzone_getloginreward_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getloginreward_response(::Zone_GetLoginReward_Response* m_stzone_getloginreward_response) {
  delete m_stzone_getloginreward_response_;
  m_stzone_getloginreward_response_ = m_stzone_getloginreward_response;
  if (m_stzone_getloginreward_response) {
    set_has_m_stzone_getloginreward_response();
  } else {
    clear_has_m_stzone_getloginreward_response();
  }
}

// optional .World_UserRecharge_Request m_stWorld_UserRecharge_Request = 240;
inline bool CSMsgBody::has_m_stworld_userrecharge_request() const {
  return (_has_bits_[4] & 0x00004000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_userrecharge_request() {
  _has_bits_[4] |= 0x00004000u;
}
inline void CSMsgBody::clear_has_m_stworld_userrecharge_request() {
  _has_bits_[4] &= ~0x00004000u;
}
inline void CSMsgBody::clear_m_stworld_userrecharge_request() {
  if (m_stworld_userrecharge_request_ != NULL) m_stworld_userrecharge_request_->::World_UserRecharge_Request::Clear();
  clear_has_m_stworld_userrecharge_request();
}
inline const ::World_UserRecharge_Request& CSMsgBody::m_stworld_userrecharge_request() const {
  return m_stworld_userrecharge_request_ != NULL ? *m_stworld_userrecharge_request_ : *default_instance_->m_stworld_userrecharge_request_;
}
inline ::World_UserRecharge_Request* CSMsgBody::mutable_m_stworld_userrecharge_request() {
  set_has_m_stworld_userrecharge_request();
  if (m_stworld_userrecharge_request_ == NULL) m_stworld_userrecharge_request_ = new ::World_UserRecharge_Request;
  return m_stworld_userrecharge_request_;
}
inline ::World_UserRecharge_Request* CSMsgBody::release_m_stworld_userrecharge_request() {
  clear_has_m_stworld_userrecharge_request();
  ::World_UserRecharge_Request* temp = m_stworld_userrecharge_request_;
  m_stworld_userrecharge_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_userrecharge_request(::World_UserRecharge_Request* m_stworld_userrecharge_request) {
  delete m_stworld_userrecharge_request_;
  m_stworld_userrecharge_request_ = m_stworld_userrecharge_request;
  if (m_stworld_userrecharge_request) {
    set_has_m_stworld_userrecharge_request();
  } else {
    clear_has_m_stworld_userrecharge_request();
  }
}

// optional .World_UserRecharge_Response m_stWorld_UserRecharge_Response = 241;
inline bool CSMsgBody::has_m_stworld_userrecharge_response() const {
  return (_has_bits_[4] & 0x00008000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_userrecharge_response() {
  _has_bits_[4] |= 0x00008000u;
}
inline void CSMsgBody::clear_has_m_stworld_userrecharge_response() {
  _has_bits_[4] &= ~0x00008000u;
}
inline void CSMsgBody::clear_m_stworld_userrecharge_response() {
  if (m_stworld_userrecharge_response_ != NULL) m_stworld_userrecharge_response_->::World_UserRecharge_Response::Clear();
  clear_has_m_stworld_userrecharge_response();
}
inline const ::World_UserRecharge_Response& CSMsgBody::m_stworld_userrecharge_response() const {
  return m_stworld_userrecharge_response_ != NULL ? *m_stworld_userrecharge_response_ : *default_instance_->m_stworld_userrecharge_response_;
}
inline ::World_UserRecharge_Response* CSMsgBody::mutable_m_stworld_userrecharge_response() {
  set_has_m_stworld_userrecharge_response();
  if (m_stworld_userrecharge_response_ == NULL) m_stworld_userrecharge_response_ = new ::World_UserRecharge_Response;
  return m_stworld_userrecharge_response_;
}
inline ::World_UserRecharge_Response* CSMsgBody::release_m_stworld_userrecharge_response() {
  clear_has_m_stworld_userrecharge_response();
  ::World_UserRecharge_Response* temp = m_stworld_userrecharge_response_;
  m_stworld_userrecharge_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_userrecharge_response(::World_UserRecharge_Response* m_stworld_userrecharge_response) {
  delete m_stworld_userrecharge_response_;
  m_stworld_userrecharge_response_ = m_stworld_userrecharge_response;
  if (m_stworld_userrecharge_response) {
    set_has_m_stworld_userrecharge_response();
  } else {
    clear_has_m_stworld_userrecharge_response();
  }
}

// optional .Zone_GetPayRecord_Request m_stZone_GetPayRecord_Request = 242;
inline bool CSMsgBody::has_m_stzone_getpayrecord_request() const {
  return (_has_bits_[4] & 0x00010000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getpayrecord_request() {
  _has_bits_[4] |= 0x00010000u;
}
inline void CSMsgBody::clear_has_m_stzone_getpayrecord_request() {
  _has_bits_[4] &= ~0x00010000u;
}
inline void CSMsgBody::clear_m_stzone_getpayrecord_request() {
  if (m_stzone_getpayrecord_request_ != NULL) m_stzone_getpayrecord_request_->::Zone_GetPayRecord_Request::Clear();
  clear_has_m_stzone_getpayrecord_request();
}
inline const ::Zone_GetPayRecord_Request& CSMsgBody::m_stzone_getpayrecord_request() const {
  return m_stzone_getpayrecord_request_ != NULL ? *m_stzone_getpayrecord_request_ : *default_instance_->m_stzone_getpayrecord_request_;
}
inline ::Zone_GetPayRecord_Request* CSMsgBody::mutable_m_stzone_getpayrecord_request() {
  set_has_m_stzone_getpayrecord_request();
  if (m_stzone_getpayrecord_request_ == NULL) m_stzone_getpayrecord_request_ = new ::Zone_GetPayRecord_Request;
  return m_stzone_getpayrecord_request_;
}
inline ::Zone_GetPayRecord_Request* CSMsgBody::release_m_stzone_getpayrecord_request() {
  clear_has_m_stzone_getpayrecord_request();
  ::Zone_GetPayRecord_Request* temp = m_stzone_getpayrecord_request_;
  m_stzone_getpayrecord_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getpayrecord_request(::Zone_GetPayRecord_Request* m_stzone_getpayrecord_request) {
  delete m_stzone_getpayrecord_request_;
  m_stzone_getpayrecord_request_ = m_stzone_getpayrecord_request;
  if (m_stzone_getpayrecord_request) {
    set_has_m_stzone_getpayrecord_request();
  } else {
    clear_has_m_stzone_getpayrecord_request();
  }
}

// optional .Zone_GetPayRecord_Response m_stZone_GetPayRecord_Response = 243;
inline bool CSMsgBody::has_m_stzone_getpayrecord_response() const {
  return (_has_bits_[4] & 0x00020000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getpayrecord_response() {
  _has_bits_[4] |= 0x00020000u;
}
inline void CSMsgBody::clear_has_m_stzone_getpayrecord_response() {
  _has_bits_[4] &= ~0x00020000u;
}
inline void CSMsgBody::clear_m_stzone_getpayrecord_response() {
  if (m_stzone_getpayrecord_response_ != NULL) m_stzone_getpayrecord_response_->::Zone_GetPayRecord_Response::Clear();
  clear_has_m_stzone_getpayrecord_response();
}
inline const ::Zone_GetPayRecord_Response& CSMsgBody::m_stzone_getpayrecord_response() const {
  return m_stzone_getpayrecord_response_ != NULL ? *m_stzone_getpayrecord_response_ : *default_instance_->m_stzone_getpayrecord_response_;
}
inline ::Zone_GetPayRecord_Response* CSMsgBody::mutable_m_stzone_getpayrecord_response() {
  set_has_m_stzone_getpayrecord_response();
  if (m_stzone_getpayrecord_response_ == NULL) m_stzone_getpayrecord_response_ = new ::Zone_GetPayRecord_Response;
  return m_stzone_getpayrecord_response_;
}
inline ::Zone_GetPayRecord_Response* CSMsgBody::release_m_stzone_getpayrecord_response() {
  clear_has_m_stzone_getpayrecord_response();
  ::Zone_GetPayRecord_Response* temp = m_stzone_getpayrecord_response_;
  m_stzone_getpayrecord_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getpayrecord_response(::Zone_GetPayRecord_Response* m_stzone_getpayrecord_response) {
  delete m_stzone_getpayrecord_response_;
  m_stzone_getpayrecord_response_ = m_stzone_getpayrecord_response;
  if (m_stzone_getpayrecord_response) {
    set_has_m_stzone_getpayrecord_response();
  } else {
    clear_has_m_stzone_getpayrecord_response();
  }
}

// optional .Zone_GetPayGift_Request m_stZone_GetPayGift_Request = 244;
inline bool CSMsgBody::has_m_stzone_getpaygift_request() const {
  return (_has_bits_[4] & 0x00040000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getpaygift_request() {
  _has_bits_[4] |= 0x00040000u;
}
inline void CSMsgBody::clear_has_m_stzone_getpaygift_request() {
  _has_bits_[4] &= ~0x00040000u;
}
inline void CSMsgBody::clear_m_stzone_getpaygift_request() {
  if (m_stzone_getpaygift_request_ != NULL) m_stzone_getpaygift_request_->::Zone_GetPayGift_Request::Clear();
  clear_has_m_stzone_getpaygift_request();
}
inline const ::Zone_GetPayGift_Request& CSMsgBody::m_stzone_getpaygift_request() const {
  return m_stzone_getpaygift_request_ != NULL ? *m_stzone_getpaygift_request_ : *default_instance_->m_stzone_getpaygift_request_;
}
inline ::Zone_GetPayGift_Request* CSMsgBody::mutable_m_stzone_getpaygift_request() {
  set_has_m_stzone_getpaygift_request();
  if (m_stzone_getpaygift_request_ == NULL) m_stzone_getpaygift_request_ = new ::Zone_GetPayGift_Request;
  return m_stzone_getpaygift_request_;
}
inline ::Zone_GetPayGift_Request* CSMsgBody::release_m_stzone_getpaygift_request() {
  clear_has_m_stzone_getpaygift_request();
  ::Zone_GetPayGift_Request* temp = m_stzone_getpaygift_request_;
  m_stzone_getpaygift_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getpaygift_request(::Zone_GetPayGift_Request* m_stzone_getpaygift_request) {
  delete m_stzone_getpaygift_request_;
  m_stzone_getpaygift_request_ = m_stzone_getpaygift_request;
  if (m_stzone_getpaygift_request) {
    set_has_m_stzone_getpaygift_request();
  } else {
    clear_has_m_stzone_getpaygift_request();
  }
}

// optional .Zone_GetPayGift_Response m_stZone_GetPayGift_Response = 245;
inline bool CSMsgBody::has_m_stzone_getpaygift_response() const {
  return (_has_bits_[4] & 0x00080000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getpaygift_response() {
  _has_bits_[4] |= 0x00080000u;
}
inline void CSMsgBody::clear_has_m_stzone_getpaygift_response() {
  _has_bits_[4] &= ~0x00080000u;
}
inline void CSMsgBody::clear_m_stzone_getpaygift_response() {
  if (m_stzone_getpaygift_response_ != NULL) m_stzone_getpaygift_response_->::Zone_GetPayGift_Response::Clear();
  clear_has_m_stzone_getpaygift_response();
}
inline const ::Zone_GetPayGift_Response& CSMsgBody::m_stzone_getpaygift_response() const {
  return m_stzone_getpaygift_response_ != NULL ? *m_stzone_getpaygift_response_ : *default_instance_->m_stzone_getpaygift_response_;
}
inline ::Zone_GetPayGift_Response* CSMsgBody::mutable_m_stzone_getpaygift_response() {
  set_has_m_stzone_getpaygift_response();
  if (m_stzone_getpaygift_response_ == NULL) m_stzone_getpaygift_response_ = new ::Zone_GetPayGift_Response;
  return m_stzone_getpaygift_response_;
}
inline ::Zone_GetPayGift_Response* CSMsgBody::release_m_stzone_getpaygift_response() {
  clear_has_m_stzone_getpaygift_response();
  ::Zone_GetPayGift_Response* temp = m_stzone_getpaygift_response_;
  m_stzone_getpaygift_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getpaygift_response(::Zone_GetPayGift_Response* m_stzone_getpaygift_response) {
  delete m_stzone_getpaygift_response_;
  m_stzone_getpaygift_response_ = m_stzone_getpaygift_response;
  if (m_stzone_getpaygift_response) {
    set_has_m_stzone_getpaygift_response();
  } else {
    clear_has_m_stzone_getpaygift_response();
  }
}

// optional .Zone_UpdateMonthTime_Notify m_stZone_UpdateMonthTime_Notify = 246;
inline bool CSMsgBody::has_m_stzone_updatemonthtime_notify() const {
  return (_has_bits_[4] & 0x00100000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_updatemonthtime_notify() {
  _has_bits_[4] |= 0x00100000u;
}
inline void CSMsgBody::clear_has_m_stzone_updatemonthtime_notify() {
  _has_bits_[4] &= ~0x00100000u;
}
inline void CSMsgBody::clear_m_stzone_updatemonthtime_notify() {
  if (m_stzone_updatemonthtime_notify_ != NULL) m_stzone_updatemonthtime_notify_->::Zone_UpdateMonthTime_Notify::Clear();
  clear_has_m_stzone_updatemonthtime_notify();
}
inline const ::Zone_UpdateMonthTime_Notify& CSMsgBody::m_stzone_updatemonthtime_notify() const {
  return m_stzone_updatemonthtime_notify_ != NULL ? *m_stzone_updatemonthtime_notify_ : *default_instance_->m_stzone_updatemonthtime_notify_;
}
inline ::Zone_UpdateMonthTime_Notify* CSMsgBody::mutable_m_stzone_updatemonthtime_notify() {
  set_has_m_stzone_updatemonthtime_notify();
  if (m_stzone_updatemonthtime_notify_ == NULL) m_stzone_updatemonthtime_notify_ = new ::Zone_UpdateMonthTime_Notify;
  return m_stzone_updatemonthtime_notify_;
}
inline ::Zone_UpdateMonthTime_Notify* CSMsgBody::release_m_stzone_updatemonthtime_notify() {
  clear_has_m_stzone_updatemonthtime_notify();
  ::Zone_UpdateMonthTime_Notify* temp = m_stzone_updatemonthtime_notify_;
  m_stzone_updatemonthtime_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_updatemonthtime_notify(::Zone_UpdateMonthTime_Notify* m_stzone_updatemonthtime_notify) {
  delete m_stzone_updatemonthtime_notify_;
  m_stzone_updatemonthtime_notify_ = m_stzone_updatemonthtime_notify;
  if (m_stzone_updatemonthtime_notify) {
    set_has_m_stzone_updatemonthtime_notify();
  } else {
    clear_has_m_stzone_updatemonthtime_notify();
  }
}

// optional .Zone_VipExpUpdate_Notify m_stZone_VipExpUpdate_Notify = 247;
inline bool CSMsgBody::has_m_stzone_vipexpupdate_notify() const {
  return (_has_bits_[4] & 0x00200000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_vipexpupdate_notify() {
  _has_bits_[4] |= 0x00200000u;
}
inline void CSMsgBody::clear_has_m_stzone_vipexpupdate_notify() {
  _has_bits_[4] &= ~0x00200000u;
}
inline void CSMsgBody::clear_m_stzone_vipexpupdate_notify() {
  if (m_stzone_vipexpupdate_notify_ != NULL) m_stzone_vipexpupdate_notify_->::Zone_VipExpUpdate_Notify::Clear();
  clear_has_m_stzone_vipexpupdate_notify();
}
inline const ::Zone_VipExpUpdate_Notify& CSMsgBody::m_stzone_vipexpupdate_notify() const {
  return m_stzone_vipexpupdate_notify_ != NULL ? *m_stzone_vipexpupdate_notify_ : *default_instance_->m_stzone_vipexpupdate_notify_;
}
inline ::Zone_VipExpUpdate_Notify* CSMsgBody::mutable_m_stzone_vipexpupdate_notify() {
  set_has_m_stzone_vipexpupdate_notify();
  if (m_stzone_vipexpupdate_notify_ == NULL) m_stzone_vipexpupdate_notify_ = new ::Zone_VipExpUpdate_Notify;
  return m_stzone_vipexpupdate_notify_;
}
inline ::Zone_VipExpUpdate_Notify* CSMsgBody::release_m_stzone_vipexpupdate_notify() {
  clear_has_m_stzone_vipexpupdate_notify();
  ::Zone_VipExpUpdate_Notify* temp = m_stzone_vipexpupdate_notify_;
  m_stzone_vipexpupdate_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_vipexpupdate_notify(::Zone_VipExpUpdate_Notify* m_stzone_vipexpupdate_notify) {
  delete m_stzone_vipexpupdate_notify_;
  m_stzone_vipexpupdate_notify_ = m_stzone_vipexpupdate_notify;
  if (m_stzone_vipexpupdate_notify) {
    set_has_m_stzone_vipexpupdate_notify();
  } else {
    clear_has_m_stzone_vipexpupdate_notify();
  }
}

// optional .Zone_UserRecharge_Notify m_stZone_UserRecharge_Notify = 248;
inline bool CSMsgBody::has_m_stzone_userrecharge_notify() const {
  return (_has_bits_[4] & 0x00400000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_userrecharge_notify() {
  _has_bits_[4] |= 0x00400000u;
}
inline void CSMsgBody::clear_has_m_stzone_userrecharge_notify() {
  _has_bits_[4] &= ~0x00400000u;
}
inline void CSMsgBody::clear_m_stzone_userrecharge_notify() {
  if (m_stzone_userrecharge_notify_ != NULL) m_stzone_userrecharge_notify_->::Zone_UserRecharge_Notify::Clear();
  clear_has_m_stzone_userrecharge_notify();
}
inline const ::Zone_UserRecharge_Notify& CSMsgBody::m_stzone_userrecharge_notify() const {
  return m_stzone_userrecharge_notify_ != NULL ? *m_stzone_userrecharge_notify_ : *default_instance_->m_stzone_userrecharge_notify_;
}
inline ::Zone_UserRecharge_Notify* CSMsgBody::mutable_m_stzone_userrecharge_notify() {
  set_has_m_stzone_userrecharge_notify();
  if (m_stzone_userrecharge_notify_ == NULL) m_stzone_userrecharge_notify_ = new ::Zone_UserRecharge_Notify;
  return m_stzone_userrecharge_notify_;
}
inline ::Zone_UserRecharge_Notify* CSMsgBody::release_m_stzone_userrecharge_notify() {
  clear_has_m_stzone_userrecharge_notify();
  ::Zone_UserRecharge_Notify* temp = m_stzone_userrecharge_notify_;
  m_stzone_userrecharge_notify_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_userrecharge_notify(::Zone_UserRecharge_Notify* m_stzone_userrecharge_notify) {
  delete m_stzone_userrecharge_notify_;
  m_stzone_userrecharge_notify_ = m_stzone_userrecharge_notify;
  if (m_stzone_userrecharge_notify) {
    set_has_m_stzone_userrecharge_notify();
  } else {
    clear_has_m_stzone_userrecharge_notify();
  }
}

// optional .Zone_UserRecharge_Request m_stZone_UserRecharge_Request = 249;
inline bool CSMsgBody::has_m_stzone_userrecharge_request() const {
  return (_has_bits_[4] & 0x00800000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_userrecharge_request() {
  _has_bits_[4] |= 0x00800000u;
}
inline void CSMsgBody::clear_has_m_stzone_userrecharge_request() {
  _has_bits_[4] &= ~0x00800000u;
}
inline void CSMsgBody::clear_m_stzone_userrecharge_request() {
  if (m_stzone_userrecharge_request_ != NULL) m_stzone_userrecharge_request_->::Zone_UserRecharge_Request::Clear();
  clear_has_m_stzone_userrecharge_request();
}
inline const ::Zone_UserRecharge_Request& CSMsgBody::m_stzone_userrecharge_request() const {
  return m_stzone_userrecharge_request_ != NULL ? *m_stzone_userrecharge_request_ : *default_instance_->m_stzone_userrecharge_request_;
}
inline ::Zone_UserRecharge_Request* CSMsgBody::mutable_m_stzone_userrecharge_request() {
  set_has_m_stzone_userrecharge_request();
  if (m_stzone_userrecharge_request_ == NULL) m_stzone_userrecharge_request_ = new ::Zone_UserRecharge_Request;
  return m_stzone_userrecharge_request_;
}
inline ::Zone_UserRecharge_Request* CSMsgBody::release_m_stzone_userrecharge_request() {
  clear_has_m_stzone_userrecharge_request();
  ::Zone_UserRecharge_Request* temp = m_stzone_userrecharge_request_;
  m_stzone_userrecharge_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_userrecharge_request(::Zone_UserRecharge_Request* m_stzone_userrecharge_request) {
  delete m_stzone_userrecharge_request_;
  m_stzone_userrecharge_request_ = m_stzone_userrecharge_request;
  if (m_stzone_userrecharge_request) {
    set_has_m_stzone_userrecharge_request();
  } else {
    clear_has_m_stzone_userrecharge_request();
  }
}

// optional .Zone_UserRecharge_Response m_stZone_UserRecharge_Response = 250;
inline bool CSMsgBody::has_m_stzone_userrecharge_response() const {
  return (_has_bits_[4] & 0x01000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_userrecharge_response() {
  _has_bits_[4] |= 0x01000000u;
}
inline void CSMsgBody::clear_has_m_stzone_userrecharge_response() {
  _has_bits_[4] &= ~0x01000000u;
}
inline void CSMsgBody::clear_m_stzone_userrecharge_response() {
  if (m_stzone_userrecharge_response_ != NULL) m_stzone_userrecharge_response_->::Zone_UserRecharge_Response::Clear();
  clear_has_m_stzone_userrecharge_response();
}
inline const ::Zone_UserRecharge_Response& CSMsgBody::m_stzone_userrecharge_response() const {
  return m_stzone_userrecharge_response_ != NULL ? *m_stzone_userrecharge_response_ : *default_instance_->m_stzone_userrecharge_response_;
}
inline ::Zone_UserRecharge_Response* CSMsgBody::mutable_m_stzone_userrecharge_response() {
  set_has_m_stzone_userrecharge_response();
  if (m_stzone_userrecharge_response_ == NULL) m_stzone_userrecharge_response_ = new ::Zone_UserRecharge_Response;
  return m_stzone_userrecharge_response_;
}
inline ::Zone_UserRecharge_Response* CSMsgBody::release_m_stzone_userrecharge_response() {
  clear_has_m_stzone_userrecharge_response();
  ::Zone_UserRecharge_Response* temp = m_stzone_userrecharge_response_;
  m_stzone_userrecharge_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_userrecharge_response(::Zone_UserRecharge_Response* m_stzone_userrecharge_response) {
  delete m_stzone_userrecharge_response_;
  m_stzone_userrecharge_response_ = m_stzone_userrecharge_response;
  if (m_stzone_userrecharge_response) {
    set_has_m_stzone_userrecharge_response();
  } else {
    clear_has_m_stzone_userrecharge_response();
  }
}

// optional .Zone_FinGuide_Request m_stZone_FinGuide_Request = 252;
inline bool CSMsgBody::has_m_stzone_finguide_request() const {
  return (_has_bits_[4] & 0x02000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_finguide_request() {
  _has_bits_[4] |= 0x02000000u;
}
inline void CSMsgBody::clear_has_m_stzone_finguide_request() {
  _has_bits_[4] &= ~0x02000000u;
}
inline void CSMsgBody::clear_m_stzone_finguide_request() {
  if (m_stzone_finguide_request_ != NULL) m_stzone_finguide_request_->::Zone_FinGuide_Request::Clear();
  clear_has_m_stzone_finguide_request();
}
inline const ::Zone_FinGuide_Request& CSMsgBody::m_stzone_finguide_request() const {
  return m_stzone_finguide_request_ != NULL ? *m_stzone_finguide_request_ : *default_instance_->m_stzone_finguide_request_;
}
inline ::Zone_FinGuide_Request* CSMsgBody::mutable_m_stzone_finguide_request() {
  set_has_m_stzone_finguide_request();
  if (m_stzone_finguide_request_ == NULL) m_stzone_finguide_request_ = new ::Zone_FinGuide_Request;
  return m_stzone_finguide_request_;
}
inline ::Zone_FinGuide_Request* CSMsgBody::release_m_stzone_finguide_request() {
  clear_has_m_stzone_finguide_request();
  ::Zone_FinGuide_Request* temp = m_stzone_finguide_request_;
  m_stzone_finguide_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_finguide_request(::Zone_FinGuide_Request* m_stzone_finguide_request) {
  delete m_stzone_finguide_request_;
  m_stzone_finguide_request_ = m_stzone_finguide_request;
  if (m_stzone_finguide_request) {
    set_has_m_stzone_finguide_request();
  } else {
    clear_has_m_stzone_finguide_request();
  }
}

// optional .Zone_FinGuide_Response m_stZone_FinGuide_Response = 251;
inline bool CSMsgBody::has_m_stzone_finguide_response() const {
  return (_has_bits_[4] & 0x04000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_finguide_response() {
  _has_bits_[4] |= 0x04000000u;
}
inline void CSMsgBody::clear_has_m_stzone_finguide_response() {
  _has_bits_[4] &= ~0x04000000u;
}
inline void CSMsgBody::clear_m_stzone_finguide_response() {
  if (m_stzone_finguide_response_ != NULL) m_stzone_finguide_response_->::Zone_FinGuide_Response::Clear();
  clear_has_m_stzone_finguide_response();
}
inline const ::Zone_FinGuide_Response& CSMsgBody::m_stzone_finguide_response() const {
  return m_stzone_finguide_response_ != NULL ? *m_stzone_finguide_response_ : *default_instance_->m_stzone_finguide_response_;
}
inline ::Zone_FinGuide_Response* CSMsgBody::mutable_m_stzone_finguide_response() {
  set_has_m_stzone_finguide_response();
  if (m_stzone_finguide_response_ == NULL) m_stzone_finguide_response_ = new ::Zone_FinGuide_Response;
  return m_stzone_finguide_response_;
}
inline ::Zone_FinGuide_Response* CSMsgBody::release_m_stzone_finguide_response() {
  clear_has_m_stzone_finguide_response();
  ::Zone_FinGuide_Response* temp = m_stzone_finguide_response_;
  m_stzone_finguide_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_finguide_response(::Zone_FinGuide_Response* m_stzone_finguide_response) {
  delete m_stzone_finguide_response_;
  m_stzone_finguide_response_ = m_stzone_finguide_response;
  if (m_stzone_finguide_response) {
    set_has_m_stzone_finguide_response();
  } else {
    clear_has_m_stzone_finguide_response();
  }
}

// optional .Zone_UpdateName_Request m_stZone_UpdateName_Request = 260;
inline bool CSMsgBody::has_m_stzone_updatename_request() const {
  return (_has_bits_[4] & 0x08000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_updatename_request() {
  _has_bits_[4] |= 0x08000000u;
}
inline void CSMsgBody::clear_has_m_stzone_updatename_request() {
  _has_bits_[4] &= ~0x08000000u;
}
inline void CSMsgBody::clear_m_stzone_updatename_request() {
  if (m_stzone_updatename_request_ != NULL) m_stzone_updatename_request_->::Zone_UpdateName_Request::Clear();
  clear_has_m_stzone_updatename_request();
}
inline const ::Zone_UpdateName_Request& CSMsgBody::m_stzone_updatename_request() const {
  return m_stzone_updatename_request_ != NULL ? *m_stzone_updatename_request_ : *default_instance_->m_stzone_updatename_request_;
}
inline ::Zone_UpdateName_Request* CSMsgBody::mutable_m_stzone_updatename_request() {
  set_has_m_stzone_updatename_request();
  if (m_stzone_updatename_request_ == NULL) m_stzone_updatename_request_ = new ::Zone_UpdateName_Request;
  return m_stzone_updatename_request_;
}
inline ::Zone_UpdateName_Request* CSMsgBody::release_m_stzone_updatename_request() {
  clear_has_m_stzone_updatename_request();
  ::Zone_UpdateName_Request* temp = m_stzone_updatename_request_;
  m_stzone_updatename_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_updatename_request(::Zone_UpdateName_Request* m_stzone_updatename_request) {
  delete m_stzone_updatename_request_;
  m_stzone_updatename_request_ = m_stzone_updatename_request;
  if (m_stzone_updatename_request) {
    set_has_m_stzone_updatename_request();
  } else {
    clear_has_m_stzone_updatename_request();
  }
}

// optional .Zone_UpdateName_Response m_stZone_UpdateName_Response = 261;
inline bool CSMsgBody::has_m_stzone_updatename_response() const {
  return (_has_bits_[4] & 0x10000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_updatename_response() {
  _has_bits_[4] |= 0x10000000u;
}
inline void CSMsgBody::clear_has_m_stzone_updatename_response() {
  _has_bits_[4] &= ~0x10000000u;
}
inline void CSMsgBody::clear_m_stzone_updatename_response() {
  if (m_stzone_updatename_response_ != NULL) m_stzone_updatename_response_->::Zone_UpdateName_Response::Clear();
  clear_has_m_stzone_updatename_response();
}
inline const ::Zone_UpdateName_Response& CSMsgBody::m_stzone_updatename_response() const {
  return m_stzone_updatename_response_ != NULL ? *m_stzone_updatename_response_ : *default_instance_->m_stzone_updatename_response_;
}
inline ::Zone_UpdateName_Response* CSMsgBody::mutable_m_stzone_updatename_response() {
  set_has_m_stzone_updatename_response();
  if (m_stzone_updatename_response_ == NULL) m_stzone_updatename_response_ = new ::Zone_UpdateName_Response;
  return m_stzone_updatename_response_;
}
inline ::Zone_UpdateName_Response* CSMsgBody::release_m_stzone_updatename_response() {
  clear_has_m_stzone_updatename_response();
  ::Zone_UpdateName_Response* temp = m_stzone_updatename_response_;
  m_stzone_updatename_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_updatename_response(::Zone_UpdateName_Response* m_stzone_updatename_response) {
  delete m_stzone_updatename_response_;
  m_stzone_updatename_response_ = m_stzone_updatename_response;
  if (m_stzone_updatename_response) {
    set_has_m_stzone_updatename_response();
  } else {
    clear_has_m_stzone_updatename_response();
  }
}

// optional .World_GetUserInfo_Request m_stWorld_GetUserInfo_Request = 270;
inline bool CSMsgBody::has_m_stworld_getuserinfo_request() const {
  return (_has_bits_[4] & 0x20000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getuserinfo_request() {
  _has_bits_[4] |= 0x20000000u;
}
inline void CSMsgBody::clear_has_m_stworld_getuserinfo_request() {
  _has_bits_[4] &= ~0x20000000u;
}
inline void CSMsgBody::clear_m_stworld_getuserinfo_request() {
  if (m_stworld_getuserinfo_request_ != NULL) m_stworld_getuserinfo_request_->::World_GetUserInfo_Request::Clear();
  clear_has_m_stworld_getuserinfo_request();
}
inline const ::World_GetUserInfo_Request& CSMsgBody::m_stworld_getuserinfo_request() const {
  return m_stworld_getuserinfo_request_ != NULL ? *m_stworld_getuserinfo_request_ : *default_instance_->m_stworld_getuserinfo_request_;
}
inline ::World_GetUserInfo_Request* CSMsgBody::mutable_m_stworld_getuserinfo_request() {
  set_has_m_stworld_getuserinfo_request();
  if (m_stworld_getuserinfo_request_ == NULL) m_stworld_getuserinfo_request_ = new ::World_GetUserInfo_Request;
  return m_stworld_getuserinfo_request_;
}
inline ::World_GetUserInfo_Request* CSMsgBody::release_m_stworld_getuserinfo_request() {
  clear_has_m_stworld_getuserinfo_request();
  ::World_GetUserInfo_Request* temp = m_stworld_getuserinfo_request_;
  m_stworld_getuserinfo_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getuserinfo_request(::World_GetUserInfo_Request* m_stworld_getuserinfo_request) {
  delete m_stworld_getuserinfo_request_;
  m_stworld_getuserinfo_request_ = m_stworld_getuserinfo_request;
  if (m_stworld_getuserinfo_request) {
    set_has_m_stworld_getuserinfo_request();
  } else {
    clear_has_m_stworld_getuserinfo_request();
  }
}

// optional .World_GetUserInfo_Response m_stWorld_GetUserInfo_Response = 271;
inline bool CSMsgBody::has_m_stworld_getuserinfo_response() const {
  return (_has_bits_[4] & 0x40000000u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_getuserinfo_response() {
  _has_bits_[4] |= 0x40000000u;
}
inline void CSMsgBody::clear_has_m_stworld_getuserinfo_response() {
  _has_bits_[4] &= ~0x40000000u;
}
inline void CSMsgBody::clear_m_stworld_getuserinfo_response() {
  if (m_stworld_getuserinfo_response_ != NULL) m_stworld_getuserinfo_response_->::World_GetUserInfo_Response::Clear();
  clear_has_m_stworld_getuserinfo_response();
}
inline const ::World_GetUserInfo_Response& CSMsgBody::m_stworld_getuserinfo_response() const {
  return m_stworld_getuserinfo_response_ != NULL ? *m_stworld_getuserinfo_response_ : *default_instance_->m_stworld_getuserinfo_response_;
}
inline ::World_GetUserInfo_Response* CSMsgBody::mutable_m_stworld_getuserinfo_response() {
  set_has_m_stworld_getuserinfo_response();
  if (m_stworld_getuserinfo_response_ == NULL) m_stworld_getuserinfo_response_ = new ::World_GetUserInfo_Response;
  return m_stworld_getuserinfo_response_;
}
inline ::World_GetUserInfo_Response* CSMsgBody::release_m_stworld_getuserinfo_response() {
  clear_has_m_stworld_getuserinfo_response();
  ::World_GetUserInfo_Response* temp = m_stworld_getuserinfo_response_;
  m_stworld_getuserinfo_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_getuserinfo_response(::World_GetUserInfo_Response* m_stworld_getuserinfo_response) {
  delete m_stworld_getuserinfo_response_;
  m_stworld_getuserinfo_response_ = m_stworld_getuserinfo_response;
  if (m_stworld_getuserinfo_response) {
    set_has_m_stworld_getuserinfo_response();
  } else {
    clear_has_m_stworld_getuserinfo_response();
  }
}

// optional .Zone_GetExchangeRec_Request m_stZone_GetExchangeRec_Request = 280;
inline bool CSMsgBody::has_m_stzone_getexchangerec_request() const {
  return (_has_bits_[4] & 0x80000000u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getexchangerec_request() {
  _has_bits_[4] |= 0x80000000u;
}
inline void CSMsgBody::clear_has_m_stzone_getexchangerec_request() {
  _has_bits_[4] &= ~0x80000000u;
}
inline void CSMsgBody::clear_m_stzone_getexchangerec_request() {
  if (m_stzone_getexchangerec_request_ != NULL) m_stzone_getexchangerec_request_->::Zone_GetExchangeRec_Request::Clear();
  clear_has_m_stzone_getexchangerec_request();
}
inline const ::Zone_GetExchangeRec_Request& CSMsgBody::m_stzone_getexchangerec_request() const {
  return m_stzone_getexchangerec_request_ != NULL ? *m_stzone_getexchangerec_request_ : *default_instance_->m_stzone_getexchangerec_request_;
}
inline ::Zone_GetExchangeRec_Request* CSMsgBody::mutable_m_stzone_getexchangerec_request() {
  set_has_m_stzone_getexchangerec_request();
  if (m_stzone_getexchangerec_request_ == NULL) m_stzone_getexchangerec_request_ = new ::Zone_GetExchangeRec_Request;
  return m_stzone_getexchangerec_request_;
}
inline ::Zone_GetExchangeRec_Request* CSMsgBody::release_m_stzone_getexchangerec_request() {
  clear_has_m_stzone_getexchangerec_request();
  ::Zone_GetExchangeRec_Request* temp = m_stzone_getexchangerec_request_;
  m_stzone_getexchangerec_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getexchangerec_request(::Zone_GetExchangeRec_Request* m_stzone_getexchangerec_request) {
  delete m_stzone_getexchangerec_request_;
  m_stzone_getexchangerec_request_ = m_stzone_getexchangerec_request;
  if (m_stzone_getexchangerec_request) {
    set_has_m_stzone_getexchangerec_request();
  } else {
    clear_has_m_stzone_getexchangerec_request();
  }
}

// optional .Zone_GetExchangeRec_Response m_stZone_GetExchangeRec_Response = 281;
inline bool CSMsgBody::has_m_stzone_getexchangerec_response() const {
  return (_has_bits_[5] & 0x00000001u) != 0;
}
inline void CSMsgBody::set_has_m_stzone_getexchangerec_response() {
  _has_bits_[5] |= 0x00000001u;
}
inline void CSMsgBody::clear_has_m_stzone_getexchangerec_response() {
  _has_bits_[5] &= ~0x00000001u;
}
inline void CSMsgBody::clear_m_stzone_getexchangerec_response() {
  if (m_stzone_getexchangerec_response_ != NULL) m_stzone_getexchangerec_response_->::Zone_GetExchangeRec_Response::Clear();
  clear_has_m_stzone_getexchangerec_response();
}
inline const ::Zone_GetExchangeRec_Response& CSMsgBody::m_stzone_getexchangerec_response() const {
  return m_stzone_getexchangerec_response_ != NULL ? *m_stzone_getexchangerec_response_ : *default_instance_->m_stzone_getexchangerec_response_;
}
inline ::Zone_GetExchangeRec_Response* CSMsgBody::mutable_m_stzone_getexchangerec_response() {
  set_has_m_stzone_getexchangerec_response();
  if (m_stzone_getexchangerec_response_ == NULL) m_stzone_getexchangerec_response_ = new ::Zone_GetExchangeRec_Response;
  return m_stzone_getexchangerec_response_;
}
inline ::Zone_GetExchangeRec_Response* CSMsgBody::release_m_stzone_getexchangerec_response() {
  clear_has_m_stzone_getexchangerec_response();
  ::Zone_GetExchangeRec_Response* temp = m_stzone_getexchangerec_response_;
  m_stzone_getexchangerec_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stzone_getexchangerec_response(::Zone_GetExchangeRec_Response* m_stzone_getexchangerec_response) {
  delete m_stzone_getexchangerec_response_;
  m_stzone_getexchangerec_response_ = m_stzone_getexchangerec_response;
  if (m_stzone_getexchangerec_response) {
    set_has_m_stzone_getexchangerec_response();
  } else {
    clear_has_m_stzone_getexchangerec_response();
  }
}

// optional .World_AddExcRec_Request m_stWorld_AddExcRec_Request = 282;
inline bool CSMsgBody::has_m_stworld_addexcrec_request() const {
  return (_has_bits_[5] & 0x00000002u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_addexcrec_request() {
  _has_bits_[5] |= 0x00000002u;
}
inline void CSMsgBody::clear_has_m_stworld_addexcrec_request() {
  _has_bits_[5] &= ~0x00000002u;
}
inline void CSMsgBody::clear_m_stworld_addexcrec_request() {
  if (m_stworld_addexcrec_request_ != NULL) m_stworld_addexcrec_request_->::World_AddExcRec_Request::Clear();
  clear_has_m_stworld_addexcrec_request();
}
inline const ::World_AddExcRec_Request& CSMsgBody::m_stworld_addexcrec_request() const {
  return m_stworld_addexcrec_request_ != NULL ? *m_stworld_addexcrec_request_ : *default_instance_->m_stworld_addexcrec_request_;
}
inline ::World_AddExcRec_Request* CSMsgBody::mutable_m_stworld_addexcrec_request() {
  set_has_m_stworld_addexcrec_request();
  if (m_stworld_addexcrec_request_ == NULL) m_stworld_addexcrec_request_ = new ::World_AddExcRec_Request;
  return m_stworld_addexcrec_request_;
}
inline ::World_AddExcRec_Request* CSMsgBody::release_m_stworld_addexcrec_request() {
  clear_has_m_stworld_addexcrec_request();
  ::World_AddExcRec_Request* temp = m_stworld_addexcrec_request_;
  m_stworld_addexcrec_request_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_addexcrec_request(::World_AddExcRec_Request* m_stworld_addexcrec_request) {
  delete m_stworld_addexcrec_request_;
  m_stworld_addexcrec_request_ = m_stworld_addexcrec_request;
  if (m_stworld_addexcrec_request) {
    set_has_m_stworld_addexcrec_request();
  } else {
    clear_has_m_stworld_addexcrec_request();
  }
}

// optional .World_AddExcRec_Response m_stWorld_AddExcRec_Response = 283;
inline bool CSMsgBody::has_m_stworld_addexcrec_response() const {
  return (_has_bits_[5] & 0x00000004u) != 0;
}
inline void CSMsgBody::set_has_m_stworld_addexcrec_response() {
  _has_bits_[5] |= 0x00000004u;
}
inline void CSMsgBody::clear_has_m_stworld_addexcrec_response() {
  _has_bits_[5] &= ~0x00000004u;
}
inline void CSMsgBody::clear_m_stworld_addexcrec_response() {
  if (m_stworld_addexcrec_response_ != NULL) m_stworld_addexcrec_response_->::World_AddExcRec_Response::Clear();
  clear_has_m_stworld_addexcrec_response();
}
inline const ::World_AddExcRec_Response& CSMsgBody::m_stworld_addexcrec_response() const {
  return m_stworld_addexcrec_response_ != NULL ? *m_stworld_addexcrec_response_ : *default_instance_->m_stworld_addexcrec_response_;
}
inline ::World_AddExcRec_Response* CSMsgBody::mutable_m_stworld_addexcrec_response() {
  set_has_m_stworld_addexcrec_response();
  if (m_stworld_addexcrec_response_ == NULL) m_stworld_addexcrec_response_ = new ::World_AddExcRec_Response;
  return m_stworld_addexcrec_response_;
}
inline ::World_AddExcRec_Response* CSMsgBody::release_m_stworld_addexcrec_response() {
  clear_has_m_stworld_addexcrec_response();
  ::World_AddExcRec_Response* temp = m_stworld_addexcrec_response_;
  m_stworld_addexcrec_response_ = NULL;
  return temp;
}
inline void CSMsgBody::set_allocated_m_stworld_addexcrec_response(::World_AddExcRec_Response* m_stworld_addexcrec_response) {
  delete m_stworld_addexcrec_response_;
  m_stworld_addexcrec_response_ = m_stworld_addexcrec_response;
  if (m_stworld_addexcrec_response) {
    set_has_m_stworld_addexcrec_response();
  } else {
    clear_has_m_stworld_addexcrec_response();
  }
}

// -------------------------------------------------------------------

// CSMsgHead

// optional uint32 uiSessionFd = 1;
inline bool CSMsgHead::has_uisessionfd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CSMsgHead::set_has_uisessionfd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CSMsgHead::clear_has_uisessionfd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CSMsgHead::clear_uisessionfd() {
  uisessionfd_ = 0u;
  clear_has_uisessionfd();
}
inline ::google::protobuf::uint32 CSMsgHead::uisessionfd() const {
  return uisessionfd_;
}
inline void CSMsgHead::set_uisessionfd(::google::protobuf::uint32 value) {
  set_has_uisessionfd();
  uisessionfd_ = value;
}

// optional .ProtocolMsgID uiMsgID = 2 [default = MSGID_PROTOCOL_INVALID_MSG];
inline bool CSMsgHead::has_uimsgid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CSMsgHead::set_has_uimsgid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CSMsgHead::clear_has_uimsgid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CSMsgHead::clear_uimsgid() {
  uimsgid_ = 0;
  clear_has_uimsgid();
}
inline ::ProtocolMsgID CSMsgHead::uimsgid() const {
  return static_cast< ::ProtocolMsgID >(uimsgid_);
}
inline void CSMsgHead::set_uimsgid(::ProtocolMsgID value) {
  assert(::ProtocolMsgID_IsValid(value));
  set_has_uimsgid();
  uimsgid_ = value;
}

// optional uint32 uin = 3;
inline bool CSMsgHead::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CSMsgHead::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CSMsgHead::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CSMsgHead::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 CSMsgHead::uin() const {
  return uin_;
}
inline void CSMsgHead::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// -------------------------------------------------------------------

// ProtocolCSMsg

// optional .GameProtocol.CS.CSMsgHead stHead = 1;
inline bool ProtocolCSMsg::has_sthead() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProtocolCSMsg::set_has_sthead() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProtocolCSMsg::clear_has_sthead() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProtocolCSMsg::clear_sthead() {
  if (sthead_ != NULL) sthead_->::GameProtocol::CS::CSMsgHead::Clear();
  clear_has_sthead();
}
inline const ::GameProtocol::CS::CSMsgHead& ProtocolCSMsg::sthead() const {
  return sthead_ != NULL ? *sthead_ : *default_instance_->sthead_;
}
inline ::GameProtocol::CS::CSMsgHead* ProtocolCSMsg::mutable_sthead() {
  set_has_sthead();
  if (sthead_ == NULL) sthead_ = new ::GameProtocol::CS::CSMsgHead;
  return sthead_;
}
inline ::GameProtocol::CS::CSMsgHead* ProtocolCSMsg::release_sthead() {
  clear_has_sthead();
  ::GameProtocol::CS::CSMsgHead* temp = sthead_;
  sthead_ = NULL;
  return temp;
}
inline void ProtocolCSMsg::set_allocated_sthead(::GameProtocol::CS::CSMsgHead* sthead) {
  delete sthead_;
  sthead_ = sthead;
  if (sthead) {
    set_has_sthead();
  } else {
    clear_has_sthead();
  }
}

// optional .GameProtocol.CS.CSMsgBody stBody = 2;
inline bool ProtocolCSMsg::has_stbody() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProtocolCSMsg::set_has_stbody() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProtocolCSMsg::clear_has_stbody() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProtocolCSMsg::clear_stbody() {
  if (stbody_ != NULL) stbody_->::GameProtocol::CS::CSMsgBody::Clear();
  clear_has_stbody();
}
inline const ::GameProtocol::CS::CSMsgBody& ProtocolCSMsg::stbody() const {
  return stbody_ != NULL ? *stbody_ : *default_instance_->stbody_;
}
inline ::GameProtocol::CS::CSMsgBody* ProtocolCSMsg::mutable_stbody() {
  set_has_stbody();
  if (stbody_ == NULL) stbody_ = new ::GameProtocol::CS::CSMsgBody;
  return stbody_;
}
inline ::GameProtocol::CS::CSMsgBody* ProtocolCSMsg::release_stbody() {
  clear_has_stbody();
  ::GameProtocol::CS::CSMsgBody* temp = stbody_;
  stbody_ = NULL;
  return temp;
}
inline void ProtocolCSMsg::set_allocated_stbody(::GameProtocol::CS::CSMsgBody* stbody) {
  delete stbody_;
  stbody_ = stbody;
  if (stbody) {
    set_has_stbody();
  } else {
    clear_has_stbody();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CS
}  // namespace GameProtocol

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameProtocol_5fCS_2eproto__INCLUDED
