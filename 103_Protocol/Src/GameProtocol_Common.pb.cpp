// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_Common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol_Common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ZoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoleID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoleID_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutServer_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutServer_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* LogoutServer_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LogoutServer_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNewName_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNewName_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddNewName_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddNewName_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteName_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteName_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteName_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteName_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NumberBetInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NumberBetInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LasvegasInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LasvegasInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeRec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeRec_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ChatChannelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* enNameType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailSendType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailStatType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RankType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* StepType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogTargetType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LogoutReasonType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto() {
  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol_Common.proto");
  GOOGLE_CHECK(file != NULL);
  ZoneInfo_descriptor_ = file->message_type(0);
  static const int ZoneInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, uzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, strzonename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, uzonestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, strzoneip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, uzoneport_),
  };
  ZoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneInfo_descriptor_,
      ZoneInfo::default_instance_,
      ZoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneInfo));
  ZoneList_descriptor_ = file->message_type(1);
  static const int ZoneList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, stzoneinfos_),
  };
  ZoneList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneList_descriptor_,
      ZoneList::default_instance_,
      ZoneList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneList));
  RoleID_descriptor_ = file->message_type(2);
  static const int RoleID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, uiseq_),
  };
  RoleID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoleID_descriptor_,
      RoleID::default_instance_,
      RoleID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoleID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoleID));
  LogoutServer_Request_descriptor_ = file->message_type(3);
  static const int LogoutServer_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, ureason_),
  };
  LogoutServer_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutServer_Request_descriptor_,
      LogoutServer_Request::default_instance_,
      LogoutServer_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutServer_Request));
  LogoutServer_Response_descriptor_ = file->message_type(4);
  static const int LogoutServer_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, ireason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, irealnamestat_),
  };
  LogoutServer_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LogoutServer_Response_descriptor_,
      LogoutServer_Response::default_instance_,
      LogoutServer_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LogoutServer_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LogoutServer_Response));
  AddNewName_Request_descriptor_ = file->message_type(5);
  static const int AddNewName_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, name_id_),
  };
  AddNewName_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNewName_Request_descriptor_,
      AddNewName_Request::default_instance_,
      AddNewName_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNewName_Request));
  AddNewName_Response_descriptor_ = file->message_type(6);
  static const int AddNewName_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, name_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, strname_),
  };
  AddNewName_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddNewName_Response_descriptor_,
      AddNewName_Response::default_instance_,
      AddNewName_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddNewName_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddNewName_Response));
  DeleteName_Request_descriptor_ = file->message_type(7);
  static const int DeleteName_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, itype_),
  };
  DeleteName_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteName_Request_descriptor_,
      DeleteName_Request::default_instance_,
      DeleteName_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteName_Request));
  DeleteName_Response_descriptor_ = file->message_type(8);
  static const int DeleteName_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Response, iresult_),
  };
  DeleteName_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteName_Response_descriptor_,
      DeleteName_Response::default_instance_,
      DeleteName_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteName_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteName_Response));
  RankInfo_descriptor_ = file->message_type(9);
  static const int RankInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, iranknum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, sznickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, strpicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, iviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, inum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, strsign_),
  };
  RankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankInfo_descriptor_,
      RankInfo::default_instance_,
      RankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankInfo));
  PrizeInfo_descriptor_ = file->message_type(10);
  static const int PrizeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, inumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, irewardcoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, iindex_),
  };
  PrizeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeInfo_descriptor_,
      PrizeInfo::default_instance_,
      PrizeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeInfo));
  NumberBetInfo_descriptor_ = file->message_type(11);
  static const int NumberBetInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberBetInfo, inumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberBetInfo, lbetcoins_),
  };
  NumberBetInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NumberBetInfo_descriptor_,
      NumberBetInfo::default_instance_,
      NumberBetInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberBetInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NumberBetInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NumberBetInfo));
  LasvegasInfo_descriptor_ = file->message_type(12);
  static const int LasvegasInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LasvegasInfo, isteptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LasvegasInfo, istependtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LasvegasInfo, ilotteryids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LasvegasInfo, stprizes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LasvegasInfo, stbets_),
  };
  LasvegasInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LasvegasInfo_descriptor_,
      LasvegasInfo::default_instance_,
      LasvegasInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LasvegasInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LasvegasInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LasvegasInfo));
  ExchangeRec_descriptor_ = file->message_type(13);
  static const int ExchangeRec_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRec, itime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRec, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRec, iexchangeid_),
  };
  ExchangeRec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeRec_descriptor_,
      ExchangeRec::default_instance_,
      ExchangeRec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeRec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeRec));
  ChatChannelType_descriptor_ = file->enum_type(0);
  enNameType_descriptor_ = file->enum_type(1);
  MailType_descriptor_ = file->enum_type(2);
  MailSendType_descriptor_ = file->enum_type(3);
  MailStatType_descriptor_ = file->enum_type(4);
  RankType_descriptor_ = file->enum_type(5);
  StepType_descriptor_ = file->enum_type(6);
  LogTargetType_descriptor_ = file->enum_type(7);
  LogoutReasonType_descriptor_ = file->enum_type(8);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_5fCommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneInfo_descriptor_, &ZoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneList_descriptor_, &ZoneList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoleID_descriptor_, &RoleID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutServer_Request_descriptor_, &LogoutServer_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LogoutServer_Response_descriptor_, &LogoutServer_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNewName_Request_descriptor_, &AddNewName_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddNewName_Response_descriptor_, &AddNewName_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteName_Request_descriptor_, &DeleteName_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteName_Response_descriptor_, &DeleteName_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankInfo_descriptor_, &RankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeInfo_descriptor_, &PrizeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NumberBetInfo_descriptor_, &NumberBetInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LasvegasInfo_descriptor_, &LasvegasInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeRec_descriptor_, &ExchangeRec::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto() {
  delete ZoneInfo::default_instance_;
  delete ZoneInfo_reflection_;
  delete ZoneList::default_instance_;
  delete ZoneList_reflection_;
  delete RoleID::default_instance_;
  delete RoleID_reflection_;
  delete LogoutServer_Request::default_instance_;
  delete LogoutServer_Request_reflection_;
  delete LogoutServer_Response::default_instance_;
  delete LogoutServer_Response_reflection_;
  delete AddNewName_Request::default_instance_;
  delete AddNewName_Request_reflection_;
  delete AddNewName_Response::default_instance_;
  delete AddNewName_Response_reflection_;
  delete DeleteName_Request::default_instance_;
  delete DeleteName_Request_reflection_;
  delete DeleteName_Response::default_instance_;
  delete DeleteName_Response_reflection_;
  delete RankInfo::default_instance_;
  delete RankInfo_reflection_;
  delete PrizeInfo::default_instance_;
  delete PrizeInfo_reflection_;
  delete NumberBetInfo::default_instance_;
  delete NumberBetInfo_reflection_;
  delete LasvegasInfo::default_instance_;
  delete LasvegasInfo_reflection_;
  delete ExchangeRec::default_instance_;
  delete ExchangeRec_reflection_;
}

void protobuf_AddDesc_GameProtocol_5fCommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031GameProtocol_Common.proto\"j\n\010ZoneInfo\022"
    "\017\n\007uZoneID\030\001 \001(\r\022\023\n\013strZoneName\030\002 \001(\t\022\022\n"
    "\nuZoneState\030\003 \001(\r\022\021\n\tstrZoneIP\030\004 \001(\t\022\021\n\t"
    "uZonePort\030\005 \001(\r\"*\n\010ZoneList\022\036\n\013stZoneInf"
    "os\030\001 \003(\0132\t.ZoneInfo\"$\n\006RoleID\022\013\n\003uin\030\001 \001"
    "(\r\022\r\n\005uiSeq\030\002 \001(\r\"4\n\024LogoutServer_Reques"
    "t\022\013\n\003uin\030\001 \001(\r\022\017\n\007uReason\030\002 \001(\r\"P\n\025Logou"
    "tServer_Response\022\017\n\007iResult\030\001 \001(\005\022\017\n\007iRe"
    "ason\030\002 \001(\005\022\025\n\riRealNameStat\030\003 \001(\005\"E\n\022Add"
    "NewName_Request\022\017\n\007strName\030\001 \001(\t\022\r\n\005iTyp"
    "e\030\002 \001(\005\022\017\n\007name_id\030\003 \001(\r\"W\n\023AddNewName_R"
    "esponse\022\017\n\007iResult\030\001 \001(\005\022\r\n\005iType\030\002 \001(\005\022"
    "\017\n\007name_id\030\003 \001(\r\022\017\n\007strName\030\004 \001(\t\"4\n\022Del"
    "eteName_Request\022\017\n\007strName\030\001 \001(\t\022\r\n\005iTyp"
    "e\030\002 \001(\005\"&\n\023DeleteName_Response\022\017\n\007iResul"
    "t\030\001 \001(\005\"\201\001\n\010RankInfo\022\020\n\010iRankNum\030\001 \001(\005\022\013"
    "\n\003uin\030\002 \001(\r\022\022\n\nszNickName\030\003 \001(\t\022\020\n\010strPi"
    "cID\030\004 \001(\t\022\021\n\tiVIPLevel\030\005 \001(\005\022\014\n\004iNum\030\006 \001"
    "(\003\022\017\n\007strSign\030\007 \001(\t\"S\n\tPrizeInfo\022\017\n\007strN"
    "ame\030\001 \001(\t\022\017\n\007iNumber\030\002 \001(\005\022\024\n\014iRewardCoi"
    "ns\030\003 \001(\005\022\016\n\006iIndex\030\004 \001(\005\"3\n\rNumberBetInf"
    "o\022\017\n\007iNumber\030\001 \001(\005\022\021\n\tlBetCoins\030\002 \001(\003\"\212\001"
    "\n\014LasvegasInfo\022\021\n\tiStepType\030\002 \001(\005\022\024\n\014iSt"
    "epEndTime\030\003 \001(\005\022\023\n\013iLotteryIDs\030\004 \003(\005\022\034\n\010"
    "stPrizes\030\005 \003(\0132\n.PrizeInfo\022\036\n\006stBets\030\006 \003"
    "(\0132\016.NumberBetInfo\"B\n\013ExchangeRec\022\r\n\005iTi"
    "me\030\001 \001(\005\022\017\n\007strName\030\002 \001(\t\022\023\n\013iExchangeID"
    "\030\003 \001(\005*v\n\017ChatChannelType\022\030\n\024CHAT_CHANNE"
    "L_INVALID\020\000\022\026\n\022CHAT_CHANNEL_WORLD\020\001\022\030\n\024C"
    "HAT_CHANNEL_PRIVATE\020\002\022\027\n\023CHAT_CHANNEL_SY"
    "STEM\020\003*S\n\nenNameType\022\030\n\024EN_NAME_TYPE_INV"
    "ALID\020\000\022\025\n\021EN_NAME_TYPE_ROLE\020\001\022\024\n\020EN_NAME"
    "_TYPE_MAX\020\002*O\n\010MailType\022\025\n\021MAIL_TYPE_INV"
    "ALID\020\000\022\024\n\020MAIL_TYPE_NORMAL\020\001\022\026\n\022MAIL_TYP"
    "E_APPENDIX\020\002*\264\002\n\014MailSendType\022\025\n\021MAIL_SE"
    "ND_INVALID\020\000\022\026\n\022MAIL_SEND_ITEMGIFT\020\001\022\032\n\026"
    "MAIL_SEND_APPENDIXTEST\020\002\022\031\n\025MAIL_SEND_NO"
    "RMAILTEST\020\003\022\025\n\021MAIL_SEND_REPFULL\020\004\022\025\n\021MA"
    "IL_SEND_VIPGIFT\020\005\022\026\n\022MAIL_SEND_SCOREDAY\020"
    "\006\022\027\n\023MAIL_SEND_SCOREWEEK\020\007\022\027\n\023MAIL_SEND_"
    "MONTHCARD\020\010\022\026\n\022MAIL_SEND_GMNORMAL\020\t\022\030\n\024M"
    "AIL_SEND_GMAPPENDIX\020\n\022\024\n\020MAIL_SEND_CARDN"
    "O\020\013*k\n\014MailStatType\022\025\n\021MAIL_STAT_INVALID"
    "\020\000\022\025\n\021MAIL_STAT_NOTREAD\020\001\022\022\n\016MAIL_STAT_R"
    "EAD\020\002\022\031\n\025MAIL_STAT_GETAPPENDIX\020\003*\221\001\n\010Ran"
    "kType\022\025\n\021RANK_TYPE_INVALID\020\000\022\023\n\017RANK_TYP"
    "E_MONEY\020\001\022\025\n\021RANK_TYPE_WARHEAD\020\002\022\026\n\022RANK"
    "_TYPE_DAYSCORE\020\003\022\027\n\023RANK_TYPE_WEEKSCORE\020"
    "\004\022\021\n\rRANK_TYPE_MAX\020\005*W\n\010StepType\022\031\n\025LASV"
    "EGAS_STEP_INVALID\020\000\022\025\n\021LASVEGAS_STEP_BET"
    "\020\001\022\031\n\025LASVEGAS_STEP_LOTTERY\020\002*h\n\rLogTarg"
    "etType\022\026\n\022LOG_TARGET_INVALID\020\000\022\025\n\021LOG_TA"
    "RGET_MOFANG\020\001\022\024\n\020LOG_TARGET_TAPDB\020\002\022\022\n\016L"
    "OG_TARGET_MAX\020\003*{\n\020LogoutReasonType\022\031\n\025L"
    "OGOUT_REASON_INVALID\020\000\022\030\n\024LOGOUT_REASON_"
    "NORMAL\020\001\022\030\n\024LOGOUT_REASON_KICKED\020\002\022\030\n\024LO"
    "GOUT_REASON_WALLOW\020\003", 2260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol_Common.proto", &protobuf_RegisterTypes);
  ZoneInfo::default_instance_ = new ZoneInfo();
  ZoneList::default_instance_ = new ZoneList();
  RoleID::default_instance_ = new RoleID();
  LogoutServer_Request::default_instance_ = new LogoutServer_Request();
  LogoutServer_Response::default_instance_ = new LogoutServer_Response();
  AddNewName_Request::default_instance_ = new AddNewName_Request();
  AddNewName_Response::default_instance_ = new AddNewName_Response();
  DeleteName_Request::default_instance_ = new DeleteName_Request();
  DeleteName_Response::default_instance_ = new DeleteName_Response();
  RankInfo::default_instance_ = new RankInfo();
  PrizeInfo::default_instance_ = new PrizeInfo();
  NumberBetInfo::default_instance_ = new NumberBetInfo();
  LasvegasInfo::default_instance_ = new LasvegasInfo();
  ExchangeRec::default_instance_ = new ExchangeRec();
  ZoneInfo::default_instance_->InitAsDefaultInstance();
  ZoneList::default_instance_->InitAsDefaultInstance();
  RoleID::default_instance_->InitAsDefaultInstance();
  LogoutServer_Request::default_instance_->InitAsDefaultInstance();
  LogoutServer_Response::default_instance_->InitAsDefaultInstance();
  AddNewName_Request::default_instance_->InitAsDefaultInstance();
  AddNewName_Response::default_instance_->InitAsDefaultInstance();
  DeleteName_Request::default_instance_->InitAsDefaultInstance();
  DeleteName_Response::default_instance_->InitAsDefaultInstance();
  RankInfo::default_instance_->InitAsDefaultInstance();
  PrizeInfo::default_instance_->InitAsDefaultInstance();
  NumberBetInfo::default_instance_->InitAsDefaultInstance();
  LasvegasInfo::default_instance_->InitAsDefaultInstance();
  ExchangeRec::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_5fCommon_2eproto {
  StaticDescriptorInitializer_GameProtocol_5fCommon_2eproto() {
    protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  }
} static_descriptor_initializer_GameProtocol_5fCommon_2eproto_;
const ::google::protobuf::EnumDescriptor* ChatChannelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChatChannelType_descriptor_;
}
bool ChatChannelType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* enNameType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enNameType_descriptor_;
}
bool enNameType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailType_descriptor_;
}
bool MailType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailSendType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailSendType_descriptor_;
}
bool MailSendType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailStatType_descriptor_;
}
bool MailStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RankType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankType_descriptor_;
}
bool RankType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StepType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StepType_descriptor_;
}
bool StepType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogTargetType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogTargetType_descriptor_;
}
bool LogTargetType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LogoutReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutReasonType_descriptor_;
}
bool LogoutReasonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneInfo::kUZoneIDFieldNumber;
const int ZoneInfo::kStrZoneNameFieldNumber;
const int ZoneInfo::kUZoneStateFieldNumber;
const int ZoneInfo::kStrZoneIPFieldNumber;
const int ZoneInfo::kUZonePortFieldNumber;
#endif  // !_MSC_VER

ZoneInfo::ZoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneInfo::InitAsDefaultInstance() {
}

ZoneInfo::ZoneInfo(const ZoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneInfo::SharedCtor() {
  _cached_size_ = 0;
  uzoneid_ = 0u;
  strzonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uzonestate_ = 0u;
  strzoneip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uzoneport_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneInfo::~ZoneInfo() {
  SharedDtor();
}

void ZoneInfo::SharedDtor() {
  if (strzonename_ != &::google::protobuf::internal::kEmptyString) {
    delete strzonename_;
  }
  if (strzoneip_ != &::google::protobuf::internal::kEmptyString) {
    delete strzoneip_;
  }
  if (this != default_instance_) {
  }
}

void ZoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneInfo_descriptor_;
}

const ZoneInfo& ZoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

ZoneInfo* ZoneInfo::default_instance_ = NULL;

ZoneInfo* ZoneInfo::New() const {
  return new ZoneInfo;
}

void ZoneInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uzoneid_ = 0u;
    if (has_strzonename()) {
      if (strzonename_ != &::google::protobuf::internal::kEmptyString) {
        strzonename_->clear();
      }
    }
    uzonestate_ = 0u;
    if (has_strzoneip()) {
      if (strzoneip_ != &::google::protobuf::internal::kEmptyString) {
        strzoneip_->clear();
      }
    }
    uzoneport_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uZoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uzoneid_)));
          set_has_uzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strZoneName;
        break;
      }

      // optional string strZoneName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strZoneName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strzonename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strzonename().data(), this->strzonename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uZoneState;
        break;
      }

      // optional uint32 uZoneState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uZoneState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uzonestate_)));
          set_has_uzonestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strZoneIP;
        break;
      }

      // optional string strZoneIP = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strZoneIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strzoneip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strzoneip().data(), this->strzoneip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uZonePort;
        break;
      }

      // optional uint32 uZonePort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uZonePort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uzoneport_)));
          set_has_uzoneport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uZoneID = 1;
  if (has_uzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uzoneid(), output);
  }

  // optional string strZoneName = 2;
  if (has_strzonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzonename().data(), this->strzonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strzonename(), output);
  }

  // optional uint32 uZoneState = 3;
  if (has_uzonestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uzonestate(), output);
  }

  // optional string strZoneIP = 4;
  if (has_strzoneip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzoneip().data(), this->strzoneip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strzoneip(), output);
  }

  // optional uint32 uZonePort = 5;
  if (has_uzoneport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uzoneport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uZoneID = 1;
  if (has_uzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uzoneid(), target);
  }

  // optional string strZoneName = 2;
  if (has_strzonename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzonename().data(), this->strzonename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strzonename(), target);
  }

  // optional uint32 uZoneState = 3;
  if (has_uzonestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uzonestate(), target);
  }

  // optional string strZoneIP = 4;
  if (has_strzoneip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strzoneip().data(), this->strzoneip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strzoneip(), target);
  }

  // optional uint32 uZonePort = 5;
  if (has_uzoneport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uzoneport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uZoneID = 1;
    if (has_uzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uzoneid());
    }

    // optional string strZoneName = 2;
    if (has_strzonename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strzonename());
    }

    // optional uint32 uZoneState = 3;
    if (has_uzonestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uzonestate());
    }

    // optional string strZoneIP = 4;
    if (has_strzoneip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strzoneip());
    }

    // optional uint32 uZonePort = 5;
    if (has_uzoneport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uzoneport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneInfo::MergeFrom(const ZoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uzoneid()) {
      set_uzoneid(from.uzoneid());
    }
    if (from.has_strzonename()) {
      set_strzonename(from.strzonename());
    }
    if (from.has_uzonestate()) {
      set_uzonestate(from.uzonestate());
    }
    if (from.has_strzoneip()) {
      set_strzoneip(from.strzoneip());
    }
    if (from.has_uzoneport()) {
      set_uzoneport(from.uzoneport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneInfo::CopyFrom(const ZoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneInfo::IsInitialized() const {

  return true;
}

void ZoneInfo::Swap(ZoneInfo* other) {
  if (other != this) {
    std::swap(uzoneid_, other->uzoneid_);
    std::swap(strzonename_, other->strzonename_);
    std::swap(uzonestate_, other->uzonestate_);
    std::swap(strzoneip_, other->strzoneip_);
    std::swap(uzoneport_, other->uzoneport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneInfo_descriptor_;
  metadata.reflection = ZoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneList::kStZoneInfosFieldNumber;
#endif  // !_MSC_VER

ZoneList::ZoneList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneList::InitAsDefaultInstance() {
}

ZoneList::ZoneList(const ZoneList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneList::~ZoneList() {
  SharedDtor();
}

void ZoneList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneList_descriptor_;
}

const ZoneList& ZoneList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

ZoneList* ZoneList::default_instance_ = NULL;

ZoneList* ZoneList::New() const {
  return new ZoneList;
}

void ZoneList::Clear() {
  stzoneinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ZoneInfo stZoneInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stZoneInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stzoneinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stZoneInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ZoneInfo stZoneInfos = 1;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stzoneinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ZoneInfo stZoneInfos = 1;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stzoneinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneList::ByteSize() const {
  int total_size = 0;

  // repeated .ZoneInfo stZoneInfos = 1;
  total_size += 1 * this->stzoneinfos_size();
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stzoneinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneList::MergeFrom(const ZoneList& from) {
  GOOGLE_CHECK_NE(&from, this);
  stzoneinfos_.MergeFrom(from.stzoneinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneList::CopyFrom(const ZoneList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneList::IsInitialized() const {

  return true;
}

void ZoneList::Swap(ZoneList* other) {
  if (other != this) {
    stzoneinfos_.Swap(&other->stzoneinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneList_descriptor_;
  metadata.reflection = ZoneList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoleID::kUinFieldNumber;
const int RoleID::kUiSeqFieldNumber;
#endif  // !_MSC_VER

RoleID::RoleID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoleID::InitAsDefaultInstance() {
}

RoleID::RoleID(const RoleID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoleID::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  uiseq_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoleID::~RoleID() {
  SharedDtor();
}

void RoleID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoleID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoleID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoleID_descriptor_;
}

const RoleID& RoleID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

RoleID* RoleID::default_instance_ = NULL;

RoleID* RoleID::New() const {
  return new RoleID;
}

void RoleID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    uiseq_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoleID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSeq;
        break;
      }

      // optional uint32 uiSeq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiseq_)));
          set_has_uiseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoleID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiseq(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoleID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiseq(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoleID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uiSeq = 2;
    if (has_uiseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiseq());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoleID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoleID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoleID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoleID::MergeFrom(const RoleID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_uiseq()) {
      set_uiseq(from.uiseq());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoleID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoleID::CopyFrom(const RoleID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoleID::IsInitialized() const {

  return true;
}

void RoleID::Swap(RoleID* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(uiseq_, other->uiseq_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoleID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoleID_descriptor_;
  metadata.reflection = RoleID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutServer_Request::kUinFieldNumber;
const int LogoutServer_Request::kUReasonFieldNumber;
#endif  // !_MSC_VER

LogoutServer_Request::LogoutServer_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutServer_Request::InitAsDefaultInstance() {
}

LogoutServer_Request::LogoutServer_Request(const LogoutServer_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutServer_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  ureason_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutServer_Request::~LogoutServer_Request() {
  SharedDtor();
}

void LogoutServer_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutServer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutServer_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutServer_Request_descriptor_;
}

const LogoutServer_Request& LogoutServer_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

LogoutServer_Request* LogoutServer_Request::default_instance_ = NULL;

LogoutServer_Request* LogoutServer_Request::New() const {
  return new LogoutServer_Request;
}

void LogoutServer_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    ureason_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uReason;
        break;
      }

      // optional uint32 uReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ureason_)));
          set_has_ureason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uReason = 2;
  if (has_ureason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ureason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutServer_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uReason = 2;
  if (has_ureason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ureason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutServer_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uReason = 2;
    if (has_ureason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ureason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutServer_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutServer_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutServer_Request::MergeFrom(const LogoutServer_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ureason()) {
      set_ureason(from.ureason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutServer_Request::CopyFrom(const LogoutServer_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutServer_Request::IsInitialized() const {

  return true;
}

void LogoutServer_Request::Swap(LogoutServer_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(ureason_, other->ureason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutServer_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutServer_Request_descriptor_;
  metadata.reflection = LogoutServer_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LogoutServer_Response::kIResultFieldNumber;
const int LogoutServer_Response::kIReasonFieldNumber;
const int LogoutServer_Response::kIRealNameStatFieldNumber;
#endif  // !_MSC_VER

LogoutServer_Response::LogoutServer_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LogoutServer_Response::InitAsDefaultInstance() {
}

LogoutServer_Response::LogoutServer_Response(const LogoutServer_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LogoutServer_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ireason_ = 0;
  irealnamestat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LogoutServer_Response::~LogoutServer_Response() {
  SharedDtor();
}

void LogoutServer_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LogoutServer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LogoutServer_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LogoutServer_Response_descriptor_;
}

const LogoutServer_Response& LogoutServer_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

LogoutServer_Response* LogoutServer_Response::default_instance_ = NULL;

LogoutServer_Response* LogoutServer_Response::New() const {
  return new LogoutServer_Response;
}

void LogoutServer_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ireason_ = 0;
    irealnamestat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LogoutServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iReason;
        break;
      }

      // optional int32 iReason = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireason_)));
          set_has_ireason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRealNameStat;
        break;
      }

      // optional int32 iRealNameStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRealNameStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irealnamestat_)));
          set_has_irealnamestat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LogoutServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iReason = 2;
  if (has_ireason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ireason(), output);
  }

  // optional int32 iRealNameStat = 3;
  if (has_irealnamestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irealnamestat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LogoutServer_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iReason = 2;
  if (has_ireason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ireason(), target);
  }

  // optional int32 iRealNameStat = 3;
  if (has_irealnamestat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irealnamestat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LogoutServer_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iReason = 2;
    if (has_ireason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireason());
    }

    // optional int32 iRealNameStat = 3;
    if (has_irealnamestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irealnamestat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogoutServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LogoutServer_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LogoutServer_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LogoutServer_Response::MergeFrom(const LogoutServer_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ireason()) {
      set_ireason(from.ireason());
    }
    if (from.has_irealnamestat()) {
      set_irealnamestat(from.irealnamestat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LogoutServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogoutServer_Response::CopyFrom(const LogoutServer_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogoutServer_Response::IsInitialized() const {

  return true;
}

void LogoutServer_Response::Swap(LogoutServer_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ireason_, other->ireason_);
    std::swap(irealnamestat_, other->irealnamestat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LogoutServer_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LogoutServer_Response_descriptor_;
  metadata.reflection = LogoutServer_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNewName_Request::kStrNameFieldNumber;
const int AddNewName_Request::kITypeFieldNumber;
const int AddNewName_Request::kNameIdFieldNumber;
#endif  // !_MSC_VER

AddNewName_Request::AddNewName_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddNewName_Request::InitAsDefaultInstance() {
}

AddNewName_Request::AddNewName_Request(const AddNewName_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddNewName_Request::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itype_ = 0;
  name_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNewName_Request::~AddNewName_Request() {
  SharedDtor();
}

void AddNewName_Request::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void AddNewName_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNewName_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNewName_Request_descriptor_;
}

const AddNewName_Request& AddNewName_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

AddNewName_Request* AddNewName_Request::default_instance_ = NULL;

AddNewName_Request* AddNewName_Request::New() const {
  return new AddNewName_Request;
}

void AddNewName_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    itype_ = 0;
    name_id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNewName_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_name_id;
        break;
      }

      // optional uint32 name_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_id_)));
          set_has_name_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddNewName_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->name_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddNewName_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->name_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddNewName_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional uint32 name_id = 3;
    if (has_name_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNewName_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNewName_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNewName_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNewName_Request::MergeFrom(const AddNewName_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_name_id()) {
      set_name_id(from.name_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNewName_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewName_Request::CopyFrom(const AddNewName_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewName_Request::IsInitialized() const {

  return true;
}

void AddNewName_Request::Swap(AddNewName_Request* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(itype_, other->itype_);
    std::swap(name_id_, other->name_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNewName_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNewName_Request_descriptor_;
  metadata.reflection = AddNewName_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddNewName_Response::kIResultFieldNumber;
const int AddNewName_Response::kITypeFieldNumber;
const int AddNewName_Response::kNameIdFieldNumber;
const int AddNewName_Response::kStrNameFieldNumber;
#endif  // !_MSC_VER

AddNewName_Response::AddNewName_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddNewName_Response::InitAsDefaultInstance() {
}

AddNewName_Response::AddNewName_Response(const AddNewName_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddNewName_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  itype_ = 0;
  name_id_ = 0u;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddNewName_Response::~AddNewName_Response() {
  SharedDtor();
}

void AddNewName_Response::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void AddNewName_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddNewName_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddNewName_Response_descriptor_;
}

const AddNewName_Response& AddNewName_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

AddNewName_Response* AddNewName_Response::default_instance_ = NULL;

AddNewName_Response* AddNewName_Response::New() const {
  return new AddNewName_Response;
}

void AddNewName_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    itype_ = 0;
    name_id_ = 0u;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddNewName_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_name_id;
        break;
      }

      // optional uint32 name_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_name_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &name_id_)));
          set_has_name_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strName;
        break;
      }

      // optional string strName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddNewName_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->name_id(), output);
  }

  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddNewName_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // optional uint32 name_id = 3;
  if (has_name_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->name_id(), target);
  }

  // optional string strName = 4;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddNewName_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional uint32 name_id = 3;
    if (has_name_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->name_id());
    }

    // optional string strName = 4;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddNewName_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddNewName_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddNewName_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddNewName_Response::MergeFrom(const AddNewName_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_name_id()) {
      set_name_id(from.name_id());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddNewName_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddNewName_Response::CopyFrom(const AddNewName_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddNewName_Response::IsInitialized() const {

  return true;
}

void AddNewName_Response::Swap(AddNewName_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(itype_, other->itype_);
    std::swap(name_id_, other->name_id_);
    std::swap(strname_, other->strname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddNewName_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddNewName_Response_descriptor_;
  metadata.reflection = AddNewName_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteName_Request::kStrNameFieldNumber;
const int DeleteName_Request::kITypeFieldNumber;
#endif  // !_MSC_VER

DeleteName_Request::DeleteName_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteName_Request::InitAsDefaultInstance() {
}

DeleteName_Request::DeleteName_Request(const DeleteName_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteName_Request::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteName_Request::~DeleteName_Request() {
  SharedDtor();
}

void DeleteName_Request::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void DeleteName_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteName_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteName_Request_descriptor_;
}

const DeleteName_Request& DeleteName_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

DeleteName_Request* DeleteName_Request::default_instance_ = NULL;

DeleteName_Request* DeleteName_Request::New() const {
  return new DeleteName_Request;
}

void DeleteName_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    itype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteName_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteName_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteName_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteName_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteName_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteName_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteName_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteName_Request::MergeFrom(const DeleteName_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteName_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteName_Request::CopyFrom(const DeleteName_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteName_Request::IsInitialized() const {

  return true;
}

void DeleteName_Request::Swap(DeleteName_Request* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(itype_, other->itype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteName_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteName_Request_descriptor_;
  metadata.reflection = DeleteName_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteName_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

DeleteName_Response::DeleteName_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteName_Response::InitAsDefaultInstance() {
}

DeleteName_Response::DeleteName_Response(const DeleteName_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteName_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteName_Response::~DeleteName_Response() {
  SharedDtor();
}

void DeleteName_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteName_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteName_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteName_Response_descriptor_;
}

const DeleteName_Response& DeleteName_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

DeleteName_Response* DeleteName_Response::default_instance_ = NULL;

DeleteName_Response* DeleteName_Response::New() const {
  return new DeleteName_Response;
}

void DeleteName_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteName_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteName_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteName_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteName_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteName_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteName_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteName_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteName_Response::MergeFrom(const DeleteName_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteName_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteName_Response::CopyFrom(const DeleteName_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteName_Response::IsInitialized() const {

  return true;
}

void DeleteName_Response::Swap(DeleteName_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteName_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteName_Response_descriptor_;
  metadata.reflection = DeleteName_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankInfo::kIRankNumFieldNumber;
const int RankInfo::kUinFieldNumber;
const int RankInfo::kSzNickNameFieldNumber;
const int RankInfo::kStrPicIDFieldNumber;
const int RankInfo::kIVIPLevelFieldNumber;
const int RankInfo::kINumFieldNumber;
const int RankInfo::kStrSignFieldNumber;
#endif  // !_MSC_VER

RankInfo::RankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankInfo::InitAsDefaultInstance() {
}

RankInfo::RankInfo(const RankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankInfo::SharedCtor() {
  _cached_size_ = 0;
  iranknum_ = 0;
  uin_ = 0u;
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iviplevel_ = 0;
  inum_ = GOOGLE_LONGLONG(0);
  strsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankInfo::~RankInfo() {
  SharedDtor();
}

void RankInfo::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    delete strpicid_;
  }
  if (strsign_ != &::google::protobuf::internal::kEmptyString) {
    delete strsign_;
  }
  if (this != default_instance_) {
  }
}

void RankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankInfo_descriptor_;
}

const RankInfo& RankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

RankInfo* RankInfo::default_instance_ = NULL;

RankInfo* RankInfo::New() const {
  return new RankInfo;
}

void RankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iranknum_ = 0;
    uin_ = 0u;
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
        sznickname_->clear();
      }
    }
    if (has_strpicid()) {
      if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
        strpicid_->clear();
      }
    }
    iviplevel_ = 0;
    inum_ = GOOGLE_LONGLONG(0);
    if (has_strsign()) {
      if (strsign_ != &::google::protobuf::internal::kEmptyString) {
        strsign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRankNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iranknum_)));
          set_has_iranknum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szNickName;
        break;
      }

      // optional string szNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sznickname().data(), this->sznickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strPicID;
        break;
      }

      // optional string strPicID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPicID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpicid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpicid().data(), this->strpicid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iVIPLevel;
        break;
      }

      // optional int32 iVIPLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iviplevel_)));
          set_has_iviplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iNum;
        break;
      }

      // optional int64 iNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strSign;
        break;
      }

      // optional string strSign = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsign().data(), this->strsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRankNum = 1;
  if (has_iranknum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iranknum(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional string szNickName = 3;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sznickname(), output);
  }

  // optional string strPicID = 4;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strpicid(), output);
  }

  // optional int32 iVIPLevel = 5;
  if (has_iviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iviplevel(), output);
  }

  // optional int64 iNum = 6;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->inum(), output);
  }

  // optional string strSign = 7;
  if (has_strsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsign().data(), this->strsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strsign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRankNum = 1;
  if (has_iranknum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iranknum(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional string szNickName = 3;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sznickname(), target);
  }

  // optional string strPicID = 4;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strpicid(), target);
  }

  // optional int32 iVIPLevel = 5;
  if (has_iviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iviplevel(), target);
  }

  // optional int64 iNum = 6;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->inum(), target);
  }

  // optional string strSign = 7;
  if (has_strsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsign().data(), this->strsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strsign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRankNum = 1;
    if (has_iranknum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iranknum());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional string szNickName = 3;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // optional string strPicID = 4;
    if (has_strpicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpicid());
    }

    // optional int32 iVIPLevel = 5;
    if (has_iviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iviplevel());
    }

    // optional int64 iNum = 6;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inum());
    }

    // optional string strSign = 7;
    if (has_strsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankInfo::MergeFrom(const RankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iranknum()) {
      set_iranknum(from.iranknum());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_strpicid()) {
      set_strpicid(from.strpicid());
    }
    if (from.has_iviplevel()) {
      set_iviplevel(from.iviplevel());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
    if (from.has_strsign()) {
      set_strsign(from.strsign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankInfo::CopyFrom(const RankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankInfo::IsInitialized() const {

  return true;
}

void RankInfo::Swap(RankInfo* other) {
  if (other != this) {
    std::swap(iranknum_, other->iranknum_);
    std::swap(uin_, other->uin_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(strpicid_, other->strpicid_);
    std::swap(iviplevel_, other->iviplevel_);
    std::swap(inum_, other->inum_);
    std::swap(strsign_, other->strsign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankInfo_descriptor_;
  metadata.reflection = RankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeInfo::kStrNameFieldNumber;
const int PrizeInfo::kINumberFieldNumber;
const int PrizeInfo::kIRewardCoinsFieldNumber;
const int PrizeInfo::kIIndexFieldNumber;
#endif  // !_MSC_VER

PrizeInfo::PrizeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeInfo::InitAsDefaultInstance() {
}

PrizeInfo::PrizeInfo(const PrizeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeInfo::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  inumber_ = 0;
  irewardcoins_ = 0;
  iindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeInfo::~PrizeInfo() {
  SharedDtor();
}

void PrizeInfo::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void PrizeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeInfo_descriptor_;
}

const PrizeInfo& PrizeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

PrizeInfo* PrizeInfo::default_instance_ = NULL;

PrizeInfo* PrizeInfo::New() const {
  return new PrizeInfo;
}

void PrizeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    inumber_ = 0;
    irewardcoins_ = 0;
    iindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNumber;
        break;
      }

      // optional int32 iNumber = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inumber_)));
          set_has_inumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRewardCoins;
        break;
      }

      // optional int32 iRewardCoins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRewardCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irewardcoins_)));
          set_has_irewardcoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iIndex;
        break;
      }

      // optional int32 iIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iindex_)));
          set_has_iindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // optional int32 iNumber = 2;
  if (has_inumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inumber(), output);
  }

  // optional int32 iRewardCoins = 3;
  if (has_irewardcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irewardcoins(), output);
  }

  // optional int32 iIndex = 4;
  if (has_iindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // optional int32 iNumber = 2;
  if (has_inumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inumber(), target);
  }

  // optional int32 iRewardCoins = 3;
  if (has_irewardcoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irewardcoins(), target);
  }

  // optional int32 iIndex = 4;
  if (has_iindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional int32 iNumber = 2;
    if (has_inumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inumber());
    }

    // optional int32 iRewardCoins = 3;
    if (has_irewardcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irewardcoins());
    }

    // optional int32 iIndex = 4;
    if (has_iindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeInfo::MergeFrom(const PrizeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_inumber()) {
      set_inumber(from.inumber());
    }
    if (from.has_irewardcoins()) {
      set_irewardcoins(from.irewardcoins());
    }
    if (from.has_iindex()) {
      set_iindex(from.iindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeInfo::CopyFrom(const PrizeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeInfo::IsInitialized() const {

  return true;
}

void PrizeInfo::Swap(PrizeInfo* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(inumber_, other->inumber_);
    std::swap(irewardcoins_, other->irewardcoins_);
    std::swap(iindex_, other->iindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeInfo_descriptor_;
  metadata.reflection = PrizeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NumberBetInfo::kINumberFieldNumber;
const int NumberBetInfo::kLBetCoinsFieldNumber;
#endif  // !_MSC_VER

NumberBetInfo::NumberBetInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NumberBetInfo::InitAsDefaultInstance() {
}

NumberBetInfo::NumberBetInfo(const NumberBetInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NumberBetInfo::SharedCtor() {
  _cached_size_ = 0;
  inumber_ = 0;
  lbetcoins_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NumberBetInfo::~NumberBetInfo() {
  SharedDtor();
}

void NumberBetInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NumberBetInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NumberBetInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NumberBetInfo_descriptor_;
}

const NumberBetInfo& NumberBetInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

NumberBetInfo* NumberBetInfo::default_instance_ = NULL;

NumberBetInfo* NumberBetInfo::New() const {
  return new NumberBetInfo;
}

void NumberBetInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inumber_ = 0;
    lbetcoins_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NumberBetInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inumber_)));
          set_has_inumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lBetCoins;
        break;
      }

      // optional int64 lBetCoins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lBetCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lbetcoins_)));
          set_has_lbetcoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NumberBetInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iNumber = 1;
  if (has_inumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inumber(), output);
  }

  // optional int64 lBetCoins = 2;
  if (has_lbetcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->lbetcoins(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NumberBetInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iNumber = 1;
  if (has_inumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inumber(), target);
  }

  // optional int64 lBetCoins = 2;
  if (has_lbetcoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->lbetcoins(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NumberBetInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iNumber = 1;
    if (has_inumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inumber());
    }

    // optional int64 lBetCoins = 2;
    if (has_lbetcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lbetcoins());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NumberBetInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NumberBetInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NumberBetInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NumberBetInfo::MergeFrom(const NumberBetInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inumber()) {
      set_inumber(from.inumber());
    }
    if (from.has_lbetcoins()) {
      set_lbetcoins(from.lbetcoins());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NumberBetInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NumberBetInfo::CopyFrom(const NumberBetInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NumberBetInfo::IsInitialized() const {

  return true;
}

void NumberBetInfo::Swap(NumberBetInfo* other) {
  if (other != this) {
    std::swap(inumber_, other->inumber_);
    std::swap(lbetcoins_, other->lbetcoins_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NumberBetInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NumberBetInfo_descriptor_;
  metadata.reflection = NumberBetInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LasvegasInfo::kIStepTypeFieldNumber;
const int LasvegasInfo::kIStepEndTimeFieldNumber;
const int LasvegasInfo::kILotteryIDsFieldNumber;
const int LasvegasInfo::kStPrizesFieldNumber;
const int LasvegasInfo::kStBetsFieldNumber;
#endif  // !_MSC_VER

LasvegasInfo::LasvegasInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LasvegasInfo::InitAsDefaultInstance() {
}

LasvegasInfo::LasvegasInfo(const LasvegasInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LasvegasInfo::SharedCtor() {
  _cached_size_ = 0;
  isteptype_ = 0;
  istependtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LasvegasInfo::~LasvegasInfo() {
  SharedDtor();
}

void LasvegasInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LasvegasInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LasvegasInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LasvegasInfo_descriptor_;
}

const LasvegasInfo& LasvegasInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

LasvegasInfo* LasvegasInfo::default_instance_ = NULL;

LasvegasInfo* LasvegasInfo::New() const {
  return new LasvegasInfo;
}

void LasvegasInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isteptype_ = 0;
    istependtime_ = 0;
  }
  ilotteryids_.Clear();
  stprizes_.Clear();
  stbets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LasvegasInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iStepType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isteptype_)));
          set_has_isteptype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iStepEndTime;
        break;
      }

      // optional int32 iStepEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iStepEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istependtime_)));
          set_has_istependtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iLotteryIDs;
        break;
      }

      // repeated int32 iLotteryIDs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLotteryIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_ilotteryids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ilotteryids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iLotteryIDs;
        if (input->ExpectTag(42)) goto parse_stPrizes;
        break;
      }

      // repeated .PrizeInfo stPrizes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPrizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stprizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stPrizes;
        if (input->ExpectTag(50)) goto parse_stBets;
        break;
      }

      // repeated .NumberBetInfo stBets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stbets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stBets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LasvegasInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iStepType = 2;
  if (has_isteptype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isteptype(), output);
  }

  // optional int32 iStepEndTime = 3;
  if (has_istependtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->istependtime(), output);
  }

  // repeated int32 iLotteryIDs = 4;
  for (int i = 0; i < this->ilotteryids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->ilotteryids(i), output);
  }

  // repeated .PrizeInfo stPrizes = 5;
  for (int i = 0; i < this->stprizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stprizes(i), output);
  }

  // repeated .NumberBetInfo stBets = 6;
  for (int i = 0; i < this->stbets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stbets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LasvegasInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iStepType = 2;
  if (has_isteptype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isteptype(), target);
  }

  // optional int32 iStepEndTime = 3;
  if (has_istependtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->istependtime(), target);
  }

  // repeated int32 iLotteryIDs = 4;
  for (int i = 0; i < this->ilotteryids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->ilotteryids(i), target);
  }

  // repeated .PrizeInfo stPrizes = 5;
  for (int i = 0; i < this->stprizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stprizes(i), target);
  }

  // repeated .NumberBetInfo stBets = 6;
  for (int i = 0; i < this->stbets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stbets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LasvegasInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iStepType = 2;
    if (has_isteptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isteptype());
    }

    // optional int32 iStepEndTime = 3;
    if (has_istependtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istependtime());
    }

  }
  // repeated int32 iLotteryIDs = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ilotteryids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ilotteryids(i));
    }
    total_size += 1 * this->ilotteryids_size() + data_size;
  }

  // repeated .PrizeInfo stPrizes = 5;
  total_size += 1 * this->stprizes_size();
  for (int i = 0; i < this->stprizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stprizes(i));
  }

  // repeated .NumberBetInfo stBets = 6;
  total_size += 1 * this->stbets_size();
  for (int i = 0; i < this->stbets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stbets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LasvegasInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LasvegasInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LasvegasInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LasvegasInfo::MergeFrom(const LasvegasInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  ilotteryids_.MergeFrom(from.ilotteryids_);
  stprizes_.MergeFrom(from.stprizes_);
  stbets_.MergeFrom(from.stbets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isteptype()) {
      set_isteptype(from.isteptype());
    }
    if (from.has_istependtime()) {
      set_istependtime(from.istependtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LasvegasInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LasvegasInfo::CopyFrom(const LasvegasInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LasvegasInfo::IsInitialized() const {

  return true;
}

void LasvegasInfo::Swap(LasvegasInfo* other) {
  if (other != this) {
    std::swap(isteptype_, other->isteptype_);
    std::swap(istependtime_, other->istependtime_);
    ilotteryids_.Swap(&other->ilotteryids_);
    stprizes_.Swap(&other->stprizes_);
    stbets_.Swap(&other->stbets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LasvegasInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LasvegasInfo_descriptor_;
  metadata.reflection = LasvegasInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeRec::kITimeFieldNumber;
const int ExchangeRec::kStrNameFieldNumber;
const int ExchangeRec::kIExchangeIDFieldNumber;
#endif  // !_MSC_VER

ExchangeRec::ExchangeRec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeRec::InitAsDefaultInstance() {
}

ExchangeRec::ExchangeRec(const ExchangeRec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeRec::SharedCtor() {
  _cached_size_ = 0;
  itime_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iexchangeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeRec::~ExchangeRec() {
  SharedDtor();
}

void ExchangeRec::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeRec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeRec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeRec_descriptor_;
}

const ExchangeRec& ExchangeRec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  return *default_instance_;
}

ExchangeRec* ExchangeRec::default_instance_ = NULL;

ExchangeRec* ExchangeRec::New() const {
  return new ExchangeRec;
}

void ExchangeRec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itime_ = 0;
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    iexchangeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeRec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itime_)));
          set_has_itime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strName;
        break;
      }

      // optional string strName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iExchangeID;
        break;
      }

      // optional int32 iExchangeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iExchangeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeRec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTime = 1;
  if (has_itime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itime(), output);
  }

  // optional string strName = 2;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strname(), output);
  }

  // optional int32 iExchangeID = 3;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iexchangeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeRec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTime = 1;
  if (has_itime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itime(), target);
  }

  // optional string strName = 2;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strname(), target);
  }

  // optional int32 iExchangeID = 3;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iexchangeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeRec::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTime = 1;
    if (has_itime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itime());
    }

    // optional string strName = 2;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional int32 iExchangeID = 3;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeRec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeRec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeRec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeRec::MergeFrom(const ExchangeRec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itime()) {
      set_itime(from.itime());
    }
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeRec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeRec::CopyFrom(const ExchangeRec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeRec::IsInitialized() const {

  return true;
}

void ExchangeRec::Swap(ExchangeRec* other) {
  if (other != this) {
    std::swap(itime_, other->itime_);
    std::swap(strname_, other->strname_);
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeRec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeRec_descriptor_;
  metadata.reflection = ExchangeRec_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
