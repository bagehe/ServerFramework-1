// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_Common.proto

#ifndef PROTOBUF_GameProtocol_5fCommon_2eproto__INCLUDED
#define PROTOBUF_GameProtocol_5fCommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

class ZoneInfo;
class ZoneList;
class RoleID;
class LogoutServer_Request;
class LogoutServer_Response;
class AddNewName_Request;
class AddNewName_Response;
class DeleteName_Request;
class DeleteName_Response;
class RankInfo;
class PrizeInfo;
class NumberBetInfo;
class LasvegasInfo;
class ExchangeRec;

enum ChatChannelType {
  CHAT_CHANNEL_INVALID = 0,
  CHAT_CHANNEL_WORLD = 1,
  CHAT_CHANNEL_PRIVATE = 2,
  CHAT_CHANNEL_SYSTEM = 3
};
bool ChatChannelType_IsValid(int value);
const ChatChannelType ChatChannelType_MIN = CHAT_CHANNEL_INVALID;
const ChatChannelType ChatChannelType_MAX = CHAT_CHANNEL_SYSTEM;
const int ChatChannelType_ARRAYSIZE = ChatChannelType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChatChannelType_descriptor();
inline const ::std::string& ChatChannelType_Name(ChatChannelType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChatChannelType_descriptor(), value);
}
inline bool ChatChannelType_Parse(
    const ::std::string& name, ChatChannelType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChatChannelType>(
    ChatChannelType_descriptor(), name, value);
}
enum enNameType {
  EN_NAME_TYPE_INVALID = 0,
  EN_NAME_TYPE_ROLE = 1,
  EN_NAME_TYPE_MAX = 2
};
bool enNameType_IsValid(int value);
const enNameType enNameType_MIN = EN_NAME_TYPE_INVALID;
const enNameType enNameType_MAX = EN_NAME_TYPE_MAX;
const int enNameType_ARRAYSIZE = enNameType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enNameType_descriptor();
inline const ::std::string& enNameType_Name(enNameType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enNameType_descriptor(), value);
}
inline bool enNameType_Parse(
    const ::std::string& name, enNameType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enNameType>(
    enNameType_descriptor(), name, value);
}
enum MailType {
  MAIL_TYPE_INVALID = 0,
  MAIL_TYPE_NORMAL = 1,
  MAIL_TYPE_APPENDIX = 2
};
bool MailType_IsValid(int value);
const MailType MailType_MIN = MAIL_TYPE_INVALID;
const MailType MailType_MAX = MAIL_TYPE_APPENDIX;
const int MailType_ARRAYSIZE = MailType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MailType_descriptor();
inline const ::std::string& MailType_Name(MailType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MailType_descriptor(), value);
}
inline bool MailType_Parse(
    const ::std::string& name, MailType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailType>(
    MailType_descriptor(), name, value);
}
enum MailSendType {
  MAIL_SEND_INVALID = 0,
  MAIL_SEND_ITEMGIFT = 1,
  MAIL_SEND_APPENDIXTEST = 2,
  MAIL_SEND_NORMAILTEST = 3,
  MAIL_SEND_REPFULL = 4,
  MAIL_SEND_VIPGIFT = 5,
  MAIL_SEND_SCOREDAY = 6,
  MAIL_SEND_SCOREWEEK = 7,
  MAIL_SEND_MONTHCARD = 8,
  MAIL_SEND_GMNORMAL = 9,
  MAIL_SEND_GMAPPENDIX = 10,
  MAIL_SEND_CARDNO = 11
};
bool MailSendType_IsValid(int value);
const MailSendType MailSendType_MIN = MAIL_SEND_INVALID;
const MailSendType MailSendType_MAX = MAIL_SEND_CARDNO;
const int MailSendType_ARRAYSIZE = MailSendType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MailSendType_descriptor();
inline const ::std::string& MailSendType_Name(MailSendType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MailSendType_descriptor(), value);
}
inline bool MailSendType_Parse(
    const ::std::string& name, MailSendType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailSendType>(
    MailSendType_descriptor(), name, value);
}
enum MailStatType {
  MAIL_STAT_INVALID = 0,
  MAIL_STAT_NOTREAD = 1,
  MAIL_STAT_READ = 2,
  MAIL_STAT_GETAPPENDIX = 3
};
bool MailStatType_IsValid(int value);
const MailStatType MailStatType_MIN = MAIL_STAT_INVALID;
const MailStatType MailStatType_MAX = MAIL_STAT_GETAPPENDIX;
const int MailStatType_ARRAYSIZE = MailStatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MailStatType_descriptor();
inline const ::std::string& MailStatType_Name(MailStatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MailStatType_descriptor(), value);
}
inline bool MailStatType_Parse(
    const ::std::string& name, MailStatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MailStatType>(
    MailStatType_descriptor(), name, value);
}
enum RankType {
  RANK_TYPE_INVALID = 0,
  RANK_TYPE_MONEY = 1,
  RANK_TYPE_WARHEAD = 2,
  RANK_TYPE_DAYSCORE = 3,
  RANK_TYPE_WEEKSCORE = 4,
  RANK_TYPE_MAX = 5
};
bool RankType_IsValid(int value);
const RankType RankType_MIN = RANK_TYPE_INVALID;
const RankType RankType_MAX = RANK_TYPE_MAX;
const int RankType_ARRAYSIZE = RankType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RankType_descriptor();
inline const ::std::string& RankType_Name(RankType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RankType_descriptor(), value);
}
inline bool RankType_Parse(
    const ::std::string& name, RankType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RankType>(
    RankType_descriptor(), name, value);
}
enum StepType {
  LASVEGAS_STEP_INVALID = 0,
  LASVEGAS_STEP_BET = 1,
  LASVEGAS_STEP_LOTTERY = 2
};
bool StepType_IsValid(int value);
const StepType StepType_MIN = LASVEGAS_STEP_INVALID;
const StepType StepType_MAX = LASVEGAS_STEP_LOTTERY;
const int StepType_ARRAYSIZE = StepType_MAX + 1;

const ::google::protobuf::EnumDescriptor* StepType_descriptor();
inline const ::std::string& StepType_Name(StepType value) {
  return ::google::protobuf::internal::NameOfEnum(
    StepType_descriptor(), value);
}
inline bool StepType_Parse(
    const ::std::string& name, StepType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StepType>(
    StepType_descriptor(), name, value);
}
enum LogTargetType {
  LOG_TARGET_INVALID = 0,
  LOG_TARGET_MOFANG = 1,
  LOG_TARGET_TAPDB = 2,
  LOG_TARGET_MAX = 3
};
bool LogTargetType_IsValid(int value);
const LogTargetType LogTargetType_MIN = LOG_TARGET_INVALID;
const LogTargetType LogTargetType_MAX = LOG_TARGET_MAX;
const int LogTargetType_ARRAYSIZE = LogTargetType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogTargetType_descriptor();
inline const ::std::string& LogTargetType_Name(LogTargetType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogTargetType_descriptor(), value);
}
inline bool LogTargetType_Parse(
    const ::std::string& name, LogTargetType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogTargetType>(
    LogTargetType_descriptor(), name, value);
}
enum LogoutReasonType {
  LOGOUT_REASON_INVALID = 0,
  LOGOUT_REASON_NORMAL = 1,
  LOGOUT_REASON_KICKED = 2,
  LOGOUT_REASON_WALLOW = 3
};
bool LogoutReasonType_IsValid(int value);
const LogoutReasonType LogoutReasonType_MIN = LOGOUT_REASON_INVALID;
const LogoutReasonType LogoutReasonType_MAX = LOGOUT_REASON_WALLOW;
const int LogoutReasonType_ARRAYSIZE = LogoutReasonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* LogoutReasonType_descriptor();
inline const ::std::string& LogoutReasonType_Name(LogoutReasonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    LogoutReasonType_descriptor(), value);
}
inline bool LogoutReasonType_Parse(
    const ::std::string& name, LogoutReasonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LogoutReasonType>(
    LogoutReasonType_descriptor(), name, value);
}
// ===================================================================

class ZoneInfo : public ::google::protobuf::Message {
 public:
  ZoneInfo();
  virtual ~ZoneInfo();

  ZoneInfo(const ZoneInfo& from);

  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneInfo& default_instance();

  void Swap(ZoneInfo* other);

  // implements Message ----------------------------------------------

  ZoneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneInfo& from);
  void MergeFrom(const ZoneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uZoneID = 1;
  inline bool has_uzoneid() const;
  inline void clear_uzoneid();
  static const int kUZoneIDFieldNumber = 1;
  inline ::google::protobuf::uint32 uzoneid() const;
  inline void set_uzoneid(::google::protobuf::uint32 value);

  // optional string strZoneName = 2;
  inline bool has_strzonename() const;
  inline void clear_strzonename();
  static const int kStrZoneNameFieldNumber = 2;
  inline const ::std::string& strzonename() const;
  inline void set_strzonename(const ::std::string& value);
  inline void set_strzonename(const char* value);
  inline void set_strzonename(const char* value, size_t size);
  inline ::std::string* mutable_strzonename();
  inline ::std::string* release_strzonename();
  inline void set_allocated_strzonename(::std::string* strzonename);

  // optional uint32 uZoneState = 3;
  inline bool has_uzonestate() const;
  inline void clear_uzonestate();
  static const int kUZoneStateFieldNumber = 3;
  inline ::google::protobuf::uint32 uzonestate() const;
  inline void set_uzonestate(::google::protobuf::uint32 value);

  // optional string strZoneIP = 4;
  inline bool has_strzoneip() const;
  inline void clear_strzoneip();
  static const int kStrZoneIPFieldNumber = 4;
  inline const ::std::string& strzoneip() const;
  inline void set_strzoneip(const ::std::string& value);
  inline void set_strzoneip(const char* value);
  inline void set_strzoneip(const char* value, size_t size);
  inline ::std::string* mutable_strzoneip();
  inline ::std::string* release_strzoneip();
  inline void set_allocated_strzoneip(::std::string* strzoneip);

  // optional uint32 uZonePort = 5;
  inline bool has_uzoneport() const;
  inline void clear_uzoneport();
  static const int kUZonePortFieldNumber = 5;
  inline ::google::protobuf::uint32 uzoneport() const;
  inline void set_uzoneport(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ZoneInfo)
 private:
  inline void set_has_uzoneid();
  inline void clear_has_uzoneid();
  inline void set_has_strzonename();
  inline void clear_has_strzonename();
  inline void set_has_uzonestate();
  inline void clear_has_uzonestate();
  inline void set_has_strzoneip();
  inline void clear_has_strzoneip();
  inline void set_has_uzoneport();
  inline void clear_has_uzoneport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strzonename_;
  ::google::protobuf::uint32 uzoneid_;
  ::google::protobuf::uint32 uzonestate_;
  ::std::string* strzoneip_;
  ::google::protobuf::uint32 uzoneport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static ZoneInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZoneList : public ::google::protobuf::Message {
 public:
  ZoneList();
  virtual ~ZoneList();

  ZoneList(const ZoneList& from);

  inline ZoneList& operator=(const ZoneList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneList& default_instance();

  void Swap(ZoneList* other);

  // implements Message ----------------------------------------------

  ZoneList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZoneList& from);
  void MergeFrom(const ZoneList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZoneInfo stZoneInfos = 1;
  inline int stzoneinfos_size() const;
  inline void clear_stzoneinfos();
  static const int kStZoneInfosFieldNumber = 1;
  inline const ::ZoneInfo& stzoneinfos(int index) const;
  inline ::ZoneInfo* mutable_stzoneinfos(int index);
  inline ::ZoneInfo* add_stzoneinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::ZoneInfo >&
      stzoneinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::ZoneInfo >*
      mutable_stzoneinfos();

  // @@protoc_insertion_point(class_scope:ZoneList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ZoneInfo > stzoneinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static ZoneList* default_instance_;
};
// -------------------------------------------------------------------

class RoleID : public ::google::protobuf::Message {
 public:
  RoleID();
  virtual ~RoleID();

  RoleID(const RoleID& from);

  inline RoleID& operator=(const RoleID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoleID& default_instance();

  void Swap(RoleID* other);

  // implements Message ----------------------------------------------

  RoleID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoleID& from);
  void MergeFrom(const RoleID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional uint32 uiSeq = 2;
  inline bool has_uiseq() const;
  inline void clear_uiseq();
  static const int kUiSeqFieldNumber = 2;
  inline ::google::protobuf::uint32 uiseq() const;
  inline void set_uiseq(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RoleID)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_uiseq();
  inline void clear_has_uiseq();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uin_;
  ::google::protobuf::uint32 uiseq_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static RoleID* default_instance_;
};
// -------------------------------------------------------------------

class LogoutServer_Request : public ::google::protobuf::Message {
 public:
  LogoutServer_Request();
  virtual ~LogoutServer_Request();

  LogoutServer_Request(const LogoutServer_Request& from);

  inline LogoutServer_Request& operator=(const LogoutServer_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutServer_Request& default_instance();

  void Swap(LogoutServer_Request* other);

  // implements Message ----------------------------------------------

  LogoutServer_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutServer_Request& from);
  void MergeFrom(const LogoutServer_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uin = 1;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 1;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional uint32 uReason = 2;
  inline bool has_ureason() const;
  inline void clear_ureason();
  static const int kUReasonFieldNumber = 2;
  inline ::google::protobuf::uint32 ureason() const;
  inline void set_ureason(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:LogoutServer_Request)
 private:
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_ureason();
  inline void clear_has_ureason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uin_;
  ::google::protobuf::uint32 ureason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static LogoutServer_Request* default_instance_;
};
// -------------------------------------------------------------------

class LogoutServer_Response : public ::google::protobuf::Message {
 public:
  LogoutServer_Response();
  virtual ~LogoutServer_Response();

  LogoutServer_Response(const LogoutServer_Response& from);

  inline LogoutServer_Response& operator=(const LogoutServer_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LogoutServer_Response& default_instance();

  void Swap(LogoutServer_Response* other);

  // implements Message ----------------------------------------------

  LogoutServer_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LogoutServer_Response& from);
  void MergeFrom(const LogoutServer_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional int32 iReason = 2;
  inline bool has_ireason() const;
  inline void clear_ireason();
  static const int kIReasonFieldNumber = 2;
  inline ::google::protobuf::int32 ireason() const;
  inline void set_ireason(::google::protobuf::int32 value);

  // optional int32 iRealNameStat = 3;
  inline bool has_irealnamestat() const;
  inline void clear_irealnamestat();
  static const int kIRealNameStatFieldNumber = 3;
  inline ::google::protobuf::int32 irealnamestat() const;
  inline void set_irealnamestat(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LogoutServer_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_ireason();
  inline void clear_has_ireason();
  inline void set_has_irealnamestat();
  inline void clear_has_irealnamestat();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;
  ::google::protobuf::int32 ireason_;
  ::google::protobuf::int32 irealnamestat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static LogoutServer_Response* default_instance_;
};
// -------------------------------------------------------------------

class AddNewName_Request : public ::google::protobuf::Message {
 public:
  AddNewName_Request();
  virtual ~AddNewName_Request();

  AddNewName_Request(const AddNewName_Request& from);

  inline AddNewName_Request& operator=(const AddNewName_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNewName_Request& default_instance();

  void Swap(AddNewName_Request* other);

  // implements Message ----------------------------------------------

  AddNewName_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddNewName_Request& from);
  void MergeFrom(const AddNewName_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strName = 1;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 1;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  inline void set_allocated_strname(::std::string* strname);

  // optional int32 iType = 2;
  inline bool has_itype() const;
  inline void clear_itype();
  static const int kITypeFieldNumber = 2;
  inline ::google::protobuf::int32 itype() const;
  inline void set_itype(::google::protobuf::int32 value);

  // optional uint32 name_id = 3;
  inline bool has_name_id() const;
  inline void clear_name_id();
  static const int kNameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 name_id() const;
  inline void set_name_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:AddNewName_Request)
 private:
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_itype();
  inline void clear_has_itype();
  inline void set_has_name_id();
  inline void clear_has_name_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strname_;
  ::google::protobuf::int32 itype_;
  ::google::protobuf::uint32 name_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static AddNewName_Request* default_instance_;
};
// -------------------------------------------------------------------

class AddNewName_Response : public ::google::protobuf::Message {
 public:
  AddNewName_Response();
  virtual ~AddNewName_Response();

  AddNewName_Response(const AddNewName_Response& from);

  inline AddNewName_Response& operator=(const AddNewName_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddNewName_Response& default_instance();

  void Swap(AddNewName_Response* other);

  // implements Message ----------------------------------------------

  AddNewName_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddNewName_Response& from);
  void MergeFrom(const AddNewName_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional int32 iType = 2;
  inline bool has_itype() const;
  inline void clear_itype();
  static const int kITypeFieldNumber = 2;
  inline ::google::protobuf::int32 itype() const;
  inline void set_itype(::google::protobuf::int32 value);

  // optional uint32 name_id = 3;
  inline bool has_name_id() const;
  inline void clear_name_id();
  static const int kNameIdFieldNumber = 3;
  inline ::google::protobuf::uint32 name_id() const;
  inline void set_name_id(::google::protobuf::uint32 value);

  // optional string strName = 4;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 4;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  inline void set_allocated_strname(::std::string* strname);

  // @@protoc_insertion_point(class_scope:AddNewName_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_itype();
  inline void clear_has_itype();
  inline void set_has_name_id();
  inline void clear_has_name_id();
  inline void set_has_strname();
  inline void clear_has_strname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;
  ::google::protobuf::int32 itype_;
  ::std::string* strname_;
  ::google::protobuf::uint32 name_id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static AddNewName_Response* default_instance_;
};
// -------------------------------------------------------------------

class DeleteName_Request : public ::google::protobuf::Message {
 public:
  DeleteName_Request();
  virtual ~DeleteName_Request();

  DeleteName_Request(const DeleteName_Request& from);

  inline DeleteName_Request& operator=(const DeleteName_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteName_Request& default_instance();

  void Swap(DeleteName_Request* other);

  // implements Message ----------------------------------------------

  DeleteName_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteName_Request& from);
  void MergeFrom(const DeleteName_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strName = 1;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 1;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  inline void set_allocated_strname(::std::string* strname);

  // optional int32 iType = 2;
  inline bool has_itype() const;
  inline void clear_itype();
  static const int kITypeFieldNumber = 2;
  inline ::google::protobuf::int32 itype() const;
  inline void set_itype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeleteName_Request)
 private:
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_itype();
  inline void clear_has_itype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strname_;
  ::google::protobuf::int32 itype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static DeleteName_Request* default_instance_;
};
// -------------------------------------------------------------------

class DeleteName_Response : public ::google::protobuf::Message {
 public:
  DeleteName_Response();
  virtual ~DeleteName_Response();

  DeleteName_Response(const DeleteName_Response& from);

  inline DeleteName_Response& operator=(const DeleteName_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteName_Response& default_instance();

  void Swap(DeleteName_Response* other);

  // implements Message ----------------------------------------------

  DeleteName_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteName_Response& from);
  void MergeFrom(const DeleteName_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:DeleteName_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static DeleteName_Response* default_instance_;
};
// -------------------------------------------------------------------

class RankInfo : public ::google::protobuf::Message {
 public:
  RankInfo();
  virtual ~RankInfo();

  RankInfo(const RankInfo& from);

  inline RankInfo& operator=(const RankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankInfo& default_instance();

  void Swap(RankInfo* other);

  // implements Message ----------------------------------------------

  RankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankInfo& from);
  void MergeFrom(const RankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iRankNum = 1;
  inline bool has_iranknum() const;
  inline void clear_iranknum();
  static const int kIRankNumFieldNumber = 1;
  inline ::google::protobuf::int32 iranknum() const;
  inline void set_iranknum(::google::protobuf::int32 value);

  // optional uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional string szNickName = 3;
  inline bool has_sznickname() const;
  inline void clear_sznickname();
  static const int kSzNickNameFieldNumber = 3;
  inline const ::std::string& sznickname() const;
  inline void set_sznickname(const ::std::string& value);
  inline void set_sznickname(const char* value);
  inline void set_sznickname(const char* value, size_t size);
  inline ::std::string* mutable_sznickname();
  inline ::std::string* release_sznickname();
  inline void set_allocated_sznickname(::std::string* sznickname);

  // optional string strPicID = 4;
  inline bool has_strpicid() const;
  inline void clear_strpicid();
  static const int kStrPicIDFieldNumber = 4;
  inline const ::std::string& strpicid() const;
  inline void set_strpicid(const ::std::string& value);
  inline void set_strpicid(const char* value);
  inline void set_strpicid(const char* value, size_t size);
  inline ::std::string* mutable_strpicid();
  inline ::std::string* release_strpicid();
  inline void set_allocated_strpicid(::std::string* strpicid);

  // optional int32 iVIPLevel = 5;
  inline bool has_iviplevel() const;
  inline void clear_iviplevel();
  static const int kIVIPLevelFieldNumber = 5;
  inline ::google::protobuf::int32 iviplevel() const;
  inline void set_iviplevel(::google::protobuf::int32 value);

  // optional int64 iNum = 6;
  inline bool has_inum() const;
  inline void clear_inum();
  static const int kINumFieldNumber = 6;
  inline ::google::protobuf::int64 inum() const;
  inline void set_inum(::google::protobuf::int64 value);

  // optional string strSign = 7;
  inline bool has_strsign() const;
  inline void clear_strsign();
  static const int kStrSignFieldNumber = 7;
  inline const ::std::string& strsign() const;
  inline void set_strsign(const ::std::string& value);
  inline void set_strsign(const char* value);
  inline void set_strsign(const char* value, size_t size);
  inline ::std::string* mutable_strsign();
  inline ::std::string* release_strsign();
  inline void set_allocated_strsign(::std::string* strsign);

  // @@protoc_insertion_point(class_scope:RankInfo)
 private:
  inline void set_has_iranknum();
  inline void clear_has_iranknum();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_sznickname();
  inline void clear_has_sznickname();
  inline void set_has_strpicid();
  inline void clear_has_strpicid();
  inline void set_has_iviplevel();
  inline void clear_has_iviplevel();
  inline void set_has_inum();
  inline void clear_has_inum();
  inline void set_has_strsign();
  inline void clear_has_strsign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iranknum_;
  ::google::protobuf::uint32 uin_;
  ::std::string* sznickname_;
  ::std::string* strpicid_;
  ::google::protobuf::int64 inum_;
  ::std::string* strsign_;
  ::google::protobuf::int32 iviplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static RankInfo* default_instance_;
};
// -------------------------------------------------------------------

class PrizeInfo : public ::google::protobuf::Message {
 public:
  PrizeInfo();
  virtual ~PrizeInfo();

  PrizeInfo(const PrizeInfo& from);

  inline PrizeInfo& operator=(const PrizeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PrizeInfo& default_instance();

  void Swap(PrizeInfo* other);

  // implements Message ----------------------------------------------

  PrizeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PrizeInfo& from);
  void MergeFrom(const PrizeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strName = 1;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 1;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  inline void set_allocated_strname(::std::string* strname);

  // optional int32 iNumber = 2;
  inline bool has_inumber() const;
  inline void clear_inumber();
  static const int kINumberFieldNumber = 2;
  inline ::google::protobuf::int32 inumber() const;
  inline void set_inumber(::google::protobuf::int32 value);

  // optional int32 iRewardCoins = 3;
  inline bool has_irewardcoins() const;
  inline void clear_irewardcoins();
  static const int kIRewardCoinsFieldNumber = 3;
  inline ::google::protobuf::int32 irewardcoins() const;
  inline void set_irewardcoins(::google::protobuf::int32 value);

  // optional int32 iIndex = 4;
  inline bool has_iindex() const;
  inline void clear_iindex();
  static const int kIIndexFieldNumber = 4;
  inline ::google::protobuf::int32 iindex() const;
  inline void set_iindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PrizeInfo)
 private:
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_inumber();
  inline void clear_has_inumber();
  inline void set_has_irewardcoins();
  inline void clear_has_irewardcoins();
  inline void set_has_iindex();
  inline void clear_has_iindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strname_;
  ::google::protobuf::int32 inumber_;
  ::google::protobuf::int32 irewardcoins_;
  ::google::protobuf::int32 iindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static PrizeInfo* default_instance_;
};
// -------------------------------------------------------------------

class NumberBetInfo : public ::google::protobuf::Message {
 public:
  NumberBetInfo();
  virtual ~NumberBetInfo();

  NumberBetInfo(const NumberBetInfo& from);

  inline NumberBetInfo& operator=(const NumberBetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NumberBetInfo& default_instance();

  void Swap(NumberBetInfo* other);

  // implements Message ----------------------------------------------

  NumberBetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NumberBetInfo& from);
  void MergeFrom(const NumberBetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iNumber = 1;
  inline bool has_inumber() const;
  inline void clear_inumber();
  static const int kINumberFieldNumber = 1;
  inline ::google::protobuf::int32 inumber() const;
  inline void set_inumber(::google::protobuf::int32 value);

  // optional int64 lBetCoins = 2;
  inline bool has_lbetcoins() const;
  inline void clear_lbetcoins();
  static const int kLBetCoinsFieldNumber = 2;
  inline ::google::protobuf::int64 lbetcoins() const;
  inline void set_lbetcoins(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NumberBetInfo)
 private:
  inline void set_has_inumber();
  inline void clear_has_inumber();
  inline void set_has_lbetcoins();
  inline void clear_has_lbetcoins();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 lbetcoins_;
  ::google::protobuf::int32 inumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static NumberBetInfo* default_instance_;
};
// -------------------------------------------------------------------

class LasvegasInfo : public ::google::protobuf::Message {
 public:
  LasvegasInfo();
  virtual ~LasvegasInfo();

  LasvegasInfo(const LasvegasInfo& from);

  inline LasvegasInfo& operator=(const LasvegasInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LasvegasInfo& default_instance();

  void Swap(LasvegasInfo* other);

  // implements Message ----------------------------------------------

  LasvegasInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LasvegasInfo& from);
  void MergeFrom(const LasvegasInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iStepType = 2;
  inline bool has_isteptype() const;
  inline void clear_isteptype();
  static const int kIStepTypeFieldNumber = 2;
  inline ::google::protobuf::int32 isteptype() const;
  inline void set_isteptype(::google::protobuf::int32 value);

  // optional int32 iStepEndTime = 3;
  inline bool has_istependtime() const;
  inline void clear_istependtime();
  static const int kIStepEndTimeFieldNumber = 3;
  inline ::google::protobuf::int32 istependtime() const;
  inline void set_istependtime(::google::protobuf::int32 value);

  // repeated int32 iLotteryIDs = 4;
  inline int ilotteryids_size() const;
  inline void clear_ilotteryids();
  static const int kILotteryIDsFieldNumber = 4;
  inline ::google::protobuf::int32 ilotteryids(int index) const;
  inline void set_ilotteryids(int index, ::google::protobuf::int32 value);
  inline void add_ilotteryids(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ilotteryids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ilotteryids();

  // repeated .PrizeInfo stPrizes = 5;
  inline int stprizes_size() const;
  inline void clear_stprizes();
  static const int kStPrizesFieldNumber = 5;
  inline const ::PrizeInfo& stprizes(int index) const;
  inline ::PrizeInfo* mutable_stprizes(int index);
  inline ::PrizeInfo* add_stprizes();
  inline const ::google::protobuf::RepeatedPtrField< ::PrizeInfo >&
      stprizes() const;
  inline ::google::protobuf::RepeatedPtrField< ::PrizeInfo >*
      mutable_stprizes();

  // repeated .NumberBetInfo stBets = 6;
  inline int stbets_size() const;
  inline void clear_stbets();
  static const int kStBetsFieldNumber = 6;
  inline const ::NumberBetInfo& stbets(int index) const;
  inline ::NumberBetInfo* mutable_stbets(int index);
  inline ::NumberBetInfo* add_stbets();
  inline const ::google::protobuf::RepeatedPtrField< ::NumberBetInfo >&
      stbets() const;
  inline ::google::protobuf::RepeatedPtrField< ::NumberBetInfo >*
      mutable_stbets();

  // @@protoc_insertion_point(class_scope:LasvegasInfo)
 private:
  inline void set_has_isteptype();
  inline void clear_has_isteptype();
  inline void set_has_istependtime();
  inline void clear_has_istependtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 isteptype_;
  ::google::protobuf::int32 istependtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ilotteryids_;
  ::google::protobuf::RepeatedPtrField< ::PrizeInfo > stprizes_;
  ::google::protobuf::RepeatedPtrField< ::NumberBetInfo > stbets_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static LasvegasInfo* default_instance_;
};
// -------------------------------------------------------------------

class ExchangeRec : public ::google::protobuf::Message {
 public:
  ExchangeRec();
  virtual ~ExchangeRec();

  ExchangeRec(const ExchangeRec& from);

  inline ExchangeRec& operator=(const ExchangeRec& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExchangeRec& default_instance();

  void Swap(ExchangeRec* other);

  // implements Message ----------------------------------------------

  ExchangeRec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExchangeRec& from);
  void MergeFrom(const ExchangeRec& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iTime = 1;
  inline bool has_itime() const;
  inline void clear_itime();
  static const int kITimeFieldNumber = 1;
  inline ::google::protobuf::int32 itime() const;
  inline void set_itime(::google::protobuf::int32 value);

  // optional string strName = 2;
  inline bool has_strname() const;
  inline void clear_strname();
  static const int kStrNameFieldNumber = 2;
  inline const ::std::string& strname() const;
  inline void set_strname(const ::std::string& value);
  inline void set_strname(const char* value);
  inline void set_strname(const char* value, size_t size);
  inline ::std::string* mutable_strname();
  inline ::std::string* release_strname();
  inline void set_allocated_strname(::std::string* strname);

  // optional int32 iExchangeID = 3;
  inline bool has_iexchangeid() const;
  inline void clear_iexchangeid();
  static const int kIExchangeIDFieldNumber = 3;
  inline ::google::protobuf::int32 iexchangeid() const;
  inline void set_iexchangeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ExchangeRec)
 private:
  inline void set_has_itime();
  inline void clear_has_itime();
  inline void set_has_strname();
  inline void clear_has_strname();
  inline void set_has_iexchangeid();
  inline void clear_has_iexchangeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* strname_;
  ::google::protobuf::int32 itime_;
  ::google::protobuf::int32 iexchangeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fCommon_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fCommon_2eproto();

  void InitAsDefaultInstance();
  static ExchangeRec* default_instance_;
};
// ===================================================================


// ===================================================================

// ZoneInfo

// optional uint32 uZoneID = 1;
inline bool ZoneInfo::has_uzoneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneInfo::set_has_uzoneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneInfo::clear_has_uzoneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneInfo::clear_uzoneid() {
  uzoneid_ = 0u;
  clear_has_uzoneid();
}
inline ::google::protobuf::uint32 ZoneInfo::uzoneid() const {
  return uzoneid_;
}
inline void ZoneInfo::set_uzoneid(::google::protobuf::uint32 value) {
  set_has_uzoneid();
  uzoneid_ = value;
}

// optional string strZoneName = 2;
inline bool ZoneInfo::has_strzonename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneInfo::set_has_strzonename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneInfo::clear_has_strzonename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneInfo::clear_strzonename() {
  if (strzonename_ != &::google::protobuf::internal::kEmptyString) {
    strzonename_->clear();
  }
  clear_has_strzonename();
}
inline const ::std::string& ZoneInfo::strzonename() const {
  return *strzonename_;
}
inline void ZoneInfo::set_strzonename(const ::std::string& value) {
  set_has_strzonename();
  if (strzonename_ == &::google::protobuf::internal::kEmptyString) {
    strzonename_ = new ::std::string;
  }
  strzonename_->assign(value);
}
inline void ZoneInfo::set_strzonename(const char* value) {
  set_has_strzonename();
  if (strzonename_ == &::google::protobuf::internal::kEmptyString) {
    strzonename_ = new ::std::string;
  }
  strzonename_->assign(value);
}
inline void ZoneInfo::set_strzonename(const char* value, size_t size) {
  set_has_strzonename();
  if (strzonename_ == &::google::protobuf::internal::kEmptyString) {
    strzonename_ = new ::std::string;
  }
  strzonename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneInfo::mutable_strzonename() {
  set_has_strzonename();
  if (strzonename_ == &::google::protobuf::internal::kEmptyString) {
    strzonename_ = new ::std::string;
  }
  return strzonename_;
}
inline ::std::string* ZoneInfo::release_strzonename() {
  clear_has_strzonename();
  if (strzonename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strzonename_;
    strzonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZoneInfo::set_allocated_strzonename(::std::string* strzonename) {
  if (strzonename_ != &::google::protobuf::internal::kEmptyString) {
    delete strzonename_;
  }
  if (strzonename) {
    set_has_strzonename();
    strzonename_ = strzonename;
  } else {
    clear_has_strzonename();
    strzonename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 uZoneState = 3;
inline bool ZoneInfo::has_uzonestate() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneInfo::set_has_uzonestate() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneInfo::clear_has_uzonestate() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneInfo::clear_uzonestate() {
  uzonestate_ = 0u;
  clear_has_uzonestate();
}
inline ::google::protobuf::uint32 ZoneInfo::uzonestate() const {
  return uzonestate_;
}
inline void ZoneInfo::set_uzonestate(::google::protobuf::uint32 value) {
  set_has_uzonestate();
  uzonestate_ = value;
}

// optional string strZoneIP = 4;
inline bool ZoneInfo::has_strzoneip() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneInfo::set_has_strzoneip() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneInfo::clear_has_strzoneip() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneInfo::clear_strzoneip() {
  if (strzoneip_ != &::google::protobuf::internal::kEmptyString) {
    strzoneip_->clear();
  }
  clear_has_strzoneip();
}
inline const ::std::string& ZoneInfo::strzoneip() const {
  return *strzoneip_;
}
inline void ZoneInfo::set_strzoneip(const ::std::string& value) {
  set_has_strzoneip();
  if (strzoneip_ == &::google::protobuf::internal::kEmptyString) {
    strzoneip_ = new ::std::string;
  }
  strzoneip_->assign(value);
}
inline void ZoneInfo::set_strzoneip(const char* value) {
  set_has_strzoneip();
  if (strzoneip_ == &::google::protobuf::internal::kEmptyString) {
    strzoneip_ = new ::std::string;
  }
  strzoneip_->assign(value);
}
inline void ZoneInfo::set_strzoneip(const char* value, size_t size) {
  set_has_strzoneip();
  if (strzoneip_ == &::google::protobuf::internal::kEmptyString) {
    strzoneip_ = new ::std::string;
  }
  strzoneip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZoneInfo::mutable_strzoneip() {
  set_has_strzoneip();
  if (strzoneip_ == &::google::protobuf::internal::kEmptyString) {
    strzoneip_ = new ::std::string;
  }
  return strzoneip_;
}
inline ::std::string* ZoneInfo::release_strzoneip() {
  clear_has_strzoneip();
  if (strzoneip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strzoneip_;
    strzoneip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ZoneInfo::set_allocated_strzoneip(::std::string* strzoneip) {
  if (strzoneip_ != &::google::protobuf::internal::kEmptyString) {
    delete strzoneip_;
  }
  if (strzoneip) {
    set_has_strzoneip();
    strzoneip_ = strzoneip;
  } else {
    clear_has_strzoneip();
    strzoneip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 uZonePort = 5;
inline bool ZoneInfo::has_uzoneport() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ZoneInfo::set_has_uzoneport() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ZoneInfo::clear_has_uzoneport() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ZoneInfo::clear_uzoneport() {
  uzoneport_ = 0u;
  clear_has_uzoneport();
}
inline ::google::protobuf::uint32 ZoneInfo::uzoneport() const {
  return uzoneport_;
}
inline void ZoneInfo::set_uzoneport(::google::protobuf::uint32 value) {
  set_has_uzoneport();
  uzoneport_ = value;
}

// -------------------------------------------------------------------

// ZoneList

// repeated .ZoneInfo stZoneInfos = 1;
inline int ZoneList::stzoneinfos_size() const {
  return stzoneinfos_.size();
}
inline void ZoneList::clear_stzoneinfos() {
  stzoneinfos_.Clear();
}
inline const ::ZoneInfo& ZoneList::stzoneinfos(int index) const {
  return stzoneinfos_.Get(index);
}
inline ::ZoneInfo* ZoneList::mutable_stzoneinfos(int index) {
  return stzoneinfos_.Mutable(index);
}
inline ::ZoneInfo* ZoneList::add_stzoneinfos() {
  return stzoneinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ZoneInfo >&
ZoneList::stzoneinfos() const {
  return stzoneinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::ZoneInfo >*
ZoneList::mutable_stzoneinfos() {
  return &stzoneinfos_;
}

// -------------------------------------------------------------------

// RoleID

// optional uint32 uin = 1;
inline bool RoleID::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoleID::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoleID::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoleID::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 RoleID::uin() const {
  return uin_;
}
inline void RoleID::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional uint32 uiSeq = 2;
inline bool RoleID::has_uiseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoleID::set_has_uiseq() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoleID::clear_has_uiseq() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoleID::clear_uiseq() {
  uiseq_ = 0u;
  clear_has_uiseq();
}
inline ::google::protobuf::uint32 RoleID::uiseq() const {
  return uiseq_;
}
inline void RoleID::set_uiseq(::google::protobuf::uint32 value) {
  set_has_uiseq();
  uiseq_ = value;
}

// -------------------------------------------------------------------

// LogoutServer_Request

// optional uint32 uin = 1;
inline bool LogoutServer_Request::has_uin() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutServer_Request::set_has_uin() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutServer_Request::clear_has_uin() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutServer_Request::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 LogoutServer_Request::uin() const {
  return uin_;
}
inline void LogoutServer_Request::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional uint32 uReason = 2;
inline bool LogoutServer_Request::has_ureason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutServer_Request::set_has_ureason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutServer_Request::clear_has_ureason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutServer_Request::clear_ureason() {
  ureason_ = 0u;
  clear_has_ureason();
}
inline ::google::protobuf::uint32 LogoutServer_Request::ureason() const {
  return ureason_;
}
inline void LogoutServer_Request::set_ureason(::google::protobuf::uint32 value) {
  set_has_ureason();
  ureason_ = value;
}

// -------------------------------------------------------------------

// LogoutServer_Response

// optional int32 iResult = 1;
inline bool LogoutServer_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LogoutServer_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LogoutServer_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LogoutServer_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 LogoutServer_Response::iresult() const {
  return iresult_;
}
inline void LogoutServer_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional int32 iReason = 2;
inline bool LogoutServer_Response::has_ireason() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LogoutServer_Response::set_has_ireason() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LogoutServer_Response::clear_has_ireason() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LogoutServer_Response::clear_ireason() {
  ireason_ = 0;
  clear_has_ireason();
}
inline ::google::protobuf::int32 LogoutServer_Response::ireason() const {
  return ireason_;
}
inline void LogoutServer_Response::set_ireason(::google::protobuf::int32 value) {
  set_has_ireason();
  ireason_ = value;
}

// optional int32 iRealNameStat = 3;
inline bool LogoutServer_Response::has_irealnamestat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LogoutServer_Response::set_has_irealnamestat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LogoutServer_Response::clear_has_irealnamestat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LogoutServer_Response::clear_irealnamestat() {
  irealnamestat_ = 0;
  clear_has_irealnamestat();
}
inline ::google::protobuf::int32 LogoutServer_Response::irealnamestat() const {
  return irealnamestat_;
}
inline void LogoutServer_Response::set_irealnamestat(::google::protobuf::int32 value) {
  set_has_irealnamestat();
  irealnamestat_ = value;
}

// -------------------------------------------------------------------

// AddNewName_Request

// optional string strName = 1;
inline bool AddNewName_Request::has_strname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddNewName_Request::set_has_strname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddNewName_Request::clear_has_strname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddNewName_Request::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& AddNewName_Request::strname() const {
  return *strname_;
}
inline void AddNewName_Request::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void AddNewName_Request::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void AddNewName_Request::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddNewName_Request::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* AddNewName_Request::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddNewName_Request::set_allocated_strname(::std::string* strname) {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strname) {
    set_has_strname();
    strname_ = strname;
  } else {
    clear_has_strname();
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iType = 2;
inline bool AddNewName_Request::has_itype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddNewName_Request::set_has_itype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddNewName_Request::clear_has_itype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddNewName_Request::clear_itype() {
  itype_ = 0;
  clear_has_itype();
}
inline ::google::protobuf::int32 AddNewName_Request::itype() const {
  return itype_;
}
inline void AddNewName_Request::set_itype(::google::protobuf::int32 value) {
  set_has_itype();
  itype_ = value;
}

// optional uint32 name_id = 3;
inline bool AddNewName_Request::has_name_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddNewName_Request::set_has_name_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddNewName_Request::clear_has_name_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddNewName_Request::clear_name_id() {
  name_id_ = 0u;
  clear_has_name_id();
}
inline ::google::protobuf::uint32 AddNewName_Request::name_id() const {
  return name_id_;
}
inline void AddNewName_Request::set_name_id(::google::protobuf::uint32 value) {
  set_has_name_id();
  name_id_ = value;
}

// -------------------------------------------------------------------

// AddNewName_Response

// optional int32 iResult = 1;
inline bool AddNewName_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddNewName_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddNewName_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddNewName_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 AddNewName_Response::iresult() const {
  return iresult_;
}
inline void AddNewName_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional int32 iType = 2;
inline bool AddNewName_Response::has_itype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddNewName_Response::set_has_itype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddNewName_Response::clear_has_itype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddNewName_Response::clear_itype() {
  itype_ = 0;
  clear_has_itype();
}
inline ::google::protobuf::int32 AddNewName_Response::itype() const {
  return itype_;
}
inline void AddNewName_Response::set_itype(::google::protobuf::int32 value) {
  set_has_itype();
  itype_ = value;
}

// optional uint32 name_id = 3;
inline bool AddNewName_Response::has_name_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddNewName_Response::set_has_name_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddNewName_Response::clear_has_name_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddNewName_Response::clear_name_id() {
  name_id_ = 0u;
  clear_has_name_id();
}
inline ::google::protobuf::uint32 AddNewName_Response::name_id() const {
  return name_id_;
}
inline void AddNewName_Response::set_name_id(::google::protobuf::uint32 value) {
  set_has_name_id();
  name_id_ = value;
}

// optional string strName = 4;
inline bool AddNewName_Response::has_strname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddNewName_Response::set_has_strname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddNewName_Response::clear_has_strname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddNewName_Response::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& AddNewName_Response::strname() const {
  return *strname_;
}
inline void AddNewName_Response::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void AddNewName_Response::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void AddNewName_Response::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddNewName_Response::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* AddNewName_Response::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AddNewName_Response::set_allocated_strname(::std::string* strname) {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strname) {
    set_has_strname();
    strname_ = strname;
  } else {
    clear_has_strname();
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// DeleteName_Request

// optional string strName = 1;
inline bool DeleteName_Request::has_strname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteName_Request::set_has_strname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteName_Request::clear_has_strname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteName_Request::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& DeleteName_Request::strname() const {
  return *strname_;
}
inline void DeleteName_Request::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void DeleteName_Request::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void DeleteName_Request::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeleteName_Request::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* DeleteName_Request::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeleteName_Request::set_allocated_strname(::std::string* strname) {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strname) {
    set_has_strname();
    strname_ = strname;
  } else {
    clear_has_strname();
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iType = 2;
inline bool DeleteName_Request::has_itype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteName_Request::set_has_itype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteName_Request::clear_has_itype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteName_Request::clear_itype() {
  itype_ = 0;
  clear_has_itype();
}
inline ::google::protobuf::int32 DeleteName_Request::itype() const {
  return itype_;
}
inline void DeleteName_Request::set_itype(::google::protobuf::int32 value) {
  set_has_itype();
  itype_ = value;
}

// -------------------------------------------------------------------

// DeleteName_Response

// optional int32 iResult = 1;
inline bool DeleteName_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteName_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteName_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteName_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 DeleteName_Response::iresult() const {
  return iresult_;
}
inline void DeleteName_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// -------------------------------------------------------------------

// RankInfo

// optional int32 iRankNum = 1;
inline bool RankInfo::has_iranknum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankInfo::set_has_iranknum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankInfo::clear_has_iranknum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankInfo::clear_iranknum() {
  iranknum_ = 0;
  clear_has_iranknum();
}
inline ::google::protobuf::int32 RankInfo::iranknum() const {
  return iranknum_;
}
inline void RankInfo::set_iranknum(::google::protobuf::int32 value) {
  set_has_iranknum();
  iranknum_ = value;
}

// optional uint32 uin = 2;
inline bool RankInfo::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankInfo::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankInfo::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankInfo::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 RankInfo::uin() const {
  return uin_;
}
inline void RankInfo::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional string szNickName = 3;
inline bool RankInfo::has_sznickname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankInfo::set_has_sznickname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankInfo::clear_has_sznickname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankInfo::clear_sznickname() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    sznickname_->clear();
  }
  clear_has_sznickname();
}
inline const ::std::string& RankInfo::sznickname() const {
  return *sznickname_;
}
inline void RankInfo::set_sznickname(const ::std::string& value) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(value);
}
inline void RankInfo::set_sznickname(const char* value) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(value);
}
inline void RankInfo::set_sznickname(const char* value, size_t size) {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  sznickname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_sznickname() {
  set_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    sznickname_ = new ::std::string;
  }
  return sznickname_;
}
inline ::std::string* RankInfo::release_sznickname() {
  clear_has_sznickname();
  if (sznickname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sznickname_;
    sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankInfo::set_allocated_sznickname(::std::string* sznickname) {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (sznickname) {
    set_has_sznickname();
    sznickname_ = sznickname;
  } else {
    clear_has_sznickname();
    sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string strPicID = 4;
inline bool RankInfo::has_strpicid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RankInfo::set_has_strpicid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RankInfo::clear_has_strpicid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RankInfo::clear_strpicid() {
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    strpicid_->clear();
  }
  clear_has_strpicid();
}
inline const ::std::string& RankInfo::strpicid() const {
  return *strpicid_;
}
inline void RankInfo::set_strpicid(const ::std::string& value) {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  strpicid_->assign(value);
}
inline void RankInfo::set_strpicid(const char* value) {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  strpicid_->assign(value);
}
inline void RankInfo::set_strpicid(const char* value, size_t size) {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  strpicid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_strpicid() {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  return strpicid_;
}
inline ::std::string* RankInfo::release_strpicid() {
  clear_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpicid_;
    strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankInfo::set_allocated_strpicid(::std::string* strpicid) {
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    delete strpicid_;
  }
  if (strpicid) {
    set_has_strpicid();
    strpicid_ = strpicid;
  } else {
    clear_has_strpicid();
    strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iVIPLevel = 5;
inline bool RankInfo::has_iviplevel() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RankInfo::set_has_iviplevel() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RankInfo::clear_has_iviplevel() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RankInfo::clear_iviplevel() {
  iviplevel_ = 0;
  clear_has_iviplevel();
}
inline ::google::protobuf::int32 RankInfo::iviplevel() const {
  return iviplevel_;
}
inline void RankInfo::set_iviplevel(::google::protobuf::int32 value) {
  set_has_iviplevel();
  iviplevel_ = value;
}

// optional int64 iNum = 6;
inline bool RankInfo::has_inum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RankInfo::set_has_inum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RankInfo::clear_has_inum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RankInfo::clear_inum() {
  inum_ = GOOGLE_LONGLONG(0);
  clear_has_inum();
}
inline ::google::protobuf::int64 RankInfo::inum() const {
  return inum_;
}
inline void RankInfo::set_inum(::google::protobuf::int64 value) {
  set_has_inum();
  inum_ = value;
}

// optional string strSign = 7;
inline bool RankInfo::has_strsign() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RankInfo::set_has_strsign() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RankInfo::clear_has_strsign() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RankInfo::clear_strsign() {
  if (strsign_ != &::google::protobuf::internal::kEmptyString) {
    strsign_->clear();
  }
  clear_has_strsign();
}
inline const ::std::string& RankInfo::strsign() const {
  return *strsign_;
}
inline void RankInfo::set_strsign(const ::std::string& value) {
  set_has_strsign();
  if (strsign_ == &::google::protobuf::internal::kEmptyString) {
    strsign_ = new ::std::string;
  }
  strsign_->assign(value);
}
inline void RankInfo::set_strsign(const char* value) {
  set_has_strsign();
  if (strsign_ == &::google::protobuf::internal::kEmptyString) {
    strsign_ = new ::std::string;
  }
  strsign_->assign(value);
}
inline void RankInfo::set_strsign(const char* value, size_t size) {
  set_has_strsign();
  if (strsign_ == &::google::protobuf::internal::kEmptyString) {
    strsign_ = new ::std::string;
  }
  strsign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankInfo::mutable_strsign() {
  set_has_strsign();
  if (strsign_ == &::google::protobuf::internal::kEmptyString) {
    strsign_ = new ::std::string;
  }
  return strsign_;
}
inline ::std::string* RankInfo::release_strsign() {
  clear_has_strsign();
  if (strsign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strsign_;
    strsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankInfo::set_allocated_strsign(::std::string* strsign) {
  if (strsign_ != &::google::protobuf::internal::kEmptyString) {
    delete strsign_;
  }
  if (strsign) {
    set_has_strsign();
    strsign_ = strsign;
  } else {
    clear_has_strsign();
    strsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PrizeInfo

// optional string strName = 1;
inline bool PrizeInfo::has_strname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PrizeInfo::set_has_strname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PrizeInfo::clear_has_strname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PrizeInfo::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& PrizeInfo::strname() const {
  return *strname_;
}
inline void PrizeInfo::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void PrizeInfo::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void PrizeInfo::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PrizeInfo::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* PrizeInfo::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PrizeInfo::set_allocated_strname(::std::string* strname) {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strname) {
    set_has_strname();
    strname_ = strname;
  } else {
    clear_has_strname();
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iNumber = 2;
inline bool PrizeInfo::has_inumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PrizeInfo::set_has_inumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PrizeInfo::clear_has_inumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PrizeInfo::clear_inumber() {
  inumber_ = 0;
  clear_has_inumber();
}
inline ::google::protobuf::int32 PrizeInfo::inumber() const {
  return inumber_;
}
inline void PrizeInfo::set_inumber(::google::protobuf::int32 value) {
  set_has_inumber();
  inumber_ = value;
}

// optional int32 iRewardCoins = 3;
inline bool PrizeInfo::has_irewardcoins() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PrizeInfo::set_has_irewardcoins() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PrizeInfo::clear_has_irewardcoins() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PrizeInfo::clear_irewardcoins() {
  irewardcoins_ = 0;
  clear_has_irewardcoins();
}
inline ::google::protobuf::int32 PrizeInfo::irewardcoins() const {
  return irewardcoins_;
}
inline void PrizeInfo::set_irewardcoins(::google::protobuf::int32 value) {
  set_has_irewardcoins();
  irewardcoins_ = value;
}

// optional int32 iIndex = 4;
inline bool PrizeInfo::has_iindex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PrizeInfo::set_has_iindex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PrizeInfo::clear_has_iindex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PrizeInfo::clear_iindex() {
  iindex_ = 0;
  clear_has_iindex();
}
inline ::google::protobuf::int32 PrizeInfo::iindex() const {
  return iindex_;
}
inline void PrizeInfo::set_iindex(::google::protobuf::int32 value) {
  set_has_iindex();
  iindex_ = value;
}

// -------------------------------------------------------------------

// NumberBetInfo

// optional int32 iNumber = 1;
inline bool NumberBetInfo::has_inumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NumberBetInfo::set_has_inumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NumberBetInfo::clear_has_inumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NumberBetInfo::clear_inumber() {
  inumber_ = 0;
  clear_has_inumber();
}
inline ::google::protobuf::int32 NumberBetInfo::inumber() const {
  return inumber_;
}
inline void NumberBetInfo::set_inumber(::google::protobuf::int32 value) {
  set_has_inumber();
  inumber_ = value;
}

// optional int64 lBetCoins = 2;
inline bool NumberBetInfo::has_lbetcoins() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NumberBetInfo::set_has_lbetcoins() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NumberBetInfo::clear_has_lbetcoins() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NumberBetInfo::clear_lbetcoins() {
  lbetcoins_ = GOOGLE_LONGLONG(0);
  clear_has_lbetcoins();
}
inline ::google::protobuf::int64 NumberBetInfo::lbetcoins() const {
  return lbetcoins_;
}
inline void NumberBetInfo::set_lbetcoins(::google::protobuf::int64 value) {
  set_has_lbetcoins();
  lbetcoins_ = value;
}

// -------------------------------------------------------------------

// LasvegasInfo

// optional int32 iStepType = 2;
inline bool LasvegasInfo::has_isteptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LasvegasInfo::set_has_isteptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LasvegasInfo::clear_has_isteptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LasvegasInfo::clear_isteptype() {
  isteptype_ = 0;
  clear_has_isteptype();
}
inline ::google::protobuf::int32 LasvegasInfo::isteptype() const {
  return isteptype_;
}
inline void LasvegasInfo::set_isteptype(::google::protobuf::int32 value) {
  set_has_isteptype();
  isteptype_ = value;
}

// optional int32 iStepEndTime = 3;
inline bool LasvegasInfo::has_istependtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LasvegasInfo::set_has_istependtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LasvegasInfo::clear_has_istependtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LasvegasInfo::clear_istependtime() {
  istependtime_ = 0;
  clear_has_istependtime();
}
inline ::google::protobuf::int32 LasvegasInfo::istependtime() const {
  return istependtime_;
}
inline void LasvegasInfo::set_istependtime(::google::protobuf::int32 value) {
  set_has_istependtime();
  istependtime_ = value;
}

// repeated int32 iLotteryIDs = 4;
inline int LasvegasInfo::ilotteryids_size() const {
  return ilotteryids_.size();
}
inline void LasvegasInfo::clear_ilotteryids() {
  ilotteryids_.Clear();
}
inline ::google::protobuf::int32 LasvegasInfo::ilotteryids(int index) const {
  return ilotteryids_.Get(index);
}
inline void LasvegasInfo::set_ilotteryids(int index, ::google::protobuf::int32 value) {
  ilotteryids_.Set(index, value);
}
inline void LasvegasInfo::add_ilotteryids(::google::protobuf::int32 value) {
  ilotteryids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LasvegasInfo::ilotteryids() const {
  return ilotteryids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LasvegasInfo::mutable_ilotteryids() {
  return &ilotteryids_;
}

// repeated .PrizeInfo stPrizes = 5;
inline int LasvegasInfo::stprizes_size() const {
  return stprizes_.size();
}
inline void LasvegasInfo::clear_stprizes() {
  stprizes_.Clear();
}
inline const ::PrizeInfo& LasvegasInfo::stprizes(int index) const {
  return stprizes_.Get(index);
}
inline ::PrizeInfo* LasvegasInfo::mutable_stprizes(int index) {
  return stprizes_.Mutable(index);
}
inline ::PrizeInfo* LasvegasInfo::add_stprizes() {
  return stprizes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PrizeInfo >&
LasvegasInfo::stprizes() const {
  return stprizes_;
}
inline ::google::protobuf::RepeatedPtrField< ::PrizeInfo >*
LasvegasInfo::mutable_stprizes() {
  return &stprizes_;
}

// repeated .NumberBetInfo stBets = 6;
inline int LasvegasInfo::stbets_size() const {
  return stbets_.size();
}
inline void LasvegasInfo::clear_stbets() {
  stbets_.Clear();
}
inline const ::NumberBetInfo& LasvegasInfo::stbets(int index) const {
  return stbets_.Get(index);
}
inline ::NumberBetInfo* LasvegasInfo::mutable_stbets(int index) {
  return stbets_.Mutable(index);
}
inline ::NumberBetInfo* LasvegasInfo::add_stbets() {
  return stbets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NumberBetInfo >&
LasvegasInfo::stbets() const {
  return stbets_;
}
inline ::google::protobuf::RepeatedPtrField< ::NumberBetInfo >*
LasvegasInfo::mutable_stbets() {
  return &stbets_;
}

// -------------------------------------------------------------------

// ExchangeRec

// optional int32 iTime = 1;
inline bool ExchangeRec::has_itime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExchangeRec::set_has_itime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExchangeRec::clear_has_itime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExchangeRec::clear_itime() {
  itime_ = 0;
  clear_has_itime();
}
inline ::google::protobuf::int32 ExchangeRec::itime() const {
  return itime_;
}
inline void ExchangeRec::set_itime(::google::protobuf::int32 value) {
  set_has_itime();
  itime_ = value;
}

// optional string strName = 2;
inline bool ExchangeRec::has_strname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExchangeRec::set_has_strname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExchangeRec::clear_has_strname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExchangeRec::clear_strname() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    strname_->clear();
  }
  clear_has_strname();
}
inline const ::std::string& ExchangeRec::strname() const {
  return *strname_;
}
inline void ExchangeRec::set_strname(const ::std::string& value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void ExchangeRec::set_strname(const char* value) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(value);
}
inline void ExchangeRec::set_strname(const char* value, size_t size) {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  strname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExchangeRec::mutable_strname() {
  set_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    strname_ = new ::std::string;
  }
  return strname_;
}
inline ::std::string* ExchangeRec::release_strname() {
  clear_has_strname();
  if (strname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strname_;
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExchangeRec::set_allocated_strname(::std::string* strname) {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strname) {
    set_has_strname();
    strname_ = strname;
  } else {
    clear_has_strname();
    strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iExchangeID = 3;
inline bool ExchangeRec::has_iexchangeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExchangeRec::set_has_iexchangeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExchangeRec::clear_has_iexchangeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExchangeRec::clear_iexchangeid() {
  iexchangeid_ = 0;
  clear_has_iexchangeid();
}
inline ::google::protobuf::int32 ExchangeRec::iexchangeid() const {
  return iexchangeid_;
}
inline void ExchangeRec::set_iexchangeid(::google::protobuf::int32 value) {
  set_has_iexchangeid();
  iexchangeid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ChatChannelType>() {
  return ::ChatChannelType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enNameType>() {
  return ::enNameType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MailType>() {
  return ::MailType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MailSendType>() {
  return ::MailSendType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::MailStatType>() {
  return ::MailStatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RankType>() {
  return ::RankType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::StepType>() {
  return ::StepType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogTargetType>() {
  return ::LogTargetType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LogoutReasonType>() {
  return ::LogoutReasonType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameProtocol_5fCommon_2eproto__INCLUDED
