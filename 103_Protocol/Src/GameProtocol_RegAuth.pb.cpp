// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_RegAuth.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol_RegAuth.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* AccountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AccountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_RegAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_RegAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_AuthAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_AuthAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_PlatformAuth_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_PlatformAuth_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuth_PlatformAuth_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuth_PlatformAuth_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuthDB_AddAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuthDB_AddAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuthDB_AddAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuthDB_AddAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuthDB_GetAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuthDB_GetAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuthDB_GetAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuthDB_GetAccount_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuthDB_DelAccount_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuthDB_DelAccount_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* RegAuthDB_DelAccount_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegAuthDB_DelAccount_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* enPlatformType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RealStatType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto() {
  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol_RegAuth.proto");
  GOOGLE_CHECK(file != NULL);
  AccountInfo_descriptor_ = file->message_type(0);
  static const int AccountInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, straccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strpassword_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strthirdparty_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strdeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strclienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strappid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strplatformid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, irealnamestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, strpicid_),
  };
  AccountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AccountInfo_descriptor_,
      AccountInfo::default_instance_,
      AccountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AccountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AccountInfo));
  RegAuth_RegAccount_Request_descriptor_ = file->message_type(1);
  static const int RegAuth_RegAccount_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, stinfo_),
  };
  RegAuth_RegAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_RegAccount_Request_descriptor_,
      RegAuth_RegAccount_Request::default_instance_,
      RegAuth_RegAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_RegAccount_Request));
  RegAuth_RegAccount_Response_descriptor_ = file->message_type(2);
  static const int RegAuth_RegAccount_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Response, iresult_),
  };
  RegAuth_RegAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_RegAccount_Response_descriptor_,
      RegAuth_RegAccount_Response::default_instance_,
      RegAuth_RegAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_RegAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_RegAccount_Response));
  RegAuth_AuthAccount_Request_descriptor_ = file->message_type(3);
  static const int RegAuth_AuthAccount_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Request, stinfo_),
  };
  RegAuth_AuthAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_AuthAccount_Request_descriptor_,
      RegAuth_AuthAccount_Request::default_instance_,
      RegAuth_AuthAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_AuthAccount_Request));
  RegAuth_AuthAccount_Response_descriptor_ = file->message_type(4);
  static const int RegAuth_AuthAccount_Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, strhostinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, strsessionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, stinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, bisregister_),
  };
  RegAuth_AuthAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_AuthAccount_Response_descriptor_,
      RegAuth_AuthAccount_Response::default_instance_,
      RegAuth_AuthAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_AuthAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_AuthAccount_Response));
  RegAuth_PlatformAuth_Request_descriptor_ = file->message_type(5);
  static const int RegAuth_PlatformAuth_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_PlatformAuth_Request, stinfo_),
  };
  RegAuth_PlatformAuth_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_PlatformAuth_Request_descriptor_,
      RegAuth_PlatformAuth_Request::default_instance_,
      RegAuth_PlatformAuth_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_PlatformAuth_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_PlatformAuth_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_PlatformAuth_Request));
  RegAuth_PlatformAuth_Response_descriptor_ = file->message_type(6);
  static const int RegAuth_PlatformAuth_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_PlatformAuth_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_PlatformAuth_Response, stinfo_),
  };
  RegAuth_PlatformAuth_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuth_PlatformAuth_Response_descriptor_,
      RegAuth_PlatformAuth_Response::default_instance_,
      RegAuth_PlatformAuth_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_PlatformAuth_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuth_PlatformAuth_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuth_PlatformAuth_Response));
  RegAuthDB_AddAccount_Request_descriptor_ = file->message_type(7);
  static const int RegAuthDB_AddAccount_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_AddAccount_Request, stinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_AddAccount_Request, iworldid_),
  };
  RegAuthDB_AddAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuthDB_AddAccount_Request_descriptor_,
      RegAuthDB_AddAccount_Request::default_instance_,
      RegAuthDB_AddAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_AddAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_AddAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuthDB_AddAccount_Request));
  RegAuthDB_AddAccount_Response_descriptor_ = file->message_type(8);
  static const int RegAuthDB_AddAccount_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_AddAccount_Response, iresult_),
  };
  RegAuthDB_AddAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuthDB_AddAccount_Response_descriptor_,
      RegAuthDB_AddAccount_Response::default_instance_,
      RegAuthDB_AddAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_AddAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_AddAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuthDB_AddAccount_Response));
  RegAuthDB_GetAccount_Request_descriptor_ = file->message_type(9);
  static const int RegAuthDB_GetAccount_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Request, stinfo_),
  };
  RegAuthDB_GetAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuthDB_GetAccount_Request_descriptor_,
      RegAuthDB_GetAccount_Request::default_instance_,
      RegAuthDB_GetAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuthDB_GetAccount_Request));
  RegAuthDB_GetAccount_Response_descriptor_ = file->message_type(10);
  static const int RegAuthDB_GetAccount_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Response, stinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Response, iworldid_),
  };
  RegAuthDB_GetAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuthDB_GetAccount_Response_descriptor_,
      RegAuthDB_GetAccount_Response::default_instance_,
      RegAuthDB_GetAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_GetAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuthDB_GetAccount_Response));
  RegAuthDB_DelAccount_Request_descriptor_ = file->message_type(11);
  static const int RegAuthDB_DelAccount_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_DelAccount_Request, stinfo_),
  };
  RegAuthDB_DelAccount_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuthDB_DelAccount_Request_descriptor_,
      RegAuthDB_DelAccount_Request::default_instance_,
      RegAuthDB_DelAccount_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_DelAccount_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_DelAccount_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuthDB_DelAccount_Request));
  RegAuthDB_DelAccount_Response_descriptor_ = file->message_type(12);
  static const int RegAuthDB_DelAccount_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_DelAccount_Response, iresult_),
  };
  RegAuthDB_DelAccount_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RegAuthDB_DelAccount_Response_descriptor_,
      RegAuthDB_DelAccount_Response::default_instance_,
      RegAuthDB_DelAccount_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_DelAccount_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegAuthDB_DelAccount_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RegAuthDB_DelAccount_Response));
  enPlatformType_descriptor_ = file->enum_type(0);
  RealStatType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AccountInfo_descriptor_, &AccountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_RegAccount_Request_descriptor_, &RegAuth_RegAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_RegAccount_Response_descriptor_, &RegAuth_RegAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_AuthAccount_Request_descriptor_, &RegAuth_AuthAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_AuthAccount_Response_descriptor_, &RegAuth_AuthAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_PlatformAuth_Request_descriptor_, &RegAuth_PlatformAuth_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuth_PlatformAuth_Response_descriptor_, &RegAuth_PlatformAuth_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuthDB_AddAccount_Request_descriptor_, &RegAuthDB_AddAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuthDB_AddAccount_Response_descriptor_, &RegAuthDB_AddAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuthDB_GetAccount_Request_descriptor_, &RegAuthDB_GetAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuthDB_GetAccount_Response_descriptor_, &RegAuthDB_GetAccount_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuthDB_DelAccount_Request_descriptor_, &RegAuthDB_DelAccount_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RegAuthDB_DelAccount_Response_descriptor_, &RegAuthDB_DelAccount_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto() {
  delete AccountInfo::default_instance_;
  delete AccountInfo_reflection_;
  delete RegAuth_RegAccount_Request::default_instance_;
  delete RegAuth_RegAccount_Request_reflection_;
  delete RegAuth_RegAccount_Response::default_instance_;
  delete RegAuth_RegAccount_Response_reflection_;
  delete RegAuth_AuthAccount_Request::default_instance_;
  delete RegAuth_AuthAccount_Request_reflection_;
  delete RegAuth_AuthAccount_Response::default_instance_;
  delete RegAuth_AuthAccount_Response_reflection_;
  delete RegAuth_PlatformAuth_Request::default_instance_;
  delete RegAuth_PlatformAuth_Request_reflection_;
  delete RegAuth_PlatformAuth_Response::default_instance_;
  delete RegAuth_PlatformAuth_Response_reflection_;
  delete RegAuthDB_AddAccount_Request::default_instance_;
  delete RegAuthDB_AddAccount_Request_reflection_;
  delete RegAuthDB_AddAccount_Response::default_instance_;
  delete RegAuthDB_AddAccount_Response_reflection_;
  delete RegAuthDB_GetAccount_Request::default_instance_;
  delete RegAuthDB_GetAccount_Request_reflection_;
  delete RegAuthDB_GetAccount_Response::default_instance_;
  delete RegAuthDB_GetAccount_Response_reflection_;
  delete RegAuthDB_DelAccount_Request::default_instance_;
  delete RegAuthDB_DelAccount_Request_reflection_;
  delete RegAuthDB_DelAccount_Response::default_instance_;
  delete RegAuthDB_DelAccount_Response_reflection_;
}

void protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032GameProtocol_RegAuth.proto\032\031GameProtoc"
    "ol_Common.proto\"\200\002\n\013AccountInfo\022\022\n\nstrAc"
    "count\030\001 \001(\t\022\r\n\005iType\030\002 \001(\005\022\023\n\013strPasswor"
    "d\030\003 \001(\t\022\025\n\rstrThirdParty\030\004 \001(\t\022\023\n\013strDev"
    "iceID\030\005 \001(\t\022\022\n\nstrChannel\030\006 \001(\t\022\025\n\rstrCl"
    "ientType\030\007 \001(\t\022\020\n\010strAppID\030\010 \001(\t\022\020\n\010iWor"
    "ldID\030\t \001(\005\022\025\n\rstrPlatformID\030\n \001(\t\022\025\n\riRe"
    "alNameStat\030\013 \001(\005\022\020\n\010strPicID\030\014 \001(\t\":\n\032Re"
    "gAuth_RegAccount_Request\022\034\n\006stInfo\030\001 \001(\013"
    "2\014.AccountInfo\".\n\033RegAuth_RegAccount_Res"
    "ponse\022\017\n\007iResult\030\001 \001(\005\";\n\033RegAuth_AuthAc"
    "count_Request\022\034\n\006stInfo\030\001 \001(\0132\014.AccountI"
    "nfo\"\255\001\n\034RegAuth_AuthAccount_Response\022\017\n\007"
    "iResult\030\001 \001(\005\022\013\n\003uin\030\002 \001(\r\022\020\n\010iWorldID\030\003"
    " \001(\005\022\023\n\013strHostInfo\030\004 \001(\t\022\025\n\rstrSessionK"
    "ey\030\005 \001(\t\022\034\n\006stInfo\030\006 \001(\0132\014.AccountInfo\022\023"
    "\n\013bIsRegister\030\007 \001(\010\"<\n\034RegAuth_PlatformA"
    "uth_Request\022\034\n\006stInfo\030\001 \001(\0132\014.AccountInf"
    "o\"N\n\035RegAuth_PlatformAuth_Response\022\017\n\007iR"
    "esult\030\001 \001(\005\022\034\n\006stInfo\030\002 \001(\0132\014.AccountInf"
    "o\"N\n\034RegAuthDB_AddAccount_Request\022\034\n\006stI"
    "nfo\030\001 \001(\0132\014.AccountInfo\022\020\n\010iWorldID\030\003 \001("
    "\005\"0\n\035RegAuthDB_AddAccount_Response\022\017\n\007iR"
    "esult\030\001 \001(\005\"<\n\034RegAuthDB_GetAccount_Requ"
    "est\022\034\n\006stInfo\030\001 \001(\0132\014.AccountInfo\"m\n\035Reg"
    "AuthDB_GetAccount_Response\022\017\n\007iResult\030\001 "
    "\001(\005\022\034\n\006stInfo\030\002 \001(\0132\014.AccountInfo\022\013\n\003uin"
    "\030\003 \001(\r\022\020\n\010iWorldID\030\004 \001(\005\"<\n\034RegAuthDB_De"
    "lAccount_Request\022\034\n\006stInfo\030\002 \001(\0132\014.Accou"
    "ntInfo\"0\n\035RegAuthDB_DelAccount_Response\022"
    "\017\n\007iResult\030\001 \001(\005*\220\001\n\016enPlatformType\022\032\n\026L"
    "OGIN_PLATFORM_INVALID\020\000\022\027\n\023LOGIN_PLATFOR"
    "M_MAIN\020\001\022\026\n\022LOGIN_PLATFORM_YMN\020\002\022\031\n\025LOGI"
    "N_PLATFORM_WECHAT\020\003\022\026\n\022LOGIN_PLATFORM_MA"
    "X\020\004*N\n\014RealStatType\022\024\n\020REAL_STAT_NONAME\020"
    "\000\022\023\n\017REAL_STAT_MINOR\020\001\022\023\n\017REAL_STAT_ADUL"
    "T\020\002", 1443);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol_RegAuth.proto", &protobuf_RegisterTypes);
  AccountInfo::default_instance_ = new AccountInfo();
  RegAuth_RegAccount_Request::default_instance_ = new RegAuth_RegAccount_Request();
  RegAuth_RegAccount_Response::default_instance_ = new RegAuth_RegAccount_Response();
  RegAuth_AuthAccount_Request::default_instance_ = new RegAuth_AuthAccount_Request();
  RegAuth_AuthAccount_Response::default_instance_ = new RegAuth_AuthAccount_Response();
  RegAuth_PlatformAuth_Request::default_instance_ = new RegAuth_PlatformAuth_Request();
  RegAuth_PlatformAuth_Response::default_instance_ = new RegAuth_PlatformAuth_Response();
  RegAuthDB_AddAccount_Request::default_instance_ = new RegAuthDB_AddAccount_Request();
  RegAuthDB_AddAccount_Response::default_instance_ = new RegAuthDB_AddAccount_Response();
  RegAuthDB_GetAccount_Request::default_instance_ = new RegAuthDB_GetAccount_Request();
  RegAuthDB_GetAccount_Response::default_instance_ = new RegAuthDB_GetAccount_Response();
  RegAuthDB_DelAccount_Request::default_instance_ = new RegAuthDB_DelAccount_Request();
  RegAuthDB_DelAccount_Response::default_instance_ = new RegAuthDB_DelAccount_Response();
  AccountInfo::default_instance_->InitAsDefaultInstance();
  RegAuth_RegAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuth_RegAccount_Response::default_instance_->InitAsDefaultInstance();
  RegAuth_AuthAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuth_AuthAccount_Response::default_instance_->InitAsDefaultInstance();
  RegAuth_PlatformAuth_Request::default_instance_->InitAsDefaultInstance();
  RegAuth_PlatformAuth_Response::default_instance_->InitAsDefaultInstance();
  RegAuthDB_AddAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuthDB_AddAccount_Response::default_instance_->InitAsDefaultInstance();
  RegAuthDB_GetAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuthDB_GetAccount_Response::default_instance_->InitAsDefaultInstance();
  RegAuthDB_DelAccount_Request::default_instance_->InitAsDefaultInstance();
  RegAuthDB_DelAccount_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_5fRegAuth_2eproto {
  StaticDescriptorInitializer_GameProtocol_5fRegAuth_2eproto() {
    protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  }
} static_descriptor_initializer_GameProtocol_5fRegAuth_2eproto_;
const ::google::protobuf::EnumDescriptor* enPlatformType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return enPlatformType_descriptor_;
}
bool enPlatformType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RealStatType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RealStatType_descriptor_;
}
bool RealStatType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int AccountInfo::kStrAccountFieldNumber;
const int AccountInfo::kITypeFieldNumber;
const int AccountInfo::kStrPasswordFieldNumber;
const int AccountInfo::kStrThirdPartyFieldNumber;
const int AccountInfo::kStrDeviceIDFieldNumber;
const int AccountInfo::kStrChannelFieldNumber;
const int AccountInfo::kStrClientTypeFieldNumber;
const int AccountInfo::kStrAppIDFieldNumber;
const int AccountInfo::kIWorldIDFieldNumber;
const int AccountInfo::kStrPlatformIDFieldNumber;
const int AccountInfo::kIRealNameStatFieldNumber;
const int AccountInfo::kStrPicIDFieldNumber;
#endif  // !_MSC_VER

AccountInfo::AccountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AccountInfo::InitAsDefaultInstance() {
}

AccountInfo::AccountInfo(const AccountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AccountInfo::SharedCtor() {
  _cached_size_ = 0;
  straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itype_ = 0;
  strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strthirdparty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strclienttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iworldid_ = 0;
  strplatformid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  irealnamestat_ = 0;
  strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AccountInfo::~AccountInfo() {
  SharedDtor();
}

void AccountInfo::SharedDtor() {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strthirdparty_ != &::google::protobuf::internal::kEmptyString) {
    delete strthirdparty_;
  }
  if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdeviceid_;
  }
  if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete strchannel_;
  }
  if (strclienttype_ != &::google::protobuf::internal::kEmptyString) {
    delete strclienttype_;
  }
  if (strappid_ != &::google::protobuf::internal::kEmptyString) {
    delete strappid_;
  }
  if (strplatformid_ != &::google::protobuf::internal::kEmptyString) {
    delete strplatformid_;
  }
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    delete strpicid_;
  }
  if (this != default_instance_) {
  }
}

void AccountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AccountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AccountInfo_descriptor_;
}

const AccountInfo& AccountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

AccountInfo* AccountInfo::default_instance_ = NULL;

AccountInfo* AccountInfo::New() const {
  return new AccountInfo;
}

void AccountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_straccount()) {
      if (straccount_ != &::google::protobuf::internal::kEmptyString) {
        straccount_->clear();
      }
    }
    itype_ = 0;
    if (has_strpassword()) {
      if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
        strpassword_->clear();
      }
    }
    if (has_strthirdparty()) {
      if (strthirdparty_ != &::google::protobuf::internal::kEmptyString) {
        strthirdparty_->clear();
      }
    }
    if (has_strdeviceid()) {
      if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
        strdeviceid_->clear();
      }
    }
    if (has_strchannel()) {
      if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
        strchannel_->clear();
      }
    }
    if (has_strclienttype()) {
      if (strclienttype_ != &::google::protobuf::internal::kEmptyString) {
        strclienttype_->clear();
      }
    }
    if (has_strappid()) {
      if (strappid_ != &::google::protobuf::internal::kEmptyString) {
        strappid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iworldid_ = 0;
    if (has_strplatformid()) {
      if (strplatformid_ != &::google::protobuf::internal::kEmptyString) {
        strplatformid_->clear();
      }
    }
    irealnamestat_ = 0;
    if (has_strpicid()) {
      if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
        strpicid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AccountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strAccount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccount().data(), this->straccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strPassword;
        break;
      }

      // optional string strPassword = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPassword:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpassword()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpassword().data(), this->strpassword().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strThirdParty;
        break;
      }

      // optional string strThirdParty = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strThirdParty:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strthirdparty()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strthirdparty().data(), this->strthirdparty().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strDeviceID;
        break;
      }

      // optional string strDeviceID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdeviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdeviceid().data(), this->strdeviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strChannel;
        break;
      }

      // optional string strChannel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strchannel().data(), this->strchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strClientType;
        break;
      }

      // optional string strClientType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strClientType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strclienttype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strclienttype().data(), this->strclienttype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strAppID;
        break;
      }

      // optional string strAppID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAppID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strappid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strappid().data(), this->strappid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_iWorldID;
        break;
      }

      // optional int32 iWorldID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_strPlatformID;
        break;
      }

      // optional string strPlatformID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPlatformID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strplatformid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strplatformid().data(), this->strplatformid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_iRealNameStat;
        break;
      }

      // optional int32 iRealNameStat = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRealNameStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irealnamestat_)));
          set_has_irealnamestat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_strPicID;
        break;
      }

      // optional string strPicID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPicID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpicid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpicid().data(), this->strpicid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AccountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->straccount(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strpassword(), output);
  }

  // optional string strThirdParty = 4;
  if (has_strthirdparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strthirdparty().data(), this->strthirdparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strthirdparty(), output);
  }

  // optional string strDeviceID = 5;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strdeviceid(), output);
  }

  // optional string strChannel = 6;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strchannel(), output);
  }

  // optional string strClientType = 7;
  if (has_strclienttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strclienttype().data(), this->strclienttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strclienttype(), output);
  }

  // optional string strAppID = 8;
  if (has_strappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strappid().data(), this->strappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->strappid(), output);
  }

  // optional int32 iWorldID = 9;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->iworldid(), output);
  }

  // optional string strPlatformID = 10;
  if (has_strplatformid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strplatformid().data(), this->strplatformid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->strplatformid(), output);
  }

  // optional int32 iRealNameStat = 11;
  if (has_irealnamestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->irealnamestat(), output);
  }

  // optional string strPicID = 12;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->strpicid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AccountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strAccount = 1;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->straccount(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // optional string strPassword = 3;
  if (has_strpassword()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpassword().data(), this->strpassword().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strpassword(), target);
  }

  // optional string strThirdParty = 4;
  if (has_strthirdparty()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strthirdparty().data(), this->strthirdparty().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strthirdparty(), target);
  }

  // optional string strDeviceID = 5;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strdeviceid(), target);
  }

  // optional string strChannel = 6;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strchannel(), target);
  }

  // optional string strClientType = 7;
  if (has_strclienttype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strclienttype().data(), this->strclienttype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strclienttype(), target);
  }

  // optional string strAppID = 8;
  if (has_strappid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strappid().data(), this->strappid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->strappid(), target);
  }

  // optional int32 iWorldID = 9;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->iworldid(), target);
  }

  // optional string strPlatformID = 10;
  if (has_strplatformid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strplatformid().data(), this->strplatformid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->strplatformid(), target);
  }

  // optional int32 iRealNameStat = 11;
  if (has_irealnamestat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->irealnamestat(), target);
  }

  // optional string strPicID = 12;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->strpicid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AccountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strAccount = 1;
    if (has_straccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccount());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional string strPassword = 3;
    if (has_strpassword()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpassword());
    }

    // optional string strThirdParty = 4;
    if (has_strthirdparty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strthirdparty());
    }

    // optional string strDeviceID = 5;
    if (has_strdeviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdeviceid());
    }

    // optional string strChannel = 6;
    if (has_strchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strchannel());
    }

    // optional string strClientType = 7;
    if (has_strclienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strclienttype());
    }

    // optional string strAppID = 8;
    if (has_strappid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strappid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 iWorldID = 9;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional string strPlatformID = 10;
    if (has_strplatformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strplatformid());
    }

    // optional int32 iRealNameStat = 11;
    if (has_irealnamestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irealnamestat());
    }

    // optional string strPicID = 12;
    if (has_strpicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpicid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AccountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AccountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AccountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AccountInfo::MergeFrom(const AccountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_straccount()) {
      set_straccount(from.straccount());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_strpassword()) {
      set_strpassword(from.strpassword());
    }
    if (from.has_strthirdparty()) {
      set_strthirdparty(from.strthirdparty());
    }
    if (from.has_strdeviceid()) {
      set_strdeviceid(from.strdeviceid());
    }
    if (from.has_strchannel()) {
      set_strchannel(from.strchannel());
    }
    if (from.has_strclienttype()) {
      set_strclienttype(from.strclienttype());
    }
    if (from.has_strappid()) {
      set_strappid(from.strappid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_strplatformid()) {
      set_strplatformid(from.strplatformid());
    }
    if (from.has_irealnamestat()) {
      set_irealnamestat(from.irealnamestat());
    }
    if (from.has_strpicid()) {
      set_strpicid(from.strpicid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AccountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AccountInfo::CopyFrom(const AccountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccountInfo::IsInitialized() const {

  return true;
}

void AccountInfo::Swap(AccountInfo* other) {
  if (other != this) {
    std::swap(straccount_, other->straccount_);
    std::swap(itype_, other->itype_);
    std::swap(strpassword_, other->strpassword_);
    std::swap(strthirdparty_, other->strthirdparty_);
    std::swap(strdeviceid_, other->strdeviceid_);
    std::swap(strchannel_, other->strchannel_);
    std::swap(strclienttype_, other->strclienttype_);
    std::swap(strappid_, other->strappid_);
    std::swap(iworldid_, other->iworldid_);
    std::swap(strplatformid_, other->strplatformid_);
    std::swap(irealnamestat_, other->irealnamestat_);
    std::swap(strpicid_, other->strpicid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AccountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AccountInfo_descriptor_;
  metadata.reflection = AccountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_RegAccount_Request::kStInfoFieldNumber;
#endif  // !_MSC_VER

RegAuth_RegAccount_Request::RegAuth_RegAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_RegAccount_Request::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuth_RegAccount_Request::RegAuth_RegAccount_Request(const RegAuth_RegAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_RegAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_RegAccount_Request::~RegAuth_RegAccount_Request() {
  SharedDtor();
}

void RegAuth_RegAccount_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuth_RegAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_RegAccount_Request_descriptor_;
}

const RegAuth_RegAccount_Request& RegAuth_RegAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_RegAccount_Request* RegAuth_RegAccount_Request::default_instance_ = NULL;

RegAuth_RegAccount_Request* RegAuth_RegAccount_Request::New() const {
  return new RegAuth_RegAccount_Request;
}

void RegAuth_RegAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_RegAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountInfo stInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_RegAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_RegAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_RegAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountInfo stInfo = 1;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_RegAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_RegAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_RegAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_RegAccount_Request::MergeFrom(const RegAuth_RegAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_RegAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_RegAccount_Request::CopyFrom(const RegAuth_RegAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_RegAccount_Request::IsInitialized() const {

  return true;
}

void RegAuth_RegAccount_Request::Swap(RegAuth_RegAccount_Request* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_RegAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_RegAccount_Request_descriptor_;
  metadata.reflection = RegAuth_RegAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_RegAccount_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

RegAuth_RegAccount_Response::RegAuth_RegAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_RegAccount_Response::InitAsDefaultInstance() {
}

RegAuth_RegAccount_Response::RegAuth_RegAccount_Response(const RegAuth_RegAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_RegAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_RegAccount_Response::~RegAuth_RegAccount_Response() {
  SharedDtor();
}

void RegAuth_RegAccount_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegAuth_RegAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_RegAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_RegAccount_Response_descriptor_;
}

const RegAuth_RegAccount_Response& RegAuth_RegAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_RegAccount_Response* RegAuth_RegAccount_Response::default_instance_ = NULL;

RegAuth_RegAccount_Response* RegAuth_RegAccount_Response::New() const {
  return new RegAuth_RegAccount_Response;
}

void RegAuth_RegAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_RegAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_RegAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_RegAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_RegAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_RegAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_RegAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_RegAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_RegAccount_Response::MergeFrom(const RegAuth_RegAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_RegAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_RegAccount_Response::CopyFrom(const RegAuth_RegAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_RegAccount_Response::IsInitialized() const {

  return true;
}

void RegAuth_RegAccount_Response::Swap(RegAuth_RegAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_RegAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_RegAccount_Response_descriptor_;
  metadata.reflection = RegAuth_RegAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_AuthAccount_Request::kStInfoFieldNumber;
#endif  // !_MSC_VER

RegAuth_AuthAccount_Request::RegAuth_AuthAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_AuthAccount_Request::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuth_AuthAccount_Request::RegAuth_AuthAccount_Request(const RegAuth_AuthAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_AuthAccount_Request::~RegAuth_AuthAccount_Request() {
  SharedDtor();
}

void RegAuth_AuthAccount_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuth_AuthAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_AuthAccount_Request_descriptor_;
}

const RegAuth_AuthAccount_Request& RegAuth_AuthAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_AuthAccount_Request* RegAuth_AuthAccount_Request::default_instance_ = NULL;

RegAuth_AuthAccount_Request* RegAuth_AuthAccount_Request::New() const {
  return new RegAuth_AuthAccount_Request;
}

void RegAuth_AuthAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_AuthAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountInfo stInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_AuthAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_AuthAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_AuthAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountInfo stInfo = 1;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_AuthAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_AuthAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_AuthAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_AuthAccount_Request::MergeFrom(const RegAuth_AuthAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_AuthAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Request::CopyFrom(const RegAuth_AuthAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_AuthAccount_Request::IsInitialized() const {

  return true;
}

void RegAuth_AuthAccount_Request::Swap(RegAuth_AuthAccount_Request* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_AuthAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_AuthAccount_Request_descriptor_;
  metadata.reflection = RegAuth_AuthAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_AuthAccount_Response::kIResultFieldNumber;
const int RegAuth_AuthAccount_Response::kUinFieldNumber;
const int RegAuth_AuthAccount_Response::kIWorldIDFieldNumber;
const int RegAuth_AuthAccount_Response::kStrHostInfoFieldNumber;
const int RegAuth_AuthAccount_Response::kStrSessionKeyFieldNumber;
const int RegAuth_AuthAccount_Response::kStInfoFieldNumber;
const int RegAuth_AuthAccount_Response::kBIsRegisterFieldNumber;
#endif  // !_MSC_VER

RegAuth_AuthAccount_Response::RegAuth_AuthAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_AuthAccount_Response::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuth_AuthAccount_Response::RegAuth_AuthAccount_Response(const RegAuth_AuthAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  iworldid_ = 0;
  strhostinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stinfo_ = NULL;
  bisregister_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_AuthAccount_Response::~RegAuth_AuthAccount_Response() {
  SharedDtor();
}

void RegAuth_AuthAccount_Response::SharedDtor() {
  if (strhostinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strhostinfo_;
  }
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsessionkey_;
  }
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuth_AuthAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_AuthAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_AuthAccount_Response_descriptor_;
}

const RegAuth_AuthAccount_Response& RegAuth_AuthAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_AuthAccount_Response* RegAuth_AuthAccount_Response::default_instance_ = NULL;

RegAuth_AuthAccount_Response* RegAuth_AuthAccount_Response::New() const {
  return new RegAuth_AuthAccount_Response;
}

void RegAuth_AuthAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    iworldid_ = 0;
    if (has_strhostinfo()) {
      if (strhostinfo_ != &::google::protobuf::internal::kEmptyString) {
        strhostinfo_->clear();
      }
    }
    if (has_strsessionkey()) {
      if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
        strsessionkey_->clear();
      }
    }
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
    bisregister_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_AuthAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iWorldID;
        break;
      }

      // optional int32 iWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strHostInfo;
        break;
      }

      // optional string strHostInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strHostInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strhostinfo()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strhostinfo().data(), this->strhostinfo().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strSessionKey;
        break;
      }

      // optional string strSessionKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsessionkey().data(), this->strsessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stInfo;
        break;
      }

      // optional .AccountInfo stInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bIsRegister;
        break;
      }

      // optional bool bIsRegister = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsRegister:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisregister_)));
          set_has_bisregister();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_AuthAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iWorldID = 3;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iworldid(), output);
  }

  // optional string strHostInfo = 4;
  if (has_strhostinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strhostinfo().data(), this->strhostinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strhostinfo(), output);
  }

  // optional string strSessionKey = 5;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strsessionkey(), output);
  }

  // optional .AccountInfo stInfo = 6;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stinfo(), output);
  }

  // optional bool bIsRegister = 7;
  if (has_bisregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisregister(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_AuthAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iWorldID = 3;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iworldid(), target);
  }

  // optional string strHostInfo = 4;
  if (has_strhostinfo()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strhostinfo().data(), this->strhostinfo().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strhostinfo(), target);
  }

  // optional string strSessionKey = 5;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strsessionkey(), target);
  }

  // optional .AccountInfo stInfo = 6;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stinfo(), target);
  }

  // optional bool bIsRegister = 7;
  if (has_bisregister()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisregister(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_AuthAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iWorldID = 3;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional string strHostInfo = 4;
    if (has_strhostinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strhostinfo());
    }

    // optional string strSessionKey = 5;
    if (has_strsessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsessionkey());
    }

    // optional .AccountInfo stInfo = 6;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

    // optional bool bIsRegister = 7;
    if (has_bisregister()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_AuthAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_AuthAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_AuthAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_AuthAccount_Response::MergeFrom(const RegAuth_AuthAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_strhostinfo()) {
      set_strhostinfo(from.strhostinfo());
    }
    if (from.has_strsessionkey()) {
      set_strsessionkey(from.strsessionkey());
    }
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
    if (from.has_bisregister()) {
      set_bisregister(from.bisregister());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_AuthAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_AuthAccount_Response::CopyFrom(const RegAuth_AuthAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_AuthAccount_Response::IsInitialized() const {

  return true;
}

void RegAuth_AuthAccount_Response::Swap(RegAuth_AuthAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(iworldid_, other->iworldid_);
    std::swap(strhostinfo_, other->strhostinfo_);
    std::swap(strsessionkey_, other->strsessionkey_);
    std::swap(stinfo_, other->stinfo_);
    std::swap(bisregister_, other->bisregister_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_AuthAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_AuthAccount_Response_descriptor_;
  metadata.reflection = RegAuth_AuthAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_PlatformAuth_Request::kStInfoFieldNumber;
#endif  // !_MSC_VER

RegAuth_PlatformAuth_Request::RegAuth_PlatformAuth_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_PlatformAuth_Request::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuth_PlatformAuth_Request::RegAuth_PlatformAuth_Request(const RegAuth_PlatformAuth_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_PlatformAuth_Request::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_PlatformAuth_Request::~RegAuth_PlatformAuth_Request() {
  SharedDtor();
}

void RegAuth_PlatformAuth_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuth_PlatformAuth_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_PlatformAuth_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_PlatformAuth_Request_descriptor_;
}

const RegAuth_PlatformAuth_Request& RegAuth_PlatformAuth_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_PlatformAuth_Request* RegAuth_PlatformAuth_Request::default_instance_ = NULL;

RegAuth_PlatformAuth_Request* RegAuth_PlatformAuth_Request::New() const {
  return new RegAuth_PlatformAuth_Request;
}

void RegAuth_PlatformAuth_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_PlatformAuth_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountInfo stInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_PlatformAuth_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_PlatformAuth_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_PlatformAuth_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountInfo stInfo = 1;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_PlatformAuth_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_PlatformAuth_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_PlatformAuth_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_PlatformAuth_Request::MergeFrom(const RegAuth_PlatformAuth_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_PlatformAuth_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_PlatformAuth_Request::CopyFrom(const RegAuth_PlatformAuth_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_PlatformAuth_Request::IsInitialized() const {

  return true;
}

void RegAuth_PlatformAuth_Request::Swap(RegAuth_PlatformAuth_Request* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_PlatformAuth_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_PlatformAuth_Request_descriptor_;
  metadata.reflection = RegAuth_PlatformAuth_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuth_PlatformAuth_Response::kIResultFieldNumber;
const int RegAuth_PlatformAuth_Response::kStInfoFieldNumber;
#endif  // !_MSC_VER

RegAuth_PlatformAuth_Response::RegAuth_PlatformAuth_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuth_PlatformAuth_Response::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuth_PlatformAuth_Response::RegAuth_PlatformAuth_Response(const RegAuth_PlatformAuth_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuth_PlatformAuth_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuth_PlatformAuth_Response::~RegAuth_PlatformAuth_Response() {
  SharedDtor();
}

void RegAuth_PlatformAuth_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuth_PlatformAuth_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuth_PlatformAuth_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuth_PlatformAuth_Response_descriptor_;
}

const RegAuth_PlatformAuth_Response& RegAuth_PlatformAuth_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuth_PlatformAuth_Response* RegAuth_PlatformAuth_Response::default_instance_ = NULL;

RegAuth_PlatformAuth_Response* RegAuth_PlatformAuth_Response::New() const {
  return new RegAuth_PlatformAuth_Response;
}

void RegAuth_PlatformAuth_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuth_PlatformAuth_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stInfo;
        break;
      }

      // optional .AccountInfo stInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuth_PlatformAuth_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .AccountInfo stInfo = 2;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuth_PlatformAuth_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .AccountInfo stInfo = 2;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuth_PlatformAuth_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .AccountInfo stInfo = 2;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuth_PlatformAuth_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuth_PlatformAuth_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuth_PlatformAuth_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuth_PlatformAuth_Response::MergeFrom(const RegAuth_PlatformAuth_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuth_PlatformAuth_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuth_PlatformAuth_Response::CopyFrom(const RegAuth_PlatformAuth_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuth_PlatformAuth_Response::IsInitialized() const {

  return true;
}

void RegAuth_PlatformAuth_Response::Swap(RegAuth_PlatformAuth_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuth_PlatformAuth_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuth_PlatformAuth_Response_descriptor_;
  metadata.reflection = RegAuth_PlatformAuth_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuthDB_AddAccount_Request::kStInfoFieldNumber;
const int RegAuthDB_AddAccount_Request::kIWorldIDFieldNumber;
#endif  // !_MSC_VER

RegAuthDB_AddAccount_Request::RegAuthDB_AddAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuthDB_AddAccount_Request::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuthDB_AddAccount_Request::RegAuthDB_AddAccount_Request(const RegAuthDB_AddAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuthDB_AddAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  iworldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuthDB_AddAccount_Request::~RegAuthDB_AddAccount_Request() {
  SharedDtor();
}

void RegAuthDB_AddAccount_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuthDB_AddAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuthDB_AddAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuthDB_AddAccount_Request_descriptor_;
}

const RegAuthDB_AddAccount_Request& RegAuthDB_AddAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuthDB_AddAccount_Request* RegAuthDB_AddAccount_Request::default_instance_ = NULL;

RegAuthDB_AddAccount_Request* RegAuthDB_AddAccount_Request::New() const {
  return new RegAuthDB_AddAccount_Request;
}

void RegAuthDB_AddAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
    iworldid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuthDB_AddAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountInfo stInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iWorldID;
        break;
      }

      // optional int32 iWorldID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuthDB_AddAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinfo(), output);
  }

  // optional int32 iWorldID = 3;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iworldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuthDB_AddAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinfo(), target);
  }

  // optional int32 iWorldID = 3;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iworldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuthDB_AddAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountInfo stInfo = 1;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

    // optional int32 iWorldID = 3;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuthDB_AddAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuthDB_AddAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuthDB_AddAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuthDB_AddAccount_Request::MergeFrom(const RegAuthDB_AddAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuthDB_AddAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuthDB_AddAccount_Request::CopyFrom(const RegAuthDB_AddAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuthDB_AddAccount_Request::IsInitialized() const {

  return true;
}

void RegAuthDB_AddAccount_Request::Swap(RegAuthDB_AddAccount_Request* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(iworldid_, other->iworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuthDB_AddAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuthDB_AddAccount_Request_descriptor_;
  metadata.reflection = RegAuthDB_AddAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuthDB_AddAccount_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

RegAuthDB_AddAccount_Response::RegAuthDB_AddAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuthDB_AddAccount_Response::InitAsDefaultInstance() {
}

RegAuthDB_AddAccount_Response::RegAuthDB_AddAccount_Response(const RegAuthDB_AddAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuthDB_AddAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuthDB_AddAccount_Response::~RegAuthDB_AddAccount_Response() {
  SharedDtor();
}

void RegAuthDB_AddAccount_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegAuthDB_AddAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuthDB_AddAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuthDB_AddAccount_Response_descriptor_;
}

const RegAuthDB_AddAccount_Response& RegAuthDB_AddAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuthDB_AddAccount_Response* RegAuthDB_AddAccount_Response::default_instance_ = NULL;

RegAuthDB_AddAccount_Response* RegAuthDB_AddAccount_Response::New() const {
  return new RegAuthDB_AddAccount_Response;
}

void RegAuthDB_AddAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuthDB_AddAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuthDB_AddAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuthDB_AddAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuthDB_AddAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuthDB_AddAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuthDB_AddAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuthDB_AddAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuthDB_AddAccount_Response::MergeFrom(const RegAuthDB_AddAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuthDB_AddAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuthDB_AddAccount_Response::CopyFrom(const RegAuthDB_AddAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuthDB_AddAccount_Response::IsInitialized() const {

  return true;
}

void RegAuthDB_AddAccount_Response::Swap(RegAuthDB_AddAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuthDB_AddAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuthDB_AddAccount_Response_descriptor_;
  metadata.reflection = RegAuthDB_AddAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuthDB_GetAccount_Request::kStInfoFieldNumber;
#endif  // !_MSC_VER

RegAuthDB_GetAccount_Request::RegAuthDB_GetAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuthDB_GetAccount_Request::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuthDB_GetAccount_Request::RegAuthDB_GetAccount_Request(const RegAuthDB_GetAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuthDB_GetAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuthDB_GetAccount_Request::~RegAuthDB_GetAccount_Request() {
  SharedDtor();
}

void RegAuthDB_GetAccount_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuthDB_GetAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuthDB_GetAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuthDB_GetAccount_Request_descriptor_;
}

const RegAuthDB_GetAccount_Request& RegAuthDB_GetAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuthDB_GetAccount_Request* RegAuthDB_GetAccount_Request::default_instance_ = NULL;

RegAuthDB_GetAccount_Request* RegAuthDB_GetAccount_Request::New() const {
  return new RegAuthDB_GetAccount_Request;
}

void RegAuthDB_GetAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuthDB_GetAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountInfo stInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuthDB_GetAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuthDB_GetAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountInfo stInfo = 1;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuthDB_GetAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountInfo stInfo = 1;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuthDB_GetAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuthDB_GetAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuthDB_GetAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuthDB_GetAccount_Request::MergeFrom(const RegAuthDB_GetAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuthDB_GetAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuthDB_GetAccount_Request::CopyFrom(const RegAuthDB_GetAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuthDB_GetAccount_Request::IsInitialized() const {

  return true;
}

void RegAuthDB_GetAccount_Request::Swap(RegAuthDB_GetAccount_Request* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuthDB_GetAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuthDB_GetAccount_Request_descriptor_;
  metadata.reflection = RegAuthDB_GetAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuthDB_GetAccount_Response::kIResultFieldNumber;
const int RegAuthDB_GetAccount_Response::kStInfoFieldNumber;
const int RegAuthDB_GetAccount_Response::kUinFieldNumber;
const int RegAuthDB_GetAccount_Response::kIWorldIDFieldNumber;
#endif  // !_MSC_VER

RegAuthDB_GetAccount_Response::RegAuthDB_GetAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuthDB_GetAccount_Response::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuthDB_GetAccount_Response::RegAuthDB_GetAccount_Response(const RegAuthDB_GetAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuthDB_GetAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stinfo_ = NULL;
  uin_ = 0u;
  iworldid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuthDB_GetAccount_Response::~RegAuthDB_GetAccount_Response() {
  SharedDtor();
}

void RegAuthDB_GetAccount_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuthDB_GetAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuthDB_GetAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuthDB_GetAccount_Response_descriptor_;
}

const RegAuthDB_GetAccount_Response& RegAuthDB_GetAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuthDB_GetAccount_Response* RegAuthDB_GetAccount_Response::default_instance_ = NULL;

RegAuthDB_GetAccount_Response* RegAuthDB_GetAccount_Response::New() const {
  return new RegAuthDB_GetAccount_Response;
}

void RegAuthDB_GetAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
    uin_ = 0u;
    iworldid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuthDB_GetAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stInfo;
        break;
      }

      // optional .AccountInfo stInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iWorldID;
        break;
      }

      // optional int32 iWorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuthDB_GetAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .AccountInfo stInfo = 2;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stinfo(), output);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uin(), output);
  }

  // optional int32 iWorldID = 4;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iworldid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuthDB_GetAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .AccountInfo stInfo = 2;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stinfo(), target);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uin(), target);
  }

  // optional int32 iWorldID = 4;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iworldid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuthDB_GetAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .AccountInfo stInfo = 2;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

    // optional uint32 uin = 3;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iWorldID = 4;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuthDB_GetAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuthDB_GetAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuthDB_GetAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuthDB_GetAccount_Response::MergeFrom(const RegAuthDB_GetAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuthDB_GetAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuthDB_GetAccount_Response::CopyFrom(const RegAuthDB_GetAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuthDB_GetAccount_Response::IsInitialized() const {

  return true;
}

void RegAuthDB_GetAccount_Response::Swap(RegAuthDB_GetAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stinfo_, other->stinfo_);
    std::swap(uin_, other->uin_);
    std::swap(iworldid_, other->iworldid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuthDB_GetAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuthDB_GetAccount_Response_descriptor_;
  metadata.reflection = RegAuthDB_GetAccount_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuthDB_DelAccount_Request::kStInfoFieldNumber;
#endif  // !_MSC_VER

RegAuthDB_DelAccount_Request::RegAuthDB_DelAccount_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuthDB_DelAccount_Request::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::AccountInfo*>(&::AccountInfo::default_instance());
}

RegAuthDB_DelAccount_Request::RegAuthDB_DelAccount_Request(const RegAuthDB_DelAccount_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuthDB_DelAccount_Request::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuthDB_DelAccount_Request::~RegAuthDB_DelAccount_Request() {
  SharedDtor();
}

void RegAuthDB_DelAccount_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void RegAuthDB_DelAccount_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuthDB_DelAccount_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuthDB_DelAccount_Request_descriptor_;
}

const RegAuthDB_DelAccount_Request& RegAuthDB_DelAccount_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuthDB_DelAccount_Request* RegAuthDB_DelAccount_Request::default_instance_ = NULL;

RegAuthDB_DelAccount_Request* RegAuthDB_DelAccount_Request::New() const {
  return new RegAuthDB_DelAccount_Request;
}

void RegAuthDB_DelAccount_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuthDB_DelAccount_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .AccountInfo stInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuthDB_DelAccount_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .AccountInfo stInfo = 2;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuthDB_DelAccount_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .AccountInfo stInfo = 2;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuthDB_DelAccount_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .AccountInfo stInfo = 2;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuthDB_DelAccount_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuthDB_DelAccount_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuthDB_DelAccount_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuthDB_DelAccount_Request::MergeFrom(const RegAuthDB_DelAccount_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::AccountInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuthDB_DelAccount_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuthDB_DelAccount_Request::CopyFrom(const RegAuthDB_DelAccount_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuthDB_DelAccount_Request::IsInitialized() const {

  return true;
}

void RegAuthDB_DelAccount_Request::Swap(RegAuthDB_DelAccount_Request* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuthDB_DelAccount_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuthDB_DelAccount_Request_descriptor_;
  metadata.reflection = RegAuthDB_DelAccount_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RegAuthDB_DelAccount_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

RegAuthDB_DelAccount_Response::RegAuthDB_DelAccount_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RegAuthDB_DelAccount_Response::InitAsDefaultInstance() {
}

RegAuthDB_DelAccount_Response::RegAuthDB_DelAccount_Response(const RegAuthDB_DelAccount_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RegAuthDB_DelAccount_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegAuthDB_DelAccount_Response::~RegAuthDB_DelAccount_Response() {
  SharedDtor();
}

void RegAuthDB_DelAccount_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegAuthDB_DelAccount_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegAuthDB_DelAccount_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegAuthDB_DelAccount_Response_descriptor_;
}

const RegAuthDB_DelAccount_Response& RegAuthDB_DelAccount_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  return *default_instance_;
}

RegAuthDB_DelAccount_Response* RegAuthDB_DelAccount_Response::default_instance_ = NULL;

RegAuthDB_DelAccount_Response* RegAuthDB_DelAccount_Response::New() const {
  return new RegAuthDB_DelAccount_Response;
}

void RegAuthDB_DelAccount_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RegAuthDB_DelAccount_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RegAuthDB_DelAccount_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RegAuthDB_DelAccount_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RegAuthDB_DelAccount_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegAuthDB_DelAccount_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RegAuthDB_DelAccount_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RegAuthDB_DelAccount_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RegAuthDB_DelAccount_Response::MergeFrom(const RegAuthDB_DelAccount_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RegAuthDB_DelAccount_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegAuthDB_DelAccount_Response::CopyFrom(const RegAuthDB_DelAccount_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegAuthDB_DelAccount_Response::IsInitialized() const {

  return true;
}

void RegAuthDB_DelAccount_Response::Swap(RegAuthDB_DelAccount_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RegAuthDB_DelAccount_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegAuthDB_DelAccount_Response_descriptor_;
  metadata.reflection = RegAuthDB_DelAccount_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
