// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_RegAuth.proto

#ifndef PROTOBUF_GameProtocol_5fRegAuth_2eproto__INCLUDED
#define PROTOBUF_GameProtocol_5fRegAuth_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "GameProtocol_Common.pb.h"
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

class AccountInfo;
class RegAuth_RegAccount_Request;
class RegAuth_RegAccount_Response;
class RegAuth_AuthAccount_Request;
class RegAuth_AuthAccount_Response;
class RegAuth_PlatformAuth_Request;
class RegAuth_PlatformAuth_Response;
class RegAuthDB_AddAccount_Request;
class RegAuthDB_AddAccount_Response;
class RegAuthDB_GetAccount_Request;
class RegAuthDB_GetAccount_Response;
class RegAuthDB_DelAccount_Request;
class RegAuthDB_DelAccount_Response;

enum enPlatformType {
  LOGIN_PLATFORM_INVALID = 0,
  LOGIN_PLATFORM_MAIN = 1,
  LOGIN_PLATFORM_YMN = 2,
  LOGIN_PLATFORM_WECHAT = 3,
  LOGIN_PLATFORM_MAX = 4
};
bool enPlatformType_IsValid(int value);
const enPlatformType enPlatformType_MIN = LOGIN_PLATFORM_INVALID;
const enPlatformType enPlatformType_MAX = LOGIN_PLATFORM_MAX;
const int enPlatformType_ARRAYSIZE = enPlatformType_MAX + 1;

const ::google::protobuf::EnumDescriptor* enPlatformType_descriptor();
inline const ::std::string& enPlatformType_Name(enPlatformType value) {
  return ::google::protobuf::internal::NameOfEnum(
    enPlatformType_descriptor(), value);
}
inline bool enPlatformType_Parse(
    const ::std::string& name, enPlatformType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<enPlatformType>(
    enPlatformType_descriptor(), name, value);
}
enum RealStatType {
  REAL_STAT_NONAME = 0,
  REAL_STAT_MINOR = 1,
  REAL_STAT_ADULT = 2
};
bool RealStatType_IsValid(int value);
const RealStatType RealStatType_MIN = REAL_STAT_NONAME;
const RealStatType RealStatType_MAX = REAL_STAT_ADULT;
const int RealStatType_ARRAYSIZE = RealStatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RealStatType_descriptor();
inline const ::std::string& RealStatType_Name(RealStatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RealStatType_descriptor(), value);
}
inline bool RealStatType_Parse(
    const ::std::string& name, RealStatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RealStatType>(
    RealStatType_descriptor(), name, value);
}
// ===================================================================

class AccountInfo : public ::google::protobuf::Message {
 public:
  AccountInfo();
  virtual ~AccountInfo();

  AccountInfo(const AccountInfo& from);

  inline AccountInfo& operator=(const AccountInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountInfo& default_instance();

  void Swap(AccountInfo* other);

  // implements Message ----------------------------------------------

  AccountInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AccountInfo& from);
  void MergeFrom(const AccountInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string strAccount = 1;
  inline bool has_straccount() const;
  inline void clear_straccount();
  static const int kStrAccountFieldNumber = 1;
  inline const ::std::string& straccount() const;
  inline void set_straccount(const ::std::string& value);
  inline void set_straccount(const char* value);
  inline void set_straccount(const char* value, size_t size);
  inline ::std::string* mutable_straccount();
  inline ::std::string* release_straccount();
  inline void set_allocated_straccount(::std::string* straccount);

  // optional int32 iType = 2;
  inline bool has_itype() const;
  inline void clear_itype();
  static const int kITypeFieldNumber = 2;
  inline ::google::protobuf::int32 itype() const;
  inline void set_itype(::google::protobuf::int32 value);

  // optional string strPassword = 3;
  inline bool has_strpassword() const;
  inline void clear_strpassword();
  static const int kStrPasswordFieldNumber = 3;
  inline const ::std::string& strpassword() const;
  inline void set_strpassword(const ::std::string& value);
  inline void set_strpassword(const char* value);
  inline void set_strpassword(const char* value, size_t size);
  inline ::std::string* mutable_strpassword();
  inline ::std::string* release_strpassword();
  inline void set_allocated_strpassword(::std::string* strpassword);

  // optional string strThirdParty = 4;
  inline bool has_strthirdparty() const;
  inline void clear_strthirdparty();
  static const int kStrThirdPartyFieldNumber = 4;
  inline const ::std::string& strthirdparty() const;
  inline void set_strthirdparty(const ::std::string& value);
  inline void set_strthirdparty(const char* value);
  inline void set_strthirdparty(const char* value, size_t size);
  inline ::std::string* mutable_strthirdparty();
  inline ::std::string* release_strthirdparty();
  inline void set_allocated_strthirdparty(::std::string* strthirdparty);

  // optional string strDeviceID = 5;
  inline bool has_strdeviceid() const;
  inline void clear_strdeviceid();
  static const int kStrDeviceIDFieldNumber = 5;
  inline const ::std::string& strdeviceid() const;
  inline void set_strdeviceid(const ::std::string& value);
  inline void set_strdeviceid(const char* value);
  inline void set_strdeviceid(const char* value, size_t size);
  inline ::std::string* mutable_strdeviceid();
  inline ::std::string* release_strdeviceid();
  inline void set_allocated_strdeviceid(::std::string* strdeviceid);

  // optional string strChannel = 6;
  inline bool has_strchannel() const;
  inline void clear_strchannel();
  static const int kStrChannelFieldNumber = 6;
  inline const ::std::string& strchannel() const;
  inline void set_strchannel(const ::std::string& value);
  inline void set_strchannel(const char* value);
  inline void set_strchannel(const char* value, size_t size);
  inline ::std::string* mutable_strchannel();
  inline ::std::string* release_strchannel();
  inline void set_allocated_strchannel(::std::string* strchannel);

  // optional string strClientType = 7;
  inline bool has_strclienttype() const;
  inline void clear_strclienttype();
  static const int kStrClientTypeFieldNumber = 7;
  inline const ::std::string& strclienttype() const;
  inline void set_strclienttype(const ::std::string& value);
  inline void set_strclienttype(const char* value);
  inline void set_strclienttype(const char* value, size_t size);
  inline ::std::string* mutable_strclienttype();
  inline ::std::string* release_strclienttype();
  inline void set_allocated_strclienttype(::std::string* strclienttype);

  // optional string strAppID = 8;
  inline bool has_strappid() const;
  inline void clear_strappid();
  static const int kStrAppIDFieldNumber = 8;
  inline const ::std::string& strappid() const;
  inline void set_strappid(const ::std::string& value);
  inline void set_strappid(const char* value);
  inline void set_strappid(const char* value, size_t size);
  inline ::std::string* mutable_strappid();
  inline ::std::string* release_strappid();
  inline void set_allocated_strappid(::std::string* strappid);

  // optional int32 iWorldID = 9;
  inline bool has_iworldid() const;
  inline void clear_iworldid();
  static const int kIWorldIDFieldNumber = 9;
  inline ::google::protobuf::int32 iworldid() const;
  inline void set_iworldid(::google::protobuf::int32 value);

  // optional string strPlatformID = 10;
  inline bool has_strplatformid() const;
  inline void clear_strplatformid();
  static const int kStrPlatformIDFieldNumber = 10;
  inline const ::std::string& strplatformid() const;
  inline void set_strplatformid(const ::std::string& value);
  inline void set_strplatformid(const char* value);
  inline void set_strplatformid(const char* value, size_t size);
  inline ::std::string* mutable_strplatformid();
  inline ::std::string* release_strplatformid();
  inline void set_allocated_strplatformid(::std::string* strplatformid);

  // optional int32 iRealNameStat = 11;
  inline bool has_irealnamestat() const;
  inline void clear_irealnamestat();
  static const int kIRealNameStatFieldNumber = 11;
  inline ::google::protobuf::int32 irealnamestat() const;
  inline void set_irealnamestat(::google::protobuf::int32 value);

  // optional string strPicID = 12;
  inline bool has_strpicid() const;
  inline void clear_strpicid();
  static const int kStrPicIDFieldNumber = 12;
  inline const ::std::string& strpicid() const;
  inline void set_strpicid(const ::std::string& value);
  inline void set_strpicid(const char* value);
  inline void set_strpicid(const char* value, size_t size);
  inline ::std::string* mutable_strpicid();
  inline ::std::string* release_strpicid();
  inline void set_allocated_strpicid(::std::string* strpicid);

  // @@protoc_insertion_point(class_scope:AccountInfo)
 private:
  inline void set_has_straccount();
  inline void clear_has_straccount();
  inline void set_has_itype();
  inline void clear_has_itype();
  inline void set_has_strpassword();
  inline void clear_has_strpassword();
  inline void set_has_strthirdparty();
  inline void clear_has_strthirdparty();
  inline void set_has_strdeviceid();
  inline void clear_has_strdeviceid();
  inline void set_has_strchannel();
  inline void clear_has_strchannel();
  inline void set_has_strclienttype();
  inline void clear_has_strclienttype();
  inline void set_has_strappid();
  inline void clear_has_strappid();
  inline void set_has_iworldid();
  inline void clear_has_iworldid();
  inline void set_has_strplatformid();
  inline void clear_has_strplatformid();
  inline void set_has_irealnamestat();
  inline void clear_has_irealnamestat();
  inline void set_has_strpicid();
  inline void clear_has_strpicid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* straccount_;
  ::std::string* strpassword_;
  ::std::string* strthirdparty_;
  ::std::string* strdeviceid_;
  ::google::protobuf::int32 itype_;
  ::google::protobuf::int32 iworldid_;
  ::std::string* strchannel_;
  ::std::string* strclienttype_;
  ::std::string* strappid_;
  ::std::string* strplatformid_;
  ::std::string* strpicid_;
  ::google::protobuf::int32 irealnamestat_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static AccountInfo* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_RegAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuth_RegAccount_Request();
  virtual ~RegAuth_RegAccount_Request();

  RegAuth_RegAccount_Request(const RegAuth_RegAccount_Request& from);

  inline RegAuth_RegAccount_Request& operator=(const RegAuth_RegAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_RegAccount_Request& default_instance();

  void Swap(RegAuth_RegAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuth_RegAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_RegAccount_Request& from);
  void MergeFrom(const RegAuth_RegAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountInfo stInfo = 1;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 1;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // @@protoc_insertion_point(class_scope:RegAuth_RegAccount_Request)
 private:
  inline void set_has_stinfo();
  inline void clear_has_stinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_RegAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_RegAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuth_RegAccount_Response();
  virtual ~RegAuth_RegAccount_Response();

  RegAuth_RegAccount_Response(const RegAuth_RegAccount_Response& from);

  inline RegAuth_RegAccount_Response& operator=(const RegAuth_RegAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_RegAccount_Response& default_instance();

  void Swap(RegAuth_RegAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuth_RegAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_RegAccount_Response& from);
  void MergeFrom(const RegAuth_RegAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuth_RegAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_RegAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_AuthAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuth_AuthAccount_Request();
  virtual ~RegAuth_AuthAccount_Request();

  RegAuth_AuthAccount_Request(const RegAuth_AuthAccount_Request& from);

  inline RegAuth_AuthAccount_Request& operator=(const RegAuth_AuthAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_AuthAccount_Request& default_instance();

  void Swap(RegAuth_AuthAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuth_AuthAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_AuthAccount_Request& from);
  void MergeFrom(const RegAuth_AuthAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountInfo stInfo = 1;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 1;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // @@protoc_insertion_point(class_scope:RegAuth_AuthAccount_Request)
 private:
  inline void set_has_stinfo();
  inline void clear_has_stinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_AuthAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_AuthAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuth_AuthAccount_Response();
  virtual ~RegAuth_AuthAccount_Response();

  RegAuth_AuthAccount_Response(const RegAuth_AuthAccount_Response& from);

  inline RegAuth_AuthAccount_Response& operator=(const RegAuth_AuthAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_AuthAccount_Response& default_instance();

  void Swap(RegAuth_AuthAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuth_AuthAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_AuthAccount_Response& from);
  void MergeFrom(const RegAuth_AuthAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional uint32 uin = 2;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 2;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional int32 iWorldID = 3;
  inline bool has_iworldid() const;
  inline void clear_iworldid();
  static const int kIWorldIDFieldNumber = 3;
  inline ::google::protobuf::int32 iworldid() const;
  inline void set_iworldid(::google::protobuf::int32 value);

  // optional string strHostInfo = 4;
  inline bool has_strhostinfo() const;
  inline void clear_strhostinfo();
  static const int kStrHostInfoFieldNumber = 4;
  inline const ::std::string& strhostinfo() const;
  inline void set_strhostinfo(const ::std::string& value);
  inline void set_strhostinfo(const char* value);
  inline void set_strhostinfo(const char* value, size_t size);
  inline ::std::string* mutable_strhostinfo();
  inline ::std::string* release_strhostinfo();
  inline void set_allocated_strhostinfo(::std::string* strhostinfo);

  // optional string strSessionKey = 5;
  inline bool has_strsessionkey() const;
  inline void clear_strsessionkey();
  static const int kStrSessionKeyFieldNumber = 5;
  inline const ::std::string& strsessionkey() const;
  inline void set_strsessionkey(const ::std::string& value);
  inline void set_strsessionkey(const char* value);
  inline void set_strsessionkey(const char* value, size_t size);
  inline ::std::string* mutable_strsessionkey();
  inline ::std::string* release_strsessionkey();
  inline void set_allocated_strsessionkey(::std::string* strsessionkey);

  // optional .AccountInfo stInfo = 6;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 6;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // optional bool bIsRegister = 7;
  inline bool has_bisregister() const;
  inline void clear_bisregister();
  static const int kBIsRegisterFieldNumber = 7;
  inline bool bisregister() const;
  inline void set_bisregister(bool value);

  // @@protoc_insertion_point(class_scope:RegAuth_AuthAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_iworldid();
  inline void clear_has_iworldid();
  inline void set_has_strhostinfo();
  inline void clear_has_strhostinfo();
  inline void set_has_strsessionkey();
  inline void clear_has_strsessionkey();
  inline void set_has_stinfo();
  inline void clear_has_stinfo();
  inline void set_has_bisregister();
  inline void clear_has_bisregister();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;
  ::google::protobuf::uint32 uin_;
  ::std::string* strhostinfo_;
  ::std::string* strsessionkey_;
  ::google::protobuf::int32 iworldid_;
  bool bisregister_;
  ::AccountInfo* stinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_AuthAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_PlatformAuth_Request : public ::google::protobuf::Message {
 public:
  RegAuth_PlatformAuth_Request();
  virtual ~RegAuth_PlatformAuth_Request();

  RegAuth_PlatformAuth_Request(const RegAuth_PlatformAuth_Request& from);

  inline RegAuth_PlatformAuth_Request& operator=(const RegAuth_PlatformAuth_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_PlatformAuth_Request& default_instance();

  void Swap(RegAuth_PlatformAuth_Request* other);

  // implements Message ----------------------------------------------

  RegAuth_PlatformAuth_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_PlatformAuth_Request& from);
  void MergeFrom(const RegAuth_PlatformAuth_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountInfo stInfo = 1;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 1;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // @@protoc_insertion_point(class_scope:RegAuth_PlatformAuth_Request)
 private:
  inline void set_has_stinfo();
  inline void clear_has_stinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_PlatformAuth_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuth_PlatformAuth_Response : public ::google::protobuf::Message {
 public:
  RegAuth_PlatformAuth_Response();
  virtual ~RegAuth_PlatformAuth_Response();

  RegAuth_PlatformAuth_Response(const RegAuth_PlatformAuth_Response& from);

  inline RegAuth_PlatformAuth_Response& operator=(const RegAuth_PlatformAuth_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuth_PlatformAuth_Response& default_instance();

  void Swap(RegAuth_PlatformAuth_Response* other);

  // implements Message ----------------------------------------------

  RegAuth_PlatformAuth_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuth_PlatformAuth_Response& from);
  void MergeFrom(const RegAuth_PlatformAuth_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional .AccountInfo stInfo = 2;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 2;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // @@protoc_insertion_point(class_scope:RegAuth_PlatformAuth_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_stinfo();
  inline void clear_has_stinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;
  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuth_PlatformAuth_Response* default_instance_;
};
// -------------------------------------------------------------------

class RegAuthDB_AddAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuthDB_AddAccount_Request();
  virtual ~RegAuthDB_AddAccount_Request();

  RegAuthDB_AddAccount_Request(const RegAuthDB_AddAccount_Request& from);

  inline RegAuthDB_AddAccount_Request& operator=(const RegAuthDB_AddAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuthDB_AddAccount_Request& default_instance();

  void Swap(RegAuthDB_AddAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuthDB_AddAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuthDB_AddAccount_Request& from);
  void MergeFrom(const RegAuthDB_AddAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountInfo stInfo = 1;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 1;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // optional int32 iWorldID = 3;
  inline bool has_iworldid() const;
  inline void clear_iworldid();
  static const int kIWorldIDFieldNumber = 3;
  inline ::google::protobuf::int32 iworldid() const;
  inline void set_iworldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuthDB_AddAccount_Request)
 private:
  inline void set_has_stinfo();
  inline void clear_has_stinfo();
  inline void set_has_iworldid();
  inline void clear_has_iworldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;
  ::google::protobuf::int32 iworldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuthDB_AddAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuthDB_AddAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuthDB_AddAccount_Response();
  virtual ~RegAuthDB_AddAccount_Response();

  RegAuthDB_AddAccount_Response(const RegAuthDB_AddAccount_Response& from);

  inline RegAuthDB_AddAccount_Response& operator=(const RegAuthDB_AddAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuthDB_AddAccount_Response& default_instance();

  void Swap(RegAuthDB_AddAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuthDB_AddAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuthDB_AddAccount_Response& from);
  void MergeFrom(const RegAuthDB_AddAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuthDB_AddAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuthDB_AddAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class RegAuthDB_GetAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuthDB_GetAccount_Request();
  virtual ~RegAuthDB_GetAccount_Request();

  RegAuthDB_GetAccount_Request(const RegAuthDB_GetAccount_Request& from);

  inline RegAuthDB_GetAccount_Request& operator=(const RegAuthDB_GetAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuthDB_GetAccount_Request& default_instance();

  void Swap(RegAuthDB_GetAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuthDB_GetAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuthDB_GetAccount_Request& from);
  void MergeFrom(const RegAuthDB_GetAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountInfo stInfo = 1;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 1;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // @@protoc_insertion_point(class_scope:RegAuthDB_GetAccount_Request)
 private:
  inline void set_has_stinfo();
  inline void clear_has_stinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuthDB_GetAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuthDB_GetAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuthDB_GetAccount_Response();
  virtual ~RegAuthDB_GetAccount_Response();

  RegAuthDB_GetAccount_Response(const RegAuthDB_GetAccount_Response& from);

  inline RegAuthDB_GetAccount_Response& operator=(const RegAuthDB_GetAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuthDB_GetAccount_Response& default_instance();

  void Swap(RegAuthDB_GetAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuthDB_GetAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuthDB_GetAccount_Response& from);
  void MergeFrom(const RegAuthDB_GetAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // optional .AccountInfo stInfo = 2;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 2;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // optional uint32 uin = 3;
  inline bool has_uin() const;
  inline void clear_uin();
  static const int kUinFieldNumber = 3;
  inline ::google::protobuf::uint32 uin() const;
  inline void set_uin(::google::protobuf::uint32 value);

  // optional int32 iWorldID = 4;
  inline bool has_iworldid() const;
  inline void clear_iworldid();
  static const int kIWorldIDFieldNumber = 4;
  inline ::google::protobuf::int32 iworldid() const;
  inline void set_iworldid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuthDB_GetAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();
  inline void set_has_stinfo();
  inline void clear_has_stinfo();
  inline void set_has_uin();
  inline void clear_has_uin();
  inline void set_has_iworldid();
  inline void clear_has_iworldid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;
  ::google::protobuf::int32 iresult_;
  ::google::protobuf::uint32 uin_;
  ::google::protobuf::int32 iworldid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuthDB_GetAccount_Response* default_instance_;
};
// -------------------------------------------------------------------

class RegAuthDB_DelAccount_Request : public ::google::protobuf::Message {
 public:
  RegAuthDB_DelAccount_Request();
  virtual ~RegAuthDB_DelAccount_Request();

  RegAuthDB_DelAccount_Request(const RegAuthDB_DelAccount_Request& from);

  inline RegAuthDB_DelAccount_Request& operator=(const RegAuthDB_DelAccount_Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuthDB_DelAccount_Request& default_instance();

  void Swap(RegAuthDB_DelAccount_Request* other);

  // implements Message ----------------------------------------------

  RegAuthDB_DelAccount_Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuthDB_DelAccount_Request& from);
  void MergeFrom(const RegAuthDB_DelAccount_Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .AccountInfo stInfo = 2;
  inline bool has_stinfo() const;
  inline void clear_stinfo();
  static const int kStInfoFieldNumber = 2;
  inline const ::AccountInfo& stinfo() const;
  inline ::AccountInfo* mutable_stinfo();
  inline ::AccountInfo* release_stinfo();
  inline void set_allocated_stinfo(::AccountInfo* stinfo);

  // @@protoc_insertion_point(class_scope:RegAuthDB_DelAccount_Request)
 private:
  inline void set_has_stinfo();
  inline void clear_has_stinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::AccountInfo* stinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuthDB_DelAccount_Request* default_instance_;
};
// -------------------------------------------------------------------

class RegAuthDB_DelAccount_Response : public ::google::protobuf::Message {
 public:
  RegAuthDB_DelAccount_Response();
  virtual ~RegAuthDB_DelAccount_Response();

  RegAuthDB_DelAccount_Response(const RegAuthDB_DelAccount_Response& from);

  inline RegAuthDB_DelAccount_Response& operator=(const RegAuthDB_DelAccount_Response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RegAuthDB_DelAccount_Response& default_instance();

  void Swap(RegAuthDB_DelAccount_Response* other);

  // implements Message ----------------------------------------------

  RegAuthDB_DelAccount_Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RegAuthDB_DelAccount_Response& from);
  void MergeFrom(const RegAuthDB_DelAccount_Response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iResult = 1;
  inline bool has_iresult() const;
  inline void clear_iresult();
  static const int kIResultFieldNumber = 1;
  inline ::google::protobuf::int32 iresult() const;
  inline void set_iresult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:RegAuthDB_DelAccount_Response)
 private:
  inline void set_has_iresult();
  inline void clear_has_iresult();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iresult_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_AssignDesc_GameProtocol_5fRegAuth_2eproto();
  friend void protobuf_ShutdownFile_GameProtocol_5fRegAuth_2eproto();

  void InitAsDefaultInstance();
  static RegAuthDB_DelAccount_Response* default_instance_;
};
// ===================================================================


// ===================================================================

// AccountInfo

// optional string strAccount = 1;
inline bool AccountInfo::has_straccount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AccountInfo::set_has_straccount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AccountInfo::clear_has_straccount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AccountInfo::clear_straccount() {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    straccount_->clear();
  }
  clear_has_straccount();
}
inline const ::std::string& AccountInfo::straccount() const {
  return *straccount_;
}
inline void AccountInfo::set_straccount(const ::std::string& value) {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  straccount_->assign(value);
}
inline void AccountInfo::set_straccount(const char* value) {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  straccount_->assign(value);
}
inline void AccountInfo::set_straccount(const char* value, size_t size) {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  straccount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_straccount() {
  set_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    straccount_ = new ::std::string;
  }
  return straccount_;
}
inline ::std::string* AccountInfo::release_straccount() {
  clear_has_straccount();
  if (straccount_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = straccount_;
    straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_straccount(::std::string* straccount) {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (straccount) {
    set_has_straccount();
    straccount_ = straccount;
  } else {
    clear_has_straccount();
    straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iType = 2;
inline bool AccountInfo::has_itype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AccountInfo::set_has_itype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AccountInfo::clear_has_itype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AccountInfo::clear_itype() {
  itype_ = 0;
  clear_has_itype();
}
inline ::google::protobuf::int32 AccountInfo::itype() const {
  return itype_;
}
inline void AccountInfo::set_itype(::google::protobuf::int32 value) {
  set_has_itype();
  itype_ = value;
}

// optional string strPassword = 3;
inline bool AccountInfo::has_strpassword() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AccountInfo::set_has_strpassword() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AccountInfo::clear_has_strpassword() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AccountInfo::clear_strpassword() {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    strpassword_->clear();
  }
  clear_has_strpassword();
}
inline const ::std::string& AccountInfo::strpassword() const {
  return *strpassword_;
}
inline void AccountInfo::set_strpassword(const ::std::string& value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountInfo::set_strpassword(const char* value) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(value);
}
inline void AccountInfo::set_strpassword(const char* value, size_t size) {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  strpassword_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strpassword() {
  set_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    strpassword_ = new ::std::string;
  }
  return strpassword_;
}
inline ::std::string* AccountInfo::release_strpassword() {
  clear_has_strpassword();
  if (strpassword_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpassword_;
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strpassword(::std::string* strpassword) {
  if (strpassword_ != &::google::protobuf::internal::kEmptyString) {
    delete strpassword_;
  }
  if (strpassword) {
    set_has_strpassword();
    strpassword_ = strpassword;
  } else {
    clear_has_strpassword();
    strpassword_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string strThirdParty = 4;
inline bool AccountInfo::has_strthirdparty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AccountInfo::set_has_strthirdparty() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AccountInfo::clear_has_strthirdparty() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AccountInfo::clear_strthirdparty() {
  if (strthirdparty_ != &::google::protobuf::internal::kEmptyString) {
    strthirdparty_->clear();
  }
  clear_has_strthirdparty();
}
inline const ::std::string& AccountInfo::strthirdparty() const {
  return *strthirdparty_;
}
inline void AccountInfo::set_strthirdparty(const ::std::string& value) {
  set_has_strthirdparty();
  if (strthirdparty_ == &::google::protobuf::internal::kEmptyString) {
    strthirdparty_ = new ::std::string;
  }
  strthirdparty_->assign(value);
}
inline void AccountInfo::set_strthirdparty(const char* value) {
  set_has_strthirdparty();
  if (strthirdparty_ == &::google::protobuf::internal::kEmptyString) {
    strthirdparty_ = new ::std::string;
  }
  strthirdparty_->assign(value);
}
inline void AccountInfo::set_strthirdparty(const char* value, size_t size) {
  set_has_strthirdparty();
  if (strthirdparty_ == &::google::protobuf::internal::kEmptyString) {
    strthirdparty_ = new ::std::string;
  }
  strthirdparty_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strthirdparty() {
  set_has_strthirdparty();
  if (strthirdparty_ == &::google::protobuf::internal::kEmptyString) {
    strthirdparty_ = new ::std::string;
  }
  return strthirdparty_;
}
inline ::std::string* AccountInfo::release_strthirdparty() {
  clear_has_strthirdparty();
  if (strthirdparty_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strthirdparty_;
    strthirdparty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strthirdparty(::std::string* strthirdparty) {
  if (strthirdparty_ != &::google::protobuf::internal::kEmptyString) {
    delete strthirdparty_;
  }
  if (strthirdparty) {
    set_has_strthirdparty();
    strthirdparty_ = strthirdparty;
  } else {
    clear_has_strthirdparty();
    strthirdparty_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string strDeviceID = 5;
inline bool AccountInfo::has_strdeviceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AccountInfo::set_has_strdeviceid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AccountInfo::clear_has_strdeviceid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AccountInfo::clear_strdeviceid() {
  if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    strdeviceid_->clear();
  }
  clear_has_strdeviceid();
}
inline const ::std::string& AccountInfo::strdeviceid() const {
  return *strdeviceid_;
}
inline void AccountInfo::set_strdeviceid(const ::std::string& value) {
  set_has_strdeviceid();
  if (strdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    strdeviceid_ = new ::std::string;
  }
  strdeviceid_->assign(value);
}
inline void AccountInfo::set_strdeviceid(const char* value) {
  set_has_strdeviceid();
  if (strdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    strdeviceid_ = new ::std::string;
  }
  strdeviceid_->assign(value);
}
inline void AccountInfo::set_strdeviceid(const char* value, size_t size) {
  set_has_strdeviceid();
  if (strdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    strdeviceid_ = new ::std::string;
  }
  strdeviceid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strdeviceid() {
  set_has_strdeviceid();
  if (strdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    strdeviceid_ = new ::std::string;
  }
  return strdeviceid_;
}
inline ::std::string* AccountInfo::release_strdeviceid() {
  clear_has_strdeviceid();
  if (strdeviceid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strdeviceid_;
    strdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strdeviceid(::std::string* strdeviceid) {
  if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdeviceid_;
  }
  if (strdeviceid) {
    set_has_strdeviceid();
    strdeviceid_ = strdeviceid;
  } else {
    clear_has_strdeviceid();
    strdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string strChannel = 6;
inline bool AccountInfo::has_strchannel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AccountInfo::set_has_strchannel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AccountInfo::clear_has_strchannel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AccountInfo::clear_strchannel() {
  if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
    strchannel_->clear();
  }
  clear_has_strchannel();
}
inline const ::std::string& AccountInfo::strchannel() const {
  return *strchannel_;
}
inline void AccountInfo::set_strchannel(const ::std::string& value) {
  set_has_strchannel();
  if (strchannel_ == &::google::protobuf::internal::kEmptyString) {
    strchannel_ = new ::std::string;
  }
  strchannel_->assign(value);
}
inline void AccountInfo::set_strchannel(const char* value) {
  set_has_strchannel();
  if (strchannel_ == &::google::protobuf::internal::kEmptyString) {
    strchannel_ = new ::std::string;
  }
  strchannel_->assign(value);
}
inline void AccountInfo::set_strchannel(const char* value, size_t size) {
  set_has_strchannel();
  if (strchannel_ == &::google::protobuf::internal::kEmptyString) {
    strchannel_ = new ::std::string;
  }
  strchannel_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strchannel() {
  set_has_strchannel();
  if (strchannel_ == &::google::protobuf::internal::kEmptyString) {
    strchannel_ = new ::std::string;
  }
  return strchannel_;
}
inline ::std::string* AccountInfo::release_strchannel() {
  clear_has_strchannel();
  if (strchannel_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strchannel_;
    strchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strchannel(::std::string* strchannel) {
  if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete strchannel_;
  }
  if (strchannel) {
    set_has_strchannel();
    strchannel_ = strchannel;
  } else {
    clear_has_strchannel();
    strchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string strClientType = 7;
inline bool AccountInfo::has_strclienttype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AccountInfo::set_has_strclienttype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AccountInfo::clear_has_strclienttype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AccountInfo::clear_strclienttype() {
  if (strclienttype_ != &::google::protobuf::internal::kEmptyString) {
    strclienttype_->clear();
  }
  clear_has_strclienttype();
}
inline const ::std::string& AccountInfo::strclienttype() const {
  return *strclienttype_;
}
inline void AccountInfo::set_strclienttype(const ::std::string& value) {
  set_has_strclienttype();
  if (strclienttype_ == &::google::protobuf::internal::kEmptyString) {
    strclienttype_ = new ::std::string;
  }
  strclienttype_->assign(value);
}
inline void AccountInfo::set_strclienttype(const char* value) {
  set_has_strclienttype();
  if (strclienttype_ == &::google::protobuf::internal::kEmptyString) {
    strclienttype_ = new ::std::string;
  }
  strclienttype_->assign(value);
}
inline void AccountInfo::set_strclienttype(const char* value, size_t size) {
  set_has_strclienttype();
  if (strclienttype_ == &::google::protobuf::internal::kEmptyString) {
    strclienttype_ = new ::std::string;
  }
  strclienttype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strclienttype() {
  set_has_strclienttype();
  if (strclienttype_ == &::google::protobuf::internal::kEmptyString) {
    strclienttype_ = new ::std::string;
  }
  return strclienttype_;
}
inline ::std::string* AccountInfo::release_strclienttype() {
  clear_has_strclienttype();
  if (strclienttype_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strclienttype_;
    strclienttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strclienttype(::std::string* strclienttype) {
  if (strclienttype_ != &::google::protobuf::internal::kEmptyString) {
    delete strclienttype_;
  }
  if (strclienttype) {
    set_has_strclienttype();
    strclienttype_ = strclienttype;
  } else {
    clear_has_strclienttype();
    strclienttype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string strAppID = 8;
inline bool AccountInfo::has_strappid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AccountInfo::set_has_strappid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AccountInfo::clear_has_strappid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AccountInfo::clear_strappid() {
  if (strappid_ != &::google::protobuf::internal::kEmptyString) {
    strappid_->clear();
  }
  clear_has_strappid();
}
inline const ::std::string& AccountInfo::strappid() const {
  return *strappid_;
}
inline void AccountInfo::set_strappid(const ::std::string& value) {
  set_has_strappid();
  if (strappid_ == &::google::protobuf::internal::kEmptyString) {
    strappid_ = new ::std::string;
  }
  strappid_->assign(value);
}
inline void AccountInfo::set_strappid(const char* value) {
  set_has_strappid();
  if (strappid_ == &::google::protobuf::internal::kEmptyString) {
    strappid_ = new ::std::string;
  }
  strappid_->assign(value);
}
inline void AccountInfo::set_strappid(const char* value, size_t size) {
  set_has_strappid();
  if (strappid_ == &::google::protobuf::internal::kEmptyString) {
    strappid_ = new ::std::string;
  }
  strappid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strappid() {
  set_has_strappid();
  if (strappid_ == &::google::protobuf::internal::kEmptyString) {
    strappid_ = new ::std::string;
  }
  return strappid_;
}
inline ::std::string* AccountInfo::release_strappid() {
  clear_has_strappid();
  if (strappid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strappid_;
    strappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strappid(::std::string* strappid) {
  if (strappid_ != &::google::protobuf::internal::kEmptyString) {
    delete strappid_;
  }
  if (strappid) {
    set_has_strappid();
    strappid_ = strappid;
  } else {
    clear_has_strappid();
    strappid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iWorldID = 9;
inline bool AccountInfo::has_iworldid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AccountInfo::set_has_iworldid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AccountInfo::clear_has_iworldid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AccountInfo::clear_iworldid() {
  iworldid_ = 0;
  clear_has_iworldid();
}
inline ::google::protobuf::int32 AccountInfo::iworldid() const {
  return iworldid_;
}
inline void AccountInfo::set_iworldid(::google::protobuf::int32 value) {
  set_has_iworldid();
  iworldid_ = value;
}

// optional string strPlatformID = 10;
inline bool AccountInfo::has_strplatformid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AccountInfo::set_has_strplatformid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AccountInfo::clear_has_strplatformid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AccountInfo::clear_strplatformid() {
  if (strplatformid_ != &::google::protobuf::internal::kEmptyString) {
    strplatformid_->clear();
  }
  clear_has_strplatformid();
}
inline const ::std::string& AccountInfo::strplatformid() const {
  return *strplatformid_;
}
inline void AccountInfo::set_strplatformid(const ::std::string& value) {
  set_has_strplatformid();
  if (strplatformid_ == &::google::protobuf::internal::kEmptyString) {
    strplatformid_ = new ::std::string;
  }
  strplatformid_->assign(value);
}
inline void AccountInfo::set_strplatformid(const char* value) {
  set_has_strplatformid();
  if (strplatformid_ == &::google::protobuf::internal::kEmptyString) {
    strplatformid_ = new ::std::string;
  }
  strplatformid_->assign(value);
}
inline void AccountInfo::set_strplatformid(const char* value, size_t size) {
  set_has_strplatformid();
  if (strplatformid_ == &::google::protobuf::internal::kEmptyString) {
    strplatformid_ = new ::std::string;
  }
  strplatformid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strplatformid() {
  set_has_strplatformid();
  if (strplatformid_ == &::google::protobuf::internal::kEmptyString) {
    strplatformid_ = new ::std::string;
  }
  return strplatformid_;
}
inline ::std::string* AccountInfo::release_strplatformid() {
  clear_has_strplatformid();
  if (strplatformid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strplatformid_;
    strplatformid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strplatformid(::std::string* strplatformid) {
  if (strplatformid_ != &::google::protobuf::internal::kEmptyString) {
    delete strplatformid_;
  }
  if (strplatformid) {
    set_has_strplatformid();
    strplatformid_ = strplatformid;
  } else {
    clear_has_strplatformid();
    strplatformid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 iRealNameStat = 11;
inline bool AccountInfo::has_irealnamestat() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AccountInfo::set_has_irealnamestat() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AccountInfo::clear_has_irealnamestat() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AccountInfo::clear_irealnamestat() {
  irealnamestat_ = 0;
  clear_has_irealnamestat();
}
inline ::google::protobuf::int32 AccountInfo::irealnamestat() const {
  return irealnamestat_;
}
inline void AccountInfo::set_irealnamestat(::google::protobuf::int32 value) {
  set_has_irealnamestat();
  irealnamestat_ = value;
}

// optional string strPicID = 12;
inline bool AccountInfo::has_strpicid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void AccountInfo::set_has_strpicid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void AccountInfo::clear_has_strpicid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void AccountInfo::clear_strpicid() {
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    strpicid_->clear();
  }
  clear_has_strpicid();
}
inline const ::std::string& AccountInfo::strpicid() const {
  return *strpicid_;
}
inline void AccountInfo::set_strpicid(const ::std::string& value) {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  strpicid_->assign(value);
}
inline void AccountInfo::set_strpicid(const char* value) {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  strpicid_->assign(value);
}
inline void AccountInfo::set_strpicid(const char* value, size_t size) {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  strpicid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AccountInfo::mutable_strpicid() {
  set_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    strpicid_ = new ::std::string;
  }
  return strpicid_;
}
inline ::std::string* AccountInfo::release_strpicid() {
  clear_has_strpicid();
  if (strpicid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strpicid_;
    strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void AccountInfo::set_allocated_strpicid(::std::string* strpicid) {
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    delete strpicid_;
  }
  if (strpicid) {
    set_has_strpicid();
    strpicid_ = strpicid;
  } else {
    clear_has_strpicid();
    strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RegAuth_RegAccount_Request

// optional .AccountInfo stInfo = 1;
inline bool RegAuth_RegAccount_Request::has_stinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_RegAccount_Request::set_has_stinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_RegAccount_Request::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_RegAccount_Request::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuth_RegAccount_Request::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuth_RegAccount_Request::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuth_RegAccount_Request::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuth_RegAccount_Request::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// -------------------------------------------------------------------

// RegAuth_RegAccount_Response

// optional int32 iResult = 1;
inline bool RegAuth_RegAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_RegAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_RegAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_RegAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuth_RegAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuth_RegAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// -------------------------------------------------------------------

// RegAuth_AuthAccount_Request

// optional .AccountInfo stInfo = 1;
inline bool RegAuth_AuthAccount_Request::has_stinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_AuthAccount_Request::set_has_stinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_AuthAccount_Request::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_AuthAccount_Request::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuth_AuthAccount_Request::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuth_AuthAccount_Request::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuth_AuthAccount_Request::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuth_AuthAccount_Request::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// -------------------------------------------------------------------

// RegAuth_AuthAccount_Response

// optional int32 iResult = 1;
inline bool RegAuth_AuthAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_AuthAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_AuthAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuth_AuthAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuth_AuthAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional uint32 uin = 2;
inline bool RegAuth_AuthAccount_Response::has_uin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_uin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuth_AuthAccount_Response::clear_has_uin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuth_AuthAccount_Response::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 RegAuth_AuthAccount_Response::uin() const {
  return uin_;
}
inline void RegAuth_AuthAccount_Response::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 iWorldID = 3;
inline bool RegAuth_AuthAccount_Response::has_iworldid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_iworldid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegAuth_AuthAccount_Response::clear_has_iworldid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegAuth_AuthAccount_Response::clear_iworldid() {
  iworldid_ = 0;
  clear_has_iworldid();
}
inline ::google::protobuf::int32 RegAuth_AuthAccount_Response::iworldid() const {
  return iworldid_;
}
inline void RegAuth_AuthAccount_Response::set_iworldid(::google::protobuf::int32 value) {
  set_has_iworldid();
  iworldid_ = value;
}

// optional string strHostInfo = 4;
inline bool RegAuth_AuthAccount_Response::has_strhostinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_strhostinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegAuth_AuthAccount_Response::clear_has_strhostinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegAuth_AuthAccount_Response::clear_strhostinfo() {
  if (strhostinfo_ != &::google::protobuf::internal::kEmptyString) {
    strhostinfo_->clear();
  }
  clear_has_strhostinfo();
}
inline const ::std::string& RegAuth_AuthAccount_Response::strhostinfo() const {
  return *strhostinfo_;
}
inline void RegAuth_AuthAccount_Response::set_strhostinfo(const ::std::string& value) {
  set_has_strhostinfo();
  if (strhostinfo_ == &::google::protobuf::internal::kEmptyString) {
    strhostinfo_ = new ::std::string;
  }
  strhostinfo_->assign(value);
}
inline void RegAuth_AuthAccount_Response::set_strhostinfo(const char* value) {
  set_has_strhostinfo();
  if (strhostinfo_ == &::google::protobuf::internal::kEmptyString) {
    strhostinfo_ = new ::std::string;
  }
  strhostinfo_->assign(value);
}
inline void RegAuth_AuthAccount_Response::set_strhostinfo(const char* value, size_t size) {
  set_has_strhostinfo();
  if (strhostinfo_ == &::google::protobuf::internal::kEmptyString) {
    strhostinfo_ = new ::std::string;
  }
  strhostinfo_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegAuth_AuthAccount_Response::mutable_strhostinfo() {
  set_has_strhostinfo();
  if (strhostinfo_ == &::google::protobuf::internal::kEmptyString) {
    strhostinfo_ = new ::std::string;
  }
  return strhostinfo_;
}
inline ::std::string* RegAuth_AuthAccount_Response::release_strhostinfo() {
  clear_has_strhostinfo();
  if (strhostinfo_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strhostinfo_;
    strhostinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegAuth_AuthAccount_Response::set_allocated_strhostinfo(::std::string* strhostinfo) {
  if (strhostinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strhostinfo_;
  }
  if (strhostinfo) {
    set_has_strhostinfo();
    strhostinfo_ = strhostinfo;
  } else {
    clear_has_strhostinfo();
    strhostinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string strSessionKey = 5;
inline bool RegAuth_AuthAccount_Response::has_strsessionkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_strsessionkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RegAuth_AuthAccount_Response::clear_has_strsessionkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RegAuth_AuthAccount_Response::clear_strsessionkey() {
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    strsessionkey_->clear();
  }
  clear_has_strsessionkey();
}
inline const ::std::string& RegAuth_AuthAccount_Response::strsessionkey() const {
  return *strsessionkey_;
}
inline void RegAuth_AuthAccount_Response::set_strsessionkey(const ::std::string& value) {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  strsessionkey_->assign(value);
}
inline void RegAuth_AuthAccount_Response::set_strsessionkey(const char* value) {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  strsessionkey_->assign(value);
}
inline void RegAuth_AuthAccount_Response::set_strsessionkey(const char* value, size_t size) {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  strsessionkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RegAuth_AuthAccount_Response::mutable_strsessionkey() {
  set_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    strsessionkey_ = new ::std::string;
  }
  return strsessionkey_;
}
inline ::std::string* RegAuth_AuthAccount_Response::release_strsessionkey() {
  clear_has_strsessionkey();
  if (strsessionkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = strsessionkey_;
    strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RegAuth_AuthAccount_Response::set_allocated_strsessionkey(::std::string* strsessionkey) {
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsessionkey_;
  }
  if (strsessionkey) {
    set_has_strsessionkey();
    strsessionkey_ = strsessionkey;
  } else {
    clear_has_strsessionkey();
    strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .AccountInfo stInfo = 6;
inline bool RegAuth_AuthAccount_Response::has_stinfo() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_stinfo() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RegAuth_AuthAccount_Response::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RegAuth_AuthAccount_Response::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuth_AuthAccount_Response::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuth_AuthAccount_Response::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuth_AuthAccount_Response::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuth_AuthAccount_Response::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// optional bool bIsRegister = 7;
inline bool RegAuth_AuthAccount_Response::has_bisregister() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RegAuth_AuthAccount_Response::set_has_bisregister() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RegAuth_AuthAccount_Response::clear_has_bisregister() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RegAuth_AuthAccount_Response::clear_bisregister() {
  bisregister_ = false;
  clear_has_bisregister();
}
inline bool RegAuth_AuthAccount_Response::bisregister() const {
  return bisregister_;
}
inline void RegAuth_AuthAccount_Response::set_bisregister(bool value) {
  set_has_bisregister();
  bisregister_ = value;
}

// -------------------------------------------------------------------

// RegAuth_PlatformAuth_Request

// optional .AccountInfo stInfo = 1;
inline bool RegAuth_PlatformAuth_Request::has_stinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_PlatformAuth_Request::set_has_stinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_PlatformAuth_Request::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_PlatformAuth_Request::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuth_PlatformAuth_Request::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuth_PlatformAuth_Request::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuth_PlatformAuth_Request::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuth_PlatformAuth_Request::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// -------------------------------------------------------------------

// RegAuth_PlatformAuth_Response

// optional int32 iResult = 1;
inline bool RegAuth_PlatformAuth_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuth_PlatformAuth_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuth_PlatformAuth_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuth_PlatformAuth_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuth_PlatformAuth_Response::iresult() const {
  return iresult_;
}
inline void RegAuth_PlatformAuth_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional .AccountInfo stInfo = 2;
inline bool RegAuth_PlatformAuth_Response::has_stinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuth_PlatformAuth_Response::set_has_stinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuth_PlatformAuth_Response::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuth_PlatformAuth_Response::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuth_PlatformAuth_Response::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuth_PlatformAuth_Response::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuth_PlatformAuth_Response::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuth_PlatformAuth_Response::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// -------------------------------------------------------------------

// RegAuthDB_AddAccount_Request

// optional .AccountInfo stInfo = 1;
inline bool RegAuthDB_AddAccount_Request::has_stinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuthDB_AddAccount_Request::set_has_stinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuthDB_AddAccount_Request::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuthDB_AddAccount_Request::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuthDB_AddAccount_Request::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuthDB_AddAccount_Request::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuthDB_AddAccount_Request::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuthDB_AddAccount_Request::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// optional int32 iWorldID = 3;
inline bool RegAuthDB_AddAccount_Request::has_iworldid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuthDB_AddAccount_Request::set_has_iworldid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuthDB_AddAccount_Request::clear_has_iworldid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuthDB_AddAccount_Request::clear_iworldid() {
  iworldid_ = 0;
  clear_has_iworldid();
}
inline ::google::protobuf::int32 RegAuthDB_AddAccount_Request::iworldid() const {
  return iworldid_;
}
inline void RegAuthDB_AddAccount_Request::set_iworldid(::google::protobuf::int32 value) {
  set_has_iworldid();
  iworldid_ = value;
}

// -------------------------------------------------------------------

// RegAuthDB_AddAccount_Response

// optional int32 iResult = 1;
inline bool RegAuthDB_AddAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuthDB_AddAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuthDB_AddAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuthDB_AddAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuthDB_AddAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuthDB_AddAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// -------------------------------------------------------------------

// RegAuthDB_GetAccount_Request

// optional .AccountInfo stInfo = 1;
inline bool RegAuthDB_GetAccount_Request::has_stinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuthDB_GetAccount_Request::set_has_stinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuthDB_GetAccount_Request::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuthDB_GetAccount_Request::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuthDB_GetAccount_Request::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuthDB_GetAccount_Request::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuthDB_GetAccount_Request::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuthDB_GetAccount_Request::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// -------------------------------------------------------------------

// RegAuthDB_GetAccount_Response

// optional int32 iResult = 1;
inline bool RegAuthDB_GetAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuthDB_GetAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuthDB_GetAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuthDB_GetAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuthDB_GetAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuthDB_GetAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}

// optional .AccountInfo stInfo = 2;
inline bool RegAuthDB_GetAccount_Response::has_stinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RegAuthDB_GetAccount_Response::set_has_stinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RegAuthDB_GetAccount_Response::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RegAuthDB_GetAccount_Response::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuthDB_GetAccount_Response::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuthDB_GetAccount_Response::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuthDB_GetAccount_Response::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuthDB_GetAccount_Response::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// optional uint32 uin = 3;
inline bool RegAuthDB_GetAccount_Response::has_uin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RegAuthDB_GetAccount_Response::set_has_uin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RegAuthDB_GetAccount_Response::clear_has_uin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RegAuthDB_GetAccount_Response::clear_uin() {
  uin_ = 0u;
  clear_has_uin();
}
inline ::google::protobuf::uint32 RegAuthDB_GetAccount_Response::uin() const {
  return uin_;
}
inline void RegAuthDB_GetAccount_Response::set_uin(::google::protobuf::uint32 value) {
  set_has_uin();
  uin_ = value;
}

// optional int32 iWorldID = 4;
inline bool RegAuthDB_GetAccount_Response::has_iworldid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RegAuthDB_GetAccount_Response::set_has_iworldid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RegAuthDB_GetAccount_Response::clear_has_iworldid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RegAuthDB_GetAccount_Response::clear_iworldid() {
  iworldid_ = 0;
  clear_has_iworldid();
}
inline ::google::protobuf::int32 RegAuthDB_GetAccount_Response::iworldid() const {
  return iworldid_;
}
inline void RegAuthDB_GetAccount_Response::set_iworldid(::google::protobuf::int32 value) {
  set_has_iworldid();
  iworldid_ = value;
}

// -------------------------------------------------------------------

// RegAuthDB_DelAccount_Request

// optional .AccountInfo stInfo = 2;
inline bool RegAuthDB_DelAccount_Request::has_stinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuthDB_DelAccount_Request::set_has_stinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuthDB_DelAccount_Request::clear_has_stinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuthDB_DelAccount_Request::clear_stinfo() {
  if (stinfo_ != NULL) stinfo_->::AccountInfo::Clear();
  clear_has_stinfo();
}
inline const ::AccountInfo& RegAuthDB_DelAccount_Request::stinfo() const {
  return stinfo_ != NULL ? *stinfo_ : *default_instance_->stinfo_;
}
inline ::AccountInfo* RegAuthDB_DelAccount_Request::mutable_stinfo() {
  set_has_stinfo();
  if (stinfo_ == NULL) stinfo_ = new ::AccountInfo;
  return stinfo_;
}
inline ::AccountInfo* RegAuthDB_DelAccount_Request::release_stinfo() {
  clear_has_stinfo();
  ::AccountInfo* temp = stinfo_;
  stinfo_ = NULL;
  return temp;
}
inline void RegAuthDB_DelAccount_Request::set_allocated_stinfo(::AccountInfo* stinfo) {
  delete stinfo_;
  stinfo_ = stinfo;
  if (stinfo) {
    set_has_stinfo();
  } else {
    clear_has_stinfo();
  }
}

// -------------------------------------------------------------------

// RegAuthDB_DelAccount_Response

// optional int32 iResult = 1;
inline bool RegAuthDB_DelAccount_Response::has_iresult() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RegAuthDB_DelAccount_Response::set_has_iresult() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RegAuthDB_DelAccount_Response::clear_has_iresult() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RegAuthDB_DelAccount_Response::clear_iresult() {
  iresult_ = 0;
  clear_has_iresult();
}
inline ::google::protobuf::int32 RegAuthDB_DelAccount_Response::iresult() const {
  return iresult_;
}
inline void RegAuthDB_DelAccount_Response::set_iresult(::google::protobuf::int32 value) {
  set_has_iresult();
  iresult_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::enPlatformType>() {
  return ::enPlatformType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RealStatType>() {
  return ::RealStatType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GameProtocol_5fRegAuth_2eproto__INCLUDED
