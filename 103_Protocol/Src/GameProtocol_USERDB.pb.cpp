// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_USERDB.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol_USERDB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameUserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameUserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeaponInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeaponInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpLineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpLineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BASEDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BASEDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* QUESTDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QUESTDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemSlotInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemSlotInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ITEMDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ITEMDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* FRIENDDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FRIENDDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MailAppendix_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MailAppendix_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneMailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneMailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MAILDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MAILDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* PAYOFFLINEDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PAYOFFLINEDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddResInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddResInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RESOFFLINEDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RESOFFLINEDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* MAILOFFLINEDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MAILOFFLINEDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RESERVED1DBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RESERVED1DBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExchangeUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExchangeUser_reflection_ = NULL;
const ::google::protobuf::Descriptor* EXCHANGEDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EXCHANGEDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RechargeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RechargeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RECHARGEDBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RECHARGEDBINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* RESERVED2DBINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RESERVED2DBINFO_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* FirstRewardType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_5fUSERDB_2eproto() {
  protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol_USERDB.proto");
  GOOGLE_CHECK(file != NULL);
  GameUserInfo_descriptor_ = file->message_type(0);
  static const int GameUserInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, uiseq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strbaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strquestinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, striteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strfriendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strmailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strreserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, strreserved2_),
  };
  GameUserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameUserInfo_descriptor_,
      GameUserInfo::default_instance_,
      GameUserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameUserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameUserInfo));
  WeaponInfo_descriptor_ = file->message_type(1);
  static const int WeaponInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, iweaponid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, iweaponstyleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, iunlockstyleids_),
  };
  WeaponInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeaponInfo_descriptor_,
      WeaponInfo::default_instance_,
      WeaponInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeaponInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeaponInfo));
  ExpLineInfo_descriptor_ = file->message_type(2);
  static const int ExpLineInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpLineInfo, iexplineid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpLineInfo, iexplinetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpLineInfo, luserwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpLineInfo, ibulletnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpLineInfo, lusercostnum_),
  };
  ExpLineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpLineInfo_descriptor_,
      ExpLineInfo::default_instance_,
      ExpLineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpLineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpLineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpLineInfo));
  BASEDBINFO_descriptor_ = file->message_type(3);
  static const int BASEDBINFO_offsets_[39] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, sznickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, iresources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ustatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastlogout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, icreatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ionlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilogincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilogouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, stweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilotterynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, stexplines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastscoreupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, idayscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, iweekscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, iviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, lvipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ivippriv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, inextalmstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ialmsnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastalmsupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, irechargelotteryids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilogindays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, igetloginreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, iremainnewrednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, inownewrednum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, imonthendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastgetmonthtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, strchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, strpicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, bupdaterank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, bgetvipcoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, idayonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ilastonlineupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, ufinguideindexes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, bnamechanged_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, luserwinnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, strsign_),
  };
  BASEDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BASEDBINFO_descriptor_,
      BASEDBINFO::default_instance_,
      BASEDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BASEDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BASEDBINFO));
  OneQuest_descriptor_ = file->message_type(4);
  static const int OneQuest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneQuest, iquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneQuest, iquesttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneQuest, ineedtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneQuest, inum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneQuest, bisfin_),
  };
  OneQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneQuest_descriptor_,
      OneQuest::default_instance_,
      OneQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneQuest));
  QUESTDBINFO_descriptor_ = file->message_type(5);
  static const int QUESTDBINFO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, stquestinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, iadventureendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, iadventurenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, idailynextupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, iadventnextupdatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, iadventusercost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, iadventshootnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, igetliverewardids_),
  };
  QUESTDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QUESTDBINFO_descriptor_,
      QUESTDBINFO::default_instance_,
      QUESTDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QUESTDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QUESTDBINFO));
  OneSlotInfo_descriptor_ = file->message_type(6);
  static const int OneSlotInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, iitemnum_),
  };
  OneSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneSlotInfo_descriptor_,
      OneSlotInfo::default_instance_,
      OneSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneSlotInfo));
  ItemSlotInfo_descriptor_ = file->message_type(7);
  static const int ItemSlotInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSlotInfo, stslots_),
  };
  ItemSlotInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemSlotInfo_descriptor_,
      ItemSlotInfo::default_instance_,
      ItemSlotInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSlotInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemSlotInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemSlotInfo));
  ITEMDBINFO_descriptor_ = file->message_type(8);
  static const int ITEMDBINFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITEMDBINFO, stitemslot_),
  };
  ITEMDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ITEMDBINFO_descriptor_,
      ITEMDBINFO::default_instance_,
      ITEMDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITEMDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ITEMDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ITEMDBINFO));
  FRIENDDBINFO_descriptor_ = file->message_type(9);
  static const int FRIENDDBINFO_offsets_[1] = {
  };
  FRIENDDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FRIENDDBINFO_descriptor_,
      FRIENDDBINFO::default_instance_,
      FRIENDDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRIENDDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FRIENDDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FRIENDDBINFO));
  MailAppendix_descriptor_ = file->message_type(10);
  static const int MailAppendix_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAppendix, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAppendix, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAppendix, inum_),
  };
  MailAppendix_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MailAppendix_descriptor_,
      MailAppendix::default_instance_,
      MailAppendix_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAppendix, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MailAppendix, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MailAppendix));
  OneMailInfo_descriptor_ = file->message_type(11);
  static const int OneMailInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, uuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, imailid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, isendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, imailstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, strtitle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, strparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, stappendixs_),
  };
  OneMailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneMailInfo_descriptor_,
      OneMailInfo::default_instance_,
      OneMailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneMailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneMailInfo));
  MAILDBINFO_descriptor_ = file->message_type(12);
  static const int MAILDBINFO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILDBINFO, usystemmaxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILDBINFO, upersonalmaxid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILDBINFO, stmails_),
  };
  MAILDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MAILDBINFO_descriptor_,
      MAILDBINFO::default_instance_,
      MAILDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MAILDBINFO));
  PAYOFFLINEDBINFO_descriptor_ = file->message_type(13);
  static const int PAYOFFLINEDBINFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAYOFFLINEDBINFO, strecords_),
  };
  PAYOFFLINEDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PAYOFFLINEDBINFO_descriptor_,
      PAYOFFLINEDBINFO::default_instance_,
      PAYOFFLINEDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAYOFFLINEDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PAYOFFLINEDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PAYOFFLINEDBINFO));
  AddResInfo_descriptor_ = file->message_type(14);
  static const int AddResInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResInfo, irestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResInfo, iaddnum_),
  };
  AddResInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddResInfo_descriptor_,
      AddResInfo::default_instance_,
      AddResInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddResInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddResInfo));
  RESOFFLINEDBINFO_descriptor_ = file->message_type(15);
  static const int RESOFFLINEDBINFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESOFFLINEDBINFO, staddres_),
  };
  RESOFFLINEDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RESOFFLINEDBINFO_descriptor_,
      RESOFFLINEDBINFO::default_instance_,
      RESOFFLINEDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESOFFLINEDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESOFFLINEDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RESOFFLINEDBINFO));
  MAILOFFLINEDBINFO_descriptor_ = file->message_type(16);
  static const int MAILOFFLINEDBINFO_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILOFFLINEDBINFO, stmails_),
  };
  MAILOFFLINEDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MAILOFFLINEDBINFO_descriptor_,
      MAILOFFLINEDBINFO::default_instance_,
      MAILOFFLINEDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILOFFLINEDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MAILOFFLINEDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MAILOFFLINEDBINFO));
  RESERVED1DBINFO_descriptor_ = file->message_type(17);
  static const int RESERVED1DBINFO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, stpayinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, stresinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, stiteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, stmailinfo_),
  };
  RESERVED1DBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RESERVED1DBINFO_descriptor_,
      RESERVED1DBINFO::default_instance_,
      RESERVED1DBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED1DBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RESERVED1DBINFO));
  ExchangeOrder_descriptor_ = file->message_type(18);
  static const int ExchangeOrder_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, iexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, strorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, strphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, iexchangetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, istat_),
  };
  ExchangeOrder_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeOrder_descriptor_,
      ExchangeOrder::default_instance_,
      ExchangeOrder_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeOrder, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeOrder));
  ExchangeUser_descriptor_ = file->message_type(19);
  static const int ExchangeUser_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, strname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, strphone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, strmailnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, straddress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, strremarks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, strqqnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, ilastsettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, uilimitinfo_),
  };
  ExchangeUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExchangeUser_descriptor_,
      ExchangeUser::default_instance_,
      ExchangeUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExchangeUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExchangeUser));
  EXCHANGEDBINFO_descriptor_ = file->message_type(20);
  static const int EXCHANGEDBINFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EXCHANGEDBINFO, stuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EXCHANGEDBINFO, storders_),
  };
  EXCHANGEDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EXCHANGEDBINFO_descriptor_,
      EXCHANGEDBINFO::default_instance_,
      EXCHANGEDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EXCHANGEDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EXCHANGEDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EXCHANGEDBINFO));
  RechargeRecord_descriptor_ = file->message_type(21);
  static const int RechargeRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRecord, itime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRecord, irechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRecord, strorderid_),
  };
  RechargeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RechargeRecord_descriptor_,
      RechargeRecord::default_instance_,
      RechargeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RechargeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RechargeRecord));
  RECHARGEDBINFO_descriptor_ = file->message_type(22);
  static const int RECHARGEDBINFO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECHARGEDBINFO, ifirstrewardstat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECHARGEDBINFO, strecords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECHARGEDBINFO, irechargeids_),
  };
  RECHARGEDBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RECHARGEDBINFO_descriptor_,
      RECHARGEDBINFO::default_instance_,
      RECHARGEDBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECHARGEDBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RECHARGEDBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RECHARGEDBINFO));
  RESERVED2DBINFO_descriptor_ = file->message_type(23);
  static const int RESERVED2DBINFO_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED2DBINFO, stexchangeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED2DBINFO, strechargeinfo_),
  };
  RESERVED2DBINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RESERVED2DBINFO_descriptor_,
      RESERVED2DBINFO::default_instance_,
      RESERVED2DBINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED2DBINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RESERVED2DBINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RESERVED2DBINFO));
  FirstRewardType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_5fUSERDB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameUserInfo_descriptor_, &GameUserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeaponInfo_descriptor_, &WeaponInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpLineInfo_descriptor_, &ExpLineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BASEDBINFO_descriptor_, &BASEDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneQuest_descriptor_, &OneQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QUESTDBINFO_descriptor_, &QUESTDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneSlotInfo_descriptor_, &OneSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemSlotInfo_descriptor_, &ItemSlotInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ITEMDBINFO_descriptor_, &ITEMDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FRIENDDBINFO_descriptor_, &FRIENDDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MailAppendix_descriptor_, &MailAppendix::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneMailInfo_descriptor_, &OneMailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MAILDBINFO_descriptor_, &MAILDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PAYOFFLINEDBINFO_descriptor_, &PAYOFFLINEDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddResInfo_descriptor_, &AddResInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RESOFFLINEDBINFO_descriptor_, &RESOFFLINEDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MAILOFFLINEDBINFO_descriptor_, &MAILOFFLINEDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RESERVED1DBINFO_descriptor_, &RESERVED1DBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeOrder_descriptor_, &ExchangeOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExchangeUser_descriptor_, &ExchangeUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EXCHANGEDBINFO_descriptor_, &EXCHANGEDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RechargeRecord_descriptor_, &RechargeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RECHARGEDBINFO_descriptor_, &RECHARGEDBINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RESERVED2DBINFO_descriptor_, &RESERVED2DBINFO::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_5fUSERDB_2eproto() {
  delete GameUserInfo::default_instance_;
  delete GameUserInfo_reflection_;
  delete WeaponInfo::default_instance_;
  delete WeaponInfo_reflection_;
  delete ExpLineInfo::default_instance_;
  delete ExpLineInfo_reflection_;
  delete BASEDBINFO::default_instance_;
  delete BASEDBINFO_reflection_;
  delete OneQuest::default_instance_;
  delete OneQuest_reflection_;
  delete QUESTDBINFO::default_instance_;
  delete QUESTDBINFO_reflection_;
  delete OneSlotInfo::default_instance_;
  delete OneSlotInfo_reflection_;
  delete ItemSlotInfo::default_instance_;
  delete ItemSlotInfo_reflection_;
  delete ITEMDBINFO::default_instance_;
  delete ITEMDBINFO_reflection_;
  delete FRIENDDBINFO::default_instance_;
  delete FRIENDDBINFO_reflection_;
  delete MailAppendix::default_instance_;
  delete MailAppendix_reflection_;
  delete OneMailInfo::default_instance_;
  delete OneMailInfo_reflection_;
  delete MAILDBINFO::default_instance_;
  delete MAILDBINFO_reflection_;
  delete PAYOFFLINEDBINFO::default_instance_;
  delete PAYOFFLINEDBINFO_reflection_;
  delete AddResInfo::default_instance_;
  delete AddResInfo_reflection_;
  delete RESOFFLINEDBINFO::default_instance_;
  delete RESOFFLINEDBINFO_reflection_;
  delete MAILOFFLINEDBINFO::default_instance_;
  delete MAILOFFLINEDBINFO_reflection_;
  delete RESERVED1DBINFO::default_instance_;
  delete RESERVED1DBINFO_reflection_;
  delete ExchangeOrder::default_instance_;
  delete ExchangeOrder_reflection_;
  delete ExchangeUser::default_instance_;
  delete ExchangeUser_reflection_;
  delete EXCHANGEDBINFO::default_instance_;
  delete EXCHANGEDBINFO_reflection_;
  delete RechargeRecord::default_instance_;
  delete RechargeRecord_reflection_;
  delete RECHARGEDBINFO::default_instance_;
  delete RECHARGEDBINFO_reflection_;
  delete RESERVED2DBINFO::default_instance_;
  delete RESERVED2DBINFO_reflection_;
}

void protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031GameProtocol_USERDB.proto\032\031GameProtoco"
    "l_Common.proto\"\302\001\n\014GameUserInfo\022\013\n\003uin\030\001"
    " \001(\r\022\r\n\005uiSeq\030\002 \001(\r\022\023\n\013strBaseInfo\030\003 \001(\014"
    "\022\024\n\014strQuestInfo\030\004 \001(\014\022\023\n\013strItemInfo\030\005 "
    "\001(\014\022\025\n\rstrFriendInfo\030\006 \001(\014\022\023\n\013strMailInf"
    "o\030\007 \001(\014\022\024\n\014strReserved1\030\010 \001(\014\022\024\n\014strRese"
    "rved2\030\t \001(\014\"P\n\nWeaponInfo\022\021\n\tiWeaponID\030\001"
    " \001(\005\022\026\n\016iWeaponStyleID\030\002 \001(\005\022\027\n\017iUnlockS"
    "tyleIDs\030\003 \003(\005\"v\n\013ExpLineInfo\022\022\n\niExpLine"
    "ID\030\001 \001(\005\022\024\n\014iExpLineType\030\002 \001(\005\022\023\n\013lUserW"
    "inNum\030\003 \001(\003\022\022\n\niBulletNum\030\004 \001(\005\022\024\n\014lUser"
    "CostNum\030\005 \001(\003\"\360\006\n\nBASEDBINFO\022\022\n\nszNickNa"
    "me\030\001 \001(\014\022\022\n\niResources\030\002 \003(\003\022\017\n\007uStatus\030"
    "\003 \001(\r\022\022\n\niLastLogin\030\004 \001(\005\022\023\n\013iLastLogout"
    "\030\005 \001(\005\022\023\n\013iCreateTime\030\006 \001(\005\022\023\n\013iOnlineTi"
    "me\030\007 \001(\005\022\023\n\013iLoginCount\030\010 \001(\005\022\022\n\niLoginT"
    "ime\030\t \001(\005\022\023\n\013iLogoutTime\030\n \001(\005\022\035\n\010stWeap"
    "on\030\013 \001(\0132\013.WeaponInfo\022\023\n\013iLotteryNum\030\r \001"
    "(\005\022 \n\nstExpLines\030\016 \003(\0132\014.ExpLineInfo\022\030\n\020"
    "iLastScoreUpdate\030\017 \001(\005\022\021\n\tiDayScore\030\020 \001("
    "\003\022\022\n\niWeekScore\030\021 \001(\003\022\021\n\tiVIPLevel\030\022 \001(\005"
    "\022\017\n\007lVIPExp\030\023 \001(\003\022\020\n\010iVIPPriv\030\024 \001(\005\022\025\n\ri"
    "NextAlmsTime\030\025 \001(\005\022\020\n\010iAlmsNum\030\026 \001(\005\022\033\n\023"
    "iLastAlmsUpdateTime\030\027 \001(\005\022\033\n\023iRechargeLo"
    "tteryIDs\030\030 \003(\005\022\022\n\niLoginDays\030\031 \001(\005\022\027\n\017iG"
    "etLoginReward\030\032 \001(\005\022\030\n\020iRemainNewRedNum\030"
    "\033 \001(\005\022\025\n\riNowNewRedNum\030\034 \001(\005\022\025\n\riMonthEn"
    "dTime\030\035 \001(\005\022\031\n\021iLastGetMonthTime\030\036 \001(\005\022\022"
    "\n\nstrChannel\030\037 \001(\t\022\020\n\010strPicID\030  \001(\t\022\023\n\013"
    "bUpdateRank\030! \001(\010\022\024\n\014bGetVIPCoins\030\" \001(\010\022"
    "\026\n\016iDayOnlineTime\030# \001(\005\022\031\n\021iLastOnlineUp"
    "date\030$ \001(\005\022\030\n\020uFinGuideIndexes\030% \001(\r\022\024\n\014"
    "bNameChanged\030& \001(\010\022\023\n\013lUserWinNum\030\' \001(\003\022"
    "\017\n\007strSign\030( \001(\t\"a\n\010OneQuest\022\020\n\010iQuestID"
    "\030\001 \001(\005\022\022\n\niQuestType\030\002 \001(\005\022\021\n\tiNeedType\030"
    "\003 \001(\005\022\014\n\004iNum\030\004 \001(\003\022\016\n\006bIsFin\030\005 \001(\010\"\352\001\n\013"
    "QUESTDBINFO\022\037\n\014stQuestInfos\030\001 \003(\0132\t.OneQ"
    "uest\022\031\n\021iAdventureEndTime\030\002 \001(\005\022\025\n\riAdve"
    "ntureNum\030\003 \001(\005\022\034\n\024iDailyNextUpdateTime\030\004"
    " \001(\005\022\035\n\025iAdventNextUpdateTime\030\005 \001(\005\022\027\n\017i"
    "AdventUserCost\030\006 \001(\005\022\027\n\017iAdventShootNum\030"
    "\007 \001(\005\022\031\n\021iGetLiveRewardIDs\030\010 \003(\005\"0\n\013OneS"
    "lotInfo\022\017\n\007iItemID\030\001 \001(\005\022\020\n\010iItemNum\030\002 \001"
    "(\005\"-\n\014ItemSlotInfo\022\035\n\007stSlots\030\001 \003(\0132\014.On"
    "eSlotInfo\"/\n\nITEMDBINFO\022!\n\nstItemSlot\030\001 "
    "\001(\0132\r.ItemSlotInfo\"\016\n\014FRIENDDBINFO\"8\n\014Ma"
    "ilAppendix\022\r\n\005iType\030\001 \001(\005\022\013\n\003iID\030\002 \001(\005\022\014"
    "\n\004iNum\030\003 \001(\005\"\236\001\n\013OneMailInfo\022\017\n\007uUniqID\030"
    "\001 \001(\r\022\017\n\007iMailID\030\002 \001(\005\022\021\n\tiSendTime\030\003 \001("
    "\005\022\021\n\tiMailStat\030\004 \001(\005\022\020\n\010strTitle\030\005 \001(\014\022\021"
    "\n\tstrParams\030\006 \003(\014\022\"\n\013stAppendixs\030\007 \003(\0132\r"
    ".MailAppendix\"Y\n\nMAILDBINFO\022\024\n\014uSystemMa"
    "xID\030\001 \001(\r\022\026\n\016uPersonalMaxID\030\002 \001(\r\022\035\n\007stM"
    "ails\030\003 \003(\0132\014.OneMailInfo\"6\n\020PAYOFFLINEDB"
    "INFO\022\"\n\tstRecords\030\001 \003(\0132\017.RechargeRecord"
    "\"/\n\nAddResInfo\022\020\n\010iResType\030\001 \001(\005\022\017\n\007iAdd"
    "Num\030\002 \001(\005\"1\n\020RESOFFLINEDBINFO\022\035\n\010stAddRe"
    "s\030\001 \003(\0132\013.AddResInfo\"2\n\021MAILOFFLINEDBINF"
    "O\022\035\n\007stMails\030\001 \003(\0132\014.OneMailInfo\"\250\001\n\017RES"
    "ERVED1DBINFO\022$\n\tstPayInfo\030\001 \001(\0132\021.PAYOFF"
    "LINEDBINFO\022$\n\tstResInfo\030\002 \001(\0132\021.RESOFFLI"
    "NEDBINFO\022!\n\nstItemInfo\030\003 \001(\0132\r.ItemSlotI"
    "nfo\022&\n\nstMailInfo\030\004 \001(\0132\022.MAILOFFLINEDBI"
    "NFO\"p\n\rExchangeOrder\022\023\n\013iExchangeID\030\001 \001("
    "\005\022\022\n\nstrOrderID\030\002 \001(\t\022\020\n\010strPhone\030\003 \001(\t\022"
    "\025\n\riExchangeTime\030\004 \001(\005\022\r\n\005iStat\030\005 \001(\005\"\252\001"
    "\n\014ExchangeUser\022\017\n\007strName\030\001 \001(\t\022\020\n\010strPh"
    "one\030\002 \001(\t\022\022\n\nstrMailNum\030\003 \001(\t\022\022\n\nstrAddr"
    "ess\030\004 \001(\t\022\022\n\nstrRemarks\030\005 \001(\t\022\020\n\010strQQNu"
    "m\030\006 \001(\t\022\024\n\014iLastSetTime\030\007 \001(\005\022\023\n\013uiLimit"
    "Info\030\010 \003(\r\"U\n\016EXCHANGEDBINFO\022!\n\nstUserIn"
    "fo\030\001 \001(\0132\r.ExchangeUser\022 \n\010stOrders\030\006 \003("
    "\0132\016.ExchangeOrder\"H\n\016RechargeRecord\022\r\n\005i"
    "Time\030\001 \001(\005\022\023\n\013iRechargeID\030\002 \001(\005\022\022\n\nstrOr"
    "derID\030\003 \001(\t\"d\n\016RECHARGEDBINFO\022\030\n\020iFirstR"
    "ewardStat\030\001 \001(\005\022\"\n\tstRecords\030\002 \003(\0132\017.Rec"
    "hargeRecord\022\024\n\014iRechargeIDs\030\003 \003(\005\"c\n\017RES"
    "ERVED2DBINFO\022\'\n\016stExchangeInfo\030\001 \001(\0132\017.E"
    "XCHANGEDBINFO\022\'\n\016stRechargeInfo\030\002 \001(\0132\017."
    "RECHARGEDBINFO*T\n\017FirstRewardType\022\026\n\022FIR"
    "ST_REWARD_NOTOK\020\000\022\023\n\017FIRST_REWARD_OK\020\001\022\024"
    "\n\020FIRST_REWARD_GET\020\002", 3260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol_USERDB.proto", &protobuf_RegisterTypes);
  GameUserInfo::default_instance_ = new GameUserInfo();
  WeaponInfo::default_instance_ = new WeaponInfo();
  ExpLineInfo::default_instance_ = new ExpLineInfo();
  BASEDBINFO::default_instance_ = new BASEDBINFO();
  OneQuest::default_instance_ = new OneQuest();
  QUESTDBINFO::default_instance_ = new QUESTDBINFO();
  OneSlotInfo::default_instance_ = new OneSlotInfo();
  ItemSlotInfo::default_instance_ = new ItemSlotInfo();
  ITEMDBINFO::default_instance_ = new ITEMDBINFO();
  FRIENDDBINFO::default_instance_ = new FRIENDDBINFO();
  MailAppendix::default_instance_ = new MailAppendix();
  OneMailInfo::default_instance_ = new OneMailInfo();
  MAILDBINFO::default_instance_ = new MAILDBINFO();
  PAYOFFLINEDBINFO::default_instance_ = new PAYOFFLINEDBINFO();
  AddResInfo::default_instance_ = new AddResInfo();
  RESOFFLINEDBINFO::default_instance_ = new RESOFFLINEDBINFO();
  MAILOFFLINEDBINFO::default_instance_ = new MAILOFFLINEDBINFO();
  RESERVED1DBINFO::default_instance_ = new RESERVED1DBINFO();
  ExchangeOrder::default_instance_ = new ExchangeOrder();
  ExchangeUser::default_instance_ = new ExchangeUser();
  EXCHANGEDBINFO::default_instance_ = new EXCHANGEDBINFO();
  RechargeRecord::default_instance_ = new RechargeRecord();
  RECHARGEDBINFO::default_instance_ = new RECHARGEDBINFO();
  RESERVED2DBINFO::default_instance_ = new RESERVED2DBINFO();
  GameUserInfo::default_instance_->InitAsDefaultInstance();
  WeaponInfo::default_instance_->InitAsDefaultInstance();
  ExpLineInfo::default_instance_->InitAsDefaultInstance();
  BASEDBINFO::default_instance_->InitAsDefaultInstance();
  OneQuest::default_instance_->InitAsDefaultInstance();
  QUESTDBINFO::default_instance_->InitAsDefaultInstance();
  OneSlotInfo::default_instance_->InitAsDefaultInstance();
  ItemSlotInfo::default_instance_->InitAsDefaultInstance();
  ITEMDBINFO::default_instance_->InitAsDefaultInstance();
  FRIENDDBINFO::default_instance_->InitAsDefaultInstance();
  MailAppendix::default_instance_->InitAsDefaultInstance();
  OneMailInfo::default_instance_->InitAsDefaultInstance();
  MAILDBINFO::default_instance_->InitAsDefaultInstance();
  PAYOFFLINEDBINFO::default_instance_->InitAsDefaultInstance();
  AddResInfo::default_instance_->InitAsDefaultInstance();
  RESOFFLINEDBINFO::default_instance_->InitAsDefaultInstance();
  MAILOFFLINEDBINFO::default_instance_->InitAsDefaultInstance();
  RESERVED1DBINFO::default_instance_->InitAsDefaultInstance();
  ExchangeOrder::default_instance_->InitAsDefaultInstance();
  ExchangeUser::default_instance_->InitAsDefaultInstance();
  EXCHANGEDBINFO::default_instance_->InitAsDefaultInstance();
  RechargeRecord::default_instance_->InitAsDefaultInstance();
  RECHARGEDBINFO::default_instance_->InitAsDefaultInstance();
  RESERVED2DBINFO::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_5fUSERDB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_5fUSERDB_2eproto {
  StaticDescriptorInitializer_GameProtocol_5fUSERDB_2eproto() {
    protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  }
} static_descriptor_initializer_GameProtocol_5fUSERDB_2eproto_;
const ::google::protobuf::EnumDescriptor* FirstRewardType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRewardType_descriptor_;
}
bool FirstRewardType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameUserInfo::kUinFieldNumber;
const int GameUserInfo::kUiSeqFieldNumber;
const int GameUserInfo::kStrBaseInfoFieldNumber;
const int GameUserInfo::kStrQuestInfoFieldNumber;
const int GameUserInfo::kStrItemInfoFieldNumber;
const int GameUserInfo::kStrFriendInfoFieldNumber;
const int GameUserInfo::kStrMailInfoFieldNumber;
const int GameUserInfo::kStrReserved1FieldNumber;
const int GameUserInfo::kStrReserved2FieldNumber;
#endif  // !_MSC_VER

GameUserInfo::GameUserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameUserInfo::InitAsDefaultInstance() {
}

GameUserInfo::GameUserInfo(const GameUserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameUserInfo::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  uiseq_ = 0u;
  strbaseinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strquestinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  striteminfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strfriendinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strmailinfo_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strreserved1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strreserved2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameUserInfo::~GameUserInfo() {
  SharedDtor();
}

void GameUserInfo::SharedDtor() {
  if (strbaseinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strbaseinfo_;
  }
  if (strquestinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strquestinfo_;
  }
  if (striteminfo_ != &::google::protobuf::internal::kEmptyString) {
    delete striteminfo_;
  }
  if (strfriendinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strfriendinfo_;
  }
  if (strmailinfo_ != &::google::protobuf::internal::kEmptyString) {
    delete strmailinfo_;
  }
  if (strreserved1_ != &::google::protobuf::internal::kEmptyString) {
    delete strreserved1_;
  }
  if (strreserved2_ != &::google::protobuf::internal::kEmptyString) {
    delete strreserved2_;
  }
  if (this != default_instance_) {
  }
}

void GameUserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameUserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameUserInfo_descriptor_;
}

const GameUserInfo& GameUserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

GameUserInfo* GameUserInfo::default_instance_ = NULL;

GameUserInfo* GameUserInfo::New() const {
  return new GameUserInfo;
}

void GameUserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    uiseq_ = 0u;
    if (has_strbaseinfo()) {
      if (strbaseinfo_ != &::google::protobuf::internal::kEmptyString) {
        strbaseinfo_->clear();
      }
    }
    if (has_strquestinfo()) {
      if (strquestinfo_ != &::google::protobuf::internal::kEmptyString) {
        strquestinfo_->clear();
      }
    }
    if (has_striteminfo()) {
      if (striteminfo_ != &::google::protobuf::internal::kEmptyString) {
        striteminfo_->clear();
      }
    }
    if (has_strfriendinfo()) {
      if (strfriendinfo_ != &::google::protobuf::internal::kEmptyString) {
        strfriendinfo_->clear();
      }
    }
    if (has_strmailinfo()) {
      if (strmailinfo_ != &::google::protobuf::internal::kEmptyString) {
        strmailinfo_->clear();
      }
    }
    if (has_strreserved1()) {
      if (strreserved1_ != &::google::protobuf::internal::kEmptyString) {
        strreserved1_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strreserved2()) {
      if (strreserved2_ != &::google::protobuf::internal::kEmptyString) {
        strreserved2_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameUserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiSeq;
        break;
      }

      // optional uint32 uiSeq = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiSeq:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiseq_)));
          set_has_uiseq();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strBaseInfo;
        break;
      }

      // optional bytes strBaseInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strbaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strQuestInfo;
        break;
      }

      // optional bytes strQuestInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strQuestInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strquestinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strItemInfo;
        break;
      }

      // optional bytes strItemInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_striteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strFriendInfo;
        break;
      }

      // optional bytes strFriendInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strFriendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strfriendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strMailInfo;
        break;
      }

      // optional bytes strMailInfo = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strmailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strReserved1;
        break;
      }

      // optional bytes strReserved1 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strReserved1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strreserved1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strReserved2;
        break;
      }

      // optional bytes strReserved2 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strReserved2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strreserved2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameUserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uiseq(), output);
  }

  // optional bytes strBaseInfo = 3;
  if (has_strbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->strbaseinfo(), output);
  }

  // optional bytes strQuestInfo = 4;
  if (has_strquestinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->strquestinfo(), output);
  }

  // optional bytes strItemInfo = 5;
  if (has_striteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->striteminfo(), output);
  }

  // optional bytes strFriendInfo = 6;
  if (has_strfriendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->strfriendinfo(), output);
  }

  // optional bytes strMailInfo = 7;
  if (has_strmailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->strmailinfo(), output);
  }

  // optional bytes strReserved1 = 8;
  if (has_strreserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->strreserved1(), output);
  }

  // optional bytes strReserved2 = 9;
  if (has_strreserved2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      9, this->strreserved2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameUserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uiSeq = 2;
  if (has_uiseq()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uiseq(), target);
  }

  // optional bytes strBaseInfo = 3;
  if (has_strbaseinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->strbaseinfo(), target);
  }

  // optional bytes strQuestInfo = 4;
  if (has_strquestinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->strquestinfo(), target);
  }

  // optional bytes strItemInfo = 5;
  if (has_striteminfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->striteminfo(), target);
  }

  // optional bytes strFriendInfo = 6;
  if (has_strfriendinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->strfriendinfo(), target);
  }

  // optional bytes strMailInfo = 7;
  if (has_strmailinfo()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->strmailinfo(), target);
  }

  // optional bytes strReserved1 = 8;
  if (has_strreserved1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->strreserved1(), target);
  }

  // optional bytes strReserved2 = 9;
  if (has_strreserved2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        9, this->strreserved2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameUserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uiSeq = 2;
    if (has_uiseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiseq());
    }

    // optional bytes strBaseInfo = 3;
    if (has_strbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strbaseinfo());
    }

    // optional bytes strQuestInfo = 4;
    if (has_strquestinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strquestinfo());
    }

    // optional bytes strItemInfo = 5;
    if (has_striteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->striteminfo());
    }

    // optional bytes strFriendInfo = 6;
    if (has_strfriendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strfriendinfo());
    }

    // optional bytes strMailInfo = 7;
    if (has_strmailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strmailinfo());
    }

    // optional bytes strReserved1 = 8;
    if (has_strreserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strreserved1());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bytes strReserved2 = 9;
    if (has_strreserved2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strreserved2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameUserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameUserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameUserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameUserInfo::MergeFrom(const GameUserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_uiseq()) {
      set_uiseq(from.uiseq());
    }
    if (from.has_strbaseinfo()) {
      set_strbaseinfo(from.strbaseinfo());
    }
    if (from.has_strquestinfo()) {
      set_strquestinfo(from.strquestinfo());
    }
    if (from.has_striteminfo()) {
      set_striteminfo(from.striteminfo());
    }
    if (from.has_strfriendinfo()) {
      set_strfriendinfo(from.strfriendinfo());
    }
    if (from.has_strmailinfo()) {
      set_strmailinfo(from.strmailinfo());
    }
    if (from.has_strreserved1()) {
      set_strreserved1(from.strreserved1());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strreserved2()) {
      set_strreserved2(from.strreserved2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameUserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameUserInfo::CopyFrom(const GameUserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameUserInfo::IsInitialized() const {

  return true;
}

void GameUserInfo::Swap(GameUserInfo* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(uiseq_, other->uiseq_);
    std::swap(strbaseinfo_, other->strbaseinfo_);
    std::swap(strquestinfo_, other->strquestinfo_);
    std::swap(striteminfo_, other->striteminfo_);
    std::swap(strfriendinfo_, other->strfriendinfo_);
    std::swap(strmailinfo_, other->strmailinfo_);
    std::swap(strreserved1_, other->strreserved1_);
    std::swap(strreserved2_, other->strreserved2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameUserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameUserInfo_descriptor_;
  metadata.reflection = GameUserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeaponInfo::kIWeaponIDFieldNumber;
const int WeaponInfo::kIWeaponStyleIDFieldNumber;
const int WeaponInfo::kIUnlockStyleIDsFieldNumber;
#endif  // !_MSC_VER

WeaponInfo::WeaponInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeaponInfo::InitAsDefaultInstance() {
}

WeaponInfo::WeaponInfo(const WeaponInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeaponInfo::SharedCtor() {
  _cached_size_ = 0;
  iweaponid_ = 0;
  iweaponstyleid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeaponInfo::~WeaponInfo() {
  SharedDtor();
}

void WeaponInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeaponInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeaponInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeaponInfo_descriptor_;
}

const WeaponInfo& WeaponInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

WeaponInfo* WeaponInfo::default_instance_ = NULL;

WeaponInfo* WeaponInfo::New() const {
  return new WeaponInfo;
}

void WeaponInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iweaponid_ = 0;
    iweaponstyleid_ = 0;
  }
  iunlockstyleids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeaponInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWeaponID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iweaponid_)));
          set_has_iweaponid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iWeaponStyleID;
        break;
      }

      // optional int32 iWeaponStyleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWeaponStyleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iweaponstyleid_)));
          set_has_iweaponstyleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iUnlockStyleIDs;
        break;
      }

      // repeated int32 iUnlockStyleIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iUnlockStyleIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_iunlockstyleids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_iunlockstyleids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iUnlockStyleIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeaponInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWeaponID = 1;
  if (has_iweaponid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iweaponid(), output);
  }

  // optional int32 iWeaponStyleID = 2;
  if (has_iweaponstyleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iweaponstyleid(), output);
  }

  // repeated int32 iUnlockStyleIDs = 3;
  for (int i = 0; i < this->iunlockstyleids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->iunlockstyleids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeaponInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWeaponID = 1;
  if (has_iweaponid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iweaponid(), target);
  }

  // optional int32 iWeaponStyleID = 2;
  if (has_iweaponstyleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iweaponstyleid(), target);
  }

  // repeated int32 iUnlockStyleIDs = 3;
  for (int i = 0; i < this->iunlockstyleids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->iunlockstyleids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeaponInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWeaponID = 1;
    if (has_iweaponid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iweaponid());
    }

    // optional int32 iWeaponStyleID = 2;
    if (has_iweaponstyleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iweaponstyleid());
    }

  }
  // repeated int32 iUnlockStyleIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->iunlockstyleids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->iunlockstyleids(i));
    }
    total_size += 1 * this->iunlockstyleids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeaponInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeaponInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeaponInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeaponInfo::MergeFrom(const WeaponInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  iunlockstyleids_.MergeFrom(from.iunlockstyleids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iweaponid()) {
      set_iweaponid(from.iweaponid());
    }
    if (from.has_iweaponstyleid()) {
      set_iweaponstyleid(from.iweaponstyleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeaponInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeaponInfo::CopyFrom(const WeaponInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeaponInfo::IsInitialized() const {

  return true;
}

void WeaponInfo::Swap(WeaponInfo* other) {
  if (other != this) {
    std::swap(iweaponid_, other->iweaponid_);
    std::swap(iweaponstyleid_, other->iweaponstyleid_);
    iunlockstyleids_.Swap(&other->iunlockstyleids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeaponInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeaponInfo_descriptor_;
  metadata.reflection = WeaponInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpLineInfo::kIExpLineIDFieldNumber;
const int ExpLineInfo::kIExpLineTypeFieldNumber;
const int ExpLineInfo::kLUserWinNumFieldNumber;
const int ExpLineInfo::kIBulletNumFieldNumber;
const int ExpLineInfo::kLUserCostNumFieldNumber;
#endif  // !_MSC_VER

ExpLineInfo::ExpLineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpLineInfo::InitAsDefaultInstance() {
}

ExpLineInfo::ExpLineInfo(const ExpLineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpLineInfo::SharedCtor() {
  _cached_size_ = 0;
  iexplineid_ = 0;
  iexplinetype_ = 0;
  luserwinnum_ = GOOGLE_LONGLONG(0);
  ibulletnum_ = 0;
  lusercostnum_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpLineInfo::~ExpLineInfo() {
  SharedDtor();
}

void ExpLineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpLineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpLineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpLineInfo_descriptor_;
}

const ExpLineInfo& ExpLineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

ExpLineInfo* ExpLineInfo::default_instance_ = NULL;

ExpLineInfo* ExpLineInfo::New() const {
  return new ExpLineInfo;
}

void ExpLineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iexplineid_ = 0;
    iexplinetype_ = 0;
    luserwinnum_ = GOOGLE_LONGLONG(0);
    ibulletnum_ = 0;
    lusercostnum_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpLineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iExpLineID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexplineid_)));
          set_has_iexplineid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iExpLineType;
        break;
      }

      // optional int32 iExpLineType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iExpLineType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexplinetype_)));
          set_has_iexplinetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lUserWinNum;
        break;
      }

      // optional int64 lUserWinNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserwinnum_)));
          set_has_luserwinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iBulletNum;
        break;
      }

      // optional int32 iBulletNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iBulletNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibulletnum_)));
          set_has_ibulletnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lUserCostNum;
        break;
      }

      // optional int64 lUserCostNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserCostNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lusercostnum_)));
          set_has_lusercostnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpLineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iExpLineID = 1;
  if (has_iexplineid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iexplineid(), output);
  }

  // optional int32 iExpLineType = 2;
  if (has_iexplinetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iexplinetype(), output);
  }

  // optional int64 lUserWinNum = 3;
  if (has_luserwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->luserwinnum(), output);
  }

  // optional int32 iBulletNum = 4;
  if (has_ibulletnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ibulletnum(), output);
  }

  // optional int64 lUserCostNum = 5;
  if (has_lusercostnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lusercostnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpLineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iExpLineID = 1;
  if (has_iexplineid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iexplineid(), target);
  }

  // optional int32 iExpLineType = 2;
  if (has_iexplinetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iexplinetype(), target);
  }

  // optional int64 lUserWinNum = 3;
  if (has_luserwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->luserwinnum(), target);
  }

  // optional int32 iBulletNum = 4;
  if (has_ibulletnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ibulletnum(), target);
  }

  // optional int64 lUserCostNum = 5;
  if (has_lusercostnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lusercostnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpLineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iExpLineID = 1;
    if (has_iexplineid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexplineid());
    }

    // optional int32 iExpLineType = 2;
    if (has_iexplinetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexplinetype());
    }

    // optional int64 lUserWinNum = 3;
    if (has_luserwinnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserwinnum());
    }

    // optional int32 iBulletNum = 4;
    if (has_ibulletnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibulletnum());
    }

    // optional int64 lUserCostNum = 5;
    if (has_lusercostnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lusercostnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpLineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpLineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpLineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpLineInfo::MergeFrom(const ExpLineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iexplineid()) {
      set_iexplineid(from.iexplineid());
    }
    if (from.has_iexplinetype()) {
      set_iexplinetype(from.iexplinetype());
    }
    if (from.has_luserwinnum()) {
      set_luserwinnum(from.luserwinnum());
    }
    if (from.has_ibulletnum()) {
      set_ibulletnum(from.ibulletnum());
    }
    if (from.has_lusercostnum()) {
      set_lusercostnum(from.lusercostnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpLineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpLineInfo::CopyFrom(const ExpLineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpLineInfo::IsInitialized() const {

  return true;
}

void ExpLineInfo::Swap(ExpLineInfo* other) {
  if (other != this) {
    std::swap(iexplineid_, other->iexplineid_);
    std::swap(iexplinetype_, other->iexplinetype_);
    std::swap(luserwinnum_, other->luserwinnum_);
    std::swap(ibulletnum_, other->ibulletnum_);
    std::swap(lusercostnum_, other->lusercostnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpLineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpLineInfo_descriptor_;
  metadata.reflection = ExpLineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BASEDBINFO::kSzNickNameFieldNumber;
const int BASEDBINFO::kIResourcesFieldNumber;
const int BASEDBINFO::kUStatusFieldNumber;
const int BASEDBINFO::kILastLoginFieldNumber;
const int BASEDBINFO::kILastLogoutFieldNumber;
const int BASEDBINFO::kICreateTimeFieldNumber;
const int BASEDBINFO::kIOnlineTimeFieldNumber;
const int BASEDBINFO::kILoginCountFieldNumber;
const int BASEDBINFO::kILoginTimeFieldNumber;
const int BASEDBINFO::kILogoutTimeFieldNumber;
const int BASEDBINFO::kStWeaponFieldNumber;
const int BASEDBINFO::kILotteryNumFieldNumber;
const int BASEDBINFO::kStExpLinesFieldNumber;
const int BASEDBINFO::kILastScoreUpdateFieldNumber;
const int BASEDBINFO::kIDayScoreFieldNumber;
const int BASEDBINFO::kIWeekScoreFieldNumber;
const int BASEDBINFO::kIVIPLevelFieldNumber;
const int BASEDBINFO::kLVIPExpFieldNumber;
const int BASEDBINFO::kIVIPPrivFieldNumber;
const int BASEDBINFO::kINextAlmsTimeFieldNumber;
const int BASEDBINFO::kIAlmsNumFieldNumber;
const int BASEDBINFO::kILastAlmsUpdateTimeFieldNumber;
const int BASEDBINFO::kIRechargeLotteryIDsFieldNumber;
const int BASEDBINFO::kILoginDaysFieldNumber;
const int BASEDBINFO::kIGetLoginRewardFieldNumber;
const int BASEDBINFO::kIRemainNewRedNumFieldNumber;
const int BASEDBINFO::kINowNewRedNumFieldNumber;
const int BASEDBINFO::kIMonthEndTimeFieldNumber;
const int BASEDBINFO::kILastGetMonthTimeFieldNumber;
const int BASEDBINFO::kStrChannelFieldNumber;
const int BASEDBINFO::kStrPicIDFieldNumber;
const int BASEDBINFO::kBUpdateRankFieldNumber;
const int BASEDBINFO::kBGetVIPCoinsFieldNumber;
const int BASEDBINFO::kIDayOnlineTimeFieldNumber;
const int BASEDBINFO::kILastOnlineUpdateFieldNumber;
const int BASEDBINFO::kUFinGuideIndexesFieldNumber;
const int BASEDBINFO::kBNameChangedFieldNumber;
const int BASEDBINFO::kLUserWinNumFieldNumber;
const int BASEDBINFO::kStrSignFieldNumber;
#endif  // !_MSC_VER

BASEDBINFO::BASEDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BASEDBINFO::InitAsDefaultInstance() {
  stweapon_ = const_cast< ::WeaponInfo*>(&::WeaponInfo::default_instance());
}

BASEDBINFO::BASEDBINFO(const BASEDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BASEDBINFO::SharedCtor() {
  _cached_size_ = 0;
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ustatus_ = 0u;
  ilastlogin_ = 0;
  ilastlogout_ = 0;
  icreatetime_ = 0;
  ionlinetime_ = 0;
  ilogincount_ = 0;
  ilogintime_ = 0;
  ilogouttime_ = 0;
  stweapon_ = NULL;
  ilotterynum_ = 0;
  ilastscoreupdate_ = 0;
  idayscore_ = GOOGLE_LONGLONG(0);
  iweekscore_ = GOOGLE_LONGLONG(0);
  iviplevel_ = 0;
  lvipexp_ = GOOGLE_LONGLONG(0);
  ivippriv_ = 0;
  inextalmstime_ = 0;
  ialmsnum_ = 0;
  ilastalmsupdatetime_ = 0;
  ilogindays_ = 0;
  igetloginreward_ = 0;
  iremainnewrednum_ = 0;
  inownewrednum_ = 0;
  imonthendtime_ = 0;
  ilastgetmonthtime_ = 0;
  strchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bupdaterank_ = false;
  bgetvipcoins_ = false;
  idayonlinetime_ = 0;
  ilastonlineupdate_ = 0;
  ufinguideindexes_ = 0u;
  bnamechanged_ = false;
  luserwinnum_ = GOOGLE_LONGLONG(0);
  strsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BASEDBINFO::~BASEDBINFO() {
  SharedDtor();
}

void BASEDBINFO::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete strchannel_;
  }
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    delete strpicid_;
  }
  if (strsign_ != &::google::protobuf::internal::kEmptyString) {
    delete strsign_;
  }
  if (this != default_instance_) {
    delete stweapon_;
  }
}

void BASEDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BASEDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BASEDBINFO_descriptor_;
}

const BASEDBINFO& BASEDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

BASEDBINFO* BASEDBINFO::default_instance_ = NULL;

BASEDBINFO* BASEDBINFO::New() const {
  return new BASEDBINFO;
}

void BASEDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
        sznickname_->clear();
      }
    }
    ustatus_ = 0u;
    ilastlogin_ = 0;
    ilastlogout_ = 0;
    icreatetime_ = 0;
    ionlinetime_ = 0;
    ilogincount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ilogintime_ = 0;
    ilogouttime_ = 0;
    if (has_stweapon()) {
      if (stweapon_ != NULL) stweapon_->::WeaponInfo::Clear();
    }
    ilotterynum_ = 0;
    ilastscoreupdate_ = 0;
    idayscore_ = GOOGLE_LONGLONG(0);
    iweekscore_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    iviplevel_ = 0;
    lvipexp_ = GOOGLE_LONGLONG(0);
    ivippriv_ = 0;
    inextalmstime_ = 0;
    ialmsnum_ = 0;
    ilastalmsupdatetime_ = 0;
    ilogindays_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    igetloginreward_ = 0;
    iremainnewrednum_ = 0;
    inownewrednum_ = 0;
    imonthendtime_ = 0;
    ilastgetmonthtime_ = 0;
    if (has_strchannel()) {
      if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
        strchannel_->clear();
      }
    }
    if (has_strpicid()) {
      if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
        strpicid_->clear();
      }
    }
    bupdaterank_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    bgetvipcoins_ = false;
    idayonlinetime_ = 0;
    ilastonlineupdate_ = 0;
    ufinguideindexes_ = 0u;
    bnamechanged_ = false;
    luserwinnum_ = GOOGLE_LONGLONG(0);
    if (has_strsign()) {
      if (strsign_ != &::google::protobuf::internal::kEmptyString) {
        strsign_->clear();
      }
    }
  }
  iresources_.Clear();
  stexplines_.Clear();
  irechargelotteryids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BASEDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes szNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sznickname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iResources;
        break;
      }

      // repeated int64 iResources = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iResources:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_iresources())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_iresources())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iResources;
        if (input->ExpectTag(24)) goto parse_uStatus;
        break;
      }

      // optional uint32 uStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ustatus_)));
          set_has_ustatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iLastLogin;
        break;
      }

      // optional int32 iLastLogin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastlogin_)));
          set_has_ilastlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iLastLogout;
        break;
      }

      // optional int32 iLastLogout = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastLogout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastlogout_)));
          set_has_ilastlogout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iCreateTime;
        break;
      }

      // optional int32 iCreateTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icreatetime_)));
          set_has_icreatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iOnlineTime;
        break;
      }

      // optional int32 iOnlineTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ionlinetime_)));
          set_has_ionlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iLoginCount;
        break;
      }

      // optional int32 iLoginCount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLoginCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogincount_)));
          set_has_ilogincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_iLoginTime;
        break;
      }

      // optional int32 iLoginTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogintime_)));
          set_has_ilogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_iLogoutTime;
        break;
      }

      // optional int32 iLogoutTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLogoutTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogouttime_)));
          set_has_ilogouttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_stWeapon;
        break;
      }

      // optional .WeaponInfo stWeapon = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stWeapon:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stweapon()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_iLotteryNum;
        break;
      }

      // optional int32 iLotteryNum = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLotteryNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilotterynum_)));
          set_has_ilotterynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_stExpLines;
        break;
      }

      // repeated .ExpLineInfo stExpLines = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stExpLines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stexplines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_stExpLines;
        if (input->ExpectTag(120)) goto parse_iLastScoreUpdate;
        break;
      }

      // optional int32 iLastScoreUpdate = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastScoreUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastscoreupdate_)));
          set_has_ilastscoreupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_iDayScore;
        break;
      }

      // optional int64 iDayScore = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDayScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &idayscore_)));
          set_has_idayscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_iWeekScore;
        break;
      }

      // optional int64 iWeekScore = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWeekScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iweekscore_)));
          set_has_iweekscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_iVIPLevel;
        break;
      }

      // optional int32 iVIPLevel = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iviplevel_)));
          set_has_iviplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_lVIPExp;
        break;
      }

      // optional int64 lVIPExp = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lVIPExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lvipexp_)));
          set_has_lvipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_iVIPPriv;
        break;
      }

      // optional int32 iVIPPriv = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVIPPriv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivippriv_)));
          set_has_ivippriv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_iNextAlmsTime;
        break;
      }

      // optional int32 iNextAlmsTime = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNextAlmsTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inextalmstime_)));
          set_has_inextalmstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_iAlmsNum;
        break;
      }

      // optional int32 iAlmsNum = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAlmsNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ialmsnum_)));
          set_has_ialmsnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_iLastAlmsUpdateTime;
        break;
      }

      // optional int32 iLastAlmsUpdateTime = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastAlmsUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastalmsupdatetime_)));
          set_has_ilastalmsupdatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_iRechargeLotteryIDs;
        break;
      }

      // repeated int32 iRechargeLotteryIDs = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRechargeLotteryIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_irechargelotteryids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_irechargelotteryids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_iRechargeLotteryIDs;
        if (input->ExpectTag(200)) goto parse_iLoginDays;
        break;
      }

      // optional int32 iLoginDays = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLoginDays:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogindays_)));
          set_has_ilogindays();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_iGetLoginReward;
        break;
      }

      // optional int32 iGetLoginReward = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGetLoginReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igetloginreward_)));
          set_has_igetloginreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_iRemainNewRedNum;
        break;
      }

      // optional int32 iRemainNewRedNum = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRemainNewRedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iremainnewrednum_)));
          set_has_iremainnewrednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_iNowNewRedNum;
        break;
      }

      // optional int32 iNowNewRedNum = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNowNewRedNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inownewrednum_)));
          set_has_inownewrednum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_iMonthEndTime;
        break;
      }

      // optional int32 iMonthEndTime = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMonthEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imonthendtime_)));
          set_has_imonthendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_iLastGetMonthTime;
        break;
      }

      // optional int32 iLastGetMonthTime = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastGetMonthTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastgetmonthtime_)));
          set_has_ilastgetmonthtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_strChannel;
        break;
      }

      // optional string strChannel = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strchannel().data(), this->strchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_strPicID;
        break;
      }

      // optional string strPicID = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPicID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpicid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpicid().data(), this->strpicid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_bUpdateRank;
        break;
      }

      // optional bool bUpdateRank = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bUpdateRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bupdaterank_)));
          set_has_bupdaterank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_bGetVIPCoins;
        break;
      }

      // optional bool bGetVIPCoins = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bGetVIPCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bgetvipcoins_)));
          set_has_bgetvipcoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_iDayOnlineTime;
        break;
      }

      // optional int32 iDayOnlineTime = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDayOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idayonlinetime_)));
          set_has_idayonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_iLastOnlineUpdate;
        break;
      }

      // optional int32 iLastOnlineUpdate = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastOnlineUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastonlineupdate_)));
          set_has_ilastonlineupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_uFinGuideIndexes;
        break;
      }

      // optional uint32 uFinGuideIndexes = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFinGuideIndexes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufinguideindexes_)));
          set_has_ufinguideindexes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_bNameChanged;
        break;
      }

      // optional bool bNameChanged = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bNameChanged:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bnamechanged_)));
          set_has_bnamechanged();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_lUserWinNum;
        break;
      }

      // optional int64 lUserWinNum = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lUserWinNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &luserwinnum_)));
          set_has_luserwinnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_strSign;
        break;
      }

      // optional string strSign = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsign().data(), this->strsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BASEDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes szNickName = 1;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->sznickname(), output);
  }

  // repeated int64 iResources = 2;
  for (int i = 0; i < this->iresources_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->iresources(i), output);
  }

  // optional uint32 uStatus = 3;
  if (has_ustatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ustatus(), output);
  }

  // optional int32 iLastLogin = 4;
  if (has_ilastlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ilastlogin(), output);
  }

  // optional int32 iLastLogout = 5;
  if (has_ilastlogout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ilastlogout(), output);
  }

  // optional int32 iCreateTime = 6;
  if (has_icreatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->icreatetime(), output);
  }

  // optional int32 iOnlineTime = 7;
  if (has_ionlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ionlinetime(), output);
  }

  // optional int32 iLoginCount = 8;
  if (has_ilogincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ilogincount(), output);
  }

  // optional int32 iLoginTime = 9;
  if (has_ilogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ilogintime(), output);
  }

  // optional int32 iLogoutTime = 10;
  if (has_ilogouttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ilogouttime(), output);
  }

  // optional .WeaponInfo stWeapon = 11;
  if (has_stweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->stweapon(), output);
  }

  // optional int32 iLotteryNum = 13;
  if (has_ilotterynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->ilotterynum(), output);
  }

  // repeated .ExpLineInfo stExpLines = 14;
  for (int i = 0; i < this->stexplines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->stexplines(i), output);
  }

  // optional int32 iLastScoreUpdate = 15;
  if (has_ilastscoreupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ilastscoreupdate(), output);
  }

  // optional int64 iDayScore = 16;
  if (has_idayscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(16, this->idayscore(), output);
  }

  // optional int64 iWeekScore = 17;
  if (has_iweekscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->iweekscore(), output);
  }

  // optional int32 iVIPLevel = 18;
  if (has_iviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->iviplevel(), output);
  }

  // optional int64 lVIPExp = 19;
  if (has_lvipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(19, this->lvipexp(), output);
  }

  // optional int32 iVIPPriv = 20;
  if (has_ivippriv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->ivippriv(), output);
  }

  // optional int32 iNextAlmsTime = 21;
  if (has_inextalmstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->inextalmstime(), output);
  }

  // optional int32 iAlmsNum = 22;
  if (has_ialmsnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ialmsnum(), output);
  }

  // optional int32 iLastAlmsUpdateTime = 23;
  if (has_ilastalmsupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ilastalmsupdatetime(), output);
  }

  // repeated int32 iRechargeLotteryIDs = 24;
  for (int i = 0; i < this->irechargelotteryids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->irechargelotteryids(i), output);
  }

  // optional int32 iLoginDays = 25;
  if (has_ilogindays()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ilogindays(), output);
  }

  // optional int32 iGetLoginReward = 26;
  if (has_igetloginreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->igetloginreward(), output);
  }

  // optional int32 iRemainNewRedNum = 27;
  if (has_iremainnewrednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->iremainnewrednum(), output);
  }

  // optional int32 iNowNewRedNum = 28;
  if (has_inownewrednum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->inownewrednum(), output);
  }

  // optional int32 iMonthEndTime = 29;
  if (has_imonthendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->imonthendtime(), output);
  }

  // optional int32 iLastGetMonthTime = 30;
  if (has_ilastgetmonthtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->ilastgetmonthtime(), output);
  }

  // optional string strChannel = 31;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      31, this->strchannel(), output);
  }

  // optional string strPicID = 32;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      32, this->strpicid(), output);
  }

  // optional bool bUpdateRank = 33;
  if (has_bupdaterank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->bupdaterank(), output);
  }

  // optional bool bGetVIPCoins = 34;
  if (has_bgetvipcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->bgetvipcoins(), output);
  }

  // optional int32 iDayOnlineTime = 35;
  if (has_idayonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->idayonlinetime(), output);
  }

  // optional int32 iLastOnlineUpdate = 36;
  if (has_ilastonlineupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->ilastonlineupdate(), output);
  }

  // optional uint32 uFinGuideIndexes = 37;
  if (has_ufinguideindexes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(37, this->ufinguideindexes(), output);
  }

  // optional bool bNameChanged = 38;
  if (has_bnamechanged()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->bnamechanged(), output);
  }

  // optional int64 lUserWinNum = 39;
  if (has_luserwinnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->luserwinnum(), output);
  }

  // optional string strSign = 40;
  if (has_strsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsign().data(), this->strsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      40, this->strsign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BASEDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes szNickName = 1;
  if (has_sznickname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->sznickname(), target);
  }

  // repeated int64 iResources = 2;
  for (int i = 0; i < this->iresources_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->iresources(i), target);
  }

  // optional uint32 uStatus = 3;
  if (has_ustatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ustatus(), target);
  }

  // optional int32 iLastLogin = 4;
  if (has_ilastlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ilastlogin(), target);
  }

  // optional int32 iLastLogout = 5;
  if (has_ilastlogout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ilastlogout(), target);
  }

  // optional int32 iCreateTime = 6;
  if (has_icreatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->icreatetime(), target);
  }

  // optional int32 iOnlineTime = 7;
  if (has_ionlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ionlinetime(), target);
  }

  // optional int32 iLoginCount = 8;
  if (has_ilogincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ilogincount(), target);
  }

  // optional int32 iLoginTime = 9;
  if (has_ilogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ilogintime(), target);
  }

  // optional int32 iLogoutTime = 10;
  if (has_ilogouttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ilogouttime(), target);
  }

  // optional .WeaponInfo stWeapon = 11;
  if (has_stweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->stweapon(), target);
  }

  // optional int32 iLotteryNum = 13;
  if (has_ilotterynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->ilotterynum(), target);
  }

  // repeated .ExpLineInfo stExpLines = 14;
  for (int i = 0; i < this->stexplines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->stexplines(i), target);
  }

  // optional int32 iLastScoreUpdate = 15;
  if (has_ilastscoreupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ilastscoreupdate(), target);
  }

  // optional int64 iDayScore = 16;
  if (has_idayscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(16, this->idayscore(), target);
  }

  // optional int64 iWeekScore = 17;
  if (has_iweekscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->iweekscore(), target);
  }

  // optional int32 iVIPLevel = 18;
  if (has_iviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->iviplevel(), target);
  }

  // optional int64 lVIPExp = 19;
  if (has_lvipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(19, this->lvipexp(), target);
  }

  // optional int32 iVIPPriv = 20;
  if (has_ivippriv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->ivippriv(), target);
  }

  // optional int32 iNextAlmsTime = 21;
  if (has_inextalmstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->inextalmstime(), target);
  }

  // optional int32 iAlmsNum = 22;
  if (has_ialmsnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->ialmsnum(), target);
  }

  // optional int32 iLastAlmsUpdateTime = 23;
  if (has_ilastalmsupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ilastalmsupdatetime(), target);
  }

  // repeated int32 iRechargeLotteryIDs = 24;
  for (int i = 0; i < this->irechargelotteryids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->irechargelotteryids(i), target);
  }

  // optional int32 iLoginDays = 25;
  if (has_ilogindays()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ilogindays(), target);
  }

  // optional int32 iGetLoginReward = 26;
  if (has_igetloginreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->igetloginreward(), target);
  }

  // optional int32 iRemainNewRedNum = 27;
  if (has_iremainnewrednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->iremainnewrednum(), target);
  }

  // optional int32 iNowNewRedNum = 28;
  if (has_inownewrednum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->inownewrednum(), target);
  }

  // optional int32 iMonthEndTime = 29;
  if (has_imonthendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->imonthendtime(), target);
  }

  // optional int32 iLastGetMonthTime = 30;
  if (has_ilastgetmonthtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->ilastgetmonthtime(), target);
  }

  // optional string strChannel = 31;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        31, this->strchannel(), target);
  }

  // optional string strPicID = 32;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        32, this->strpicid(), target);
  }

  // optional bool bUpdateRank = 33;
  if (has_bupdaterank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->bupdaterank(), target);
  }

  // optional bool bGetVIPCoins = 34;
  if (has_bgetvipcoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->bgetvipcoins(), target);
  }

  // optional int32 iDayOnlineTime = 35;
  if (has_idayonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->idayonlinetime(), target);
  }

  // optional int32 iLastOnlineUpdate = 36;
  if (has_ilastonlineupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->ilastonlineupdate(), target);
  }

  // optional uint32 uFinGuideIndexes = 37;
  if (has_ufinguideindexes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(37, this->ufinguideindexes(), target);
  }

  // optional bool bNameChanged = 38;
  if (has_bnamechanged()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(38, this->bnamechanged(), target);
  }

  // optional int64 lUserWinNum = 39;
  if (has_luserwinnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->luserwinnum(), target);
  }

  // optional string strSign = 40;
  if (has_strsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsign().data(), this->strsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        40, this->strsign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BASEDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes szNickName = 1;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sznickname());
    }

    // optional uint32 uStatus = 3;
    if (has_ustatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ustatus());
    }

    // optional int32 iLastLogin = 4;
    if (has_ilastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastlogin());
    }

    // optional int32 iLastLogout = 5;
    if (has_ilastlogout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastlogout());
    }

    // optional int32 iCreateTime = 6;
    if (has_icreatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icreatetime());
    }

    // optional int32 iOnlineTime = 7;
    if (has_ionlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ionlinetime());
    }

    // optional int32 iLoginCount = 8;
    if (has_ilogincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogincount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 iLoginTime = 9;
    if (has_ilogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogintime());
    }

    // optional int32 iLogoutTime = 10;
    if (has_ilogouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogouttime());
    }

    // optional .WeaponInfo stWeapon = 11;
    if (has_stweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stweapon());
    }

    // optional int32 iLotteryNum = 13;
    if (has_ilotterynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilotterynum());
    }

    // optional int32 iLastScoreUpdate = 15;
    if (has_ilastscoreupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastscoreupdate());
    }

    // optional int64 iDayScore = 16;
    if (has_idayscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->idayscore());
    }

    // optional int64 iWeekScore = 17;
    if (has_iweekscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iweekscore());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 iVIPLevel = 18;
    if (has_iviplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iviplevel());
    }

    // optional int64 lVIPExp = 19;
    if (has_lvipexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lvipexp());
    }

    // optional int32 iVIPPriv = 20;
    if (has_ivippriv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivippriv());
    }

    // optional int32 iNextAlmsTime = 21;
    if (has_inextalmstime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inextalmstime());
    }

    // optional int32 iAlmsNum = 22;
    if (has_ialmsnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ialmsnum());
    }

    // optional int32 iLastAlmsUpdateTime = 23;
    if (has_ilastalmsupdatetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastalmsupdatetime());
    }

    // optional int32 iLoginDays = 25;
    if (has_ilogindays()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogindays());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 iGetLoginReward = 26;
    if (has_igetloginreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igetloginreward());
    }

    // optional int32 iRemainNewRedNum = 27;
    if (has_iremainnewrednum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iremainnewrednum());
    }

    // optional int32 iNowNewRedNum = 28;
    if (has_inownewrednum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inownewrednum());
    }

    // optional int32 iMonthEndTime = 29;
    if (has_imonthendtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imonthendtime());
    }

    // optional int32 iLastGetMonthTime = 30;
    if (has_ilastgetmonthtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastgetmonthtime());
    }

    // optional string strChannel = 31;
    if (has_strchannel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strchannel());
    }

    // optional string strPicID = 32;
    if (has_strpicid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpicid());
    }

    // optional bool bUpdateRank = 33;
    if (has_bupdaterank()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bool bGetVIPCoins = 34;
    if (has_bgetvipcoins()) {
      total_size += 2 + 1;
    }

    // optional int32 iDayOnlineTime = 35;
    if (has_idayonlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idayonlinetime());
    }

    // optional int32 iLastOnlineUpdate = 36;
    if (has_ilastonlineupdate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastonlineupdate());
    }

    // optional uint32 uFinGuideIndexes = 37;
    if (has_ufinguideindexes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufinguideindexes());
    }

    // optional bool bNameChanged = 38;
    if (has_bnamechanged()) {
      total_size += 2 + 1;
    }

    // optional int64 lUserWinNum = 39;
    if (has_luserwinnum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->luserwinnum());
    }

    // optional string strSign = 40;
    if (has_strsign()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsign());
    }

  }
  // repeated int64 iResources = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->iresources_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->iresources(i));
    }
    total_size += 1 * this->iresources_size() + data_size;
  }

  // repeated .ExpLineInfo stExpLines = 14;
  total_size += 1 * this->stexplines_size();
  for (int i = 0; i < this->stexplines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stexplines(i));
  }

  // repeated int32 iRechargeLotteryIDs = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->irechargelotteryids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->irechargelotteryids(i));
    }
    total_size += 2 * this->irechargelotteryids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BASEDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BASEDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BASEDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BASEDBINFO::MergeFrom(const BASEDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  iresources_.MergeFrom(from.iresources_);
  stexplines_.MergeFrom(from.stexplines_);
  irechargelotteryids_.MergeFrom(from.irechargelotteryids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_ustatus()) {
      set_ustatus(from.ustatus());
    }
    if (from.has_ilastlogin()) {
      set_ilastlogin(from.ilastlogin());
    }
    if (from.has_ilastlogout()) {
      set_ilastlogout(from.ilastlogout());
    }
    if (from.has_icreatetime()) {
      set_icreatetime(from.icreatetime());
    }
    if (from.has_ionlinetime()) {
      set_ionlinetime(from.ionlinetime());
    }
    if (from.has_ilogincount()) {
      set_ilogincount(from.ilogincount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ilogintime()) {
      set_ilogintime(from.ilogintime());
    }
    if (from.has_ilogouttime()) {
      set_ilogouttime(from.ilogouttime());
    }
    if (from.has_stweapon()) {
      mutable_stweapon()->::WeaponInfo::MergeFrom(from.stweapon());
    }
    if (from.has_ilotterynum()) {
      set_ilotterynum(from.ilotterynum());
    }
    if (from.has_ilastscoreupdate()) {
      set_ilastscoreupdate(from.ilastscoreupdate());
    }
    if (from.has_idayscore()) {
      set_idayscore(from.idayscore());
    }
    if (from.has_iweekscore()) {
      set_iweekscore(from.iweekscore());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_iviplevel()) {
      set_iviplevel(from.iviplevel());
    }
    if (from.has_lvipexp()) {
      set_lvipexp(from.lvipexp());
    }
    if (from.has_ivippriv()) {
      set_ivippriv(from.ivippriv());
    }
    if (from.has_inextalmstime()) {
      set_inextalmstime(from.inextalmstime());
    }
    if (from.has_ialmsnum()) {
      set_ialmsnum(from.ialmsnum());
    }
    if (from.has_ilastalmsupdatetime()) {
      set_ilastalmsupdatetime(from.ilastalmsupdatetime());
    }
    if (from.has_ilogindays()) {
      set_ilogindays(from.ilogindays());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_igetloginreward()) {
      set_igetloginreward(from.igetloginreward());
    }
    if (from.has_iremainnewrednum()) {
      set_iremainnewrednum(from.iremainnewrednum());
    }
    if (from.has_inownewrednum()) {
      set_inownewrednum(from.inownewrednum());
    }
    if (from.has_imonthendtime()) {
      set_imonthendtime(from.imonthendtime());
    }
    if (from.has_ilastgetmonthtime()) {
      set_ilastgetmonthtime(from.ilastgetmonthtime());
    }
    if (from.has_strchannel()) {
      set_strchannel(from.strchannel());
    }
    if (from.has_strpicid()) {
      set_strpicid(from.strpicid());
    }
    if (from.has_bupdaterank()) {
      set_bupdaterank(from.bupdaterank());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_bgetvipcoins()) {
      set_bgetvipcoins(from.bgetvipcoins());
    }
    if (from.has_idayonlinetime()) {
      set_idayonlinetime(from.idayonlinetime());
    }
    if (from.has_ilastonlineupdate()) {
      set_ilastonlineupdate(from.ilastonlineupdate());
    }
    if (from.has_ufinguideindexes()) {
      set_ufinguideindexes(from.ufinguideindexes());
    }
    if (from.has_bnamechanged()) {
      set_bnamechanged(from.bnamechanged());
    }
    if (from.has_luserwinnum()) {
      set_luserwinnum(from.luserwinnum());
    }
    if (from.has_strsign()) {
      set_strsign(from.strsign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BASEDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BASEDBINFO::CopyFrom(const BASEDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BASEDBINFO::IsInitialized() const {

  return true;
}

void BASEDBINFO::Swap(BASEDBINFO* other) {
  if (other != this) {
    std::swap(sznickname_, other->sznickname_);
    iresources_.Swap(&other->iresources_);
    std::swap(ustatus_, other->ustatus_);
    std::swap(ilastlogin_, other->ilastlogin_);
    std::swap(ilastlogout_, other->ilastlogout_);
    std::swap(icreatetime_, other->icreatetime_);
    std::swap(ionlinetime_, other->ionlinetime_);
    std::swap(ilogincount_, other->ilogincount_);
    std::swap(ilogintime_, other->ilogintime_);
    std::swap(ilogouttime_, other->ilogouttime_);
    std::swap(stweapon_, other->stweapon_);
    std::swap(ilotterynum_, other->ilotterynum_);
    stexplines_.Swap(&other->stexplines_);
    std::swap(ilastscoreupdate_, other->ilastscoreupdate_);
    std::swap(idayscore_, other->idayscore_);
    std::swap(iweekscore_, other->iweekscore_);
    std::swap(iviplevel_, other->iviplevel_);
    std::swap(lvipexp_, other->lvipexp_);
    std::swap(ivippriv_, other->ivippriv_);
    std::swap(inextalmstime_, other->inextalmstime_);
    std::swap(ialmsnum_, other->ialmsnum_);
    std::swap(ilastalmsupdatetime_, other->ilastalmsupdatetime_);
    irechargelotteryids_.Swap(&other->irechargelotteryids_);
    std::swap(ilogindays_, other->ilogindays_);
    std::swap(igetloginreward_, other->igetloginreward_);
    std::swap(iremainnewrednum_, other->iremainnewrednum_);
    std::swap(inownewrednum_, other->inownewrednum_);
    std::swap(imonthendtime_, other->imonthendtime_);
    std::swap(ilastgetmonthtime_, other->ilastgetmonthtime_);
    std::swap(strchannel_, other->strchannel_);
    std::swap(strpicid_, other->strpicid_);
    std::swap(bupdaterank_, other->bupdaterank_);
    std::swap(bgetvipcoins_, other->bgetvipcoins_);
    std::swap(idayonlinetime_, other->idayonlinetime_);
    std::swap(ilastonlineupdate_, other->ilastonlineupdate_);
    std::swap(ufinguideindexes_, other->ufinguideindexes_);
    std::swap(bnamechanged_, other->bnamechanged_);
    std::swap(luserwinnum_, other->luserwinnum_);
    std::swap(strsign_, other->strsign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BASEDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BASEDBINFO_descriptor_;
  metadata.reflection = BASEDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneQuest::kIQuestIDFieldNumber;
const int OneQuest::kIQuestTypeFieldNumber;
const int OneQuest::kINeedTypeFieldNumber;
const int OneQuest::kINumFieldNumber;
const int OneQuest::kBIsFinFieldNumber;
#endif  // !_MSC_VER

OneQuest::OneQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneQuest::InitAsDefaultInstance() {
}

OneQuest::OneQuest(const OneQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneQuest::SharedCtor() {
  _cached_size_ = 0;
  iquestid_ = 0;
  iquesttype_ = 0;
  ineedtype_ = 0;
  inum_ = GOOGLE_LONGLONG(0);
  bisfin_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneQuest::~OneQuest() {
  SharedDtor();
}

void OneQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneQuest_descriptor_;
}

const OneQuest& OneQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

OneQuest* OneQuest::default_instance_ = NULL;

OneQuest* OneQuest::New() const {
  return new OneQuest;
}

void OneQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iquestid_ = 0;
    iquesttype_ = 0;
    ineedtype_ = 0;
    inum_ = GOOGLE_LONGLONG(0);
    bisfin_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iQuestID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iquestid_)));
          set_has_iquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iQuestType;
        break;
      }

      // optional int32 iQuestType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iQuestType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iquesttype_)));
          set_has_iquesttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iNeedType;
        break;
      }

      // optional int32 iNeedType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNeedType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ineedtype_)));
          set_has_ineedtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iNum;
        break;
      }

      // optional int64 iNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bIsFin;
        break;
      }

      // optional bool bIsFin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsFin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisfin_)));
          set_has_bisfin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iquestid(), output);
  }

  // optional int32 iQuestType = 2;
  if (has_iquesttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iquesttype(), output);
  }

  // optional int32 iNeedType = 3;
  if (has_ineedtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ineedtype(), output);
  }

  // optional int64 iNum = 4;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->inum(), output);
  }

  // optional bool bIsFin = 5;
  if (has_bisfin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bisfin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iquestid(), target);
  }

  // optional int32 iQuestType = 2;
  if (has_iquesttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iquesttype(), target);
  }

  // optional int32 iNeedType = 3;
  if (has_ineedtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ineedtype(), target);
  }

  // optional int64 iNum = 4;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->inum(), target);
  }

  // optional bool bIsFin = 5;
  if (has_bisfin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bisfin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iQuestID = 1;
    if (has_iquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iquestid());
    }

    // optional int32 iQuestType = 2;
    if (has_iquesttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iquesttype());
    }

    // optional int32 iNeedType = 3;
    if (has_ineedtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ineedtype());
    }

    // optional int64 iNum = 4;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->inum());
    }

    // optional bool bIsFin = 5;
    if (has_bisfin()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneQuest::MergeFrom(const OneQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iquestid()) {
      set_iquestid(from.iquestid());
    }
    if (from.has_iquesttype()) {
      set_iquesttype(from.iquesttype());
    }
    if (from.has_ineedtype()) {
      set_ineedtype(from.ineedtype());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
    if (from.has_bisfin()) {
      set_bisfin(from.bisfin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneQuest::CopyFrom(const OneQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneQuest::IsInitialized() const {

  return true;
}

void OneQuest::Swap(OneQuest* other) {
  if (other != this) {
    std::swap(iquestid_, other->iquestid_);
    std::swap(iquesttype_, other->iquesttype_);
    std::swap(ineedtype_, other->ineedtype_);
    std::swap(inum_, other->inum_);
    std::swap(bisfin_, other->bisfin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneQuest_descriptor_;
  metadata.reflection = OneQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QUESTDBINFO::kStQuestInfosFieldNumber;
const int QUESTDBINFO::kIAdventureEndTimeFieldNumber;
const int QUESTDBINFO::kIAdventureNumFieldNumber;
const int QUESTDBINFO::kIDailyNextUpdateTimeFieldNumber;
const int QUESTDBINFO::kIAdventNextUpdateTimeFieldNumber;
const int QUESTDBINFO::kIAdventUserCostFieldNumber;
const int QUESTDBINFO::kIAdventShootNumFieldNumber;
const int QUESTDBINFO::kIGetLiveRewardIDsFieldNumber;
#endif  // !_MSC_VER

QUESTDBINFO::QUESTDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QUESTDBINFO::InitAsDefaultInstance() {
}

QUESTDBINFO::QUESTDBINFO(const QUESTDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QUESTDBINFO::SharedCtor() {
  _cached_size_ = 0;
  iadventureendtime_ = 0;
  iadventurenum_ = 0;
  idailynextupdatetime_ = 0;
  iadventnextupdatetime_ = 0;
  iadventusercost_ = 0;
  iadventshootnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QUESTDBINFO::~QUESTDBINFO() {
  SharedDtor();
}

void QUESTDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QUESTDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QUESTDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QUESTDBINFO_descriptor_;
}

const QUESTDBINFO& QUESTDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

QUESTDBINFO* QUESTDBINFO::default_instance_ = NULL;

QUESTDBINFO* QUESTDBINFO::New() const {
  return new QUESTDBINFO;
}

void QUESTDBINFO::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    iadventureendtime_ = 0;
    iadventurenum_ = 0;
    idailynextupdatetime_ = 0;
    iadventnextupdatetime_ = 0;
    iadventusercost_ = 0;
    iadventshootnum_ = 0;
  }
  stquestinfos_.Clear();
  igetliverewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QUESTDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneQuest stQuestInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stQuestInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stquestinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stQuestInfos;
        if (input->ExpectTag(16)) goto parse_iAdventureEndTime;
        break;
      }

      // optional int32 iAdventureEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAdventureEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadventureendtime_)));
          set_has_iadventureendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAdventureNum;
        break;
      }

      // optional int32 iAdventureNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAdventureNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadventurenum_)));
          set_has_iadventurenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iDailyNextUpdateTime;
        break;
      }

      // optional int32 iDailyNextUpdateTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iDailyNextUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idailynextupdatetime_)));
          set_has_idailynextupdatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iAdventNextUpdateTime;
        break;
      }

      // optional int32 iAdventNextUpdateTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAdventNextUpdateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadventnextupdatetime_)));
          set_has_iadventnextupdatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iAdventUserCost;
        break;
      }

      // optional int32 iAdventUserCost = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAdventUserCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadventusercost_)));
          set_has_iadventusercost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iAdventShootNum;
        break;
      }

      // optional int32 iAdventShootNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAdventShootNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadventshootnum_)));
          set_has_iadventshootnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iGetLiveRewardIDs;
        break;
      }

      // repeated int32 iGetLiveRewardIDs = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGetLiveRewardIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_igetliverewardids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_igetliverewardids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iGetLiveRewardIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QUESTDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneQuest stQuestInfos = 1;
  for (int i = 0; i < this->stquestinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stquestinfos(i), output);
  }

  // optional int32 iAdventureEndTime = 2;
  if (has_iadventureendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iadventureendtime(), output);
  }

  // optional int32 iAdventureNum = 3;
  if (has_iadventurenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iadventurenum(), output);
  }

  // optional int32 iDailyNextUpdateTime = 4;
  if (has_idailynextupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->idailynextupdatetime(), output);
  }

  // optional int32 iAdventNextUpdateTime = 5;
  if (has_iadventnextupdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iadventnextupdatetime(), output);
  }

  // optional int32 iAdventUserCost = 6;
  if (has_iadventusercost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iadventusercost(), output);
  }

  // optional int32 iAdventShootNum = 7;
  if (has_iadventshootnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iadventshootnum(), output);
  }

  // repeated int32 iGetLiveRewardIDs = 8;
  for (int i = 0; i < this->igetliverewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->igetliverewardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QUESTDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneQuest stQuestInfos = 1;
  for (int i = 0; i < this->stquestinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stquestinfos(i), target);
  }

  // optional int32 iAdventureEndTime = 2;
  if (has_iadventureendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iadventureendtime(), target);
  }

  // optional int32 iAdventureNum = 3;
  if (has_iadventurenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iadventurenum(), target);
  }

  // optional int32 iDailyNextUpdateTime = 4;
  if (has_idailynextupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->idailynextupdatetime(), target);
  }

  // optional int32 iAdventNextUpdateTime = 5;
  if (has_iadventnextupdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iadventnextupdatetime(), target);
  }

  // optional int32 iAdventUserCost = 6;
  if (has_iadventusercost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iadventusercost(), target);
  }

  // optional int32 iAdventShootNum = 7;
  if (has_iadventshootnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iadventshootnum(), target);
  }

  // repeated int32 iGetLiveRewardIDs = 8;
  for (int i = 0; i < this->igetliverewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->igetliverewardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QUESTDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 iAdventureEndTime = 2;
    if (has_iadventureendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadventureendtime());
    }

    // optional int32 iAdventureNum = 3;
    if (has_iadventurenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadventurenum());
    }

    // optional int32 iDailyNextUpdateTime = 4;
    if (has_idailynextupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idailynextupdatetime());
    }

    // optional int32 iAdventNextUpdateTime = 5;
    if (has_iadventnextupdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadventnextupdatetime());
    }

    // optional int32 iAdventUserCost = 6;
    if (has_iadventusercost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadventusercost());
    }

    // optional int32 iAdventShootNum = 7;
    if (has_iadventshootnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadventshootnum());
    }

  }
  // repeated .OneQuest stQuestInfos = 1;
  total_size += 1 * this->stquestinfos_size();
  for (int i = 0; i < this->stquestinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stquestinfos(i));
  }

  // repeated int32 iGetLiveRewardIDs = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->igetliverewardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->igetliverewardids(i));
    }
    total_size += 1 * this->igetliverewardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QUESTDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QUESTDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QUESTDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QUESTDBINFO::MergeFrom(const QUESTDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  stquestinfos_.MergeFrom(from.stquestinfos_);
  igetliverewardids_.MergeFrom(from.igetliverewardids_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_iadventureendtime()) {
      set_iadventureendtime(from.iadventureendtime());
    }
    if (from.has_iadventurenum()) {
      set_iadventurenum(from.iadventurenum());
    }
    if (from.has_idailynextupdatetime()) {
      set_idailynextupdatetime(from.idailynextupdatetime());
    }
    if (from.has_iadventnextupdatetime()) {
      set_iadventnextupdatetime(from.iadventnextupdatetime());
    }
    if (from.has_iadventusercost()) {
      set_iadventusercost(from.iadventusercost());
    }
    if (from.has_iadventshootnum()) {
      set_iadventshootnum(from.iadventshootnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QUESTDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QUESTDBINFO::CopyFrom(const QUESTDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QUESTDBINFO::IsInitialized() const {

  return true;
}

void QUESTDBINFO::Swap(QUESTDBINFO* other) {
  if (other != this) {
    stquestinfos_.Swap(&other->stquestinfos_);
    std::swap(iadventureendtime_, other->iadventureendtime_);
    std::swap(iadventurenum_, other->iadventurenum_);
    std::swap(idailynextupdatetime_, other->idailynextupdatetime_);
    std::swap(iadventnextupdatetime_, other->iadventnextupdatetime_);
    std::swap(iadventusercost_, other->iadventusercost_);
    std::swap(iadventshootnum_, other->iadventshootnum_);
    igetliverewardids_.Swap(&other->igetliverewardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QUESTDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QUESTDBINFO_descriptor_;
  metadata.reflection = QUESTDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneSlotInfo::kIItemIDFieldNumber;
const int OneSlotInfo::kIItemNumFieldNumber;
#endif  // !_MSC_VER

OneSlotInfo::OneSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneSlotInfo::InitAsDefaultInstance() {
}

OneSlotInfo::OneSlotInfo(const OneSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  iitemid_ = 0;
  iitemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneSlotInfo::~OneSlotInfo() {
  SharedDtor();
}

void OneSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneSlotInfo_descriptor_;
}

const OneSlotInfo& OneSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

OneSlotInfo* OneSlotInfo::default_instance_ = NULL;

OneSlotInfo* OneSlotInfo::New() const {
  return new OneSlotInfo;
}

void OneSlotInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iitemid_ = 0;
    iitemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iItemNum;
        break;
      }

      // optional int32 iItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemnum_)));
          set_has_iitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iItemID = 1;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iitemid(), output);
  }

  // optional int32 iItemNum = 2;
  if (has_iitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iitemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iItemID = 1;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iitemid(), target);
  }

  // optional int32 iItemNum = 2;
  if (has_iitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iitemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneSlotInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iItemID = 1;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional int32 iItemNum = 2;
    if (has_iitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneSlotInfo::MergeFrom(const OneSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_iitemnum()) {
      set_iitemnum(from.iitemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneSlotInfo::CopyFrom(const OneSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneSlotInfo::IsInitialized() const {

  return true;
}

void OneSlotInfo::Swap(OneSlotInfo* other) {
  if (other != this) {
    std::swap(iitemid_, other->iitemid_);
    std::swap(iitemnum_, other->iitemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneSlotInfo_descriptor_;
  metadata.reflection = OneSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemSlotInfo::kStSlotsFieldNumber;
#endif  // !_MSC_VER

ItemSlotInfo::ItemSlotInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemSlotInfo::InitAsDefaultInstance() {
}

ItemSlotInfo::ItemSlotInfo(const ItemSlotInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemSlotInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemSlotInfo::~ItemSlotInfo() {
  SharedDtor();
}

void ItemSlotInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemSlotInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemSlotInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemSlotInfo_descriptor_;
}

const ItemSlotInfo& ItemSlotInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

ItemSlotInfo* ItemSlotInfo::default_instance_ = NULL;

ItemSlotInfo* ItemSlotInfo::New() const {
  return new ItemSlotInfo;
}

void ItemSlotInfo::Clear() {
  stslots_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemSlotInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneSlotInfo stSlots = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stSlots:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stslots()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stSlots;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemSlotInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneSlotInfo stSlots = 1;
  for (int i = 0; i < this->stslots_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stslots(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemSlotInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneSlotInfo stSlots = 1;
  for (int i = 0; i < this->stslots_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stslots(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemSlotInfo::ByteSize() const {
  int total_size = 0;

  // repeated .OneSlotInfo stSlots = 1;
  total_size += 1 * this->stslots_size();
  for (int i = 0; i < this->stslots_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stslots(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemSlotInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemSlotInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemSlotInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemSlotInfo::MergeFrom(const ItemSlotInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stslots_.MergeFrom(from.stslots_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemSlotInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemSlotInfo::CopyFrom(const ItemSlotInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemSlotInfo::IsInitialized() const {

  return true;
}

void ItemSlotInfo::Swap(ItemSlotInfo* other) {
  if (other != this) {
    stslots_.Swap(&other->stslots_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemSlotInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemSlotInfo_descriptor_;
  metadata.reflection = ItemSlotInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ITEMDBINFO::kStItemSlotFieldNumber;
#endif  // !_MSC_VER

ITEMDBINFO::ITEMDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ITEMDBINFO::InitAsDefaultInstance() {
  stitemslot_ = const_cast< ::ItemSlotInfo*>(&::ItemSlotInfo::default_instance());
}

ITEMDBINFO::ITEMDBINFO(const ITEMDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ITEMDBINFO::SharedCtor() {
  _cached_size_ = 0;
  stitemslot_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ITEMDBINFO::~ITEMDBINFO() {
  SharedDtor();
}

void ITEMDBINFO::SharedDtor() {
  if (this != default_instance_) {
    delete stitemslot_;
  }
}

void ITEMDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ITEMDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ITEMDBINFO_descriptor_;
}

const ITEMDBINFO& ITEMDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

ITEMDBINFO* ITEMDBINFO::default_instance_ = NULL;

ITEMDBINFO* ITEMDBINFO::New() const {
  return new ITEMDBINFO;
}

void ITEMDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stitemslot()) {
      if (stitemslot_ != NULL) stitemslot_->::ItemSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ITEMDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ItemSlotInfo stItemSlot = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stitemslot()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ITEMDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ItemSlotInfo stItemSlot = 1;
  if (has_stitemslot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stitemslot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ITEMDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ItemSlotInfo stItemSlot = 1;
  if (has_stitemslot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stitemslot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ITEMDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ItemSlotInfo stItemSlot = 1;
    if (has_stitemslot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stitemslot());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ITEMDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ITEMDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ITEMDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ITEMDBINFO::MergeFrom(const ITEMDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stitemslot()) {
      mutable_stitemslot()->::ItemSlotInfo::MergeFrom(from.stitemslot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ITEMDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ITEMDBINFO::CopyFrom(const ITEMDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ITEMDBINFO::IsInitialized() const {

  return true;
}

void ITEMDBINFO::Swap(ITEMDBINFO* other) {
  if (other != this) {
    std::swap(stitemslot_, other->stitemslot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ITEMDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ITEMDBINFO_descriptor_;
  metadata.reflection = ITEMDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

FRIENDDBINFO::FRIENDDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FRIENDDBINFO::InitAsDefaultInstance() {
}

FRIENDDBINFO::FRIENDDBINFO(const FRIENDDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FRIENDDBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FRIENDDBINFO::~FRIENDDBINFO() {
  SharedDtor();
}

void FRIENDDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FRIENDDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FRIENDDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FRIENDDBINFO_descriptor_;
}

const FRIENDDBINFO& FRIENDDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

FRIENDDBINFO* FRIENDDBINFO::default_instance_ = NULL;

FRIENDDBINFO* FRIENDDBINFO::New() const {
  return new FRIENDDBINFO;
}

void FRIENDDBINFO::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FRIENDDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void FRIENDDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FRIENDDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FRIENDDBINFO::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FRIENDDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FRIENDDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FRIENDDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FRIENDDBINFO::MergeFrom(const FRIENDDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FRIENDDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FRIENDDBINFO::CopyFrom(const FRIENDDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FRIENDDBINFO::IsInitialized() const {

  return true;
}

void FRIENDDBINFO::Swap(FRIENDDBINFO* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FRIENDDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FRIENDDBINFO_descriptor_;
  metadata.reflection = FRIENDDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MailAppendix::kITypeFieldNumber;
const int MailAppendix::kIIDFieldNumber;
const int MailAppendix::kINumFieldNumber;
#endif  // !_MSC_VER

MailAppendix::MailAppendix()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MailAppendix::InitAsDefaultInstance() {
}

MailAppendix::MailAppendix(const MailAppendix& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MailAppendix::SharedCtor() {
  _cached_size_ = 0;
  itype_ = 0;
  iid_ = 0;
  inum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MailAppendix::~MailAppendix() {
  SharedDtor();
}

void MailAppendix::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MailAppendix::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MailAppendix::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailAppendix_descriptor_;
}

const MailAppendix& MailAppendix::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

MailAppendix* MailAppendix::default_instance_ = NULL;

MailAppendix* MailAppendix::New() const {
  return new MailAppendix;
}

void MailAppendix::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itype_ = 0;
    iid_ = 0;
    inum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MailAppendix::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iID;
        break;
      }

      // optional int32 iID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MailAppendix::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itype(), output);
  }

  // optional int32 iID = 2;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iid(), output);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MailAppendix::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itype(), target);
  }

  // optional int32 iID = 2;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iid(), target);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MailAppendix::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iType = 1;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional int32 iID = 2;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

    // optional int32 iNum = 3;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MailAppendix::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MailAppendix* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MailAppendix*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MailAppendix::MergeFrom(const MailAppendix& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MailAppendix::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MailAppendix::CopyFrom(const MailAppendix& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MailAppendix::IsInitialized() const {

  return true;
}

void MailAppendix::Swap(MailAppendix* other) {
  if (other != this) {
    std::swap(itype_, other->itype_);
    std::swap(iid_, other->iid_);
    std::swap(inum_, other->inum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MailAppendix::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MailAppendix_descriptor_;
  metadata.reflection = MailAppendix_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneMailInfo::kUUniqIDFieldNumber;
const int OneMailInfo::kIMailIDFieldNumber;
const int OneMailInfo::kISendTimeFieldNumber;
const int OneMailInfo::kIMailStatFieldNumber;
const int OneMailInfo::kStrTitleFieldNumber;
const int OneMailInfo::kStrParamsFieldNumber;
const int OneMailInfo::kStAppendixsFieldNumber;
#endif  // !_MSC_VER

OneMailInfo::OneMailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneMailInfo::InitAsDefaultInstance() {
}

OneMailInfo::OneMailInfo(const OneMailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneMailInfo::SharedCtor() {
  _cached_size_ = 0;
  uuniqid_ = 0u;
  imailid_ = 0;
  isendtime_ = 0;
  imailstat_ = 0;
  strtitle_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneMailInfo::~OneMailInfo() {
  SharedDtor();
}

void OneMailInfo::SharedDtor() {
  if (strtitle_ != &::google::protobuf::internal::kEmptyString) {
    delete strtitle_;
  }
  if (this != default_instance_) {
  }
}

void OneMailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneMailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneMailInfo_descriptor_;
}

const OneMailInfo& OneMailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

OneMailInfo* OneMailInfo::default_instance_ = NULL;

OneMailInfo* OneMailInfo::New() const {
  return new OneMailInfo;
}

void OneMailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuniqid_ = 0u;
    imailid_ = 0;
    isendtime_ = 0;
    imailstat_ = 0;
    if (has_strtitle()) {
      if (strtitle_ != &::google::protobuf::internal::kEmptyString) {
        strtitle_->clear();
      }
    }
  }
  strparams_.Clear();
  stappendixs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneMailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuniqid_)));
          set_has_uuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iMailID;
        break;
      }

      // optional int32 iMailID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMailID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imailid_)));
          set_has_imailid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iSendTime;
        break;
      }

      // optional int32 iSendTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isendtime_)));
          set_has_isendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iMailStat;
        break;
      }

      // optional int32 iMailStat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMailStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imailstat_)));
          set_has_imailstat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strTitle;
        break;
      }

      // optional bytes strTitle = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strTitle:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_strtitle()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strParams;
        break;
      }

      // repeated bytes strParams = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_strparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strParams;
        if (input->ExpectTag(58)) goto parse_stAppendixs;
        break;
      }

      // repeated .MailAppendix stAppendixs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stAppendixs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stappendixs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stAppendixs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneMailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuniqid(), output);
  }

  // optional int32 iMailID = 2;
  if (has_imailid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->imailid(), output);
  }

  // optional int32 iSendTime = 3;
  if (has_isendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isendtime(), output);
  }

  // optional int32 iMailStat = 4;
  if (has_imailstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imailstat(), output);
  }

  // optional bytes strTitle = 5;
  if (has_strtitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strtitle(), output);
  }

  // repeated bytes strParams = 6;
  for (int i = 0; i < this->strparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->strparams(i), output);
  }

  // repeated .MailAppendix stAppendixs = 7;
  for (int i = 0; i < this->stappendixs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stappendixs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneMailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuniqid(), target);
  }

  // optional int32 iMailID = 2;
  if (has_imailid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->imailid(), target);
  }

  // optional int32 iSendTime = 3;
  if (has_isendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isendtime(), target);
  }

  // optional int32 iMailStat = 4;
  if (has_imailstat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imailstat(), target);
  }

  // optional bytes strTitle = 5;
  if (has_strtitle()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->strtitle(), target);
  }

  // repeated bytes strParams = 6;
  for (int i = 0; i < this->strparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->strparams(i), target);
  }

  // repeated .MailAppendix stAppendixs = 7;
  for (int i = 0; i < this->stappendixs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stappendixs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneMailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uUniqID = 1;
    if (has_uuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuniqid());
    }

    // optional int32 iMailID = 2;
    if (has_imailid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imailid());
    }

    // optional int32 iSendTime = 3;
    if (has_isendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isendtime());
    }

    // optional int32 iMailStat = 4;
    if (has_imailstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imailstat());
    }

    // optional bytes strTitle = 5;
    if (has_strtitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->strtitle());
    }

  }
  // repeated bytes strParams = 6;
  total_size += 1 * this->strparams_size();
  for (int i = 0; i < this->strparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->strparams(i));
  }

  // repeated .MailAppendix stAppendixs = 7;
  total_size += 1 * this->stappendixs_size();
  for (int i = 0; i < this->stappendixs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stappendixs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneMailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneMailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneMailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneMailInfo::MergeFrom(const OneMailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  strparams_.MergeFrom(from.strparams_);
  stappendixs_.MergeFrom(from.stappendixs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuniqid()) {
      set_uuniqid(from.uuniqid());
    }
    if (from.has_imailid()) {
      set_imailid(from.imailid());
    }
    if (from.has_isendtime()) {
      set_isendtime(from.isendtime());
    }
    if (from.has_imailstat()) {
      set_imailstat(from.imailstat());
    }
    if (from.has_strtitle()) {
      set_strtitle(from.strtitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneMailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneMailInfo::CopyFrom(const OneMailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneMailInfo::IsInitialized() const {

  return true;
}

void OneMailInfo::Swap(OneMailInfo* other) {
  if (other != this) {
    std::swap(uuniqid_, other->uuniqid_);
    std::swap(imailid_, other->imailid_);
    std::swap(isendtime_, other->isendtime_);
    std::swap(imailstat_, other->imailstat_);
    std::swap(strtitle_, other->strtitle_);
    strparams_.Swap(&other->strparams_);
    stappendixs_.Swap(&other->stappendixs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneMailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneMailInfo_descriptor_;
  metadata.reflection = OneMailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MAILDBINFO::kUSystemMaxIDFieldNumber;
const int MAILDBINFO::kUPersonalMaxIDFieldNumber;
const int MAILDBINFO::kStMailsFieldNumber;
#endif  // !_MSC_VER

MAILDBINFO::MAILDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MAILDBINFO::InitAsDefaultInstance() {
}

MAILDBINFO::MAILDBINFO(const MAILDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MAILDBINFO::SharedCtor() {
  _cached_size_ = 0;
  usystemmaxid_ = 0u;
  upersonalmaxid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MAILDBINFO::~MAILDBINFO() {
  SharedDtor();
}

void MAILDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MAILDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MAILDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAILDBINFO_descriptor_;
}

const MAILDBINFO& MAILDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

MAILDBINFO* MAILDBINFO::default_instance_ = NULL;

MAILDBINFO* MAILDBINFO::New() const {
  return new MAILDBINFO;
}

void MAILDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usystemmaxid_ = 0u;
    upersonalmaxid_ = 0u;
  }
  stmails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MAILDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uSystemMaxID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usystemmaxid_)));
          set_has_usystemmaxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uPersonalMaxID;
        break;
      }

      // optional uint32 uPersonalMaxID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uPersonalMaxID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upersonalmaxid_)));
          set_has_upersonalmaxid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stMails;
        break;
      }

      // repeated .OneMailInfo stMails = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stmails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stMails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MAILDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uSystemMaxID = 1;
  if (has_usystemmaxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usystemmaxid(), output);
  }

  // optional uint32 uPersonalMaxID = 2;
  if (has_upersonalmaxid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upersonalmaxid(), output);
  }

  // repeated .OneMailInfo stMails = 3;
  for (int i = 0; i < this->stmails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stmails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MAILDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uSystemMaxID = 1;
  if (has_usystemmaxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usystemmaxid(), target);
  }

  // optional uint32 uPersonalMaxID = 2;
  if (has_upersonalmaxid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upersonalmaxid(), target);
  }

  // repeated .OneMailInfo stMails = 3;
  for (int i = 0; i < this->stmails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stmails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MAILDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uSystemMaxID = 1;
    if (has_usystemmaxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usystemmaxid());
    }

    // optional uint32 uPersonalMaxID = 2;
    if (has_upersonalmaxid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upersonalmaxid());
    }

  }
  // repeated .OneMailInfo stMails = 3;
  total_size += 1 * this->stmails_size();
  for (int i = 0; i < this->stmails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stmails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MAILDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MAILDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MAILDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MAILDBINFO::MergeFrom(const MAILDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  stmails_.MergeFrom(from.stmails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usystemmaxid()) {
      set_usystemmaxid(from.usystemmaxid());
    }
    if (from.has_upersonalmaxid()) {
      set_upersonalmaxid(from.upersonalmaxid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MAILDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MAILDBINFO::CopyFrom(const MAILDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAILDBINFO::IsInitialized() const {

  return true;
}

void MAILDBINFO::Swap(MAILDBINFO* other) {
  if (other != this) {
    std::swap(usystemmaxid_, other->usystemmaxid_);
    std::swap(upersonalmaxid_, other->upersonalmaxid_);
    stmails_.Swap(&other->stmails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MAILDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MAILDBINFO_descriptor_;
  metadata.reflection = MAILDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PAYOFFLINEDBINFO::kStRecordsFieldNumber;
#endif  // !_MSC_VER

PAYOFFLINEDBINFO::PAYOFFLINEDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PAYOFFLINEDBINFO::InitAsDefaultInstance() {
}

PAYOFFLINEDBINFO::PAYOFFLINEDBINFO(const PAYOFFLINEDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PAYOFFLINEDBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PAYOFFLINEDBINFO::~PAYOFFLINEDBINFO() {
  SharedDtor();
}

void PAYOFFLINEDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PAYOFFLINEDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PAYOFFLINEDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PAYOFFLINEDBINFO_descriptor_;
}

const PAYOFFLINEDBINFO& PAYOFFLINEDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

PAYOFFLINEDBINFO* PAYOFFLINEDBINFO::default_instance_ = NULL;

PAYOFFLINEDBINFO* PAYOFFLINEDBINFO::New() const {
  return new PAYOFFLINEDBINFO;
}

void PAYOFFLINEDBINFO::Clear() {
  strecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PAYOFFLINEDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RechargeRecord stRecords = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stRecords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PAYOFFLINEDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RechargeRecord stRecords = 1;
  for (int i = 0; i < this->strecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strecords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PAYOFFLINEDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RechargeRecord stRecords = 1;
  for (int i = 0; i < this->strecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strecords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PAYOFFLINEDBINFO::ByteSize() const {
  int total_size = 0;

  // repeated .RechargeRecord stRecords = 1;
  total_size += 1 * this->strecords_size();
  for (int i = 0; i < this->strecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PAYOFFLINEDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PAYOFFLINEDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PAYOFFLINEDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PAYOFFLINEDBINFO::MergeFrom(const PAYOFFLINEDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  strecords_.MergeFrom(from.strecords_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PAYOFFLINEDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PAYOFFLINEDBINFO::CopyFrom(const PAYOFFLINEDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PAYOFFLINEDBINFO::IsInitialized() const {

  return true;
}

void PAYOFFLINEDBINFO::Swap(PAYOFFLINEDBINFO* other) {
  if (other != this) {
    strecords_.Swap(&other->strecords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PAYOFFLINEDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PAYOFFLINEDBINFO_descriptor_;
  metadata.reflection = PAYOFFLINEDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddResInfo::kIResTypeFieldNumber;
const int AddResInfo::kIAddNumFieldNumber;
#endif  // !_MSC_VER

AddResInfo::AddResInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddResInfo::InitAsDefaultInstance() {
}

AddResInfo::AddResInfo(const AddResInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddResInfo::SharedCtor() {
  _cached_size_ = 0;
  irestype_ = 0;
  iaddnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddResInfo::~AddResInfo() {
  SharedDtor();
}

void AddResInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddResInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddResInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddResInfo_descriptor_;
}

const AddResInfo& AddResInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

AddResInfo* AddResInfo::default_instance_ = NULL;

AddResInfo* AddResInfo::New() const {
  return new AddResInfo;
}

void AddResInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irestype_ = 0;
    iaddnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddResInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irestype_)));
          set_has_irestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iAddNum;
        break;
      }

      // optional int32 iAddNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iaddnum_)));
          set_has_iaddnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddResInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResType = 1;
  if (has_irestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irestype(), output);
  }

  // optional int32 iAddNum = 2;
  if (has_iaddnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iaddnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddResInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResType = 1;
  if (has_irestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irestype(), target);
  }

  // optional int32 iAddNum = 2;
  if (has_iaddnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iaddnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddResInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResType = 1;
    if (has_irestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irestype());
    }

    // optional int32 iAddNum = 2;
    if (has_iaddnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iaddnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddResInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddResInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddResInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddResInfo::MergeFrom(const AddResInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irestype()) {
      set_irestype(from.irestype());
    }
    if (from.has_iaddnum()) {
      set_iaddnum(from.iaddnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddResInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddResInfo::CopyFrom(const AddResInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResInfo::IsInitialized() const {

  return true;
}

void AddResInfo::Swap(AddResInfo* other) {
  if (other != this) {
    std::swap(irestype_, other->irestype_);
    std::swap(iaddnum_, other->iaddnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddResInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddResInfo_descriptor_;
  metadata.reflection = AddResInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RESOFFLINEDBINFO::kStAddResFieldNumber;
#endif  // !_MSC_VER

RESOFFLINEDBINFO::RESOFFLINEDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RESOFFLINEDBINFO::InitAsDefaultInstance() {
}

RESOFFLINEDBINFO::RESOFFLINEDBINFO(const RESOFFLINEDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RESOFFLINEDBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RESOFFLINEDBINFO::~RESOFFLINEDBINFO() {
  SharedDtor();
}

void RESOFFLINEDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RESOFFLINEDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RESOFFLINEDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESOFFLINEDBINFO_descriptor_;
}

const RESOFFLINEDBINFO& RESOFFLINEDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

RESOFFLINEDBINFO* RESOFFLINEDBINFO::default_instance_ = NULL;

RESOFFLINEDBINFO* RESOFFLINEDBINFO::New() const {
  return new RESOFFLINEDBINFO;
}

void RESOFFLINEDBINFO::Clear() {
  staddres_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RESOFFLINEDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AddResInfo stAddRes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stAddRes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_staddres()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stAddRes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RESOFFLINEDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AddResInfo stAddRes = 1;
  for (int i = 0; i < this->staddres_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->staddres(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RESOFFLINEDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AddResInfo stAddRes = 1;
  for (int i = 0; i < this->staddres_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->staddres(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RESOFFLINEDBINFO::ByteSize() const {
  int total_size = 0;

  // repeated .AddResInfo stAddRes = 1;
  total_size += 1 * this->staddres_size();
  for (int i = 0; i < this->staddres_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->staddres(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RESOFFLINEDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RESOFFLINEDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RESOFFLINEDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RESOFFLINEDBINFO::MergeFrom(const RESOFFLINEDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  staddres_.MergeFrom(from.staddres_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RESOFFLINEDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RESOFFLINEDBINFO::CopyFrom(const RESOFFLINEDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RESOFFLINEDBINFO::IsInitialized() const {

  return true;
}

void RESOFFLINEDBINFO::Swap(RESOFFLINEDBINFO* other) {
  if (other != this) {
    staddres_.Swap(&other->staddres_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RESOFFLINEDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RESOFFLINEDBINFO_descriptor_;
  metadata.reflection = RESOFFLINEDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MAILOFFLINEDBINFO::kStMailsFieldNumber;
#endif  // !_MSC_VER

MAILOFFLINEDBINFO::MAILOFFLINEDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MAILOFFLINEDBINFO::InitAsDefaultInstance() {
}

MAILOFFLINEDBINFO::MAILOFFLINEDBINFO(const MAILOFFLINEDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MAILOFFLINEDBINFO::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MAILOFFLINEDBINFO::~MAILOFFLINEDBINFO() {
  SharedDtor();
}

void MAILOFFLINEDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MAILOFFLINEDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MAILOFFLINEDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MAILOFFLINEDBINFO_descriptor_;
}

const MAILOFFLINEDBINFO& MAILOFFLINEDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

MAILOFFLINEDBINFO* MAILOFFLINEDBINFO::default_instance_ = NULL;

MAILOFFLINEDBINFO* MAILOFFLINEDBINFO::New() const {
  return new MAILOFFLINEDBINFO;
}

void MAILOFFLINEDBINFO::Clear() {
  stmails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MAILOFFLINEDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneMailInfo stMails = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stmails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stMails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MAILOFFLINEDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneMailInfo stMails = 1;
  for (int i = 0; i < this->stmails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stmails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MAILOFFLINEDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneMailInfo stMails = 1;
  for (int i = 0; i < this->stmails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stmails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MAILOFFLINEDBINFO::ByteSize() const {
  int total_size = 0;

  // repeated .OneMailInfo stMails = 1;
  total_size += 1 * this->stmails_size();
  for (int i = 0; i < this->stmails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stmails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MAILOFFLINEDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MAILOFFLINEDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MAILOFFLINEDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MAILOFFLINEDBINFO::MergeFrom(const MAILOFFLINEDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  stmails_.MergeFrom(from.stmails_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MAILOFFLINEDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MAILOFFLINEDBINFO::CopyFrom(const MAILOFFLINEDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MAILOFFLINEDBINFO::IsInitialized() const {

  return true;
}

void MAILOFFLINEDBINFO::Swap(MAILOFFLINEDBINFO* other) {
  if (other != this) {
    stmails_.Swap(&other->stmails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MAILOFFLINEDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MAILOFFLINEDBINFO_descriptor_;
  metadata.reflection = MAILOFFLINEDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RESERVED1DBINFO::kStPayInfoFieldNumber;
const int RESERVED1DBINFO::kStResInfoFieldNumber;
const int RESERVED1DBINFO::kStItemInfoFieldNumber;
const int RESERVED1DBINFO::kStMailInfoFieldNumber;
#endif  // !_MSC_VER

RESERVED1DBINFO::RESERVED1DBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RESERVED1DBINFO::InitAsDefaultInstance() {
  stpayinfo_ = const_cast< ::PAYOFFLINEDBINFO*>(&::PAYOFFLINEDBINFO::default_instance());
  stresinfo_ = const_cast< ::RESOFFLINEDBINFO*>(&::RESOFFLINEDBINFO::default_instance());
  stiteminfo_ = const_cast< ::ItemSlotInfo*>(&::ItemSlotInfo::default_instance());
  stmailinfo_ = const_cast< ::MAILOFFLINEDBINFO*>(&::MAILOFFLINEDBINFO::default_instance());
}

RESERVED1DBINFO::RESERVED1DBINFO(const RESERVED1DBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RESERVED1DBINFO::SharedCtor() {
  _cached_size_ = 0;
  stpayinfo_ = NULL;
  stresinfo_ = NULL;
  stiteminfo_ = NULL;
  stmailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RESERVED1DBINFO::~RESERVED1DBINFO() {
  SharedDtor();
}

void RESERVED1DBINFO::SharedDtor() {
  if (this != default_instance_) {
    delete stpayinfo_;
    delete stresinfo_;
    delete stiteminfo_;
    delete stmailinfo_;
  }
}

void RESERVED1DBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RESERVED1DBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESERVED1DBINFO_descriptor_;
}

const RESERVED1DBINFO& RESERVED1DBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

RESERVED1DBINFO* RESERVED1DBINFO::default_instance_ = NULL;

RESERVED1DBINFO* RESERVED1DBINFO::New() const {
  return new RESERVED1DBINFO;
}

void RESERVED1DBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stpayinfo()) {
      if (stpayinfo_ != NULL) stpayinfo_->::PAYOFFLINEDBINFO::Clear();
    }
    if (has_stresinfo()) {
      if (stresinfo_ != NULL) stresinfo_->::RESOFFLINEDBINFO::Clear();
    }
    if (has_stiteminfo()) {
      if (stiteminfo_ != NULL) stiteminfo_->::ItemSlotInfo::Clear();
    }
    if (has_stmailinfo()) {
      if (stmailinfo_ != NULL) stmailinfo_->::MAILOFFLINEDBINFO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RESERVED1DBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PAYOFFLINEDBINFO stPayInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpayinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stResInfo;
        break;
      }

      // optional .RESOFFLINEDBINFO stResInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stResInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stresinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stItemInfo;
        break;
      }

      // optional .ItemSlotInfo stItemInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stiteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stMailInfo;
        break;
      }

      // optional .MAILOFFLINEDBINFO stMailInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stMailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stmailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RESERVED1DBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PAYOFFLINEDBINFO stPayInfo = 1;
  if (has_stpayinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stpayinfo(), output);
  }

  // optional .RESOFFLINEDBINFO stResInfo = 2;
  if (has_stresinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stresinfo(), output);
  }

  // optional .ItemSlotInfo stItemInfo = 3;
  if (has_stiteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stiteminfo(), output);
  }

  // optional .MAILOFFLINEDBINFO stMailInfo = 4;
  if (has_stmailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stmailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RESERVED1DBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PAYOFFLINEDBINFO stPayInfo = 1;
  if (has_stpayinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stpayinfo(), target);
  }

  // optional .RESOFFLINEDBINFO stResInfo = 2;
  if (has_stresinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stresinfo(), target);
  }

  // optional .ItemSlotInfo stItemInfo = 3;
  if (has_stiteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stiteminfo(), target);
  }

  // optional .MAILOFFLINEDBINFO stMailInfo = 4;
  if (has_stmailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stmailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RESERVED1DBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PAYOFFLINEDBINFO stPayInfo = 1;
    if (has_stpayinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpayinfo());
    }

    // optional .RESOFFLINEDBINFO stResInfo = 2;
    if (has_stresinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stresinfo());
    }

    // optional .ItemSlotInfo stItemInfo = 3;
    if (has_stiteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stiteminfo());
    }

    // optional .MAILOFFLINEDBINFO stMailInfo = 4;
    if (has_stmailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stmailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RESERVED1DBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RESERVED1DBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RESERVED1DBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RESERVED1DBINFO::MergeFrom(const RESERVED1DBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stpayinfo()) {
      mutable_stpayinfo()->::PAYOFFLINEDBINFO::MergeFrom(from.stpayinfo());
    }
    if (from.has_stresinfo()) {
      mutable_stresinfo()->::RESOFFLINEDBINFO::MergeFrom(from.stresinfo());
    }
    if (from.has_stiteminfo()) {
      mutable_stiteminfo()->::ItemSlotInfo::MergeFrom(from.stiteminfo());
    }
    if (from.has_stmailinfo()) {
      mutable_stmailinfo()->::MAILOFFLINEDBINFO::MergeFrom(from.stmailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RESERVED1DBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RESERVED1DBINFO::CopyFrom(const RESERVED1DBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RESERVED1DBINFO::IsInitialized() const {

  return true;
}

void RESERVED1DBINFO::Swap(RESERVED1DBINFO* other) {
  if (other != this) {
    std::swap(stpayinfo_, other->stpayinfo_);
    std::swap(stresinfo_, other->stresinfo_);
    std::swap(stiteminfo_, other->stiteminfo_);
    std::swap(stmailinfo_, other->stmailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RESERVED1DBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RESERVED1DBINFO_descriptor_;
  metadata.reflection = RESERVED1DBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeOrder::kIExchangeIDFieldNumber;
const int ExchangeOrder::kStrOrderIDFieldNumber;
const int ExchangeOrder::kStrPhoneFieldNumber;
const int ExchangeOrder::kIExchangeTimeFieldNumber;
const int ExchangeOrder::kIStatFieldNumber;
#endif  // !_MSC_VER

ExchangeOrder::ExchangeOrder()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeOrder::InitAsDefaultInstance() {
}

ExchangeOrder::ExchangeOrder(const ExchangeOrder& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeOrder::SharedCtor() {
  _cached_size_ = 0;
  iexchangeid_ = 0;
  strorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iexchangetime_ = 0;
  istat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeOrder::~ExchangeOrder() {
  SharedDtor();
}

void ExchangeOrder::SharedDtor() {
  if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete strorderid_;
  }
  if (strphone_ != &::google::protobuf::internal::kEmptyString) {
    delete strphone_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeOrder_descriptor_;
}

const ExchangeOrder& ExchangeOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

ExchangeOrder* ExchangeOrder::default_instance_ = NULL;

ExchangeOrder* ExchangeOrder::New() const {
  return new ExchangeOrder;
}

void ExchangeOrder::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iexchangeid_ = 0;
    if (has_strorderid()) {
      if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
        strorderid_->clear();
      }
    }
    if (has_strphone()) {
      if (strphone_ != &::google::protobuf::internal::kEmptyString) {
        strphone_->clear();
      }
    }
    iexchangetime_ = 0;
    istat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeOrder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iExchangeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strOrderID;
        break;
      }

      // optional string strOrderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strorderid().data(), this->strorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strPhone;
        break;
      }

      // optional string strPhone = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strphone().data(), this->strphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iExchangeTime;
        break;
      }

      // optional int32 iExchangeTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iExchangeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangetime_)));
          set_has_iexchangetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iStat;
        break;
      }

      // optional int32 iStat = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istat_)));
          set_has_istat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeOrder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iexchangeid(), output);
  }

  // optional string strOrderID = 2;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strorderid(), output);
  }

  // optional string strPhone = 3;
  if (has_strphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphone().data(), this->strphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strphone(), output);
  }

  // optional int32 iExchangeTime = 4;
  if (has_iexchangetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iexchangetime(), output);
  }

  // optional int32 iStat = 5;
  if (has_istat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->istat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeOrder::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iexchangeid(), target);
  }

  // optional string strOrderID = 2;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strorderid(), target);
  }

  // optional string strPhone = 3;
  if (has_strphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphone().data(), this->strphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strphone(), target);
  }

  // optional int32 iExchangeTime = 4;
  if (has_iexchangetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iexchangetime(), target);
  }

  // optional int32 iStat = 5;
  if (has_istat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->istat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeOrder::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iExchangeID = 1;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

    // optional string strOrderID = 2;
    if (has_strorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strorderid());
    }

    // optional string strPhone = 3;
    if (has_strphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strphone());
    }

    // optional int32 iExchangeTime = 4;
    if (has_iexchangetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangetime());
    }

    // optional int32 iStat = 5;
    if (has_istat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeOrder::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeOrder* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeOrder*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeOrder::MergeFrom(const ExchangeOrder& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
    if (from.has_strorderid()) {
      set_strorderid(from.strorderid());
    }
    if (from.has_strphone()) {
      set_strphone(from.strphone());
    }
    if (from.has_iexchangetime()) {
      set_iexchangetime(from.iexchangetime());
    }
    if (from.has_istat()) {
      set_istat(from.istat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeOrder::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeOrder::CopyFrom(const ExchangeOrder& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeOrder::IsInitialized() const {

  return true;
}

void ExchangeOrder::Swap(ExchangeOrder* other) {
  if (other != this) {
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(strorderid_, other->strorderid_);
    std::swap(strphone_, other->strphone_);
    std::swap(iexchangetime_, other->iexchangetime_);
    std::swap(istat_, other->istat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeOrder_descriptor_;
  metadata.reflection = ExchangeOrder_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExchangeUser::kStrNameFieldNumber;
const int ExchangeUser::kStrPhoneFieldNumber;
const int ExchangeUser::kStrMailNumFieldNumber;
const int ExchangeUser::kStrAddressFieldNumber;
const int ExchangeUser::kStrRemarksFieldNumber;
const int ExchangeUser::kStrQQNumFieldNumber;
const int ExchangeUser::kILastSetTimeFieldNumber;
const int ExchangeUser::kUiLimitInfoFieldNumber;
#endif  // !_MSC_VER

ExchangeUser::ExchangeUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExchangeUser::InitAsDefaultInstance() {
}

ExchangeUser::ExchangeUser(const ExchangeUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExchangeUser::SharedCtor() {
  _cached_size_ = 0;
  strname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strphone_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strmailnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  straddress_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strremarks_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strqqnum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ilastsettime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExchangeUser::~ExchangeUser() {
  SharedDtor();
}

void ExchangeUser::SharedDtor() {
  if (strname_ != &::google::protobuf::internal::kEmptyString) {
    delete strname_;
  }
  if (strphone_ != &::google::protobuf::internal::kEmptyString) {
    delete strphone_;
  }
  if (strmailnum_ != &::google::protobuf::internal::kEmptyString) {
    delete strmailnum_;
  }
  if (straddress_ != &::google::protobuf::internal::kEmptyString) {
    delete straddress_;
  }
  if (strremarks_ != &::google::protobuf::internal::kEmptyString) {
    delete strremarks_;
  }
  if (strqqnum_ != &::google::protobuf::internal::kEmptyString) {
    delete strqqnum_;
  }
  if (this != default_instance_) {
  }
}

void ExchangeUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExchangeUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExchangeUser_descriptor_;
}

const ExchangeUser& ExchangeUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

ExchangeUser* ExchangeUser::default_instance_ = NULL;

ExchangeUser* ExchangeUser::New() const {
  return new ExchangeUser;
}

void ExchangeUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strname()) {
      if (strname_ != &::google::protobuf::internal::kEmptyString) {
        strname_->clear();
      }
    }
    if (has_strphone()) {
      if (strphone_ != &::google::protobuf::internal::kEmptyString) {
        strphone_->clear();
      }
    }
    if (has_strmailnum()) {
      if (strmailnum_ != &::google::protobuf::internal::kEmptyString) {
        strmailnum_->clear();
      }
    }
    if (has_straddress()) {
      if (straddress_ != &::google::protobuf::internal::kEmptyString) {
        straddress_->clear();
      }
    }
    if (has_strremarks()) {
      if (strremarks_ != &::google::protobuf::internal::kEmptyString) {
        strremarks_->clear();
      }
    }
    if (has_strqqnum()) {
      if (strqqnum_ != &::google::protobuf::internal::kEmptyString) {
        strqqnum_->clear();
      }
    }
    ilastsettime_ = 0;
  }
  uilimitinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExchangeUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strPhone;
        break;
      }

      // optional string strPhone = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPhone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strphone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strphone().data(), this->strphone().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strMailNum;
        break;
      }

      // optional string strMailNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMailNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmailnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strmailnum().data(), this->strmailnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strAddress;
        break;
      }

      // optional string strAddress = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAddress:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straddress()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straddress().data(), this->straddress().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strRemarks;
        break;
      }

      // optional string strRemarks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRemarks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strremarks()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strremarks().data(), this->strremarks().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strQQNum;
        break;
      }

      // optional string strQQNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strQQNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strqqnum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strqqnum().data(), this->strqqnum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iLastSetTime;
        break;
      }

      // optional int32 iLastSetTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastSetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastsettime_)));
          set_has_ilastsettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uiLimitInfo;
        break;
      }

      // repeated uint32 uiLimitInfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiLimitInfo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_uilimitinfo())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uilimitinfo())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_uiLimitInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExchangeUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strname(), output);
  }

  // optional string strPhone = 2;
  if (has_strphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphone().data(), this->strphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strphone(), output);
  }

  // optional string strMailNum = 3;
  if (has_strmailnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmailnum().data(), this->strmailnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strmailnum(), output);
  }

  // optional string strAddress = 4;
  if (has_straddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straddress().data(), this->straddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->straddress(), output);
  }

  // optional string strRemarks = 5;
  if (has_strremarks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strremarks().data(), this->strremarks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strremarks(), output);
  }

  // optional string strQQNum = 6;
  if (has_strqqnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strqqnum().data(), this->strqqnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strqqnum(), output);
  }

  // optional int32 iLastSetTime = 7;
  if (has_ilastsettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ilastsettime(), output);
  }

  // repeated uint32 uiLimitInfo = 8;
  for (int i = 0; i < this->uilimitinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->uilimitinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExchangeUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strName = 1;
  if (has_strname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strname(), target);
  }

  // optional string strPhone = 2;
  if (has_strphone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphone().data(), this->strphone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strphone(), target);
  }

  // optional string strMailNum = 3;
  if (has_strmailnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmailnum().data(), this->strmailnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strmailnum(), target);
  }

  // optional string strAddress = 4;
  if (has_straddress()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straddress().data(), this->straddress().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->straddress(), target);
  }

  // optional string strRemarks = 5;
  if (has_strremarks()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strremarks().data(), this->strremarks().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strremarks(), target);
  }

  // optional string strQQNum = 6;
  if (has_strqqnum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strqqnum().data(), this->strqqnum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strqqnum(), target);
  }

  // optional int32 iLastSetTime = 7;
  if (has_ilastsettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ilastsettime(), target);
  }

  // repeated uint32 uiLimitInfo = 8;
  for (int i = 0; i < this->uilimitinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->uilimitinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExchangeUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strName = 1;
    if (has_strname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strname());
    }

    // optional string strPhone = 2;
    if (has_strphone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strphone());
    }

    // optional string strMailNum = 3;
    if (has_strmailnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strmailnum());
    }

    // optional string strAddress = 4;
    if (has_straddress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straddress());
    }

    // optional string strRemarks = 5;
    if (has_strremarks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strremarks());
    }

    // optional string strQQNum = 6;
    if (has_strqqnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strqqnum());
    }

    // optional int32 iLastSetTime = 7;
    if (has_ilastsettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastsettime());
    }

  }
  // repeated uint32 uiLimitInfo = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->uilimitinfo_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uilimitinfo(i));
    }
    total_size += 1 * this->uilimitinfo_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExchangeUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExchangeUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExchangeUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExchangeUser::MergeFrom(const ExchangeUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  uilimitinfo_.MergeFrom(from.uilimitinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strname()) {
      set_strname(from.strname());
    }
    if (from.has_strphone()) {
      set_strphone(from.strphone());
    }
    if (from.has_strmailnum()) {
      set_strmailnum(from.strmailnum());
    }
    if (from.has_straddress()) {
      set_straddress(from.straddress());
    }
    if (from.has_strremarks()) {
      set_strremarks(from.strremarks());
    }
    if (from.has_strqqnum()) {
      set_strqqnum(from.strqqnum());
    }
    if (from.has_ilastsettime()) {
      set_ilastsettime(from.ilastsettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExchangeUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExchangeUser::CopyFrom(const ExchangeUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExchangeUser::IsInitialized() const {

  return true;
}

void ExchangeUser::Swap(ExchangeUser* other) {
  if (other != this) {
    std::swap(strname_, other->strname_);
    std::swap(strphone_, other->strphone_);
    std::swap(strmailnum_, other->strmailnum_);
    std::swap(straddress_, other->straddress_);
    std::swap(strremarks_, other->strremarks_);
    std::swap(strqqnum_, other->strqqnum_);
    std::swap(ilastsettime_, other->ilastsettime_);
    uilimitinfo_.Swap(&other->uilimitinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExchangeUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExchangeUser_descriptor_;
  metadata.reflection = ExchangeUser_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EXCHANGEDBINFO::kStUserInfoFieldNumber;
const int EXCHANGEDBINFO::kStOrdersFieldNumber;
#endif  // !_MSC_VER

EXCHANGEDBINFO::EXCHANGEDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EXCHANGEDBINFO::InitAsDefaultInstance() {
  stuserinfo_ = const_cast< ::ExchangeUser*>(&::ExchangeUser::default_instance());
}

EXCHANGEDBINFO::EXCHANGEDBINFO(const EXCHANGEDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EXCHANGEDBINFO::SharedCtor() {
  _cached_size_ = 0;
  stuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EXCHANGEDBINFO::~EXCHANGEDBINFO() {
  SharedDtor();
}

void EXCHANGEDBINFO::SharedDtor() {
  if (this != default_instance_) {
    delete stuserinfo_;
  }
}

void EXCHANGEDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EXCHANGEDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EXCHANGEDBINFO_descriptor_;
}

const EXCHANGEDBINFO& EXCHANGEDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

EXCHANGEDBINFO* EXCHANGEDBINFO::default_instance_ = NULL;

EXCHANGEDBINFO* EXCHANGEDBINFO::New() const {
  return new EXCHANGEDBINFO;
}

void EXCHANGEDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stuserinfo()) {
      if (stuserinfo_ != NULL) stuserinfo_->::ExchangeUser::Clear();
    }
  }
  storders_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EXCHANGEDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ExchangeUser stUserInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stOrders;
        break;
      }

      // repeated .ExchangeOrder stOrders = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOrders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stOrders;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EXCHANGEDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ExchangeUser stUserInfo = 1;
  if (has_stuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stuserinfo(), output);
  }

  // repeated .ExchangeOrder stOrders = 6;
  for (int i = 0; i < this->storders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->storders(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EXCHANGEDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ExchangeUser stUserInfo = 1;
  if (has_stuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stuserinfo(), target);
  }

  // repeated .ExchangeOrder stOrders = 6;
  for (int i = 0; i < this->storders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->storders(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EXCHANGEDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ExchangeUser stUserInfo = 1;
    if (has_stuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuserinfo());
    }

  }
  // repeated .ExchangeOrder stOrders = 6;
  total_size += 1 * this->storders_size();
  for (int i = 0; i < this->storders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storders(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EXCHANGEDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EXCHANGEDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EXCHANGEDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EXCHANGEDBINFO::MergeFrom(const EXCHANGEDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  storders_.MergeFrom(from.storders_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stuserinfo()) {
      mutable_stuserinfo()->::ExchangeUser::MergeFrom(from.stuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EXCHANGEDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EXCHANGEDBINFO::CopyFrom(const EXCHANGEDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EXCHANGEDBINFO::IsInitialized() const {

  return true;
}

void EXCHANGEDBINFO::Swap(EXCHANGEDBINFO* other) {
  if (other != this) {
    std::swap(stuserinfo_, other->stuserinfo_);
    storders_.Swap(&other->storders_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EXCHANGEDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EXCHANGEDBINFO_descriptor_;
  metadata.reflection = EXCHANGEDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RechargeRecord::kITimeFieldNumber;
const int RechargeRecord::kIRechargeIDFieldNumber;
const int RechargeRecord::kStrOrderIDFieldNumber;
#endif  // !_MSC_VER

RechargeRecord::RechargeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RechargeRecord::InitAsDefaultInstance() {
}

RechargeRecord::RechargeRecord(const RechargeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RechargeRecord::SharedCtor() {
  _cached_size_ = 0;
  itime_ = 0;
  irechargeid_ = 0;
  strorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RechargeRecord::~RechargeRecord() {
  SharedDtor();
}

void RechargeRecord::SharedDtor() {
  if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete strorderid_;
  }
  if (this != default_instance_) {
  }
}

void RechargeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RechargeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeRecord_descriptor_;
}

const RechargeRecord& RechargeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

RechargeRecord* RechargeRecord::default_instance_ = NULL;

RechargeRecord* RechargeRecord::New() const {
  return new RechargeRecord;
}

void RechargeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itime_ = 0;
    irechargeid_ = 0;
    if (has_strorderid()) {
      if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
        strorderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RechargeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itime_)));
          set_has_itime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iRechargeID;
        break;
      }

      // optional int32 iRechargeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRechargeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irechargeid_)));
          set_has_irechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strOrderID;
        break;
      }

      // optional string strOrderID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strorderid().data(), this->strorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RechargeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iTime = 1;
  if (has_itime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itime(), output);
  }

  // optional int32 iRechargeID = 2;
  if (has_irechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->irechargeid(), output);
  }

  // optional string strOrderID = 3;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strorderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RechargeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iTime = 1;
  if (has_itime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itime(), target);
  }

  // optional int32 iRechargeID = 2;
  if (has_irechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->irechargeid(), target);
  }

  // optional string strOrderID = 3;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strorderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RechargeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iTime = 1;
    if (has_itime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itime());
    }

    // optional int32 iRechargeID = 2;
    if (has_irechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irechargeid());
    }

    // optional string strOrderID = 3;
    if (has_strorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strorderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RechargeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RechargeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RechargeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RechargeRecord::MergeFrom(const RechargeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itime()) {
      set_itime(from.itime());
    }
    if (from.has_irechargeid()) {
      set_irechargeid(from.irechargeid());
    }
    if (from.has_strorderid()) {
      set_strorderid(from.strorderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RechargeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RechargeRecord::CopyFrom(const RechargeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RechargeRecord::IsInitialized() const {

  return true;
}

void RechargeRecord::Swap(RechargeRecord* other) {
  if (other != this) {
    std::swap(itime_, other->itime_);
    std::swap(irechargeid_, other->irechargeid_);
    std::swap(strorderid_, other->strorderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RechargeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RechargeRecord_descriptor_;
  metadata.reflection = RechargeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RECHARGEDBINFO::kIFirstRewardStatFieldNumber;
const int RECHARGEDBINFO::kStRecordsFieldNumber;
const int RECHARGEDBINFO::kIRechargeIDsFieldNumber;
#endif  // !_MSC_VER

RECHARGEDBINFO::RECHARGEDBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RECHARGEDBINFO::InitAsDefaultInstance() {
}

RECHARGEDBINFO::RECHARGEDBINFO(const RECHARGEDBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RECHARGEDBINFO::SharedCtor() {
  _cached_size_ = 0;
  ifirstrewardstat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RECHARGEDBINFO::~RECHARGEDBINFO() {
  SharedDtor();
}

void RECHARGEDBINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RECHARGEDBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RECHARGEDBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RECHARGEDBINFO_descriptor_;
}

const RECHARGEDBINFO& RECHARGEDBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

RECHARGEDBINFO* RECHARGEDBINFO::default_instance_ = NULL;

RECHARGEDBINFO* RECHARGEDBINFO::New() const {
  return new RECHARGEDBINFO;
}

void RECHARGEDBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifirstrewardstat_ = 0;
  }
  strecords_.Clear();
  irechargeids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RECHARGEDBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFirstRewardStat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifirstrewardstat_)));
          set_has_ifirstrewardstat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRecords;
        break;
      }

      // repeated .RechargeRecord stRecords = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRecords;
        if (input->ExpectTag(24)) goto parse_iRechargeIDs;
        break;
      }

      // repeated int32 iRechargeIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRechargeIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_irechargeids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_irechargeids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRechargeIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RECHARGEDBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFirstRewardStat = 1;
  if (has_ifirstrewardstat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifirstrewardstat(), output);
  }

  // repeated .RechargeRecord stRecords = 2;
  for (int i = 0; i < this->strecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strecords(i), output);
  }

  // repeated int32 iRechargeIDs = 3;
  for (int i = 0; i < this->irechargeids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->irechargeids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RECHARGEDBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFirstRewardStat = 1;
  if (has_ifirstrewardstat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifirstrewardstat(), target);
  }

  // repeated .RechargeRecord stRecords = 2;
  for (int i = 0; i < this->strecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strecords(i), target);
  }

  // repeated int32 iRechargeIDs = 3;
  for (int i = 0; i < this->irechargeids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->irechargeids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RECHARGEDBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFirstRewardStat = 1;
    if (has_ifirstrewardstat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifirstrewardstat());
    }

  }
  // repeated .RechargeRecord stRecords = 2;
  total_size += 1 * this->strecords_size();
  for (int i = 0; i < this->strecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strecords(i));
  }

  // repeated int32 iRechargeIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->irechargeids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->irechargeids(i));
    }
    total_size += 1 * this->irechargeids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RECHARGEDBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RECHARGEDBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RECHARGEDBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RECHARGEDBINFO::MergeFrom(const RECHARGEDBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  strecords_.MergeFrom(from.strecords_);
  irechargeids_.MergeFrom(from.irechargeids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifirstrewardstat()) {
      set_ifirstrewardstat(from.ifirstrewardstat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RECHARGEDBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RECHARGEDBINFO::CopyFrom(const RECHARGEDBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RECHARGEDBINFO::IsInitialized() const {

  return true;
}

void RECHARGEDBINFO::Swap(RECHARGEDBINFO* other) {
  if (other != this) {
    std::swap(ifirstrewardstat_, other->ifirstrewardstat_);
    strecords_.Swap(&other->strecords_);
    irechargeids_.Swap(&other->irechargeids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RECHARGEDBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RECHARGEDBINFO_descriptor_;
  metadata.reflection = RECHARGEDBINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RESERVED2DBINFO::kStExchangeInfoFieldNumber;
const int RESERVED2DBINFO::kStRechargeInfoFieldNumber;
#endif  // !_MSC_VER

RESERVED2DBINFO::RESERVED2DBINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RESERVED2DBINFO::InitAsDefaultInstance() {
  stexchangeinfo_ = const_cast< ::EXCHANGEDBINFO*>(&::EXCHANGEDBINFO::default_instance());
  strechargeinfo_ = const_cast< ::RECHARGEDBINFO*>(&::RECHARGEDBINFO::default_instance());
}

RESERVED2DBINFO::RESERVED2DBINFO(const RESERVED2DBINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RESERVED2DBINFO::SharedCtor() {
  _cached_size_ = 0;
  stexchangeinfo_ = NULL;
  strechargeinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RESERVED2DBINFO::~RESERVED2DBINFO() {
  SharedDtor();
}

void RESERVED2DBINFO::SharedDtor() {
  if (this != default_instance_) {
    delete stexchangeinfo_;
    delete strechargeinfo_;
  }
}

void RESERVED2DBINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RESERVED2DBINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RESERVED2DBINFO_descriptor_;
}

const RESERVED2DBINFO& RESERVED2DBINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  return *default_instance_;
}

RESERVED2DBINFO* RESERVED2DBINFO::default_instance_ = NULL;

RESERVED2DBINFO* RESERVED2DBINFO::New() const {
  return new RESERVED2DBINFO;
}

void RESERVED2DBINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stexchangeinfo()) {
      if (stexchangeinfo_ != NULL) stexchangeinfo_->::EXCHANGEDBINFO::Clear();
    }
    if (has_strechargeinfo()) {
      if (strechargeinfo_ != NULL) strechargeinfo_->::RECHARGEDBINFO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RESERVED2DBINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .EXCHANGEDBINFO stExchangeInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stexchangeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRechargeInfo;
        break;
      }

      // optional .RECHARGEDBINFO stRechargeInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRechargeInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strechargeinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RESERVED2DBINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .EXCHANGEDBINFO stExchangeInfo = 1;
  if (has_stexchangeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stexchangeinfo(), output);
  }

  // optional .RECHARGEDBINFO stRechargeInfo = 2;
  if (has_strechargeinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strechargeinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RESERVED2DBINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .EXCHANGEDBINFO stExchangeInfo = 1;
  if (has_stexchangeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stexchangeinfo(), target);
  }

  // optional .RECHARGEDBINFO stRechargeInfo = 2;
  if (has_strechargeinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strechargeinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RESERVED2DBINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .EXCHANGEDBINFO stExchangeInfo = 1;
    if (has_stexchangeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stexchangeinfo());
    }

    // optional .RECHARGEDBINFO stRechargeInfo = 2;
    if (has_strechargeinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strechargeinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RESERVED2DBINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RESERVED2DBINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RESERVED2DBINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RESERVED2DBINFO::MergeFrom(const RESERVED2DBINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stexchangeinfo()) {
      mutable_stexchangeinfo()->::EXCHANGEDBINFO::MergeFrom(from.stexchangeinfo());
    }
    if (from.has_strechargeinfo()) {
      mutable_strechargeinfo()->::RECHARGEDBINFO::MergeFrom(from.strechargeinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RESERVED2DBINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RESERVED2DBINFO::CopyFrom(const RESERVED2DBINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RESERVED2DBINFO::IsInitialized() const {

  return true;
}

void RESERVED2DBINFO::Swap(RESERVED2DBINFO* other) {
  if (other != this) {
    std::swap(stexchangeinfo_, other->stexchangeinfo_);
    std::swap(strechargeinfo_, other->strechargeinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RESERVED2DBINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RESERVED2DBINFO_descriptor_;
  metadata.reflection = RESERVED2DBINFO_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
