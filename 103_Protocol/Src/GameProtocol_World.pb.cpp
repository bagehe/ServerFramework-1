// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_World.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol_World.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* World_ZoneChanged_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_ZoneChanged_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_CreateRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_CreateRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_CreateRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_CreateRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_FetchRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_FetchRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_FetchRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_FetchRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_KickRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_KickRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_KickRole_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_KickRole_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WorldOnlineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WorldOnlineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_OnlineStat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_OnlineStat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_OnlineStat_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_OnlineStat_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_Chat_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_Chat_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateRankInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateRankInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateRank_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateRank_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateRank_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateRank_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetRankInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetRankInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetRankInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetRankInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_SendMail_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_SendMail_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_SendMail_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_SendMail_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_AddLimitNum_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_AddLimitNum_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_AddLimitNum_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_AddLimitNum_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdatePrizeInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdatePrizeInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateBetInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateBetInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UpdateLasvegas_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UpdateLasvegas_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UserRecharge_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UserRecharge_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_UserRecharge_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_UserRecharge_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMaster_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMaster_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* GameMaster_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameMaster_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_SystemMailID_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_SystemMailID_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetSystemMail_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetSystemMail_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetSystemMail_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetSystemMail_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_OnlineExchange_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_OnlineExchange_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_OnlineExchange_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_OnlineExchange_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetUserInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetUserInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetUserInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetUserInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_WriteLog_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_WriteLog_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetCardNo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetCardNo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_GetCardNo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_GetCardNo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_AddExcRec_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_AddExcRec_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* World_AddExcRec_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  World_AddExcRec_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LimitReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RechargeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailReasonType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* OnlineExchangeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_5fWorld_2eproto() {
  protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol_World.proto");
  GOOGLE_CHECK(file != NULL);
  World_ZoneChanged_Notify_descriptor_ = file->message_type(0);
  static const int World_ZoneChanged_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, worldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, stzones_),
  };
  World_ZoneChanged_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_ZoneChanged_Notify_descriptor_,
      World_ZoneChanged_Notify::default_instance_,
      World_ZoneChanged_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_ZoneChanged_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_ZoneChanged_Notify));
  World_CreateRole_Request_descriptor_ = file->message_type(1);
  static const int World_CreateRole_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, world_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, irealnamestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, stbirthdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, stkicker_),
  };
  World_CreateRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_CreateRole_Request_descriptor_,
      World_CreateRole_Request::default_instance_,
      World_CreateRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_CreateRole_Request));
  World_CreateRole_Response_descriptor_ = file->message_type(2);
  static const int World_CreateRole_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, irealnamestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, stkicker_),
  };
  World_CreateRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_CreateRole_Response_descriptor_,
      World_CreateRole_Response::default_instance_,
      World_CreateRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_CreateRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_CreateRole_Response));
  World_FetchRole_Request_descriptor_ = file->message_type(3);
  static const int World_FetchRole_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, bislogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, ireqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, stkicker_),
  };
  World_FetchRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_FetchRole_Request_descriptor_,
      World_FetchRole_Request::default_instance_,
      World_FetchRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_FetchRole_Request));
  World_FetchRole_Response_descriptor_ = file->message_type(4);
  static const int World_FetchRole_Response_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, bexist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, bislogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, stuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, stkicker_),
  };
  World_FetchRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_FetchRole_Response_descriptor_,
      World_FetchRole_Response::default_instance_,
      World_FetchRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_FetchRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_FetchRole_Response));
  World_UpdateRole_Request_descriptor_ = file->message_type(5);
  static const int World_UpdateRole_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, ireqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, stuserinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, bneedresponse_),
  };
  World_UpdateRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateRole_Request_descriptor_,
      World_UpdateRole_Request::default_instance_,
      World_UpdateRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateRole_Request));
  World_UpdateRole_Response_descriptor_ = file->message_type(6);
  static const int World_UpdateRole_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, iresult_),
  };
  World_UpdateRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateRole_Response_descriptor_,
      World_UpdateRole_Response::default_instance_,
      World_UpdateRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateRole_Response));
  KickerInfo_descriptor_ = file->message_type(7);
  static const int KickerInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, ifromworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, isessionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, strchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, irealnamestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, straccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, strdeviceid_),
  };
  KickerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickerInfo_descriptor_,
      KickerInfo::default_instance_,
      KickerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickerInfo));
  World_KickRole_Request_descriptor_ = file->message_type(8);
  static const int World_KickRole_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, bislogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, stkicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, ukickeduin_),
  };
  World_KickRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_KickRole_Request_descriptor_,
      World_KickRole_Request::default_instance_,
      World_KickRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_KickRole_Request));
  World_KickRole_Response_descriptor_ = file->message_type(9);
  static const int World_KickRole_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, bislogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, stkicker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, ukickeduin_),
  };
  World_KickRole_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_KickRole_Response_descriptor_,
      World_KickRole_Response::default_instance_,
      World_KickRole_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_KickRole_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_KickRole_Response));
  ZoneOnlineInfo_descriptor_ = file->message_type(10);
  static const int ZoneOnlineInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, irolenum_),
  };
  ZoneOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneOnlineInfo_descriptor_,
      ZoneOnlineInfo::default_instance_,
      ZoneOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneOnlineInfo));
  WorldOnlineInfo_descriptor_ = file->message_type(11);
  static const int WorldOnlineInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, ionlinerolenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, iregisternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, imaxonlinenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, imaxregisternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, iactivezonenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, stzoneinfos_),
  };
  WorldOnlineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WorldOnlineInfo_descriptor_,
      WorldOnlineInfo::default_instance_,
      WorldOnlineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WorldOnlineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WorldOnlineInfo));
  World_OnlineStat_Request_descriptor_ = file->message_type(12);
  static const int World_OnlineStat_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, stworldinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, urecordtime_),
  };
  World_OnlineStat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_OnlineStat_Request_descriptor_,
      World_OnlineStat_Request::default_instance_,
      World_OnlineStat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_OnlineStat_Request));
  World_OnlineStat_Response_descriptor_ = file->message_type(13);
  static const int World_OnlineStat_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, iinstanceid_),
  };
  World_OnlineStat_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_OnlineStat_Response_descriptor_,
      World_OnlineStat_Response::default_instance_,
      World_OnlineStat_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineStat_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_OnlineStat_Response));
  World_Chat_Notify_descriptor_ = file->message_type(14);
  static const int World_Chat_Notify_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, ichannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, sznickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, sttargetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, szmessage_),
  };
  World_Chat_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_Chat_Notify_descriptor_,
      World_Chat_Notify::default_instance_,
      World_Chat_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_Chat_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_Chat_Notify));
  UpdateRankInfo_descriptor_ = file->message_type(15);
  static const int UpdateRankInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRankInfo, iranktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRankInfo, strank_),
  };
  UpdateRankInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateRankInfo_descriptor_,
      UpdateRankInfo::default_instance_,
      UpdateRankInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRankInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateRankInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateRankInfo));
  World_UpdateRank_Request_descriptor_ = file->message_type(16);
  static const int World_UpdateRank_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRank_Request, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRank_Request, stupdateranks_),
  };
  World_UpdateRank_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateRank_Request_descriptor_,
      World_UpdateRank_Request::default_instance_,
      World_UpdateRank_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRank_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRank_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateRank_Request));
  World_UpdateRank_Response_descriptor_ = file->message_type(17);
  static const int World_UpdateRank_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRank_Response, iresult_),
  };
  World_UpdateRank_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateRank_Response_descriptor_,
      World_UpdateRank_Response::default_instance_,
      World_UpdateRank_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRank_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateRank_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateRank_Response));
  World_GetRankInfo_Request_descriptor_ = file->message_type(18);
  static const int World_GetRankInfo_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Request, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Request, iversionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Request, ifromzoneid_),
  };
  World_GetRankInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetRankInfo_Request_descriptor_,
      World_GetRankInfo_Request::default_instance_,
      World_GetRankInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetRankInfo_Request));
  World_GetRankInfo_Response_descriptor_ = file->message_type(19);
  static const int World_GetRankInfo_Response_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, iversionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, ilastupdate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, stranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, stlastranks_),
  };
  World_GetRankInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetRankInfo_Response_descriptor_,
      World_GetRankInfo_Response::default_instance_,
      World_GetRankInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetRankInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetRankInfo_Response));
  World_SendMail_Request_descriptor_ = file->message_type(20);
  static const int World_SendMail_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Request, stmailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Request, uifromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Request, uitouin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Request, itrytimes_),
  };
  World_SendMail_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_SendMail_Request_descriptor_,
      World_SendMail_Request::default_instance_,
      World_SendMail_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_SendMail_Request));
  World_SendMail_Response_descriptor_ = file->message_type(21);
  static const int World_SendMail_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Response, stmailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Response, uifromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Response, uitouin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Response, itrytimes_),
  };
  World_SendMail_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_SendMail_Response_descriptor_,
      World_SendMail_Response::default_instance_,
      World_SendMail_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SendMail_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_SendMail_Response));
  World_AddLimitNum_Request_descriptor_ = file->message_type(22);
  static const int World_AddLimitNum_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Request, iexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Request, iaddnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Request, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Request, ireason_),
  };
  World_AddLimitNum_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_AddLimitNum_Request_descriptor_,
      World_AddLimitNum_Request::default_instance_,
      World_AddLimitNum_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_AddLimitNum_Request));
  World_AddLimitNum_Response_descriptor_ = file->message_type(23);
  static const int World_AddLimitNum_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Response, iexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Response, ireason_),
  };
  World_AddLimitNum_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_AddLimitNum_Response_descriptor_,
      World_AddLimitNum_Response::default_instance_,
      World_AddLimitNum_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddLimitNum_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_AddLimitNum_Response));
  World_UpdatePrizeInfo_Request_descriptor_ = file->message_type(24);
  static const int World_UpdatePrizeInfo_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdatePrizeInfo_Request, stprizes_),
  };
  World_UpdatePrizeInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdatePrizeInfo_Request_descriptor_,
      World_UpdatePrizeInfo_Request::default_instance_,
      World_UpdatePrizeInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdatePrizeInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdatePrizeInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdatePrizeInfo_Request));
  World_UpdateBetInfo_Request_descriptor_ = file->message_type(25);
  static const int World_UpdateBetInfo_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateBetInfo_Request, stbetinfos_),
  };
  World_UpdateBetInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateBetInfo_Request_descriptor_,
      World_UpdateBetInfo_Request::default_instance_,
      World_UpdateBetInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateBetInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateBetInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateBetInfo_Request));
  World_UpdateLasvegas_Notify_descriptor_ = file->message_type(26);
  static const int World_UpdateLasvegas_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateLasvegas_Notify, stinfo_),
  };
  World_UpdateLasvegas_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UpdateLasvegas_Notify_descriptor_,
      World_UpdateLasvegas_Notify::default_instance_,
      World_UpdateLasvegas_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateLasvegas_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UpdateLasvegas_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UpdateLasvegas_Notify));
  World_UserRecharge_Request_descriptor_ = file->message_type(27);
  static const int World_UserRecharge_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, strorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, irmb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, irechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, itime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, iplatform_),
  };
  World_UserRecharge_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UserRecharge_Request_descriptor_,
      World_UserRecharge_Request::default_instance_,
      World_UserRecharge_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UserRecharge_Request));
  World_UserRecharge_Response_descriptor_ = file->message_type(28);
  static const int World_UserRecharge_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Response, strorderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Response, irechargeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Response, iplatform_),
  };
  World_UserRecharge_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_UserRecharge_Response_descriptor_,
      World_UserRecharge_Response::default_instance_,
      World_UserRecharge_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_UserRecharge_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_UserRecharge_Response));
  GameMaster_Request_descriptor_ = file->message_type(29);
  static const int GameMaster_Request_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, ioperatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, ufromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, utouin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, strparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, ivipmin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, ivipmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, strchannelids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, imailendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, ifromzoneid_),
  };
  GameMaster_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMaster_Request_descriptor_,
      GameMaster_Request::default_instance_,
      GameMaster_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMaster_Request));
  GameMaster_Response_descriptor_ = file->message_type(30);
  static const int GameMaster_Response_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, ioperatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, ufromuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, utouin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, stbaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, stiteminfo_),
  };
  GameMaster_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameMaster_Response_descriptor_,
      GameMaster_Response::default_instance_,
      GameMaster_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameMaster_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameMaster_Response));
  World_SystemMailID_Notify_descriptor_ = file->message_type(31);
  static const int World_SystemMailID_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SystemMailID_Notify, usystemuniqid_),
  };
  World_SystemMailID_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_SystemMailID_Notify_descriptor_,
      World_SystemMailID_Notify::default_instance_,
      World_SystemMailID_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SystemMailID_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_SystemMailID_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_SystemMailID_Notify));
  World_GetSystemMail_Request_descriptor_ = file->message_type(32);
  static const int World_GetSystemMail_Request_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, urolesystemuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, iviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, strchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, ireason_),
  };
  World_GetSystemMail_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetSystemMail_Request_descriptor_,
      World_GetSystemMail_Request::default_instance_,
      World_GetSystemMail_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetSystemMail_Request));
  World_GetSystemMail_Response_descriptor_ = file->message_type(33);
  static const int World_GetSystemMail_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Response, usystemuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Response, stmails_),
  };
  World_GetSystemMail_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetSystemMail_Response_descriptor_,
      World_GetSystemMail_Response::default_instance_,
      World_GetSystemMail_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetSystemMail_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetSystemMail_Response));
  OnlineExchange_descriptor_ = file->message_type(34);
  static const int OnlineExchange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineExchange, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineExchange, iitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineExchange, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineExchange, iexchangenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineExchange, strphonenum_),
  };
  OnlineExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineExchange_descriptor_,
      OnlineExchange::default_instance_,
      OnlineExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineExchange));
  World_OnlineExchange_Request_descriptor_ = file->message_type(35);
  static const int World_OnlineExchange_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Request, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Request, stinfo_),
  };
  World_OnlineExchange_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_OnlineExchange_Request_descriptor_,
      World_OnlineExchange_Request::default_instance_,
      World_OnlineExchange_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_OnlineExchange_Request));
  World_OnlineExchange_Response_descriptor_ = file->message_type(36);
  static const int World_OnlineExchange_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Response, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Response, stinfo_),
  };
  World_OnlineExchange_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_OnlineExchange_Response_descriptor_,
      World_OnlineExchange_Response::default_instance_,
      World_OnlineExchange_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_OnlineExchange_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_OnlineExchange_Response));
  World_GetUserInfo_Request_descriptor_ = file->message_type(37);
  static const int World_GetUserInfo_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Request, iplatformid_),
  };
  World_GetUserInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetUserInfo_Request_descriptor_,
      World_GetUserInfo_Request::default_instance_,
      World_GetUserInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetUserInfo_Request));
  World_GetUserInfo_Response_descriptor_ = file->message_type(38);
  static const int World_GetUserInfo_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Response, straccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Response, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Response, iplatformid_),
  };
  World_GetUserInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetUserInfo_Response_descriptor_,
      World_GetUserInfo_Response::default_instance_,
      World_GetUserInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetUserInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetUserInfo_Response));
  World_WriteLog_Request_descriptor_ = file->message_type(39);
  static const int World_WriteLog_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_WriteLog_Request, ilogtargettype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_WriteLog_Request, strlogdata_),
  };
  World_WriteLog_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_WriteLog_Request_descriptor_,
      World_WriteLog_Request::default_instance_,
      World_WriteLog_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_WriteLog_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_WriteLog_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_WriteLog_Request));
  World_GetCardNo_Request_descriptor_ = file->message_type(40);
  static const int World_GetCardNo_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Request, iexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Request, icardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Request, ifromzoneid_),
  };
  World_GetCardNo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetCardNo_Request_descriptor_,
      World_GetCardNo_Request::default_instance_,
      World_GetCardNo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetCardNo_Request));
  World_GetCardNo_Response_descriptor_ = file->message_type(41);
  static const int World_GetCardNo_Response_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, iexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, icardid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, ifromzoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, strcardno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, strcardpwd_),
  };
  World_GetCardNo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_GetCardNo_Response_descriptor_,
      World_GetCardNo_Response::default_instance_,
      World_GetCardNo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_GetCardNo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_GetCardNo_Response));
  World_AddExcRec_Request_descriptor_ = file->message_type(42);
  static const int World_AddExcRec_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddExcRec_Request, strecord_),
  };
  World_AddExcRec_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_AddExcRec_Request_descriptor_,
      World_AddExcRec_Request::default_instance_,
      World_AddExcRec_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddExcRec_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddExcRec_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_AddExcRec_Request));
  World_AddExcRec_Response_descriptor_ = file->message_type(43);
  static const int World_AddExcRec_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddExcRec_Response, iresult_),
  };
  World_AddExcRec_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      World_AddExcRec_Response_descriptor_,
      World_AddExcRec_Response::default_instance_,
      World_AddExcRec_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddExcRec_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(World_AddExcRec_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(World_AddExcRec_Response));
  LimitReasonType_descriptor_ = file->enum_type(0);
  RechargeType_descriptor_ = file->enum_type(1);
  MailReasonType_descriptor_ = file->enum_type(2);
  OnlineExchangeType_descriptor_ = file->enum_type(3);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_5fWorld_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_ZoneChanged_Notify_descriptor_, &World_ZoneChanged_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_CreateRole_Request_descriptor_, &World_CreateRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_CreateRole_Response_descriptor_, &World_CreateRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_FetchRole_Request_descriptor_, &World_FetchRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_FetchRole_Response_descriptor_, &World_FetchRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateRole_Request_descriptor_, &World_UpdateRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateRole_Response_descriptor_, &World_UpdateRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickerInfo_descriptor_, &KickerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_KickRole_Request_descriptor_, &World_KickRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_KickRole_Response_descriptor_, &World_KickRole_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneOnlineInfo_descriptor_, &ZoneOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WorldOnlineInfo_descriptor_, &WorldOnlineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_OnlineStat_Request_descriptor_, &World_OnlineStat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_OnlineStat_Response_descriptor_, &World_OnlineStat_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_Chat_Notify_descriptor_, &World_Chat_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateRankInfo_descriptor_, &UpdateRankInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateRank_Request_descriptor_, &World_UpdateRank_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateRank_Response_descriptor_, &World_UpdateRank_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetRankInfo_Request_descriptor_, &World_GetRankInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetRankInfo_Response_descriptor_, &World_GetRankInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_SendMail_Request_descriptor_, &World_SendMail_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_SendMail_Response_descriptor_, &World_SendMail_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_AddLimitNum_Request_descriptor_, &World_AddLimitNum_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_AddLimitNum_Response_descriptor_, &World_AddLimitNum_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdatePrizeInfo_Request_descriptor_, &World_UpdatePrizeInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateBetInfo_Request_descriptor_, &World_UpdateBetInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UpdateLasvegas_Notify_descriptor_, &World_UpdateLasvegas_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UserRecharge_Request_descriptor_, &World_UserRecharge_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_UserRecharge_Response_descriptor_, &World_UserRecharge_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMaster_Request_descriptor_, &GameMaster_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameMaster_Response_descriptor_, &GameMaster_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_SystemMailID_Notify_descriptor_, &World_SystemMailID_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetSystemMail_Request_descriptor_, &World_GetSystemMail_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetSystemMail_Response_descriptor_, &World_GetSystemMail_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineExchange_descriptor_, &OnlineExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_OnlineExchange_Request_descriptor_, &World_OnlineExchange_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_OnlineExchange_Response_descriptor_, &World_OnlineExchange_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetUserInfo_Request_descriptor_, &World_GetUserInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetUserInfo_Response_descriptor_, &World_GetUserInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_WriteLog_Request_descriptor_, &World_WriteLog_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetCardNo_Request_descriptor_, &World_GetCardNo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_GetCardNo_Response_descriptor_, &World_GetCardNo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_AddExcRec_Request_descriptor_, &World_AddExcRec_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    World_AddExcRec_Response_descriptor_, &World_AddExcRec_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_5fWorld_2eproto() {
  delete World_ZoneChanged_Notify::default_instance_;
  delete World_ZoneChanged_Notify_reflection_;
  delete World_CreateRole_Request::default_instance_;
  delete World_CreateRole_Request_reflection_;
  delete World_CreateRole_Response::default_instance_;
  delete World_CreateRole_Response_reflection_;
  delete World_FetchRole_Request::default_instance_;
  delete World_FetchRole_Request_reflection_;
  delete World_FetchRole_Response::default_instance_;
  delete World_FetchRole_Response_reflection_;
  delete World_UpdateRole_Request::default_instance_;
  delete World_UpdateRole_Request_reflection_;
  delete World_UpdateRole_Response::default_instance_;
  delete World_UpdateRole_Response_reflection_;
  delete KickerInfo::default_instance_;
  delete KickerInfo_reflection_;
  delete World_KickRole_Request::default_instance_;
  delete World_KickRole_Request_reflection_;
  delete World_KickRole_Response::default_instance_;
  delete World_KickRole_Response_reflection_;
  delete ZoneOnlineInfo::default_instance_;
  delete ZoneOnlineInfo_reflection_;
  delete WorldOnlineInfo::default_instance_;
  delete WorldOnlineInfo_reflection_;
  delete World_OnlineStat_Request::default_instance_;
  delete World_OnlineStat_Request_reflection_;
  delete World_OnlineStat_Response::default_instance_;
  delete World_OnlineStat_Response_reflection_;
  delete World_Chat_Notify::default_instance_;
  delete World_Chat_Notify_reflection_;
  delete UpdateRankInfo::default_instance_;
  delete UpdateRankInfo_reflection_;
  delete World_UpdateRank_Request::default_instance_;
  delete World_UpdateRank_Request_reflection_;
  delete World_UpdateRank_Response::default_instance_;
  delete World_UpdateRank_Response_reflection_;
  delete World_GetRankInfo_Request::default_instance_;
  delete World_GetRankInfo_Request_reflection_;
  delete World_GetRankInfo_Response::default_instance_;
  delete World_GetRankInfo_Response_reflection_;
  delete World_SendMail_Request::default_instance_;
  delete World_SendMail_Request_reflection_;
  delete World_SendMail_Response::default_instance_;
  delete World_SendMail_Response_reflection_;
  delete World_AddLimitNum_Request::default_instance_;
  delete World_AddLimitNum_Request_reflection_;
  delete World_AddLimitNum_Response::default_instance_;
  delete World_AddLimitNum_Response_reflection_;
  delete World_UpdatePrizeInfo_Request::default_instance_;
  delete World_UpdatePrizeInfo_Request_reflection_;
  delete World_UpdateBetInfo_Request::default_instance_;
  delete World_UpdateBetInfo_Request_reflection_;
  delete World_UpdateLasvegas_Notify::default_instance_;
  delete World_UpdateLasvegas_Notify_reflection_;
  delete World_UserRecharge_Request::default_instance_;
  delete World_UserRecharge_Request_reflection_;
  delete World_UserRecharge_Response::default_instance_;
  delete World_UserRecharge_Response_reflection_;
  delete GameMaster_Request::default_instance_;
  delete GameMaster_Request_reflection_;
  delete GameMaster_Response::default_instance_;
  delete GameMaster_Response_reflection_;
  delete World_SystemMailID_Notify::default_instance_;
  delete World_SystemMailID_Notify_reflection_;
  delete World_GetSystemMail_Request::default_instance_;
  delete World_GetSystemMail_Request_reflection_;
  delete World_GetSystemMail_Response::default_instance_;
  delete World_GetSystemMail_Response_reflection_;
  delete OnlineExchange::default_instance_;
  delete OnlineExchange_reflection_;
  delete World_OnlineExchange_Request::default_instance_;
  delete World_OnlineExchange_Request_reflection_;
  delete World_OnlineExchange_Response::default_instance_;
  delete World_OnlineExchange_Response_reflection_;
  delete World_GetUserInfo_Request::default_instance_;
  delete World_GetUserInfo_Request_reflection_;
  delete World_GetUserInfo_Response::default_instance_;
  delete World_GetUserInfo_Response_reflection_;
  delete World_WriteLog_Request::default_instance_;
  delete World_WriteLog_Request_reflection_;
  delete World_GetCardNo_Request::default_instance_;
  delete World_GetCardNo_Request_reflection_;
  delete World_GetCardNo_Response::default_instance_;
  delete World_GetCardNo_Response_reflection_;
  delete World_AddExcRec_Request::default_instance_;
  delete World_AddExcRec_Request_reflection_;
  delete World_AddExcRec_Response::default_instance_;
  delete World_AddExcRec_Response_reflection_;
}

void protobuf_AddDesc_GameProtocol_5fWorld_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  ::protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030GameProtocol_World.proto\032\031GameProtocol"
    "_Common.proto\032\031GameProtocol_USERDB.proto"
    "\"G\n\030World_ZoneChanged_Notify\022\017\n\007worldID\030"
    "\001 \001(\r\022\032\n\007stZones\030\002 \001(\0132\t.ZoneList\"\220\001\n\030Wo"
    "rld_CreateRole_Request\022\013\n\003uin\030\001 \001(\r\022\r\n\005w"
    "orld\030\002 \001(\r\022\025\n\riRealNameStat\030\003 \001(\005\022\"\n\013stB"
    "irthData\030\004 \001(\0132\r.GameUserInfo\022\035\n\010stKicke"
    "r\030\005 \001(\0132\013.KickerInfo\"}\n\031World_CreateRole"
    "_Response\022\017\n\007iResult\030\001 \001(\005\022\031\n\010stRoleID\030\002"
    " \001(\0132\007.RoleID\022\025\n\riRealNameStat\030\003 \001(\005\022\035\n\010"
    "stKicker\030\004 \001(\0132\013.KickerInfo\"u\n\027World_Fet"
    "chRole_Request\022\031\n\010stRoleID\030\001 \001(\0132\007.RoleI"
    "D\022\020\n\010bIsLogin\030\002 \001(\010\022\016\n\006iReqID\030\004 \001(\005\022\035\n\010s"
    "tKicker\030\005 \001(\0132\013.KickerInfo\"\252\001\n\030World_Fet"
    "chRole_Response\022\017\n\007iResult\030\001 \001(\005\022\031\n\010stRo"
    "leID\030\002 \001(\0132\007.RoleID\022\016\n\006bExist\030\003 \001(\010\022\020\n\010b"
    "IsLogin\030\004 \001(\010\022!\n\nstUserInfo\030\005 \001(\0132\r.Game"
    "UserInfo\022\035\n\010stKicker\030\006 \001(\0132\013.KickerInfo\""
    "\177\n\030World_UpdateRole_Request\022\031\n\010stRoleID\030"
    "\001 \001(\0132\007.RoleID\022\016\n\006iReqID\030\002 \001(\005\022!\n\nstUser"
    "Info\030\003 \001(\0132\r.GameUserInfo\022\025\n\rbNeedRespon"
    "se\030\004 \001(\010\"G\n\031World_UpdateRole_Response\022\031\n"
    "\010stRoleID\030\001 \001(\0132\007.RoleID\022\017\n\007iResult\030\002 \001("
    "\005\"\317\001\n\nKickerInfo\022\024\n\014iFromWorldID\030\001 \001(\005\022\023"
    "\n\013iFromZoneID\030\002 \001(\005\022\022\n\niSessionID\030\003 \001(\005\022"
    "\031\n\010stRoleID\030\004 \001(\0132\007.RoleID\022\023\n\013strNickNam"
    "e\030\005 \001(\t\022\022\n\nstrChannel\030\006 \001(\t\022\025\n\riRealName"
    "Stat\030\007 \001(\005\022\022\n\nstrAccount\030\010 \001(\t\022\023\n\013strDev"
    "iceID\030\t \001(\t\"]\n\026World_KickRole_Request\022\020\n"
    "\010bIsLogin\030\001 \001(\010\022\035\n\010stKicker\030\002 \001(\0132\013.Kick"
    "erInfo\022\022\n\nuKickedUin\030\003 \001(\r\"o\n\027World_Kick"
    "Role_Response\022\017\n\007iResult\030\001 \001(\005\022\020\n\010bIsLog"
    "in\030\002 \001(\010\022\035\n\010stKicker\030\003 \001(\0132\013.KickerInfo\022"
    "\022\n\nuKickedUin\030\004 \001(\r\"3\n\016ZoneOnlineInfo\022\017\n"
    "\007iZoneID\030\001 \001(\005\022\020\n\010iRoleNum\030\002 \001(\005\"\277\001\n\017Wor"
    "ldOnlineInfo\022\020\n\010iWorldID\030\001 \001(\005\022\026\n\016iOnlin"
    "eRoleNum\030\002 \001(\005\022\024\n\014iRegisterNum\030\003 \001(\005\022\025\n\r"
    "iMaxOnlineNum\030\004 \001(\005\022\027\n\017iMaxRegisterNum\030\005"
    " \001(\005\022\026\n\016iActiveZoneNum\030\006 \001(\005\022$\n\013stZoneIn"
    "fos\030\007 \003(\0132\017.ZoneOnlineInfo\"h\n\030World_Onli"
    "neStat_Request\022\020\n\010iWorldID\030\001 \001(\005\022%\n\013stWo"
    "rldInfo\030\002 \001(\0132\020.WorldOnlineInfo\022\023\n\013uReco"
    "rdTime\030\003 \001(\005\"B\n\031World_OnlineStat_Respons"
    "e\022\020\n\010iWorldID\030\001 \001(\005\022\023\n\013iInstanceID\030\002 \001(\005"
    "\"\275\001\n\021World_Chat_Notify\0228\n\010iChannel\030\001 \001(\016"
    "2\020.ChatChannelType:\024CHAT_CHANNEL_INVALID"
    "\022\031\n\010stRoleID\030\002 \001(\0132\007.RoleID\022\017\n\007iZoneID\030\004"
    " \001(\005\022\022\n\nszNickName\030\003 \001(\t\022\033\n\nstTargetID\030\005"
    " \001(\0132\007.RoleID\022\021\n\tszMessage\030\006 \001(\t\">\n\016Upda"
    "teRankInfo\022\021\n\tiRankType\030\001 \001(\005\022\031\n\006stRank\030"
    "\002 \001(\0132\t.RankInfo\"W\n\030World_UpdateRank_Req"
    "uest\022\023\n\013iFromZoneID\030\001 \001(\005\022&\n\rstUpdateRan"
    "ks\030\002 \003(\0132\017.UpdateRankInfo\",\n\031World_Updat"
    "eRank_Response\022\017\n\007iResult\030\001 \001(\005\"S\n\031World"
    "_GetRankInfo_Request\022\r\n\005iType\030\001 \001(\005\022\022\n\ni"
    "VersionID\030\002 \001(\r\022\023\n\013iFromZoneID\030\003 \001(\005\"\241\001\n"
    "\032World_GetRankInfo_Response\022\017\n\007iResult\030\001"
    " \001(\005\022\r\n\005iType\030\002 \001(\005\022\022\n\niVersionID\030\003 \001(\r\022"
    "\023\n\013iLastUpdate\030\004 \001(\005\022\032\n\007stRanks\030\005 \003(\0132\t."
    "RankInfo\022\036\n\013stLastRanks\030\006 \003(\0132\t.RankInfo"
    "\"q\n\026World_SendMail_Request\022 \n\nstMailInfo"
    "\030\001 \001(\0132\014.OneMailInfo\022\021\n\tuiFromUin\030\002 \001(\r\022"
    "\017\n\007uiToUin\030\003 \001(\r\022\021\n\tiTryTimes\030\004 \001(\005\"\203\001\n\027"
    "World_SendMail_Response\022\017\n\007iResult\030\001 \001(\005"
    "\022 \n\nstMailInfo\030\002 \001(\0132\014.OneMailInfo\022\021\n\tui"
    "FromUin\030\003 \001(\r\022\017\n\007uiToUin\030\004 \001(\r\022\021\n\tiTryTi"
    "mes\030\005 \001(\005\"p\n\031World_AddLimitNum_Request\022\013"
    "\n\003uin\030\001 \001(\r\022\023\n\013iExchangeID\030\002 \001(\005\022\017\n\007iAdd"
    "Num\030\003 \001(\005\022\017\n\007iZoneID\030\004 \001(\005\022\017\n\007iReason\030\005 "
    "\001(\005\"`\n\032World_AddLimitNum_Response\022\017\n\007iRe"
    "sult\030\001 \001(\005\022\013\n\003uin\030\002 \001(\r\022\023\n\013iExchangeID\030\003"
    " \001(\005\022\017\n\007iReason\030\004 \001(\005\"=\n\035World_UpdatePri"
    "zeInfo_Request\022\034\n\010stPrizes\030\001 \003(\0132\n.Prize"
    "Info\"A\n\033World_UpdateBetInfo_Request\022\"\n\ns"
    "tBetInfos\030\001 \003(\0132\016.NumberBetInfo\"<\n\033World"
    "_UpdateLasvegas_Notify\022\035\n\006stInfo\030\001 \001(\0132\r"
    ".LasvegasInfo\"\202\001\n\032World_UserRecharge_Req"
    "uest\022\013\n\003uin\030\001 \001(\r\022\022\n\nstrOrderID\030\002 \001(\t\022\014\n"
    "\004iRMB\030\003 \001(\005\022\023\n\013iRechargeID\030\004 \001(\005\022\r\n\005iTim"
    "e\030\005 \001(\005\022\021\n\tiPlatform\030\006 \001(\005\"w\n\033World_User"
    "Recharge_Response\022\017\n\007iResult\030\001 \001(\005\022\013\n\003ui"
    "n\030\002 \001(\r\022\022\n\nstrOrderID\030\003 \001(\t\022\023\n\013iRecharge"
    "ID\030\004 \001(\005\022\021\n\tiPlatform\030\005 \001(\005\"\301\001\n\022GameMast"
    "er_Request\022\022\n\niOperaType\030\001 \001(\005\022\020\n\010uFromU"
    "in\030\002 \001(\r\022\016\n\006uToUin\030\003 \001(\r\022\021\n\tstrParams\030\004 "
    "\003(\t\022\017\n\007iVIPMin\030\005 \001(\005\022\017\n\007iVIPMax\030\006 \001(\005\022\025\n"
    "\rstrChannelIDs\030\007 \003(\t\022\024\n\014iMailEndTime\030\t \001"
    "(\005\022\023\n\013iFromZoneID\030\010 \001(\005\"\236\001\n\023GameMaster_R"
    "esponse\022\017\n\007iResult\030\001 \001(\005\022\022\n\niOperaType\030\002"
    " \001(\005\022\020\n\010uFromUin\030\003 \001(\r\022\016\n\006uToUin\030\004 \001(\r\022\037"
    "\n\nstBaseInfo\030\005 \001(\0132\013.BASEDBINFO\022\037\n\nstIte"
    "mInfo\030\006 \001(\0132\013.ITEMDBINFO\"2\n\031World_System"
    "MailID_Notify\022\025\n\ruSystemUniqID\030\001 \001(\r\"\222\001\n"
    "\033World_GetSystemMail_Request\022\013\n\003uin\030\001 \001("
    "\r\022\031\n\021uRoleSystemUniqID\030\002 \001(\r\022\021\n\tiVIPLeve"
    "l\030\003 \001(\005\022\022\n\nstrChannel\030\004 \001(\t\022\023\n\013iFromZone"
    "ID\030\005 \001(\005\022\017\n\007iReason\030\006 \001(\005\"r\n\034World_GetSy"
    "stemMail_Response\022\017\n\007iResult\030\001 \001(\005\022\013\n\003ui"
    "n\030\002 \001(\r\022\025\n\ruSystemUniqID\030\003 \001(\r\022\035\n\007stMail"
    "s\030\004 \003(\0132\014.OneMailInfo\"m\n\016OnlineExchange\022"
    "\017\n\007iItemID\030\001 \001(\005\022\020\n\010iItemNum\030\002 \001(\005\022\r\n\005iT"
    "ype\030\003 \001(\005\022\024\n\014iExchangeNum\030\004 \001(\005\022\023\n\013strPh"
    "oneNum\030\005 \001(\t\"a\n\034World_OnlineExchange_Req"
    "uest\022\013\n\003uin\030\001 \001(\r\022\023\n\013iFromZoneID\030\002 \001(\005\022\037"
    "\n\006stInfo\030\003 \001(\0132\017.OnlineExchange\"s\n\035World"
    "_OnlineExchange_Response\022\017\n\007iResult\030\001 \001("
    "\005\022\013\n\003uin\030\002 \001(\r\022\023\n\013iFromZoneID\030\003 \001(\005\022\037\n\006s"
    "tInfo\030\004 \001(\0132\017.OnlineExchange\"=\n\031World_Ge"
    "tUserInfo_Request\022\013\n\003uin\030\001 \001(\r\022\023\n\013iPlatf"
    "ormID\030\002 \001(\005\"x\n\032World_GetUserInfo_Respons"
    "e\022\017\n\007iResult\030\001 \001(\005\022\022\n\nstrAccount\030\002 \001(\t\022\013"
    "\n\003uin\030\003 \001(\r\022\023\n\013strNickName\030\004 \001(\t\022\023\n\013iPla"
    "tformID\030\005 \001(\005\"D\n\026World_WriteLog_Request\022"
    "\026\n\016iLogTargetType\030\001 \001(\005\022\022\n\nstrLogData\030\002 "
    "\001(\t\"a\n\027World_GetCardNo_Request\022\023\n\013iExcha"
    "ngeID\030\001 \001(\005\022\017\n\007iCardID\030\002 \001(\005\022\013\n\003uin\030\003 \001("
    "\r\022\023\n\013iFromZoneID\030\004 \001(\005\"\232\001\n\030World_GetCard"
    "No_Response\022\017\n\007iResult\030\001 \001(\005\022\023\n\013iExchang"
    "eID\030\002 \001(\005\022\017\n\007iCardID\030\003 \001(\005\022\013\n\003uin\030\004 \001(\r\022"
    "\023\n\013iFromZoneID\030\005 \001(\005\022\021\n\tstrCardNo\030\006 \001(\t\022"
    "\022\n\nstrCardPwd\030\007 \001(\t\"9\n\027World_AddExcRec_R"
    "equest\022\036\n\010stRecord\030\001 \001(\0132\014.ExchangeRec\"+"
    "\n\030World_AddExcRec_Response\022\017\n\007iResult\030\001 "
    "\001(\005*[\n\017LimitReasonType\022\030\n\024LIMIT_REASON_I"
    "NVALID\020\000\022\031\n\025LIMIT_REASON_EXCHANGE\020\001\022\023\n\017L"
    "IMIT_REASON_GM\020\002*\215\001\n\014RechargeType\022\031\n\025REC"
    "HARGE_TYPE_INVALID\020\000\022\026\n\022RECHARGE_TYPE_CO"
    "IN\020\001\022\027\n\023RECHARGE_TYPE_MONTH\020\002\022\026\n\022RECHARG"
    "E_TYPE_ITEM\020\003\022\031\n\025RECHARGE_TYPE_DIAMOND\020\004"
    "*X\n\016MailReasonType\022\027\n\023MAIL_REASON_INVALI"
    "D\020\000\022\026\n\022MAIL_REASON_NORMAL\020\001\022\025\n\021MAIL_REAS"
    "ON_VIPLV\020\002*d\n\022OnlineExchangeType\022\033\n\027ONLI"
    "NE_EXCHANGE_INVALID\020\000\022\030\n\024ONLINE_EXCHANGE"
    "_BILL\020\001\022\027\n\023ONLINE_EXCHANGE_MAX\020\002", 5352);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol_World.proto", &protobuf_RegisterTypes);
  World_ZoneChanged_Notify::default_instance_ = new World_ZoneChanged_Notify();
  World_CreateRole_Request::default_instance_ = new World_CreateRole_Request();
  World_CreateRole_Response::default_instance_ = new World_CreateRole_Response();
  World_FetchRole_Request::default_instance_ = new World_FetchRole_Request();
  World_FetchRole_Response::default_instance_ = new World_FetchRole_Response();
  World_UpdateRole_Request::default_instance_ = new World_UpdateRole_Request();
  World_UpdateRole_Response::default_instance_ = new World_UpdateRole_Response();
  KickerInfo::default_instance_ = new KickerInfo();
  World_KickRole_Request::default_instance_ = new World_KickRole_Request();
  World_KickRole_Response::default_instance_ = new World_KickRole_Response();
  ZoneOnlineInfo::default_instance_ = new ZoneOnlineInfo();
  WorldOnlineInfo::default_instance_ = new WorldOnlineInfo();
  World_OnlineStat_Request::default_instance_ = new World_OnlineStat_Request();
  World_OnlineStat_Response::default_instance_ = new World_OnlineStat_Response();
  World_Chat_Notify::default_instance_ = new World_Chat_Notify();
  UpdateRankInfo::default_instance_ = new UpdateRankInfo();
  World_UpdateRank_Request::default_instance_ = new World_UpdateRank_Request();
  World_UpdateRank_Response::default_instance_ = new World_UpdateRank_Response();
  World_GetRankInfo_Request::default_instance_ = new World_GetRankInfo_Request();
  World_GetRankInfo_Response::default_instance_ = new World_GetRankInfo_Response();
  World_SendMail_Request::default_instance_ = new World_SendMail_Request();
  World_SendMail_Response::default_instance_ = new World_SendMail_Response();
  World_AddLimitNum_Request::default_instance_ = new World_AddLimitNum_Request();
  World_AddLimitNum_Response::default_instance_ = new World_AddLimitNum_Response();
  World_UpdatePrizeInfo_Request::default_instance_ = new World_UpdatePrizeInfo_Request();
  World_UpdateBetInfo_Request::default_instance_ = new World_UpdateBetInfo_Request();
  World_UpdateLasvegas_Notify::default_instance_ = new World_UpdateLasvegas_Notify();
  World_UserRecharge_Request::default_instance_ = new World_UserRecharge_Request();
  World_UserRecharge_Response::default_instance_ = new World_UserRecharge_Response();
  GameMaster_Request::default_instance_ = new GameMaster_Request();
  GameMaster_Response::default_instance_ = new GameMaster_Response();
  World_SystemMailID_Notify::default_instance_ = new World_SystemMailID_Notify();
  World_GetSystemMail_Request::default_instance_ = new World_GetSystemMail_Request();
  World_GetSystemMail_Response::default_instance_ = new World_GetSystemMail_Response();
  OnlineExchange::default_instance_ = new OnlineExchange();
  World_OnlineExchange_Request::default_instance_ = new World_OnlineExchange_Request();
  World_OnlineExchange_Response::default_instance_ = new World_OnlineExchange_Response();
  World_GetUserInfo_Request::default_instance_ = new World_GetUserInfo_Request();
  World_GetUserInfo_Response::default_instance_ = new World_GetUserInfo_Response();
  World_WriteLog_Request::default_instance_ = new World_WriteLog_Request();
  World_GetCardNo_Request::default_instance_ = new World_GetCardNo_Request();
  World_GetCardNo_Response::default_instance_ = new World_GetCardNo_Response();
  World_AddExcRec_Request::default_instance_ = new World_AddExcRec_Request();
  World_AddExcRec_Response::default_instance_ = new World_AddExcRec_Response();
  World_ZoneChanged_Notify::default_instance_->InitAsDefaultInstance();
  World_CreateRole_Request::default_instance_->InitAsDefaultInstance();
  World_CreateRole_Response::default_instance_->InitAsDefaultInstance();
  World_FetchRole_Request::default_instance_->InitAsDefaultInstance();
  World_FetchRole_Response::default_instance_->InitAsDefaultInstance();
  World_UpdateRole_Request::default_instance_->InitAsDefaultInstance();
  World_UpdateRole_Response::default_instance_->InitAsDefaultInstance();
  KickerInfo::default_instance_->InitAsDefaultInstance();
  World_KickRole_Request::default_instance_->InitAsDefaultInstance();
  World_KickRole_Response::default_instance_->InitAsDefaultInstance();
  ZoneOnlineInfo::default_instance_->InitAsDefaultInstance();
  WorldOnlineInfo::default_instance_->InitAsDefaultInstance();
  World_OnlineStat_Request::default_instance_->InitAsDefaultInstance();
  World_OnlineStat_Response::default_instance_->InitAsDefaultInstance();
  World_Chat_Notify::default_instance_->InitAsDefaultInstance();
  UpdateRankInfo::default_instance_->InitAsDefaultInstance();
  World_UpdateRank_Request::default_instance_->InitAsDefaultInstance();
  World_UpdateRank_Response::default_instance_->InitAsDefaultInstance();
  World_GetRankInfo_Request::default_instance_->InitAsDefaultInstance();
  World_GetRankInfo_Response::default_instance_->InitAsDefaultInstance();
  World_SendMail_Request::default_instance_->InitAsDefaultInstance();
  World_SendMail_Response::default_instance_->InitAsDefaultInstance();
  World_AddLimitNum_Request::default_instance_->InitAsDefaultInstance();
  World_AddLimitNum_Response::default_instance_->InitAsDefaultInstance();
  World_UpdatePrizeInfo_Request::default_instance_->InitAsDefaultInstance();
  World_UpdateBetInfo_Request::default_instance_->InitAsDefaultInstance();
  World_UpdateLasvegas_Notify::default_instance_->InitAsDefaultInstance();
  World_UserRecharge_Request::default_instance_->InitAsDefaultInstance();
  World_UserRecharge_Response::default_instance_->InitAsDefaultInstance();
  GameMaster_Request::default_instance_->InitAsDefaultInstance();
  GameMaster_Response::default_instance_->InitAsDefaultInstance();
  World_SystemMailID_Notify::default_instance_->InitAsDefaultInstance();
  World_GetSystemMail_Request::default_instance_->InitAsDefaultInstance();
  World_GetSystemMail_Response::default_instance_->InitAsDefaultInstance();
  OnlineExchange::default_instance_->InitAsDefaultInstance();
  World_OnlineExchange_Request::default_instance_->InitAsDefaultInstance();
  World_OnlineExchange_Response::default_instance_->InitAsDefaultInstance();
  World_GetUserInfo_Request::default_instance_->InitAsDefaultInstance();
  World_GetUserInfo_Response::default_instance_->InitAsDefaultInstance();
  World_WriteLog_Request::default_instance_->InitAsDefaultInstance();
  World_GetCardNo_Request::default_instance_->InitAsDefaultInstance();
  World_GetCardNo_Response::default_instance_->InitAsDefaultInstance();
  World_AddExcRec_Request::default_instance_->InitAsDefaultInstance();
  World_AddExcRec_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_5fWorld_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_5fWorld_2eproto {
  StaticDescriptorInitializer_GameProtocol_5fWorld_2eproto() {
    protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  }
} static_descriptor_initializer_GameProtocol_5fWorld_2eproto_;
const ::google::protobuf::EnumDescriptor* LimitReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitReasonType_descriptor_;
}
bool LimitReasonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RechargeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RechargeType_descriptor_;
}
bool RechargeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailReasonType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailReasonType_descriptor_;
}
bool MailReasonType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* OnlineExchangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineExchangeType_descriptor_;
}
bool OnlineExchangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int World_ZoneChanged_Notify::kWorldIDFieldNumber;
const int World_ZoneChanged_Notify::kStZonesFieldNumber;
#endif  // !_MSC_VER

World_ZoneChanged_Notify::World_ZoneChanged_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_ZoneChanged_Notify::InitAsDefaultInstance() {
  stzones_ = const_cast< ::ZoneList*>(&::ZoneList::default_instance());
}

World_ZoneChanged_Notify::World_ZoneChanged_Notify(const World_ZoneChanged_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_ZoneChanged_Notify::SharedCtor() {
  _cached_size_ = 0;
  worldid_ = 0u;
  stzones_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_ZoneChanged_Notify::~World_ZoneChanged_Notify() {
  SharedDtor();
}

void World_ZoneChanged_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stzones_;
  }
}

void World_ZoneChanged_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_ZoneChanged_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_ZoneChanged_Notify_descriptor_;
}

const World_ZoneChanged_Notify& World_ZoneChanged_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_ZoneChanged_Notify* World_ZoneChanged_Notify::default_instance_ = NULL;

World_ZoneChanged_Notify* World_ZoneChanged_Notify::New() const {
  return new World_ZoneChanged_Notify;
}

void World_ZoneChanged_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    worldid_ = 0u;
    if (has_stzones()) {
      if (stzones_ != NULL) stzones_->::ZoneList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_ZoneChanged_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 worldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &worldid_)));
          set_has_worldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stZones;
        break;
      }

      // optional .ZoneList stZones = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stZones:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stzones()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_ZoneChanged_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 worldID = 1;
  if (has_worldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->worldid(), output);
  }

  // optional .ZoneList stZones = 2;
  if (has_stzones()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stzones(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_ZoneChanged_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 worldID = 1;
  if (has_worldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->worldid(), target);
  }

  // optional .ZoneList stZones = 2;
  if (has_stzones()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stzones(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_ZoneChanged_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 worldID = 1;
    if (has_worldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->worldid());
    }

    // optional .ZoneList stZones = 2;
    if (has_stzones()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stzones());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_ZoneChanged_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_ZoneChanged_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_ZoneChanged_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_ZoneChanged_Notify::MergeFrom(const World_ZoneChanged_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_worldid()) {
      set_worldid(from.worldid());
    }
    if (from.has_stzones()) {
      mutable_stzones()->::ZoneList::MergeFrom(from.stzones());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_ZoneChanged_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_ZoneChanged_Notify::CopyFrom(const World_ZoneChanged_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_ZoneChanged_Notify::IsInitialized() const {

  return true;
}

void World_ZoneChanged_Notify::Swap(World_ZoneChanged_Notify* other) {
  if (other != this) {
    std::swap(worldid_, other->worldid_);
    std::swap(stzones_, other->stzones_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_ZoneChanged_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_ZoneChanged_Notify_descriptor_;
  metadata.reflection = World_ZoneChanged_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_CreateRole_Request::kUinFieldNumber;
const int World_CreateRole_Request::kWorldFieldNumber;
const int World_CreateRole_Request::kIRealNameStatFieldNumber;
const int World_CreateRole_Request::kStBirthDataFieldNumber;
const int World_CreateRole_Request::kStKickerFieldNumber;
#endif  // !_MSC_VER

World_CreateRole_Request::World_CreateRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_CreateRole_Request::InitAsDefaultInstance() {
  stbirthdata_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
  stkicker_ = const_cast< ::KickerInfo*>(&::KickerInfo::default_instance());
}

World_CreateRole_Request::World_CreateRole_Request(const World_CreateRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_CreateRole_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  world_ = 0u;
  irealnamestat_ = 0;
  stbirthdata_ = NULL;
  stkicker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_CreateRole_Request::~World_CreateRole_Request() {
  SharedDtor();
}

void World_CreateRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stbirthdata_;
    delete stkicker_;
  }
}

void World_CreateRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_CreateRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_CreateRole_Request_descriptor_;
}

const World_CreateRole_Request& World_CreateRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_CreateRole_Request* World_CreateRole_Request::default_instance_ = NULL;

World_CreateRole_Request* World_CreateRole_Request::New() const {
  return new World_CreateRole_Request;
}

void World_CreateRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    world_ = 0u;
    irealnamestat_ = 0;
    if (has_stbirthdata()) {
      if (stbirthdata_ != NULL) stbirthdata_->::GameUserInfo::Clear();
    }
    if (has_stkicker()) {
      if (stkicker_ != NULL) stkicker_->::KickerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_CreateRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_world;
        break;
      }

      // optional uint32 world = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_world:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &world_)));
          set_has_world();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRealNameStat;
        break;
      }

      // optional int32 iRealNameStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRealNameStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irealnamestat_)));
          set_has_irealnamestat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stBirthData;
        break;
      }

      // optional .GameUserInfo stBirthData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBirthData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbirthdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stKicker;
        break;
      }

      // optional .KickerInfo stKicker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKicker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkicker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_CreateRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 world = 2;
  if (has_world()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->world(), output);
  }

  // optional int32 iRealNameStat = 3;
  if (has_irealnamestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irealnamestat(), output);
  }

  // optional .GameUserInfo stBirthData = 4;
  if (has_stbirthdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stbirthdata(), output);
  }

  // optional .KickerInfo stKicker = 5;
  if (has_stkicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stkicker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_CreateRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 world = 2;
  if (has_world()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->world(), target);
  }

  // optional int32 iRealNameStat = 3;
  if (has_irealnamestat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irealnamestat(), target);
  }

  // optional .GameUserInfo stBirthData = 4;
  if (has_stbirthdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stbirthdata(), target);
  }

  // optional .KickerInfo stKicker = 5;
  if (has_stkicker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stkicker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_CreateRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 world = 2;
    if (has_world()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->world());
    }

    // optional int32 iRealNameStat = 3;
    if (has_irealnamestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irealnamestat());
    }

    // optional .GameUserInfo stBirthData = 4;
    if (has_stbirthdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbirthdata());
    }

    // optional .KickerInfo stKicker = 5;
    if (has_stkicker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkicker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_CreateRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_CreateRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_CreateRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_CreateRole_Request::MergeFrom(const World_CreateRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_world()) {
      set_world(from.world());
    }
    if (from.has_irealnamestat()) {
      set_irealnamestat(from.irealnamestat());
    }
    if (from.has_stbirthdata()) {
      mutable_stbirthdata()->::GameUserInfo::MergeFrom(from.stbirthdata());
    }
    if (from.has_stkicker()) {
      mutable_stkicker()->::KickerInfo::MergeFrom(from.stkicker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_CreateRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_CreateRole_Request::CopyFrom(const World_CreateRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_CreateRole_Request::IsInitialized() const {

  return true;
}

void World_CreateRole_Request::Swap(World_CreateRole_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(world_, other->world_);
    std::swap(irealnamestat_, other->irealnamestat_);
    std::swap(stbirthdata_, other->stbirthdata_);
    std::swap(stkicker_, other->stkicker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_CreateRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_CreateRole_Request_descriptor_;
  metadata.reflection = World_CreateRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_CreateRole_Response::kIResultFieldNumber;
const int World_CreateRole_Response::kStRoleIDFieldNumber;
const int World_CreateRole_Response::kIRealNameStatFieldNumber;
const int World_CreateRole_Response::kStKickerFieldNumber;
#endif  // !_MSC_VER

World_CreateRole_Response::World_CreateRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_CreateRole_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  stkicker_ = const_cast< ::KickerInfo*>(&::KickerInfo::default_instance());
}

World_CreateRole_Response::World_CreateRole_Response(const World_CreateRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_CreateRole_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stroleid_ = NULL;
  irealnamestat_ = 0;
  stkicker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_CreateRole_Response::~World_CreateRole_Response() {
  SharedDtor();
}

void World_CreateRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
    delete stkicker_;
  }
}

void World_CreateRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_CreateRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_CreateRole_Response_descriptor_;
}

const World_CreateRole_Response& World_CreateRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_CreateRole_Response* World_CreateRole_Response::default_instance_ = NULL;

World_CreateRole_Response* World_CreateRole_Response::New() const {
  return new World_CreateRole_Response;
}

void World_CreateRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    irealnamestat_ = 0;
    if (has_stkicker()) {
      if (stkicker_ != NULL) stkicker_->::KickerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_CreateRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRealNameStat;
        break;
      }

      // optional int32 iRealNameStat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRealNameStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irealnamestat_)));
          set_has_irealnamestat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stKicker;
        break;
      }

      // optional .KickerInfo stKicker = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKicker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkicker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_CreateRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroleid(), output);
  }

  // optional int32 iRealNameStat = 3;
  if (has_irealnamestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irealnamestat(), output);
  }

  // optional .KickerInfo stKicker = 4;
  if (has_stkicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stkicker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_CreateRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroleid(), target);
  }

  // optional int32 iRealNameStat = 3;
  if (has_irealnamestat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irealnamestat(), target);
  }

  // optional .KickerInfo stKicker = 4;
  if (has_stkicker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stkicker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_CreateRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .RoleID stRoleID = 2;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iRealNameStat = 3;
    if (has_irealnamestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irealnamestat());
    }

    // optional .KickerInfo stKicker = 4;
    if (has_stkicker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkicker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_CreateRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_CreateRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_CreateRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_CreateRole_Response::MergeFrom(const World_CreateRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_irealnamestat()) {
      set_irealnamestat(from.irealnamestat());
    }
    if (from.has_stkicker()) {
      mutable_stkicker()->::KickerInfo::MergeFrom(from.stkicker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_CreateRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_CreateRole_Response::CopyFrom(const World_CreateRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_CreateRole_Response::IsInitialized() const {

  return true;
}

void World_CreateRole_Response::Swap(World_CreateRole_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(irealnamestat_, other->irealnamestat_);
    std::swap(stkicker_, other->stkicker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_CreateRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_CreateRole_Response_descriptor_;
  metadata.reflection = World_CreateRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_FetchRole_Request::kStRoleIDFieldNumber;
const int World_FetchRole_Request::kBIsLoginFieldNumber;
const int World_FetchRole_Request::kIReqIDFieldNumber;
const int World_FetchRole_Request::kStKickerFieldNumber;
#endif  // !_MSC_VER

World_FetchRole_Request::World_FetchRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_FetchRole_Request::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  stkicker_ = const_cast< ::KickerInfo*>(&::KickerInfo::default_instance());
}

World_FetchRole_Request::World_FetchRole_Request(const World_FetchRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_FetchRole_Request::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  bislogin_ = false;
  ireqid_ = 0;
  stkicker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_FetchRole_Request::~World_FetchRole_Request() {
  SharedDtor();
}

void World_FetchRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
    delete stkicker_;
  }
}

void World_FetchRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_FetchRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_FetchRole_Request_descriptor_;
}

const World_FetchRole_Request& World_FetchRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_FetchRole_Request* World_FetchRole_Request::default_instance_ = NULL;

World_FetchRole_Request* World_FetchRole_Request::New() const {
  return new World_FetchRole_Request;
}

void World_FetchRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    bislogin_ = false;
    ireqid_ = 0;
    if (has_stkicker()) {
      if (stkicker_ != NULL) stkicker_->::KickerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_FetchRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsLogin;
        break;
      }

      // optional bool bIsLogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iReqID;
        break;
      }

      // optional int32 iReqID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireqid_)));
          set_has_ireqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stKicker;
        break;
      }

      // optional .KickerInfo stKicker = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKicker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkicker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_FetchRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional bool bIsLogin = 2;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bislogin(), output);
  }

  // optional int32 iReqID = 4;
  if (has_ireqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ireqid(), output);
  }

  // optional .KickerInfo stKicker = 5;
  if (has_stkicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stkicker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_FetchRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional bool bIsLogin = 2;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bislogin(), target);
  }

  // optional int32 iReqID = 4;
  if (has_ireqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ireqid(), target);
  }

  // optional .KickerInfo stKicker = 5;
  if (has_stkicker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stkicker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_FetchRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional bool bIsLogin = 2;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

    // optional int32 iReqID = 4;
    if (has_ireqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireqid());
    }

    // optional .KickerInfo stKicker = 5;
    if (has_stkicker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkicker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_FetchRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_FetchRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_FetchRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_FetchRole_Request::MergeFrom(const World_FetchRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
    if (from.has_ireqid()) {
      set_ireqid(from.ireqid());
    }
    if (from.has_stkicker()) {
      mutable_stkicker()->::KickerInfo::MergeFrom(from.stkicker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_FetchRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_FetchRole_Request::CopyFrom(const World_FetchRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_FetchRole_Request::IsInitialized() const {

  return true;
}

void World_FetchRole_Request::Swap(World_FetchRole_Request* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(bislogin_, other->bislogin_);
    std::swap(ireqid_, other->ireqid_);
    std::swap(stkicker_, other->stkicker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_FetchRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_FetchRole_Request_descriptor_;
  metadata.reflection = World_FetchRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_FetchRole_Response::kIResultFieldNumber;
const int World_FetchRole_Response::kStRoleIDFieldNumber;
const int World_FetchRole_Response::kBExistFieldNumber;
const int World_FetchRole_Response::kBIsLoginFieldNumber;
const int World_FetchRole_Response::kStUserInfoFieldNumber;
const int World_FetchRole_Response::kStKickerFieldNumber;
#endif  // !_MSC_VER

World_FetchRole_Response::World_FetchRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_FetchRole_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  stuserinfo_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
  stkicker_ = const_cast< ::KickerInfo*>(&::KickerInfo::default_instance());
}

World_FetchRole_Response::World_FetchRole_Response(const World_FetchRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_FetchRole_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stroleid_ = NULL;
  bexist_ = false;
  bislogin_ = false;
  stuserinfo_ = NULL;
  stkicker_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_FetchRole_Response::~World_FetchRole_Response() {
  SharedDtor();
}

void World_FetchRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
    delete stuserinfo_;
    delete stkicker_;
  }
}

void World_FetchRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_FetchRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_FetchRole_Response_descriptor_;
}

const World_FetchRole_Response& World_FetchRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_FetchRole_Response* World_FetchRole_Response::default_instance_ = NULL;

World_FetchRole_Response* World_FetchRole_Response::New() const {
  return new World_FetchRole_Response;
}

void World_FetchRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    bexist_ = false;
    bislogin_ = false;
    if (has_stuserinfo()) {
      if (stuserinfo_ != NULL) stuserinfo_->::GameUserInfo::Clear();
    }
    if (has_stkicker()) {
      if (stkicker_ != NULL) stkicker_->::KickerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_FetchRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bExist;
        break;
      }

      // optional bool bExist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bExist:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bexist_)));
          set_has_bexist();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bIsLogin;
        break;
      }

      // optional bool bIsLogin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stUserInfo;
        break;
      }

      // optional .GameUserInfo stUserInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stKicker;
        break;
      }

      // optional .KickerInfo stKicker = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKicker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkicker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_FetchRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroleid(), output);
  }

  // optional bool bExist = 3;
  if (has_bexist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bexist(), output);
  }

  // optional bool bIsLogin = 4;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bislogin(), output);
  }

  // optional .GameUserInfo stUserInfo = 5;
  if (has_stuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stuserinfo(), output);
  }

  // optional .KickerInfo stKicker = 6;
  if (has_stkicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stkicker(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_FetchRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroleid(), target);
  }

  // optional bool bExist = 3;
  if (has_bexist()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bexist(), target);
  }

  // optional bool bIsLogin = 4;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bislogin(), target);
  }

  // optional .GameUserInfo stUserInfo = 5;
  if (has_stuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stuserinfo(), target);
  }

  // optional .KickerInfo stKicker = 6;
  if (has_stkicker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stkicker(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_FetchRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .RoleID stRoleID = 2;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional bool bExist = 3;
    if (has_bexist()) {
      total_size += 1 + 1;
    }

    // optional bool bIsLogin = 4;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

    // optional .GameUserInfo stUserInfo = 5;
    if (has_stuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuserinfo());
    }

    // optional .KickerInfo stKicker = 6;
    if (has_stkicker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkicker());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_FetchRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_FetchRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_FetchRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_FetchRole_Response::MergeFrom(const World_FetchRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_bexist()) {
      set_bexist(from.bexist());
    }
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
    if (from.has_stuserinfo()) {
      mutable_stuserinfo()->::GameUserInfo::MergeFrom(from.stuserinfo());
    }
    if (from.has_stkicker()) {
      mutable_stkicker()->::KickerInfo::MergeFrom(from.stkicker());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_FetchRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_FetchRole_Response::CopyFrom(const World_FetchRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_FetchRole_Response::IsInitialized() const {

  return true;
}

void World_FetchRole_Response::Swap(World_FetchRole_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(bexist_, other->bexist_);
    std::swap(bislogin_, other->bislogin_);
    std::swap(stuserinfo_, other->stuserinfo_);
    std::swap(stkicker_, other->stkicker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_FetchRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_FetchRole_Response_descriptor_;
  metadata.reflection = World_FetchRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateRole_Request::kStRoleIDFieldNumber;
const int World_UpdateRole_Request::kIReqIDFieldNumber;
const int World_UpdateRole_Request::kStUserInfoFieldNumber;
const int World_UpdateRole_Request::kBNeedResponseFieldNumber;
#endif  // !_MSC_VER

World_UpdateRole_Request::World_UpdateRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateRole_Request::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  stuserinfo_ = const_cast< ::GameUserInfo*>(&::GameUserInfo::default_instance());
}

World_UpdateRole_Request::World_UpdateRole_Request(const World_UpdateRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateRole_Request::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  ireqid_ = 0;
  stuserinfo_ = NULL;
  bneedresponse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateRole_Request::~World_UpdateRole_Request() {
  SharedDtor();
}

void World_UpdateRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
    delete stuserinfo_;
  }
}

void World_UpdateRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateRole_Request_descriptor_;
}

const World_UpdateRole_Request& World_UpdateRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UpdateRole_Request* World_UpdateRole_Request::default_instance_ = NULL;

World_UpdateRole_Request* World_UpdateRole_Request::New() const {
  return new World_UpdateRole_Request;
}

void World_UpdateRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    ireqid_ = 0;
    if (has_stuserinfo()) {
      if (stuserinfo_ != NULL) stuserinfo_->::GameUserInfo::Clear();
    }
    bneedresponse_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iReqID;
        break;
      }

      // optional int32 iReqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireqid_)));
          set_has_ireqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stUserInfo;
        break;
      }

      // optional .GameUserInfo stUserInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bNeedResponse;
        break;
      }

      // optional bool bNeedResponse = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bNeedResponse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bneedresponse_)));
          set_has_bneedresponse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional int32 iReqID = 2;
  if (has_ireqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ireqid(), output);
  }

  // optional .GameUserInfo stUserInfo = 3;
  if (has_stuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stuserinfo(), output);
  }

  // optional bool bNeedResponse = 4;
  if (has_bneedresponse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bneedresponse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional int32 iReqID = 2;
  if (has_ireqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ireqid(), target);
  }

  // optional .GameUserInfo stUserInfo = 3;
  if (has_stuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stuserinfo(), target);
  }

  // optional bool bNeedResponse = 4;
  if (has_bneedresponse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bneedresponse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iReqID = 2;
    if (has_ireqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireqid());
    }

    // optional .GameUserInfo stUserInfo = 3;
    if (has_stuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuserinfo());
    }

    // optional bool bNeedResponse = 4;
    if (has_bneedresponse()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateRole_Request::MergeFrom(const World_UpdateRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_ireqid()) {
      set_ireqid(from.ireqid());
    }
    if (from.has_stuserinfo()) {
      mutable_stuserinfo()->::GameUserInfo::MergeFrom(from.stuserinfo());
    }
    if (from.has_bneedresponse()) {
      set_bneedresponse(from.bneedresponse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateRole_Request::CopyFrom(const World_UpdateRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateRole_Request::IsInitialized() const {

  return true;
}

void World_UpdateRole_Request::Swap(World_UpdateRole_Request* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(ireqid_, other->ireqid_);
    std::swap(stuserinfo_, other->stuserinfo_);
    std::swap(bneedresponse_, other->bneedresponse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateRole_Request_descriptor_;
  metadata.reflection = World_UpdateRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateRole_Response::kStRoleIDFieldNumber;
const int World_UpdateRole_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

World_UpdateRole_Response::World_UpdateRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateRole_Response::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_UpdateRole_Response::World_UpdateRole_Response(const World_UpdateRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateRole_Response::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateRole_Response::~World_UpdateRole_Response() {
  SharedDtor();
}

void World_UpdateRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void World_UpdateRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateRole_Response_descriptor_;
}

const World_UpdateRole_Response& World_UpdateRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UpdateRole_Response* World_UpdateRole_Response::default_instance_ = NULL;

World_UpdateRole_Response* World_UpdateRole_Response::New() const {
  return new World_UpdateRole_Response;
}

void World_UpdateRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iResult;
        break;
      }

      // optional int32 iResult = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iResult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional int32 iResult = 2;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional int32 iResult = 2;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iResult = 2;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateRole_Response::MergeFrom(const World_UpdateRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateRole_Response::CopyFrom(const World_UpdateRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateRole_Response::IsInitialized() const {

  return true;
}

void World_UpdateRole_Response::Swap(World_UpdateRole_Response* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateRole_Response_descriptor_;
  metadata.reflection = World_UpdateRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickerInfo::kIFromWorldIDFieldNumber;
const int KickerInfo::kIFromZoneIDFieldNumber;
const int KickerInfo::kISessionIDFieldNumber;
const int KickerInfo::kStRoleIDFieldNumber;
const int KickerInfo::kStrNickNameFieldNumber;
const int KickerInfo::kStrChannelFieldNumber;
const int KickerInfo::kIRealNameStatFieldNumber;
const int KickerInfo::kStrAccountFieldNumber;
const int KickerInfo::kStrDeviceIDFieldNumber;
#endif  // !_MSC_VER

KickerInfo::KickerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickerInfo::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

KickerInfo::KickerInfo(const KickerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickerInfo::SharedCtor() {
  _cached_size_ = 0;
  ifromworldid_ = 0;
  ifromzoneid_ = 0;
  isessionid_ = 0;
  stroleid_ = NULL;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  irealnamestat_ = 0;
  straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickerInfo::~KickerInfo() {
  SharedDtor();
}

void KickerInfo::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete strchannel_;
  }
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdeviceid_;
  }
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void KickerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickerInfo_descriptor_;
}

const KickerInfo& KickerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

KickerInfo* KickerInfo::default_instance_ = NULL;

KickerInfo* KickerInfo::New() const {
  return new KickerInfo;
}

void KickerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifromworldid_ = 0;
    ifromzoneid_ = 0;
    isessionid_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    if (has_strchannel()) {
      if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
        strchannel_->clear();
      }
    }
    irealnamestat_ = 0;
    if (has_straccount()) {
      if (straccount_ != &::google::protobuf::internal::kEmptyString) {
        straccount_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strdeviceid()) {
      if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
        strdeviceid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFromWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromworldid_)));
          set_has_ifromworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iSessionID;
        break;
      }

      // optional int32 iSessionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSessionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isessionid_)));
          set_has_isessionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strChannel;
        break;
      }

      // optional string strChannel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strchannel().data(), this->strchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iRealNameStat;
        break;
      }

      // optional int32 iRealNameStat = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRealNameStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irealnamestat_)));
          set_has_irealnamestat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strAccount;
        break;
      }

      // optional string strAccount = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccount().data(), this->straccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strDeviceID;
        break;
      }

      // optional string strDeviceID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdeviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdeviceid().data(), this->strdeviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFromWorldID = 1;
  if (has_ifromworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifromworldid(), output);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifromzoneid(), output);
  }

  // optional int32 iSessionID = 3;
  if (has_isessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isessionid(), output);
  }

  // optional .RoleID stRoleID = 4;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stroleid(), output);
  }

  // optional string strNickName = 5;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strnickname(), output);
  }

  // optional string strChannel = 6;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strchannel(), output);
  }

  // optional int32 iRealNameStat = 7;
  if (has_irealnamestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->irealnamestat(), output);
  }

  // optional string strAccount = 8;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->straccount(), output);
  }

  // optional string strDeviceID = 9;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->strdeviceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFromWorldID = 1;
  if (has_ifromworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifromworldid(), target);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifromzoneid(), target);
  }

  // optional int32 iSessionID = 3;
  if (has_isessionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isessionid(), target);
  }

  // optional .RoleID stRoleID = 4;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stroleid(), target);
  }

  // optional string strNickName = 5;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strnickname(), target);
  }

  // optional string strChannel = 6;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strchannel(), target);
  }

  // optional int32 iRealNameStat = 7;
  if (has_irealnamestat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->irealnamestat(), target);
  }

  // optional string strAccount = 8;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->straccount(), target);
  }

  // optional string strDeviceID = 9;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->strdeviceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFromWorldID = 1;
    if (has_ifromworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromworldid());
    }

    // optional int32 iFromZoneID = 2;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

    // optional int32 iSessionID = 3;
    if (has_isessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isessionid());
    }

    // optional .RoleID stRoleID = 4;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional string strNickName = 5;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional string strChannel = 6;
    if (has_strchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strchannel());
    }

    // optional int32 iRealNameStat = 7;
    if (has_irealnamestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irealnamestat());
    }

    // optional string strAccount = 8;
    if (has_straccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string strDeviceID = 9;
    if (has_strdeviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdeviceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickerInfo::MergeFrom(const KickerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifromworldid()) {
      set_ifromworldid(from.ifromworldid());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
    if (from.has_isessionid()) {
      set_isessionid(from.isessionid());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_strchannel()) {
      set_strchannel(from.strchannel());
    }
    if (from.has_irealnamestat()) {
      set_irealnamestat(from.irealnamestat());
    }
    if (from.has_straccount()) {
      set_straccount(from.straccount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strdeviceid()) {
      set_strdeviceid(from.strdeviceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickerInfo::CopyFrom(const KickerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickerInfo::IsInitialized() const {

  return true;
}

void KickerInfo::Swap(KickerInfo* other) {
  if (other != this) {
    std::swap(ifromworldid_, other->ifromworldid_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(isessionid_, other->isessionid_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(strchannel_, other->strchannel_);
    std::swap(irealnamestat_, other->irealnamestat_);
    std::swap(straccount_, other->straccount_);
    std::swap(strdeviceid_, other->strdeviceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickerInfo_descriptor_;
  metadata.reflection = KickerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_KickRole_Request::kBIsLoginFieldNumber;
const int World_KickRole_Request::kStKickerFieldNumber;
const int World_KickRole_Request::kUKickedUinFieldNumber;
#endif  // !_MSC_VER

World_KickRole_Request::World_KickRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_KickRole_Request::InitAsDefaultInstance() {
  stkicker_ = const_cast< ::KickerInfo*>(&::KickerInfo::default_instance());
}

World_KickRole_Request::World_KickRole_Request(const World_KickRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_KickRole_Request::SharedCtor() {
  _cached_size_ = 0;
  bislogin_ = false;
  stkicker_ = NULL;
  ukickeduin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_KickRole_Request::~World_KickRole_Request() {
  SharedDtor();
}

void World_KickRole_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stkicker_;
  }
}

void World_KickRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_KickRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_KickRole_Request_descriptor_;
}

const World_KickRole_Request& World_KickRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_KickRole_Request* World_KickRole_Request::default_instance_ = NULL;

World_KickRole_Request* World_KickRole_Request::New() const {
  return new World_KickRole_Request;
}

void World_KickRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bislogin_ = false;
    if (has_stkicker()) {
      if (stkicker_ != NULL) stkicker_->::KickerInfo::Clear();
    }
    ukickeduin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_KickRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsLogin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stKicker;
        break;
      }

      // optional .KickerInfo stKicker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKicker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkicker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uKickedUin;
        break;
      }

      // optional uint32 uKickedUin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uKickedUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ukickeduin_)));
          set_has_ukickeduin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_KickRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsLogin = 1;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bislogin(), output);
  }

  // optional .KickerInfo stKicker = 2;
  if (has_stkicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stkicker(), output);
  }

  // optional uint32 uKickedUin = 3;
  if (has_ukickeduin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ukickeduin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_KickRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsLogin = 1;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bislogin(), target);
  }

  // optional .KickerInfo stKicker = 2;
  if (has_stkicker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stkicker(), target);
  }

  // optional uint32 uKickedUin = 3;
  if (has_ukickeduin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ukickeduin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_KickRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsLogin = 1;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

    // optional .KickerInfo stKicker = 2;
    if (has_stkicker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkicker());
    }

    // optional uint32 uKickedUin = 3;
    if (has_ukickeduin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ukickeduin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_KickRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_KickRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_KickRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_KickRole_Request::MergeFrom(const World_KickRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
    if (from.has_stkicker()) {
      mutable_stkicker()->::KickerInfo::MergeFrom(from.stkicker());
    }
    if (from.has_ukickeduin()) {
      set_ukickeduin(from.ukickeduin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_KickRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_KickRole_Request::CopyFrom(const World_KickRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_KickRole_Request::IsInitialized() const {

  return true;
}

void World_KickRole_Request::Swap(World_KickRole_Request* other) {
  if (other != this) {
    std::swap(bislogin_, other->bislogin_);
    std::swap(stkicker_, other->stkicker_);
    std::swap(ukickeduin_, other->ukickeduin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_KickRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_KickRole_Request_descriptor_;
  metadata.reflection = World_KickRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_KickRole_Response::kIResultFieldNumber;
const int World_KickRole_Response::kBIsLoginFieldNumber;
const int World_KickRole_Response::kStKickerFieldNumber;
const int World_KickRole_Response::kUKickedUinFieldNumber;
#endif  // !_MSC_VER

World_KickRole_Response::World_KickRole_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_KickRole_Response::InitAsDefaultInstance() {
  stkicker_ = const_cast< ::KickerInfo*>(&::KickerInfo::default_instance());
}

World_KickRole_Response::World_KickRole_Response(const World_KickRole_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_KickRole_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  bislogin_ = false;
  stkicker_ = NULL;
  ukickeduin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_KickRole_Response::~World_KickRole_Response() {
  SharedDtor();
}

void World_KickRole_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stkicker_;
  }
}

void World_KickRole_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_KickRole_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_KickRole_Response_descriptor_;
}

const World_KickRole_Response& World_KickRole_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_KickRole_Response* World_KickRole_Response::default_instance_ = NULL;

World_KickRole_Response* World_KickRole_Response::New() const {
  return new World_KickRole_Response;
}

void World_KickRole_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    bislogin_ = false;
    if (has_stkicker()) {
      if (stkicker_ != NULL) stkicker_->::KickerInfo::Clear();
    }
    ukickeduin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_KickRole_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsLogin;
        break;
      }

      // optional bool bIsLogin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bislogin_)));
          set_has_bislogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stKicker;
        break;
      }

      // optional .KickerInfo stKicker = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stKicker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stkicker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uKickedUin;
        break;
      }

      // optional uint32 uKickedUin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uKickedUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ukickeduin_)));
          set_has_ukickeduin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_KickRole_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional bool bIsLogin = 2;
  if (has_bislogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bislogin(), output);
  }

  // optional .KickerInfo stKicker = 3;
  if (has_stkicker()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stkicker(), output);
  }

  // optional uint32 uKickedUin = 4;
  if (has_ukickeduin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ukickeduin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_KickRole_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional bool bIsLogin = 2;
  if (has_bislogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bislogin(), target);
  }

  // optional .KickerInfo stKicker = 3;
  if (has_stkicker()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stkicker(), target);
  }

  // optional uint32 uKickedUin = 4;
  if (has_ukickeduin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ukickeduin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_KickRole_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional bool bIsLogin = 2;
    if (has_bislogin()) {
      total_size += 1 + 1;
    }

    // optional .KickerInfo stKicker = 3;
    if (has_stkicker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stkicker());
    }

    // optional uint32 uKickedUin = 4;
    if (has_ukickeduin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ukickeduin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_KickRole_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_KickRole_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_KickRole_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_KickRole_Response::MergeFrom(const World_KickRole_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_bislogin()) {
      set_bislogin(from.bislogin());
    }
    if (from.has_stkicker()) {
      mutable_stkicker()->::KickerInfo::MergeFrom(from.stkicker());
    }
    if (from.has_ukickeduin()) {
      set_ukickeduin(from.ukickeduin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_KickRole_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_KickRole_Response::CopyFrom(const World_KickRole_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_KickRole_Response::IsInitialized() const {

  return true;
}

void World_KickRole_Response::Swap(World_KickRole_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(bislogin_, other->bislogin_);
    std::swap(stkicker_, other->stkicker_);
    std::swap(ukickeduin_, other->ukickeduin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_KickRole_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_KickRole_Response_descriptor_;
  metadata.reflection = World_KickRole_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneOnlineInfo::kIZoneIDFieldNumber;
const int ZoneOnlineInfo::kIRoleNumFieldNumber;
#endif  // !_MSC_VER

ZoneOnlineInfo::ZoneOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZoneOnlineInfo::InitAsDefaultInstance() {
}

ZoneOnlineInfo::ZoneOnlineInfo(const ZoneOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZoneOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  izoneid_ = 0;
  irolenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneOnlineInfo::~ZoneOnlineInfo() {
  SharedDtor();
}

void ZoneOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZoneOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneOnlineInfo_descriptor_;
}

const ZoneOnlineInfo& ZoneOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

ZoneOnlineInfo* ZoneOnlineInfo::default_instance_ = NULL;

ZoneOnlineInfo* ZoneOnlineInfo::New() const {
  return new ZoneOnlineInfo;
}

void ZoneOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    izoneid_ = 0;
    irolenum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iZoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iRoleNum;
        break;
      }

      // optional int32 iRoleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irolenum_)));
          set_has_irolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZoneOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iZoneID = 1;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->izoneid(), output);
  }

  // optional int32 iRoleNum = 2;
  if (has_irolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->irolenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZoneOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iZoneID = 1;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->izoneid(), target);
  }

  // optional int32 iRoleNum = 2;
  if (has_irolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->irolenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZoneOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iZoneID = 1;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional int32 iRoleNum = 2;
    if (has_irolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irolenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneOnlineInfo::MergeFrom(const ZoneOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_irolenum()) {
      set_irolenum(from.irolenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneOnlineInfo::CopyFrom(const ZoneOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneOnlineInfo::IsInitialized() const {

  return true;
}

void ZoneOnlineInfo::Swap(ZoneOnlineInfo* other) {
  if (other != this) {
    std::swap(izoneid_, other->izoneid_);
    std::swap(irolenum_, other->irolenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneOnlineInfo_descriptor_;
  metadata.reflection = ZoneOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WorldOnlineInfo::kIWorldIDFieldNumber;
const int WorldOnlineInfo::kIOnlineRoleNumFieldNumber;
const int WorldOnlineInfo::kIRegisterNumFieldNumber;
const int WorldOnlineInfo::kIMaxOnlineNumFieldNumber;
const int WorldOnlineInfo::kIMaxRegisterNumFieldNumber;
const int WorldOnlineInfo::kIActiveZoneNumFieldNumber;
const int WorldOnlineInfo::kStZoneInfosFieldNumber;
#endif  // !_MSC_VER

WorldOnlineInfo::WorldOnlineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WorldOnlineInfo::InitAsDefaultInstance() {
}

WorldOnlineInfo::WorldOnlineInfo(const WorldOnlineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WorldOnlineInfo::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  ionlinerolenum_ = 0;
  iregisternum_ = 0;
  imaxonlinenum_ = 0;
  imaxregisternum_ = 0;
  iactivezonenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WorldOnlineInfo::~WorldOnlineInfo() {
  SharedDtor();
}

void WorldOnlineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WorldOnlineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WorldOnlineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WorldOnlineInfo_descriptor_;
}

const WorldOnlineInfo& WorldOnlineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

WorldOnlineInfo* WorldOnlineInfo::default_instance_ = NULL;

WorldOnlineInfo* WorldOnlineInfo::New() const {
  return new WorldOnlineInfo;
}

void WorldOnlineInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    ionlinerolenum_ = 0;
    iregisternum_ = 0;
    imaxonlinenum_ = 0;
    imaxregisternum_ = 0;
    iactivezonenum_ = 0;
  }
  stzoneinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WorldOnlineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iOnlineRoleNum;
        break;
      }

      // optional int32 iOnlineRoleNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOnlineRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ionlinerolenum_)));
          set_has_ionlinerolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRegisterNum;
        break;
      }

      // optional int32 iRegisterNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRegisterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iregisternum_)));
          set_has_iregisternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iMaxOnlineNum;
        break;
      }

      // optional int32 iMaxOnlineNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMaxOnlineNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imaxonlinenum_)));
          set_has_imaxonlinenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iMaxRegisterNum;
        break;
      }

      // optional int32 iMaxRegisterNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMaxRegisterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imaxregisternum_)));
          set_has_imaxregisternum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iActiveZoneNum;
        break;
      }

      // optional int32 iActiveZoneNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iActiveZoneNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iactivezonenum_)));
          set_has_iactivezonenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stZoneInfos;
        break;
      }

      // repeated .ZoneOnlineInfo stZoneInfos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stZoneInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stzoneinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stZoneInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WorldOnlineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional int32 iOnlineRoleNum = 2;
  if (has_ionlinerolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ionlinerolenum(), output);
  }

  // optional int32 iRegisterNum = 3;
  if (has_iregisternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iregisternum(), output);
  }

  // optional int32 iMaxOnlineNum = 4;
  if (has_imaxonlinenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imaxonlinenum(), output);
  }

  // optional int32 iMaxRegisterNum = 5;
  if (has_imaxregisternum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->imaxregisternum(), output);
  }

  // optional int32 iActiveZoneNum = 6;
  if (has_iactivezonenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iactivezonenum(), output);
  }

  // repeated .ZoneOnlineInfo stZoneInfos = 7;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stzoneinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WorldOnlineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional int32 iOnlineRoleNum = 2;
  if (has_ionlinerolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ionlinerolenum(), target);
  }

  // optional int32 iRegisterNum = 3;
  if (has_iregisternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iregisternum(), target);
  }

  // optional int32 iMaxOnlineNum = 4;
  if (has_imaxonlinenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imaxonlinenum(), target);
  }

  // optional int32 iMaxRegisterNum = 5;
  if (has_imaxregisternum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->imaxregisternum(), target);
  }

  // optional int32 iActiveZoneNum = 6;
  if (has_iactivezonenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iactivezonenum(), target);
  }

  // repeated .ZoneOnlineInfo stZoneInfos = 7;
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stzoneinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WorldOnlineInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional int32 iOnlineRoleNum = 2;
    if (has_ionlinerolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ionlinerolenum());
    }

    // optional int32 iRegisterNum = 3;
    if (has_iregisternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iregisternum());
    }

    // optional int32 iMaxOnlineNum = 4;
    if (has_imaxonlinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imaxonlinenum());
    }

    // optional int32 iMaxRegisterNum = 5;
    if (has_imaxregisternum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imaxregisternum());
    }

    // optional int32 iActiveZoneNum = 6;
    if (has_iactivezonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iactivezonenum());
    }

  }
  // repeated .ZoneOnlineInfo stZoneInfos = 7;
  total_size += 1 * this->stzoneinfos_size();
  for (int i = 0; i < this->stzoneinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stzoneinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WorldOnlineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WorldOnlineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WorldOnlineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WorldOnlineInfo::MergeFrom(const WorldOnlineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  stzoneinfos_.MergeFrom(from.stzoneinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_ionlinerolenum()) {
      set_ionlinerolenum(from.ionlinerolenum());
    }
    if (from.has_iregisternum()) {
      set_iregisternum(from.iregisternum());
    }
    if (from.has_imaxonlinenum()) {
      set_imaxonlinenum(from.imaxonlinenum());
    }
    if (from.has_imaxregisternum()) {
      set_imaxregisternum(from.imaxregisternum());
    }
    if (from.has_iactivezonenum()) {
      set_iactivezonenum(from.iactivezonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WorldOnlineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WorldOnlineInfo::CopyFrom(const WorldOnlineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldOnlineInfo::IsInitialized() const {

  return true;
}

void WorldOnlineInfo::Swap(WorldOnlineInfo* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(ionlinerolenum_, other->ionlinerolenum_);
    std::swap(iregisternum_, other->iregisternum_);
    std::swap(imaxonlinenum_, other->imaxonlinenum_);
    std::swap(imaxregisternum_, other->imaxregisternum_);
    std::swap(iactivezonenum_, other->iactivezonenum_);
    stzoneinfos_.Swap(&other->stzoneinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WorldOnlineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WorldOnlineInfo_descriptor_;
  metadata.reflection = WorldOnlineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_OnlineStat_Request::kIWorldIDFieldNumber;
const int World_OnlineStat_Request::kStWorldInfoFieldNumber;
const int World_OnlineStat_Request::kURecordTimeFieldNumber;
#endif  // !_MSC_VER

World_OnlineStat_Request::World_OnlineStat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_OnlineStat_Request::InitAsDefaultInstance() {
  stworldinfo_ = const_cast< ::WorldOnlineInfo*>(&::WorldOnlineInfo::default_instance());
}

World_OnlineStat_Request::World_OnlineStat_Request(const World_OnlineStat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_OnlineStat_Request::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  stworldinfo_ = NULL;
  urecordtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_OnlineStat_Request::~World_OnlineStat_Request() {
  SharedDtor();
}

void World_OnlineStat_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stworldinfo_;
  }
}

void World_OnlineStat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_OnlineStat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_OnlineStat_Request_descriptor_;
}

const World_OnlineStat_Request& World_OnlineStat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_OnlineStat_Request* World_OnlineStat_Request::default_instance_ = NULL;

World_OnlineStat_Request* World_OnlineStat_Request::New() const {
  return new World_OnlineStat_Request;
}

void World_OnlineStat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    if (has_stworldinfo()) {
      if (stworldinfo_ != NULL) stworldinfo_->::WorldOnlineInfo::Clear();
    }
    urecordtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_OnlineStat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stWorldInfo;
        break;
      }

      // optional .WorldOnlineInfo stWorldInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stWorldInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stworldinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uRecordTime;
        break;
      }

      // optional int32 uRecordTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uRecordTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &urecordtime_)));
          set_has_urecordtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_OnlineStat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional .WorldOnlineInfo stWorldInfo = 2;
  if (has_stworldinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stworldinfo(), output);
  }

  // optional int32 uRecordTime = 3;
  if (has_urecordtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->urecordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_OnlineStat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional .WorldOnlineInfo stWorldInfo = 2;
  if (has_stworldinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stworldinfo(), target);
  }

  // optional int32 uRecordTime = 3;
  if (has_urecordtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->urecordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_OnlineStat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional .WorldOnlineInfo stWorldInfo = 2;
    if (has_stworldinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stworldinfo());
    }

    // optional int32 uRecordTime = 3;
    if (has_urecordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->urecordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_OnlineStat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_OnlineStat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_OnlineStat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_OnlineStat_Request::MergeFrom(const World_OnlineStat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_stworldinfo()) {
      mutable_stworldinfo()->::WorldOnlineInfo::MergeFrom(from.stworldinfo());
    }
    if (from.has_urecordtime()) {
      set_urecordtime(from.urecordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_OnlineStat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_OnlineStat_Request::CopyFrom(const World_OnlineStat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_OnlineStat_Request::IsInitialized() const {

  return true;
}

void World_OnlineStat_Request::Swap(World_OnlineStat_Request* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(stworldinfo_, other->stworldinfo_);
    std::swap(urecordtime_, other->urecordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_OnlineStat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_OnlineStat_Request_descriptor_;
  metadata.reflection = World_OnlineStat_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_OnlineStat_Response::kIWorldIDFieldNumber;
const int World_OnlineStat_Response::kIInstanceIDFieldNumber;
#endif  // !_MSC_VER

World_OnlineStat_Response::World_OnlineStat_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_OnlineStat_Response::InitAsDefaultInstance() {
}

World_OnlineStat_Response::World_OnlineStat_Response(const World_OnlineStat_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_OnlineStat_Response::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  iinstanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_OnlineStat_Response::~World_OnlineStat_Response() {
  SharedDtor();
}

void World_OnlineStat_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_OnlineStat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_OnlineStat_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_OnlineStat_Response_descriptor_;
}

const World_OnlineStat_Response& World_OnlineStat_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_OnlineStat_Response* World_OnlineStat_Response::default_instance_ = NULL;

World_OnlineStat_Response* World_OnlineStat_Response::New() const {
  return new World_OnlineStat_Response;
}

void World_OnlineStat_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    iinstanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_OnlineStat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iInstanceID;
        break;
      }

      // optional int32 iInstanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iinstanceid_)));
          set_has_iinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_OnlineStat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional int32 iInstanceID = 2;
  if (has_iinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iinstanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_OnlineStat_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional int32 iInstanceID = 2;
  if (has_iinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iinstanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_OnlineStat_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional int32 iInstanceID = 2;
    if (has_iinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iinstanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_OnlineStat_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_OnlineStat_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_OnlineStat_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_OnlineStat_Response::MergeFrom(const World_OnlineStat_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_iinstanceid()) {
      set_iinstanceid(from.iinstanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_OnlineStat_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_OnlineStat_Response::CopyFrom(const World_OnlineStat_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_OnlineStat_Response::IsInitialized() const {

  return true;
}

void World_OnlineStat_Response::Swap(World_OnlineStat_Response* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(iinstanceid_, other->iinstanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_OnlineStat_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_OnlineStat_Response_descriptor_;
  metadata.reflection = World_OnlineStat_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_Chat_Notify::kIChannelFieldNumber;
const int World_Chat_Notify::kStRoleIDFieldNumber;
const int World_Chat_Notify::kIZoneIDFieldNumber;
const int World_Chat_Notify::kSzNickNameFieldNumber;
const int World_Chat_Notify::kStTargetIDFieldNumber;
const int World_Chat_Notify::kSzMessageFieldNumber;
#endif  // !_MSC_VER

World_Chat_Notify::World_Chat_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_Chat_Notify::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
  sttargetid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

World_Chat_Notify::World_Chat_Notify(const World_Chat_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_Chat_Notify::SharedCtor() {
  _cached_size_ = 0;
  ichannel_ = 0;
  stroleid_ = NULL;
  izoneid_ = 0;
  sznickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sttargetid_ = NULL;
  szmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_Chat_Notify::~World_Chat_Notify() {
  SharedDtor();
}

void World_Chat_Notify::SharedDtor() {
  if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
    delete sznickname_;
  }
  if (szmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete szmessage_;
  }
  if (this != default_instance_) {
    delete stroleid_;
    delete sttargetid_;
  }
}

void World_Chat_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_Chat_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_Chat_Notify_descriptor_;
}

const World_Chat_Notify& World_Chat_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_Chat_Notify* World_Chat_Notify::default_instance_ = NULL;

World_Chat_Notify* World_Chat_Notify::New() const {
  return new World_Chat_Notify;
}

void World_Chat_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ichannel_ = 0;
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    izoneid_ = 0;
    if (has_sznickname()) {
      if (sznickname_ != &::google::protobuf::internal::kEmptyString) {
        sznickname_->clear();
      }
    }
    if (has_sttargetid()) {
      if (sttargetid_ != NULL) sttargetid_->::RoleID::Clear();
    }
    if (has_szmessage()) {
      if (szmessage_ != &::google::protobuf::internal::kEmptyString) {
        szmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_Chat_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatChannelType_IsValid(value)) {
            set_ichannel(static_cast< ::ChatChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRoleID;
        break;
      }

      // optional .RoleID stRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_szNickName;
        break;
      }

      // optional string szNickName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sznickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sznickname().data(), this->sznickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stTargetID;
        break;
      }

      // optional .RoleID stTargetID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_szMessage;
        break;
      }

      // optional string szMessage = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szmessage().data(), this->szmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_Chat_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ichannel(), output);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stroleid(), output);
  }

  // optional string szNickName = 3;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sznickname(), output);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->izoneid(), output);
  }

  // optional .RoleID stTargetID = 5;
  if (has_sttargetid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->sttargetid(), output);
  }

  // optional string szMessage = 6;
  if (has_szmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmessage().data(), this->szmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->szmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_Chat_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ichannel(), target);
  }

  // optional .RoleID stRoleID = 2;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stroleid(), target);
  }

  // optional string szNickName = 3;
  if (has_sznickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sznickname().data(), this->sznickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sznickname(), target);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->izoneid(), target);
  }

  // optional .RoleID stTargetID = 5;
  if (has_sttargetid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->sttargetid(), target);
  }

  // optional string szMessage = 6;
  if (has_szmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szmessage().data(), this->szmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->szmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_Chat_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
    if (has_ichannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ichannel());
    }

    // optional .RoleID stRoleID = 2;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iZoneID = 4;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional string szNickName = 3;
    if (has_sznickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sznickname());
    }

    // optional .RoleID stTargetID = 5;
    if (has_sttargetid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetid());
    }

    // optional string szMessage = 6;
    if (has_szmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_Chat_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_Chat_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_Chat_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_Chat_Notify::MergeFrom(const World_Chat_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ichannel()) {
      set_ichannel(from.ichannel());
    }
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_sznickname()) {
      set_sznickname(from.sznickname());
    }
    if (from.has_sttargetid()) {
      mutable_sttargetid()->::RoleID::MergeFrom(from.sttargetid());
    }
    if (from.has_szmessage()) {
      set_szmessage(from.szmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_Chat_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_Chat_Notify::CopyFrom(const World_Chat_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_Chat_Notify::IsInitialized() const {

  return true;
}

void World_Chat_Notify::Swap(World_Chat_Notify* other) {
  if (other != this) {
    std::swap(ichannel_, other->ichannel_);
    std::swap(stroleid_, other->stroleid_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(sznickname_, other->sznickname_);
    std::swap(sttargetid_, other->sttargetid_);
    std::swap(szmessage_, other->szmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_Chat_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_Chat_Notify_descriptor_;
  metadata.reflection = World_Chat_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateRankInfo::kIRankTypeFieldNumber;
const int UpdateRankInfo::kStRankFieldNumber;
#endif  // !_MSC_VER

UpdateRankInfo::UpdateRankInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateRankInfo::InitAsDefaultInstance() {
  strank_ = const_cast< ::RankInfo*>(&::RankInfo::default_instance());
}

UpdateRankInfo::UpdateRankInfo(const UpdateRankInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateRankInfo::SharedCtor() {
  _cached_size_ = 0;
  iranktype_ = 0;
  strank_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateRankInfo::~UpdateRankInfo() {
  SharedDtor();
}

void UpdateRankInfo::SharedDtor() {
  if (this != default_instance_) {
    delete strank_;
  }
}

void UpdateRankInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateRankInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateRankInfo_descriptor_;
}

const UpdateRankInfo& UpdateRankInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

UpdateRankInfo* UpdateRankInfo::default_instance_ = NULL;

UpdateRankInfo* UpdateRankInfo::New() const {
  return new UpdateRankInfo;
}

void UpdateRankInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iranktype_ = 0;
    if (has_strank()) {
      if (strank_ != NULL) strank_->::RankInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateRankInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRankType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iranktype_)));
          set_has_iranktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRank;
        break;
      }

      // optional .RankInfo stRank = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateRankInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRankType = 1;
  if (has_iranktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iranktype(), output);
  }

  // optional .RankInfo stRank = 2;
  if (has_strank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateRankInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRankType = 1;
  if (has_iranktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iranktype(), target);
  }

  // optional .RankInfo stRank = 2;
  if (has_strank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateRankInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRankType = 1;
    if (has_iranktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iranktype());
    }

    // optional .RankInfo stRank = 2;
    if (has_strank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateRankInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateRankInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateRankInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateRankInfo::MergeFrom(const UpdateRankInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iranktype()) {
      set_iranktype(from.iranktype());
    }
    if (from.has_strank()) {
      mutable_strank()->::RankInfo::MergeFrom(from.strank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateRankInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateRankInfo::CopyFrom(const UpdateRankInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRankInfo::IsInitialized() const {

  return true;
}

void UpdateRankInfo::Swap(UpdateRankInfo* other) {
  if (other != this) {
    std::swap(iranktype_, other->iranktype_);
    std::swap(strank_, other->strank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateRankInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateRankInfo_descriptor_;
  metadata.reflection = UpdateRankInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateRank_Request::kIFromZoneIDFieldNumber;
const int World_UpdateRank_Request::kStUpdateRanksFieldNumber;
#endif  // !_MSC_VER

World_UpdateRank_Request::World_UpdateRank_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateRank_Request::InitAsDefaultInstance() {
}

World_UpdateRank_Request::World_UpdateRank_Request(const World_UpdateRank_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateRank_Request::SharedCtor() {
  _cached_size_ = 0;
  ifromzoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateRank_Request::~World_UpdateRank_Request() {
  SharedDtor();
}

void World_UpdateRank_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_UpdateRank_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateRank_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateRank_Request_descriptor_;
}

const World_UpdateRank_Request& World_UpdateRank_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UpdateRank_Request* World_UpdateRank_Request::default_instance_ = NULL;

World_UpdateRank_Request* World_UpdateRank_Request::New() const {
  return new World_UpdateRank_Request;
}

void World_UpdateRank_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifromzoneid_ = 0;
  }
  stupdateranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateRank_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFromZoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stUpdateRanks;
        break;
      }

      // repeated .UpdateRankInfo stUpdateRanks = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUpdateRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stupdateranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stUpdateRanks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateRank_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFromZoneID = 1;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifromzoneid(), output);
  }

  // repeated .UpdateRankInfo stUpdateRanks = 2;
  for (int i = 0; i < this->stupdateranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stupdateranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateRank_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFromZoneID = 1;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifromzoneid(), target);
  }

  // repeated .UpdateRankInfo stUpdateRanks = 2;
  for (int i = 0; i < this->stupdateranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stupdateranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateRank_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFromZoneID = 1;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

  }
  // repeated .UpdateRankInfo stUpdateRanks = 2;
  total_size += 1 * this->stupdateranks_size();
  for (int i = 0; i < this->stupdateranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stupdateranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateRank_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateRank_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateRank_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateRank_Request::MergeFrom(const World_UpdateRank_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  stupdateranks_.MergeFrom(from.stupdateranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateRank_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateRank_Request::CopyFrom(const World_UpdateRank_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateRank_Request::IsInitialized() const {

  return true;
}

void World_UpdateRank_Request::Swap(World_UpdateRank_Request* other) {
  if (other != this) {
    std::swap(ifromzoneid_, other->ifromzoneid_);
    stupdateranks_.Swap(&other->stupdateranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateRank_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateRank_Request_descriptor_;
  metadata.reflection = World_UpdateRank_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateRank_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

World_UpdateRank_Response::World_UpdateRank_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateRank_Response::InitAsDefaultInstance() {
}

World_UpdateRank_Response::World_UpdateRank_Response(const World_UpdateRank_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateRank_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateRank_Response::~World_UpdateRank_Response() {
  SharedDtor();
}

void World_UpdateRank_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_UpdateRank_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateRank_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateRank_Response_descriptor_;
}

const World_UpdateRank_Response& World_UpdateRank_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UpdateRank_Response* World_UpdateRank_Response::default_instance_ = NULL;

World_UpdateRank_Response* World_UpdateRank_Response::New() const {
  return new World_UpdateRank_Response;
}

void World_UpdateRank_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateRank_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateRank_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateRank_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateRank_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateRank_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateRank_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateRank_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateRank_Response::MergeFrom(const World_UpdateRank_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateRank_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateRank_Response::CopyFrom(const World_UpdateRank_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateRank_Response::IsInitialized() const {

  return true;
}

void World_UpdateRank_Response::Swap(World_UpdateRank_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateRank_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateRank_Response_descriptor_;
  metadata.reflection = World_UpdateRank_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetRankInfo_Request::kITypeFieldNumber;
const int World_GetRankInfo_Request::kIVersionIDFieldNumber;
const int World_GetRankInfo_Request::kIFromZoneIDFieldNumber;
#endif  // !_MSC_VER

World_GetRankInfo_Request::World_GetRankInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetRankInfo_Request::InitAsDefaultInstance() {
}

World_GetRankInfo_Request::World_GetRankInfo_Request(const World_GetRankInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetRankInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  itype_ = 0;
  iversionid_ = 0u;
  ifromzoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetRankInfo_Request::~World_GetRankInfo_Request() {
  SharedDtor();
}

void World_GetRankInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_GetRankInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetRankInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetRankInfo_Request_descriptor_;
}

const World_GetRankInfo_Request& World_GetRankInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetRankInfo_Request* World_GetRankInfo_Request::default_instance_ = NULL;

World_GetRankInfo_Request* World_GetRankInfo_Request::New() const {
  return new World_GetRankInfo_Request;
}

void World_GetRankInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itype_ = 0;
    iversionid_ = 0u;
    ifromzoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetRankInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iVersionID;
        break;
      }

      // optional uint32 iVersionID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVersionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iversionid_)));
          set_has_iversionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetRankInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itype(), output);
  }

  // optional uint32 iVersionID = 2;
  if (has_iversionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->iversionid(), output);
  }

  // optional int32 iFromZoneID = 3;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifromzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetRankInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itype(), target);
  }

  // optional uint32 iVersionID = 2;
  if (has_iversionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->iversionid(), target);
  }

  // optional int32 iFromZoneID = 3;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifromzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetRankInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iType = 1;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional uint32 iVersionID = 2;
    if (has_iversionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iversionid());
    }

    // optional int32 iFromZoneID = 3;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetRankInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetRankInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetRankInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetRankInfo_Request::MergeFrom(const World_GetRankInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_iversionid()) {
      set_iversionid(from.iversionid());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetRankInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetRankInfo_Request::CopyFrom(const World_GetRankInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetRankInfo_Request::IsInitialized() const {

  return true;
}

void World_GetRankInfo_Request::Swap(World_GetRankInfo_Request* other) {
  if (other != this) {
    std::swap(itype_, other->itype_);
    std::swap(iversionid_, other->iversionid_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetRankInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetRankInfo_Request_descriptor_;
  metadata.reflection = World_GetRankInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetRankInfo_Response::kIResultFieldNumber;
const int World_GetRankInfo_Response::kITypeFieldNumber;
const int World_GetRankInfo_Response::kIVersionIDFieldNumber;
const int World_GetRankInfo_Response::kILastUpdateFieldNumber;
const int World_GetRankInfo_Response::kStRanksFieldNumber;
const int World_GetRankInfo_Response::kStLastRanksFieldNumber;
#endif  // !_MSC_VER

World_GetRankInfo_Response::World_GetRankInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetRankInfo_Response::InitAsDefaultInstance() {
}

World_GetRankInfo_Response::World_GetRankInfo_Response(const World_GetRankInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetRankInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  itype_ = 0;
  iversionid_ = 0u;
  ilastupdate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetRankInfo_Response::~World_GetRankInfo_Response() {
  SharedDtor();
}

void World_GetRankInfo_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_GetRankInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetRankInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetRankInfo_Response_descriptor_;
}

const World_GetRankInfo_Response& World_GetRankInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetRankInfo_Response* World_GetRankInfo_Response::default_instance_ = NULL;

World_GetRankInfo_Response* World_GetRankInfo_Response::New() const {
  return new World_GetRankInfo_Response;
}

void World_GetRankInfo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    itype_ = 0;
    iversionid_ = 0u;
    ilastupdate_ = 0;
  }
  stranks_.Clear();
  stlastranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetRankInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iVersionID;
        break;
      }

      // optional uint32 iVersionID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVersionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &iversionid_)));
          set_has_iversionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iLastUpdate;
        break;
      }

      // optional int32 iLastUpdate = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLastUpdate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilastupdate_)));
          set_has_ilastupdate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stRanks;
        break;
      }

      // repeated .RankInfo stRanks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stRanks;
        if (input->ExpectTag(50)) goto parse_stLastRanks;
        break;
      }

      // repeated .RankInfo stLastRanks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLastRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stlastranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stLastRanks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetRankInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // optional uint32 iVersionID = 3;
  if (has_iversionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->iversionid(), output);
  }

  // optional int32 iLastUpdate = 4;
  if (has_ilastupdate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ilastupdate(), output);
  }

  // repeated .RankInfo stRanks = 5;
  for (int i = 0; i < this->stranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stranks(i), output);
  }

  // repeated .RankInfo stLastRanks = 6;
  for (int i = 0; i < this->stlastranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stlastranks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetRankInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // optional uint32 iVersionID = 3;
  if (has_iversionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->iversionid(), target);
  }

  // optional int32 iLastUpdate = 4;
  if (has_ilastupdate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ilastupdate(), target);
  }

  // repeated .RankInfo stRanks = 5;
  for (int i = 0; i < this->stranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stranks(i), target);
  }

  // repeated .RankInfo stLastRanks = 6;
  for (int i = 0; i < this->stlastranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stlastranks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetRankInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional uint32 iVersionID = 3;
    if (has_iversionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->iversionid());
    }

    // optional int32 iLastUpdate = 4;
    if (has_ilastupdate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilastupdate());
    }

  }
  // repeated .RankInfo stRanks = 5;
  total_size += 1 * this->stranks_size();
  for (int i = 0; i < this->stranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stranks(i));
  }

  // repeated .RankInfo stLastRanks = 6;
  total_size += 1 * this->stlastranks_size();
  for (int i = 0; i < this->stlastranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stlastranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetRankInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetRankInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetRankInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetRankInfo_Response::MergeFrom(const World_GetRankInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  stranks_.MergeFrom(from.stranks_);
  stlastranks_.MergeFrom(from.stlastranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_iversionid()) {
      set_iversionid(from.iversionid());
    }
    if (from.has_ilastupdate()) {
      set_ilastupdate(from.ilastupdate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetRankInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetRankInfo_Response::CopyFrom(const World_GetRankInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetRankInfo_Response::IsInitialized() const {

  return true;
}

void World_GetRankInfo_Response::Swap(World_GetRankInfo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(itype_, other->itype_);
    std::swap(iversionid_, other->iversionid_);
    std::swap(ilastupdate_, other->ilastupdate_);
    stranks_.Swap(&other->stranks_);
    stlastranks_.Swap(&other->stlastranks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetRankInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetRankInfo_Response_descriptor_;
  metadata.reflection = World_GetRankInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_SendMail_Request::kStMailInfoFieldNumber;
const int World_SendMail_Request::kUiFromUinFieldNumber;
const int World_SendMail_Request::kUiToUinFieldNumber;
const int World_SendMail_Request::kITryTimesFieldNumber;
#endif  // !_MSC_VER

World_SendMail_Request::World_SendMail_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_SendMail_Request::InitAsDefaultInstance() {
  stmailinfo_ = const_cast< ::OneMailInfo*>(&::OneMailInfo::default_instance());
}

World_SendMail_Request::World_SendMail_Request(const World_SendMail_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_SendMail_Request::SharedCtor() {
  _cached_size_ = 0;
  stmailinfo_ = NULL;
  uifromuin_ = 0u;
  uitouin_ = 0u;
  itrytimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_SendMail_Request::~World_SendMail_Request() {
  SharedDtor();
}

void World_SendMail_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stmailinfo_;
  }
}

void World_SendMail_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_SendMail_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_SendMail_Request_descriptor_;
}

const World_SendMail_Request& World_SendMail_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_SendMail_Request* World_SendMail_Request::default_instance_ = NULL;

World_SendMail_Request* World_SendMail_Request::New() const {
  return new World_SendMail_Request;
}

void World_SendMail_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stmailinfo()) {
      if (stmailinfo_ != NULL) stmailinfo_->::OneMailInfo::Clear();
    }
    uifromuin_ = 0u;
    uitouin_ = 0u;
    itrytimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_SendMail_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OneMailInfo stMailInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stmailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uiFromUin;
        break;
      }

      // optional uint32 uiFromUin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFromUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uifromuin_)));
          set_has_uifromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiToUin;
        break;
      }

      // optional uint32 uiToUin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiToUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitouin_)));
          set_has_uitouin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iTryTimes;
        break;
      }

      // optional int32 iTryTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTryTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itrytimes_)));
          set_has_itrytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_SendMail_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OneMailInfo stMailInfo = 1;
  if (has_stmailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stmailinfo(), output);
  }

  // optional uint32 uiFromUin = 2;
  if (has_uifromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uifromuin(), output);
  }

  // optional uint32 uiToUin = 3;
  if (has_uitouin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uitouin(), output);
  }

  // optional int32 iTryTimes = 4;
  if (has_itrytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itrytimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_SendMail_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OneMailInfo stMailInfo = 1;
  if (has_stmailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stmailinfo(), target);
  }

  // optional uint32 uiFromUin = 2;
  if (has_uifromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uifromuin(), target);
  }

  // optional uint32 uiToUin = 3;
  if (has_uitouin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uitouin(), target);
  }

  // optional int32 iTryTimes = 4;
  if (has_itrytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itrytimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_SendMail_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OneMailInfo stMailInfo = 1;
    if (has_stmailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stmailinfo());
    }

    // optional uint32 uiFromUin = 2;
    if (has_uifromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uifromuin());
    }

    // optional uint32 uiToUin = 3;
    if (has_uitouin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitouin());
    }

    // optional int32 iTryTimes = 4;
    if (has_itrytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itrytimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_SendMail_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_SendMail_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_SendMail_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_SendMail_Request::MergeFrom(const World_SendMail_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stmailinfo()) {
      mutable_stmailinfo()->::OneMailInfo::MergeFrom(from.stmailinfo());
    }
    if (from.has_uifromuin()) {
      set_uifromuin(from.uifromuin());
    }
    if (from.has_uitouin()) {
      set_uitouin(from.uitouin());
    }
    if (from.has_itrytimes()) {
      set_itrytimes(from.itrytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_SendMail_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_SendMail_Request::CopyFrom(const World_SendMail_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_SendMail_Request::IsInitialized() const {

  return true;
}

void World_SendMail_Request::Swap(World_SendMail_Request* other) {
  if (other != this) {
    std::swap(stmailinfo_, other->stmailinfo_);
    std::swap(uifromuin_, other->uifromuin_);
    std::swap(uitouin_, other->uitouin_);
    std::swap(itrytimes_, other->itrytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_SendMail_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_SendMail_Request_descriptor_;
  metadata.reflection = World_SendMail_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_SendMail_Response::kIResultFieldNumber;
const int World_SendMail_Response::kStMailInfoFieldNumber;
const int World_SendMail_Response::kUiFromUinFieldNumber;
const int World_SendMail_Response::kUiToUinFieldNumber;
const int World_SendMail_Response::kITryTimesFieldNumber;
#endif  // !_MSC_VER

World_SendMail_Response::World_SendMail_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_SendMail_Response::InitAsDefaultInstance() {
  stmailinfo_ = const_cast< ::OneMailInfo*>(&::OneMailInfo::default_instance());
}

World_SendMail_Response::World_SendMail_Response(const World_SendMail_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_SendMail_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stmailinfo_ = NULL;
  uifromuin_ = 0u;
  uitouin_ = 0u;
  itrytimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_SendMail_Response::~World_SendMail_Response() {
  SharedDtor();
}

void World_SendMail_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stmailinfo_;
  }
}

void World_SendMail_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_SendMail_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_SendMail_Response_descriptor_;
}

const World_SendMail_Response& World_SendMail_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_SendMail_Response* World_SendMail_Response::default_instance_ = NULL;

World_SendMail_Response* World_SendMail_Response::New() const {
  return new World_SendMail_Response;
}

void World_SendMail_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stmailinfo()) {
      if (stmailinfo_ != NULL) stmailinfo_->::OneMailInfo::Clear();
    }
    uifromuin_ = 0u;
    uitouin_ = 0u;
    itrytimes_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_SendMail_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stMailInfo;
        break;
      }

      // optional .OneMailInfo stMailInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stMailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stmailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uiFromUin;
        break;
      }

      // optional uint32 uiFromUin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiFromUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uifromuin_)));
          set_has_uifromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uiToUin;
        break;
      }

      // optional uint32 uiToUin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uiToUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uitouin_)));
          set_has_uitouin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iTryTimes;
        break;
      }

      // optional int32 iTryTimes = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTryTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itrytimes_)));
          set_has_itrytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_SendMail_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .OneMailInfo stMailInfo = 2;
  if (has_stmailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stmailinfo(), output);
  }

  // optional uint32 uiFromUin = 3;
  if (has_uifromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uifromuin(), output);
  }

  // optional uint32 uiToUin = 4;
  if (has_uitouin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uitouin(), output);
  }

  // optional int32 iTryTimes = 5;
  if (has_itrytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itrytimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_SendMail_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .OneMailInfo stMailInfo = 2;
  if (has_stmailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stmailinfo(), target);
  }

  // optional uint32 uiFromUin = 3;
  if (has_uifromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uifromuin(), target);
  }

  // optional uint32 uiToUin = 4;
  if (has_uitouin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uitouin(), target);
  }

  // optional int32 iTryTimes = 5;
  if (has_itrytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itrytimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_SendMail_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .OneMailInfo stMailInfo = 2;
    if (has_stmailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stmailinfo());
    }

    // optional uint32 uiFromUin = 3;
    if (has_uifromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uifromuin());
    }

    // optional uint32 uiToUin = 4;
    if (has_uitouin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uitouin());
    }

    // optional int32 iTryTimes = 5;
    if (has_itrytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itrytimes());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_SendMail_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_SendMail_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_SendMail_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_SendMail_Response::MergeFrom(const World_SendMail_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stmailinfo()) {
      mutable_stmailinfo()->::OneMailInfo::MergeFrom(from.stmailinfo());
    }
    if (from.has_uifromuin()) {
      set_uifromuin(from.uifromuin());
    }
    if (from.has_uitouin()) {
      set_uitouin(from.uitouin());
    }
    if (from.has_itrytimes()) {
      set_itrytimes(from.itrytimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_SendMail_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_SendMail_Response::CopyFrom(const World_SendMail_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_SendMail_Response::IsInitialized() const {

  return true;
}

void World_SendMail_Response::Swap(World_SendMail_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stmailinfo_, other->stmailinfo_);
    std::swap(uifromuin_, other->uifromuin_);
    std::swap(uitouin_, other->uitouin_);
    std::swap(itrytimes_, other->itrytimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_SendMail_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_SendMail_Response_descriptor_;
  metadata.reflection = World_SendMail_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_AddLimitNum_Request::kUinFieldNumber;
const int World_AddLimitNum_Request::kIExchangeIDFieldNumber;
const int World_AddLimitNum_Request::kIAddNumFieldNumber;
const int World_AddLimitNum_Request::kIZoneIDFieldNumber;
const int World_AddLimitNum_Request::kIReasonFieldNumber;
#endif  // !_MSC_VER

World_AddLimitNum_Request::World_AddLimitNum_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_AddLimitNum_Request::InitAsDefaultInstance() {
}

World_AddLimitNum_Request::World_AddLimitNum_Request(const World_AddLimitNum_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_AddLimitNum_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  iexchangeid_ = 0;
  iaddnum_ = 0;
  izoneid_ = 0;
  ireason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_AddLimitNum_Request::~World_AddLimitNum_Request() {
  SharedDtor();
}

void World_AddLimitNum_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_AddLimitNum_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_AddLimitNum_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_AddLimitNum_Request_descriptor_;
}

const World_AddLimitNum_Request& World_AddLimitNum_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_AddLimitNum_Request* World_AddLimitNum_Request::default_instance_ = NULL;

World_AddLimitNum_Request* World_AddLimitNum_Request::New() const {
  return new World_AddLimitNum_Request;
}

void World_AddLimitNum_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    iexchangeid_ = 0;
    iaddnum_ = 0;
    izoneid_ = 0;
    ireason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_AddLimitNum_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iExchangeID;
        break;
      }

      // optional int32 iExchangeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iExchangeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAddNum;
        break;
      }

      // optional int32 iAddNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iaddnum_)));
          set_has_iaddnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iReason;
        break;
      }

      // optional int32 iReason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireason_)));
          set_has_ireason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_AddLimitNum_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional int32 iExchangeID = 2;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iexchangeid(), output);
  }

  // optional int32 iAddNum = 3;
  if (has_iaddnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iaddnum(), output);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->izoneid(), output);
  }

  // optional int32 iReason = 5;
  if (has_ireason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ireason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_AddLimitNum_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional int32 iExchangeID = 2;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iexchangeid(), target);
  }

  // optional int32 iAddNum = 3;
  if (has_iaddnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iaddnum(), target);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->izoneid(), target);
  }

  // optional int32 iReason = 5;
  if (has_ireason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ireason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_AddLimitNum_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iExchangeID = 2;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

    // optional int32 iAddNum = 3;
    if (has_iaddnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iaddnum());
    }

    // optional int32 iZoneID = 4;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional int32 iReason = 5;
    if (has_ireason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_AddLimitNum_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_AddLimitNum_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_AddLimitNum_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_AddLimitNum_Request::MergeFrom(const World_AddLimitNum_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
    if (from.has_iaddnum()) {
      set_iaddnum(from.iaddnum());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_ireason()) {
      set_ireason(from.ireason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_AddLimitNum_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_AddLimitNum_Request::CopyFrom(const World_AddLimitNum_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_AddLimitNum_Request::IsInitialized() const {

  return true;
}

void World_AddLimitNum_Request::Swap(World_AddLimitNum_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(iaddnum_, other->iaddnum_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(ireason_, other->ireason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_AddLimitNum_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_AddLimitNum_Request_descriptor_;
  metadata.reflection = World_AddLimitNum_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_AddLimitNum_Response::kIResultFieldNumber;
const int World_AddLimitNum_Response::kUinFieldNumber;
const int World_AddLimitNum_Response::kIExchangeIDFieldNumber;
const int World_AddLimitNum_Response::kIReasonFieldNumber;
#endif  // !_MSC_VER

World_AddLimitNum_Response::World_AddLimitNum_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_AddLimitNum_Response::InitAsDefaultInstance() {
}

World_AddLimitNum_Response::World_AddLimitNum_Response(const World_AddLimitNum_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_AddLimitNum_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  iexchangeid_ = 0;
  ireason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_AddLimitNum_Response::~World_AddLimitNum_Response() {
  SharedDtor();
}

void World_AddLimitNum_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_AddLimitNum_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_AddLimitNum_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_AddLimitNum_Response_descriptor_;
}

const World_AddLimitNum_Response& World_AddLimitNum_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_AddLimitNum_Response* World_AddLimitNum_Response::default_instance_ = NULL;

World_AddLimitNum_Response* World_AddLimitNum_Response::New() const {
  return new World_AddLimitNum_Response;
}

void World_AddLimitNum_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    iexchangeid_ = 0;
    ireason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_AddLimitNum_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iExchangeID;
        break;
      }

      // optional int32 iExchangeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iExchangeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iReason;
        break;
      }

      // optional int32 iReason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireason_)));
          set_has_ireason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_AddLimitNum_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iExchangeID = 3;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iexchangeid(), output);
  }

  // optional int32 iReason = 4;
  if (has_ireason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ireason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_AddLimitNum_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iExchangeID = 3;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iexchangeid(), target);
  }

  // optional int32 iReason = 4;
  if (has_ireason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ireason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_AddLimitNum_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iExchangeID = 3;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

    // optional int32 iReason = 4;
    if (has_ireason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_AddLimitNum_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_AddLimitNum_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_AddLimitNum_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_AddLimitNum_Response::MergeFrom(const World_AddLimitNum_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
    if (from.has_ireason()) {
      set_ireason(from.ireason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_AddLimitNum_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_AddLimitNum_Response::CopyFrom(const World_AddLimitNum_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_AddLimitNum_Response::IsInitialized() const {

  return true;
}

void World_AddLimitNum_Response::Swap(World_AddLimitNum_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(ireason_, other->ireason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_AddLimitNum_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_AddLimitNum_Response_descriptor_;
  metadata.reflection = World_AddLimitNum_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdatePrizeInfo_Request::kStPrizesFieldNumber;
#endif  // !_MSC_VER

World_UpdatePrizeInfo_Request::World_UpdatePrizeInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdatePrizeInfo_Request::InitAsDefaultInstance() {
}

World_UpdatePrizeInfo_Request::World_UpdatePrizeInfo_Request(const World_UpdatePrizeInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdatePrizeInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdatePrizeInfo_Request::~World_UpdatePrizeInfo_Request() {
  SharedDtor();
}

void World_UpdatePrizeInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_UpdatePrizeInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdatePrizeInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdatePrizeInfo_Request_descriptor_;
}

const World_UpdatePrizeInfo_Request& World_UpdatePrizeInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UpdatePrizeInfo_Request* World_UpdatePrizeInfo_Request::default_instance_ = NULL;

World_UpdatePrizeInfo_Request* World_UpdatePrizeInfo_Request::New() const {
  return new World_UpdatePrizeInfo_Request;
}

void World_UpdatePrizeInfo_Request::Clear() {
  stprizes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdatePrizeInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PrizeInfo stPrizes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stPrizes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stprizes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stPrizes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdatePrizeInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PrizeInfo stPrizes = 1;
  for (int i = 0; i < this->stprizes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stprizes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdatePrizeInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PrizeInfo stPrizes = 1;
  for (int i = 0; i < this->stprizes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stprizes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdatePrizeInfo_Request::ByteSize() const {
  int total_size = 0;

  // repeated .PrizeInfo stPrizes = 1;
  total_size += 1 * this->stprizes_size();
  for (int i = 0; i < this->stprizes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stprizes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdatePrizeInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdatePrizeInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdatePrizeInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdatePrizeInfo_Request::MergeFrom(const World_UpdatePrizeInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  stprizes_.MergeFrom(from.stprizes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdatePrizeInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdatePrizeInfo_Request::CopyFrom(const World_UpdatePrizeInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdatePrizeInfo_Request::IsInitialized() const {

  return true;
}

void World_UpdatePrizeInfo_Request::Swap(World_UpdatePrizeInfo_Request* other) {
  if (other != this) {
    stprizes_.Swap(&other->stprizes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdatePrizeInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdatePrizeInfo_Request_descriptor_;
  metadata.reflection = World_UpdatePrizeInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateBetInfo_Request::kStBetInfosFieldNumber;
#endif  // !_MSC_VER

World_UpdateBetInfo_Request::World_UpdateBetInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateBetInfo_Request::InitAsDefaultInstance() {
}

World_UpdateBetInfo_Request::World_UpdateBetInfo_Request(const World_UpdateBetInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateBetInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateBetInfo_Request::~World_UpdateBetInfo_Request() {
  SharedDtor();
}

void World_UpdateBetInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_UpdateBetInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateBetInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateBetInfo_Request_descriptor_;
}

const World_UpdateBetInfo_Request& World_UpdateBetInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UpdateBetInfo_Request* World_UpdateBetInfo_Request::default_instance_ = NULL;

World_UpdateBetInfo_Request* World_UpdateBetInfo_Request::New() const {
  return new World_UpdateBetInfo_Request;
}

void World_UpdateBetInfo_Request::Clear() {
  stbetinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateBetInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NumberBetInfo stBetInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBetInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stbetinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stBetInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateBetInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NumberBetInfo stBetInfos = 1;
  for (int i = 0; i < this->stbetinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stbetinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateBetInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NumberBetInfo stBetInfos = 1;
  for (int i = 0; i < this->stbetinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stbetinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateBetInfo_Request::ByteSize() const {
  int total_size = 0;

  // repeated .NumberBetInfo stBetInfos = 1;
  total_size += 1 * this->stbetinfos_size();
  for (int i = 0; i < this->stbetinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stbetinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateBetInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateBetInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateBetInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateBetInfo_Request::MergeFrom(const World_UpdateBetInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  stbetinfos_.MergeFrom(from.stbetinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateBetInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateBetInfo_Request::CopyFrom(const World_UpdateBetInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateBetInfo_Request::IsInitialized() const {

  return true;
}

void World_UpdateBetInfo_Request::Swap(World_UpdateBetInfo_Request* other) {
  if (other != this) {
    stbetinfos_.Swap(&other->stbetinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateBetInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateBetInfo_Request_descriptor_;
  metadata.reflection = World_UpdateBetInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UpdateLasvegas_Notify::kStInfoFieldNumber;
#endif  // !_MSC_VER

World_UpdateLasvegas_Notify::World_UpdateLasvegas_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UpdateLasvegas_Notify::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::LasvegasInfo*>(&::LasvegasInfo::default_instance());
}

World_UpdateLasvegas_Notify::World_UpdateLasvegas_Notify(const World_UpdateLasvegas_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UpdateLasvegas_Notify::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UpdateLasvegas_Notify::~World_UpdateLasvegas_Notify() {
  SharedDtor();
}

void World_UpdateLasvegas_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void World_UpdateLasvegas_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UpdateLasvegas_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UpdateLasvegas_Notify_descriptor_;
}

const World_UpdateLasvegas_Notify& World_UpdateLasvegas_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UpdateLasvegas_Notify* World_UpdateLasvegas_Notify::default_instance_ = NULL;

World_UpdateLasvegas_Notify* World_UpdateLasvegas_Notify::New() const {
  return new World_UpdateLasvegas_Notify;
}

void World_UpdateLasvegas_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::LasvegasInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UpdateLasvegas_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LasvegasInfo stInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UpdateLasvegas_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .LasvegasInfo stInfo = 1;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UpdateLasvegas_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .LasvegasInfo stInfo = 1;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UpdateLasvegas_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LasvegasInfo stInfo = 1;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UpdateLasvegas_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UpdateLasvegas_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UpdateLasvegas_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UpdateLasvegas_Notify::MergeFrom(const World_UpdateLasvegas_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::LasvegasInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UpdateLasvegas_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UpdateLasvegas_Notify::CopyFrom(const World_UpdateLasvegas_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UpdateLasvegas_Notify::IsInitialized() const {

  return true;
}

void World_UpdateLasvegas_Notify::Swap(World_UpdateLasvegas_Notify* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UpdateLasvegas_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UpdateLasvegas_Notify_descriptor_;
  metadata.reflection = World_UpdateLasvegas_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UserRecharge_Request::kUinFieldNumber;
const int World_UserRecharge_Request::kStrOrderIDFieldNumber;
const int World_UserRecharge_Request::kIRMBFieldNumber;
const int World_UserRecharge_Request::kIRechargeIDFieldNumber;
const int World_UserRecharge_Request::kITimeFieldNumber;
const int World_UserRecharge_Request::kIPlatformFieldNumber;
#endif  // !_MSC_VER

World_UserRecharge_Request::World_UserRecharge_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UserRecharge_Request::InitAsDefaultInstance() {
}

World_UserRecharge_Request::World_UserRecharge_Request(const World_UserRecharge_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UserRecharge_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  strorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  irmb_ = 0;
  irechargeid_ = 0;
  itime_ = 0;
  iplatform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UserRecharge_Request::~World_UserRecharge_Request() {
  SharedDtor();
}

void World_UserRecharge_Request::SharedDtor() {
  if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete strorderid_;
  }
  if (this != default_instance_) {
  }
}

void World_UserRecharge_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UserRecharge_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UserRecharge_Request_descriptor_;
}

const World_UserRecharge_Request& World_UserRecharge_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UserRecharge_Request* World_UserRecharge_Request::default_instance_ = NULL;

World_UserRecharge_Request* World_UserRecharge_Request::New() const {
  return new World_UserRecharge_Request;
}

void World_UserRecharge_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    if (has_strorderid()) {
      if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
        strorderid_->clear();
      }
    }
    irmb_ = 0;
    irechargeid_ = 0;
    itime_ = 0;
    iplatform_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UserRecharge_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strOrderID;
        break;
      }

      // optional string strOrderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strorderid().data(), this->strorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRMB;
        break;
      }

      // optional int32 iRMB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRMB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irmb_)));
          set_has_irmb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iRechargeID;
        break;
      }

      // optional int32 iRechargeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRechargeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irechargeid_)));
          set_has_irechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iTime;
        break;
      }

      // optional int32 iTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itime_)));
          set_has_itime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iPlatform;
        break;
      }

      // optional int32 iPlatform = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iplatform_)));
          set_has_iplatform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UserRecharge_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional string strOrderID = 2;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strorderid(), output);
  }

  // optional int32 iRMB = 3;
  if (has_irmb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irmb(), output);
  }

  // optional int32 iRechargeID = 4;
  if (has_irechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->irechargeid(), output);
  }

  // optional int32 iTime = 5;
  if (has_itime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->itime(), output);
  }

  // optional int32 iPlatform = 6;
  if (has_iplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iplatform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UserRecharge_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional string strOrderID = 2;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strorderid(), target);
  }

  // optional int32 iRMB = 3;
  if (has_irmb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irmb(), target);
  }

  // optional int32 iRechargeID = 4;
  if (has_irechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->irechargeid(), target);
  }

  // optional int32 iTime = 5;
  if (has_itime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->itime(), target);
  }

  // optional int32 iPlatform = 6;
  if (has_iplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iplatform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UserRecharge_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional string strOrderID = 2;
    if (has_strorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strorderid());
    }

    // optional int32 iRMB = 3;
    if (has_irmb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irmb());
    }

    // optional int32 iRechargeID = 4;
    if (has_irechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irechargeid());
    }

    // optional int32 iTime = 5;
    if (has_itime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itime());
    }

    // optional int32 iPlatform = 6;
    if (has_iplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iplatform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UserRecharge_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UserRecharge_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UserRecharge_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UserRecharge_Request::MergeFrom(const World_UserRecharge_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_strorderid()) {
      set_strorderid(from.strorderid());
    }
    if (from.has_irmb()) {
      set_irmb(from.irmb());
    }
    if (from.has_irechargeid()) {
      set_irechargeid(from.irechargeid());
    }
    if (from.has_itime()) {
      set_itime(from.itime());
    }
    if (from.has_iplatform()) {
      set_iplatform(from.iplatform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UserRecharge_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UserRecharge_Request::CopyFrom(const World_UserRecharge_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UserRecharge_Request::IsInitialized() const {

  return true;
}

void World_UserRecharge_Request::Swap(World_UserRecharge_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(strorderid_, other->strorderid_);
    std::swap(irmb_, other->irmb_);
    std::swap(irechargeid_, other->irechargeid_);
    std::swap(itime_, other->itime_);
    std::swap(iplatform_, other->iplatform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UserRecharge_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UserRecharge_Request_descriptor_;
  metadata.reflection = World_UserRecharge_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_UserRecharge_Response::kIResultFieldNumber;
const int World_UserRecharge_Response::kUinFieldNumber;
const int World_UserRecharge_Response::kStrOrderIDFieldNumber;
const int World_UserRecharge_Response::kIRechargeIDFieldNumber;
const int World_UserRecharge_Response::kIPlatformFieldNumber;
#endif  // !_MSC_VER

World_UserRecharge_Response::World_UserRecharge_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_UserRecharge_Response::InitAsDefaultInstance() {
}

World_UserRecharge_Response::World_UserRecharge_Response(const World_UserRecharge_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_UserRecharge_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  strorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  irechargeid_ = 0;
  iplatform_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_UserRecharge_Response::~World_UserRecharge_Response() {
  SharedDtor();
}

void World_UserRecharge_Response::SharedDtor() {
  if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete strorderid_;
  }
  if (this != default_instance_) {
  }
}

void World_UserRecharge_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_UserRecharge_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_UserRecharge_Response_descriptor_;
}

const World_UserRecharge_Response& World_UserRecharge_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_UserRecharge_Response* World_UserRecharge_Response::default_instance_ = NULL;

World_UserRecharge_Response* World_UserRecharge_Response::New() const {
  return new World_UserRecharge_Response;
}

void World_UserRecharge_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    if (has_strorderid()) {
      if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
        strorderid_->clear();
      }
    }
    irechargeid_ = 0;
    iplatform_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_UserRecharge_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strOrderID;
        break;
      }

      // optional string strOrderID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strorderid().data(), this->strorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iRechargeID;
        break;
      }

      // optional int32 iRechargeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRechargeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irechargeid_)));
          set_has_irechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iPlatform;
        break;
      }

      // optional int32 iPlatform = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iPlatform:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iplatform_)));
          set_has_iplatform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_UserRecharge_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional string strOrderID = 3;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strorderid(), output);
  }

  // optional int32 iRechargeID = 4;
  if (has_irechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->irechargeid(), output);
  }

  // optional int32 iPlatform = 5;
  if (has_iplatform()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iplatform(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_UserRecharge_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional string strOrderID = 3;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strorderid(), target);
  }

  // optional int32 iRechargeID = 4;
  if (has_irechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->irechargeid(), target);
  }

  // optional int32 iPlatform = 5;
  if (has_iplatform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iplatform(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_UserRecharge_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional string strOrderID = 3;
    if (has_strorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strorderid());
    }

    // optional int32 iRechargeID = 4;
    if (has_irechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irechargeid());
    }

    // optional int32 iPlatform = 5;
    if (has_iplatform()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iplatform());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_UserRecharge_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_UserRecharge_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_UserRecharge_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_UserRecharge_Response::MergeFrom(const World_UserRecharge_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_strorderid()) {
      set_strorderid(from.strorderid());
    }
    if (from.has_irechargeid()) {
      set_irechargeid(from.irechargeid());
    }
    if (from.has_iplatform()) {
      set_iplatform(from.iplatform());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_UserRecharge_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_UserRecharge_Response::CopyFrom(const World_UserRecharge_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_UserRecharge_Response::IsInitialized() const {

  return true;
}

void World_UserRecharge_Response::Swap(World_UserRecharge_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(strorderid_, other->strorderid_);
    std::swap(irechargeid_, other->irechargeid_);
    std::swap(iplatform_, other->iplatform_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_UserRecharge_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_UserRecharge_Response_descriptor_;
  metadata.reflection = World_UserRecharge_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameMaster_Request::kIOperaTypeFieldNumber;
const int GameMaster_Request::kUFromUinFieldNumber;
const int GameMaster_Request::kUToUinFieldNumber;
const int GameMaster_Request::kStrParamsFieldNumber;
const int GameMaster_Request::kIVIPMinFieldNumber;
const int GameMaster_Request::kIVIPMaxFieldNumber;
const int GameMaster_Request::kStrChannelIDsFieldNumber;
const int GameMaster_Request::kIMailEndTimeFieldNumber;
const int GameMaster_Request::kIFromZoneIDFieldNumber;
#endif  // !_MSC_VER

GameMaster_Request::GameMaster_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMaster_Request::InitAsDefaultInstance() {
}

GameMaster_Request::GameMaster_Request(const GameMaster_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMaster_Request::SharedCtor() {
  _cached_size_ = 0;
  ioperatype_ = 0;
  ufromuin_ = 0u;
  utouin_ = 0u;
  ivipmin_ = 0;
  ivipmax_ = 0;
  imailendtime_ = 0;
  ifromzoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMaster_Request::~GameMaster_Request() {
  SharedDtor();
}

void GameMaster_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GameMaster_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMaster_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMaster_Request_descriptor_;
}

const GameMaster_Request& GameMaster_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

GameMaster_Request* GameMaster_Request::default_instance_ = NULL;

GameMaster_Request* GameMaster_Request::New() const {
  return new GameMaster_Request;
}

void GameMaster_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ioperatype_ = 0;
    ufromuin_ = 0u;
    utouin_ = 0u;
    ivipmin_ = 0;
    ivipmax_ = 0;
    imailendtime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ifromzoneid_ = 0;
  }
  strparams_.Clear();
  strchannelids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMaster_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iOperaType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioperatype_)));
          set_has_ioperatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uFromUin;
        break;
      }

      // optional uint32 uFromUin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFromUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufromuin_)));
          set_has_ufromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uToUin;
        break;
      }

      // optional uint32 uToUin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uToUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utouin_)));
          set_has_utouin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strParams;
        break;
      }

      // repeated string strParams = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strparams()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strparams(this->strparams_size() - 1).data(),
            this->strparams(this->strparams_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strParams;
        if (input->ExpectTag(40)) goto parse_iVIPMin;
        break;
      }

      // optional int32 iVIPMin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVIPMin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivipmin_)));
          set_has_ivipmin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iVIPMax;
        break;
      }

      // optional int32 iVIPMax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVIPMax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivipmax_)));
          set_has_ivipmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strChannelIDs;
        break;
      }

      // repeated string strChannelIDs = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strChannelIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strchannelids()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strchannelids(this->strchannelids_size() - 1).data(),
            this->strchannelids(this->strchannelids_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strChannelIDs;
        if (input->ExpectTag(64)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_iMailEndTime;
        break;
      }

      // optional int32 iMailEndTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMailEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imailendtime_)));
          set_has_imailendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameMaster_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iOperaType = 1;
  if (has_ioperatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ioperatype(), output);
  }

  // optional uint32 uFromUin = 2;
  if (has_ufromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ufromuin(), output);
  }

  // optional uint32 uToUin = 3;
  if (has_utouin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->utouin(), output);
  }

  // repeated string strParams = 4;
  for (int i = 0; i < this->strparams_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strparams(i).data(), this->strparams(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strparams(i), output);
  }

  // optional int32 iVIPMin = 5;
  if (has_ivipmin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ivipmin(), output);
  }

  // optional int32 iVIPMax = 6;
  if (has_ivipmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ivipmax(), output);
  }

  // repeated string strChannelIDs = 7;
  for (int i = 0; i < this->strchannelids_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->strchannelids(i).data(), this->strchannelids(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strchannelids(i), output);
  }

  // optional int32 iFromZoneID = 8;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ifromzoneid(), output);
  }

  // optional int32 iMailEndTime = 9;
  if (has_imailendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->imailendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMaster_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iOperaType = 1;
  if (has_ioperatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ioperatype(), target);
  }

  // optional uint32 uFromUin = 2;
  if (has_ufromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ufromuin(), target);
  }

  // optional uint32 uToUin = 3;
  if (has_utouin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->utouin(), target);
  }

  // repeated string strParams = 4;
  for (int i = 0; i < this->strparams_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strparams(i).data(), this->strparams(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->strparams(i), target);
  }

  // optional int32 iVIPMin = 5;
  if (has_ivipmin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ivipmin(), target);
  }

  // optional int32 iVIPMax = 6;
  if (has_ivipmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ivipmax(), target);
  }

  // repeated string strChannelIDs = 7;
  for (int i = 0; i < this->strchannelids_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannelids(i).data(), this->strchannelids(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->strchannelids(i), target);
  }

  // optional int32 iFromZoneID = 8;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ifromzoneid(), target);
  }

  // optional int32 iMailEndTime = 9;
  if (has_imailendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->imailendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMaster_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iOperaType = 1;
    if (has_ioperatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioperatype());
    }

    // optional uint32 uFromUin = 2;
    if (has_ufromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufromuin());
    }

    // optional uint32 uToUin = 3;
    if (has_utouin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utouin());
    }

    // optional int32 iVIPMin = 5;
    if (has_ivipmin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivipmin());
    }

    // optional int32 iVIPMax = 6;
    if (has_ivipmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivipmax());
    }

    // optional int32 iMailEndTime = 9;
    if (has_imailendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imailendtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 iFromZoneID = 8;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

  }
  // repeated string strParams = 4;
  total_size += 1 * this->strparams_size();
  for (int i = 0; i < this->strparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strparams(i));
  }

  // repeated string strChannelIDs = 7;
  total_size += 1 * this->strchannelids_size();
  for (int i = 0; i < this->strchannelids_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strchannelids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMaster_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMaster_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMaster_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMaster_Request::MergeFrom(const GameMaster_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  strparams_.MergeFrom(from.strparams_);
  strchannelids_.MergeFrom(from.strchannelids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ioperatype()) {
      set_ioperatype(from.ioperatype());
    }
    if (from.has_ufromuin()) {
      set_ufromuin(from.ufromuin());
    }
    if (from.has_utouin()) {
      set_utouin(from.utouin());
    }
    if (from.has_ivipmin()) {
      set_ivipmin(from.ivipmin());
    }
    if (from.has_ivipmax()) {
      set_ivipmax(from.ivipmax());
    }
    if (from.has_imailendtime()) {
      set_imailendtime(from.imailendtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMaster_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMaster_Request::CopyFrom(const GameMaster_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMaster_Request::IsInitialized() const {

  return true;
}

void GameMaster_Request::Swap(GameMaster_Request* other) {
  if (other != this) {
    std::swap(ioperatype_, other->ioperatype_);
    std::swap(ufromuin_, other->ufromuin_);
    std::swap(utouin_, other->utouin_);
    strparams_.Swap(&other->strparams_);
    std::swap(ivipmin_, other->ivipmin_);
    std::swap(ivipmax_, other->ivipmax_);
    strchannelids_.Swap(&other->strchannelids_);
    std::swap(imailendtime_, other->imailendtime_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMaster_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMaster_Request_descriptor_;
  metadata.reflection = GameMaster_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GameMaster_Response::kIResultFieldNumber;
const int GameMaster_Response::kIOperaTypeFieldNumber;
const int GameMaster_Response::kUFromUinFieldNumber;
const int GameMaster_Response::kUToUinFieldNumber;
const int GameMaster_Response::kStBaseInfoFieldNumber;
const int GameMaster_Response::kStItemInfoFieldNumber;
#endif  // !_MSC_VER

GameMaster_Response::GameMaster_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameMaster_Response::InitAsDefaultInstance() {
  stbaseinfo_ = const_cast< ::BASEDBINFO*>(&::BASEDBINFO::default_instance());
  stiteminfo_ = const_cast< ::ITEMDBINFO*>(&::ITEMDBINFO::default_instance());
}

GameMaster_Response::GameMaster_Response(const GameMaster_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameMaster_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ioperatype_ = 0;
  ufromuin_ = 0u;
  utouin_ = 0u;
  stbaseinfo_ = NULL;
  stiteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameMaster_Response::~GameMaster_Response() {
  SharedDtor();
}

void GameMaster_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stbaseinfo_;
    delete stiteminfo_;
  }
}

void GameMaster_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameMaster_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameMaster_Response_descriptor_;
}

const GameMaster_Response& GameMaster_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

GameMaster_Response* GameMaster_Response::default_instance_ = NULL;

GameMaster_Response* GameMaster_Response::New() const {
  return new GameMaster_Response;
}

void GameMaster_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ioperatype_ = 0;
    ufromuin_ = 0u;
    utouin_ = 0u;
    if (has_stbaseinfo()) {
      if (stbaseinfo_ != NULL) stbaseinfo_->::BASEDBINFO::Clear();
    }
    if (has_stiteminfo()) {
      if (stiteminfo_ != NULL) stiteminfo_->::ITEMDBINFO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameMaster_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iOperaType;
        break;
      }

      // optional int32 iOperaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOperaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioperatype_)));
          set_has_ioperatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uFromUin;
        break;
      }

      // optional uint32 uFromUin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFromUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufromuin_)));
          set_has_ufromuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uToUin;
        break;
      }

      // optional uint32 uToUin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uToUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utouin_)));
          set_has_utouin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stBaseInfo;
        break;
      }

      // optional .BASEDBINFO stBaseInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stItemInfo;
        break;
      }

      // optional .ITEMDBINFO stItemInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stiteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameMaster_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iOperaType = 2;
  if (has_ioperatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ioperatype(), output);
  }

  // optional uint32 uFromUin = 3;
  if (has_ufromuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ufromuin(), output);
  }

  // optional uint32 uToUin = 4;
  if (has_utouin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->utouin(), output);
  }

  // optional .BASEDBINFO stBaseInfo = 5;
  if (has_stbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stbaseinfo(), output);
  }

  // optional .ITEMDBINFO stItemInfo = 6;
  if (has_stiteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stiteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameMaster_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iOperaType = 2;
  if (has_ioperatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ioperatype(), target);
  }

  // optional uint32 uFromUin = 3;
  if (has_ufromuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ufromuin(), target);
  }

  // optional uint32 uToUin = 4;
  if (has_utouin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->utouin(), target);
  }

  // optional .BASEDBINFO stBaseInfo = 5;
  if (has_stbaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stbaseinfo(), target);
  }

  // optional .ITEMDBINFO stItemInfo = 6;
  if (has_stiteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stiteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameMaster_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iOperaType = 2;
    if (has_ioperatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioperatype());
    }

    // optional uint32 uFromUin = 3;
    if (has_ufromuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufromuin());
    }

    // optional uint32 uToUin = 4;
    if (has_utouin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utouin());
    }

    // optional .BASEDBINFO stBaseInfo = 5;
    if (has_stbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbaseinfo());
    }

    // optional .ITEMDBINFO stItemInfo = 6;
    if (has_stiteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stiteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameMaster_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameMaster_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameMaster_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameMaster_Response::MergeFrom(const GameMaster_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ioperatype()) {
      set_ioperatype(from.ioperatype());
    }
    if (from.has_ufromuin()) {
      set_ufromuin(from.ufromuin());
    }
    if (from.has_utouin()) {
      set_utouin(from.utouin());
    }
    if (from.has_stbaseinfo()) {
      mutable_stbaseinfo()->::BASEDBINFO::MergeFrom(from.stbaseinfo());
    }
    if (from.has_stiteminfo()) {
      mutable_stiteminfo()->::ITEMDBINFO::MergeFrom(from.stiteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameMaster_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameMaster_Response::CopyFrom(const GameMaster_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameMaster_Response::IsInitialized() const {

  return true;
}

void GameMaster_Response::Swap(GameMaster_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ioperatype_, other->ioperatype_);
    std::swap(ufromuin_, other->ufromuin_);
    std::swap(utouin_, other->utouin_);
    std::swap(stbaseinfo_, other->stbaseinfo_);
    std::swap(stiteminfo_, other->stiteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameMaster_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameMaster_Response_descriptor_;
  metadata.reflection = GameMaster_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_SystemMailID_Notify::kUSystemUniqIDFieldNumber;
#endif  // !_MSC_VER

World_SystemMailID_Notify::World_SystemMailID_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_SystemMailID_Notify::InitAsDefaultInstance() {
}

World_SystemMailID_Notify::World_SystemMailID_Notify(const World_SystemMailID_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_SystemMailID_Notify::SharedCtor() {
  _cached_size_ = 0;
  usystemuniqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_SystemMailID_Notify::~World_SystemMailID_Notify() {
  SharedDtor();
}

void World_SystemMailID_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_SystemMailID_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_SystemMailID_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_SystemMailID_Notify_descriptor_;
}

const World_SystemMailID_Notify& World_SystemMailID_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_SystemMailID_Notify* World_SystemMailID_Notify::default_instance_ = NULL;

World_SystemMailID_Notify* World_SystemMailID_Notify::New() const {
  return new World_SystemMailID_Notify;
}

void World_SystemMailID_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    usystemuniqid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_SystemMailID_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uSystemUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usystemuniqid_)));
          set_has_usystemuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_SystemMailID_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uSystemUniqID = 1;
  if (has_usystemuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usystemuniqid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_SystemMailID_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uSystemUniqID = 1;
  if (has_usystemuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->usystemuniqid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_SystemMailID_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uSystemUniqID = 1;
    if (has_usystemuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usystemuniqid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_SystemMailID_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_SystemMailID_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_SystemMailID_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_SystemMailID_Notify::MergeFrom(const World_SystemMailID_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_usystemuniqid()) {
      set_usystemuniqid(from.usystemuniqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_SystemMailID_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_SystemMailID_Notify::CopyFrom(const World_SystemMailID_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_SystemMailID_Notify::IsInitialized() const {

  return true;
}

void World_SystemMailID_Notify::Swap(World_SystemMailID_Notify* other) {
  if (other != this) {
    std::swap(usystemuniqid_, other->usystemuniqid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_SystemMailID_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_SystemMailID_Notify_descriptor_;
  metadata.reflection = World_SystemMailID_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetSystemMail_Request::kUinFieldNumber;
const int World_GetSystemMail_Request::kURoleSystemUniqIDFieldNumber;
const int World_GetSystemMail_Request::kIVIPLevelFieldNumber;
const int World_GetSystemMail_Request::kStrChannelFieldNumber;
const int World_GetSystemMail_Request::kIFromZoneIDFieldNumber;
const int World_GetSystemMail_Request::kIReasonFieldNumber;
#endif  // !_MSC_VER

World_GetSystemMail_Request::World_GetSystemMail_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetSystemMail_Request::InitAsDefaultInstance() {
}

World_GetSystemMail_Request::World_GetSystemMail_Request(const World_GetSystemMail_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetSystemMail_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  urolesystemuniqid_ = 0u;
  iviplevel_ = 0;
  strchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ifromzoneid_ = 0;
  ireason_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetSystemMail_Request::~World_GetSystemMail_Request() {
  SharedDtor();
}

void World_GetSystemMail_Request::SharedDtor() {
  if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete strchannel_;
  }
  if (this != default_instance_) {
  }
}

void World_GetSystemMail_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetSystemMail_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetSystemMail_Request_descriptor_;
}

const World_GetSystemMail_Request& World_GetSystemMail_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetSystemMail_Request* World_GetSystemMail_Request::default_instance_ = NULL;

World_GetSystemMail_Request* World_GetSystemMail_Request::New() const {
  return new World_GetSystemMail_Request;
}

void World_GetSystemMail_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    urolesystemuniqid_ = 0u;
    iviplevel_ = 0;
    if (has_strchannel()) {
      if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
        strchannel_->clear();
      }
    }
    ifromzoneid_ = 0;
    ireason_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetSystemMail_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uRoleSystemUniqID;
        break;
      }

      // optional uint32 uRoleSystemUniqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uRoleSystemUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &urolesystemuniqid_)));
          set_has_urolesystemuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iVIPLevel;
        break;
      }

      // optional int32 iVIPLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iviplevel_)));
          set_has_iviplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strChannel;
        break;
      }

      // optional string strChannel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strchannel().data(), this->strchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iReason;
        break;
      }

      // optional int32 iReason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ireason_)));
          set_has_ireason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetSystemMail_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uRoleSystemUniqID = 2;
  if (has_urolesystemuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->urolesystemuniqid(), output);
  }

  // optional int32 iVIPLevel = 3;
  if (has_iviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iviplevel(), output);
  }

  // optional string strChannel = 4;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strchannel(), output);
  }

  // optional int32 iFromZoneID = 5;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifromzoneid(), output);
  }

  // optional int32 iReason = 6;
  if (has_ireason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ireason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetSystemMail_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uRoleSystemUniqID = 2;
  if (has_urolesystemuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->urolesystemuniqid(), target);
  }

  // optional int32 iVIPLevel = 3;
  if (has_iviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iviplevel(), target);
  }

  // optional string strChannel = 4;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strchannel(), target);
  }

  // optional int32 iFromZoneID = 5;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifromzoneid(), target);
  }

  // optional int32 iReason = 6;
  if (has_ireason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ireason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetSystemMail_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uRoleSystemUniqID = 2;
    if (has_urolesystemuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->urolesystemuniqid());
    }

    // optional int32 iVIPLevel = 3;
    if (has_iviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iviplevel());
    }

    // optional string strChannel = 4;
    if (has_strchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strchannel());
    }

    // optional int32 iFromZoneID = 5;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

    // optional int32 iReason = 6;
    if (has_ireason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ireason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetSystemMail_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetSystemMail_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetSystemMail_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetSystemMail_Request::MergeFrom(const World_GetSystemMail_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_urolesystemuniqid()) {
      set_urolesystemuniqid(from.urolesystemuniqid());
    }
    if (from.has_iviplevel()) {
      set_iviplevel(from.iviplevel());
    }
    if (from.has_strchannel()) {
      set_strchannel(from.strchannel());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
    if (from.has_ireason()) {
      set_ireason(from.ireason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetSystemMail_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetSystemMail_Request::CopyFrom(const World_GetSystemMail_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetSystemMail_Request::IsInitialized() const {

  return true;
}

void World_GetSystemMail_Request::Swap(World_GetSystemMail_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(urolesystemuniqid_, other->urolesystemuniqid_);
    std::swap(iviplevel_, other->iviplevel_);
    std::swap(strchannel_, other->strchannel_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(ireason_, other->ireason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetSystemMail_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetSystemMail_Request_descriptor_;
  metadata.reflection = World_GetSystemMail_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetSystemMail_Response::kIResultFieldNumber;
const int World_GetSystemMail_Response::kUinFieldNumber;
const int World_GetSystemMail_Response::kUSystemUniqIDFieldNumber;
const int World_GetSystemMail_Response::kStMailsFieldNumber;
#endif  // !_MSC_VER

World_GetSystemMail_Response::World_GetSystemMail_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetSystemMail_Response::InitAsDefaultInstance() {
}

World_GetSystemMail_Response::World_GetSystemMail_Response(const World_GetSystemMail_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetSystemMail_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  usystemuniqid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetSystemMail_Response::~World_GetSystemMail_Response() {
  SharedDtor();
}

void World_GetSystemMail_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_GetSystemMail_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetSystemMail_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetSystemMail_Response_descriptor_;
}

const World_GetSystemMail_Response& World_GetSystemMail_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetSystemMail_Response* World_GetSystemMail_Response::default_instance_ = NULL;

World_GetSystemMail_Response* World_GetSystemMail_Response::New() const {
  return new World_GetSystemMail_Response;
}

void World_GetSystemMail_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    usystemuniqid_ = 0u;
  }
  stmails_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetSystemMail_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uSystemUniqID;
        break;
      }

      // optional uint32 uSystemUniqID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uSystemUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usystemuniqid_)));
          set_has_usystemuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stMails;
        break;
      }

      // repeated .OneMailInfo stMails = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stMails:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stmails()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stMails;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetSystemMail_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional uint32 uSystemUniqID = 3;
  if (has_usystemuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->usystemuniqid(), output);
  }

  // repeated .OneMailInfo stMails = 4;
  for (int i = 0; i < this->stmails_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stmails(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetSystemMail_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional uint32 uSystemUniqID = 3;
  if (has_usystemuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->usystemuniqid(), target);
  }

  // repeated .OneMailInfo stMails = 4;
  for (int i = 0; i < this->stmails_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stmails(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetSystemMail_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uSystemUniqID = 3;
    if (has_usystemuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->usystemuniqid());
    }

  }
  // repeated .OneMailInfo stMails = 4;
  total_size += 1 * this->stmails_size();
  for (int i = 0; i < this->stmails_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stmails(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetSystemMail_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetSystemMail_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetSystemMail_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetSystemMail_Response::MergeFrom(const World_GetSystemMail_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  stmails_.MergeFrom(from.stmails_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_usystemuniqid()) {
      set_usystemuniqid(from.usystemuniqid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetSystemMail_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetSystemMail_Response::CopyFrom(const World_GetSystemMail_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetSystemMail_Response::IsInitialized() const {

  return true;
}

void World_GetSystemMail_Response::Swap(World_GetSystemMail_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(usystemuniqid_, other->usystemuniqid_);
    stmails_.Swap(&other->stmails_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetSystemMail_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetSystemMail_Response_descriptor_;
  metadata.reflection = World_GetSystemMail_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineExchange::kIItemIDFieldNumber;
const int OnlineExchange::kIItemNumFieldNumber;
const int OnlineExchange::kITypeFieldNumber;
const int OnlineExchange::kIExchangeNumFieldNumber;
const int OnlineExchange::kStrPhoneNumFieldNumber;
#endif  // !_MSC_VER

OnlineExchange::OnlineExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineExchange::InitAsDefaultInstance() {
}

OnlineExchange::OnlineExchange(const OnlineExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineExchange::SharedCtor() {
  _cached_size_ = 0;
  iitemid_ = 0;
  iitemnum_ = 0;
  itype_ = 0;
  iexchangenum_ = 0;
  strphonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineExchange::~OnlineExchange() {
  SharedDtor();
}

void OnlineExchange::SharedDtor() {
  if (strphonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete strphonenum_;
  }
  if (this != default_instance_) {
  }
}

void OnlineExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineExchange_descriptor_;
}

const OnlineExchange& OnlineExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

OnlineExchange* OnlineExchange::default_instance_ = NULL;

OnlineExchange* OnlineExchange::New() const {
  return new OnlineExchange;
}

void OnlineExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iitemid_ = 0;
    iitemnum_ = 0;
    itype_ = 0;
    iexchangenum_ = 0;
    if (has_strphonenum()) {
      if (strphonenum_ != &::google::protobuf::internal::kEmptyString) {
        strphonenum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iItemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iItemNum;
        break;
      }

      // optional int32 iItemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemnum_)));
          set_has_iitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iType;
        break;
      }

      // optional int32 iType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iExchangeNum;
        break;
      }

      // optional int32 iExchangeNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iExchangeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangenum_)));
          set_has_iexchangenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strPhoneNum;
        break;
      }

      // optional string strPhoneNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPhoneNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strphonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strphonenum().data(), this->strphonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iItemID = 1;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iitemid(), output);
  }

  // optional int32 iItemNum = 2;
  if (has_iitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iitemnum(), output);
  }

  // optional int32 iType = 3;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itype(), output);
  }

  // optional int32 iExchangeNum = 4;
  if (has_iexchangenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iexchangenum(), output);
  }

  // optional string strPhoneNum = 5;
  if (has_strphonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphonenum().data(), this->strphonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strphonenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iItemID = 1;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iitemid(), target);
  }

  // optional int32 iItemNum = 2;
  if (has_iitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iitemnum(), target);
  }

  // optional int32 iType = 3;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itype(), target);
  }

  // optional int32 iExchangeNum = 4;
  if (has_iexchangenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iexchangenum(), target);
  }

  // optional string strPhoneNum = 5;
  if (has_strphonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphonenum().data(), this->strphonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strphonenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iItemID = 1;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional int32 iItemNum = 2;
    if (has_iitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemnum());
    }

    // optional int32 iType = 3;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional int32 iExchangeNum = 4;
    if (has_iexchangenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangenum());
    }

    // optional string strPhoneNum = 5;
    if (has_strphonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strphonenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineExchange::MergeFrom(const OnlineExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_iitemnum()) {
      set_iitemnum(from.iitemnum());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_iexchangenum()) {
      set_iexchangenum(from.iexchangenum());
    }
    if (from.has_strphonenum()) {
      set_strphonenum(from.strphonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineExchange::CopyFrom(const OnlineExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineExchange::IsInitialized() const {

  return true;
}

void OnlineExchange::Swap(OnlineExchange* other) {
  if (other != this) {
    std::swap(iitemid_, other->iitemid_);
    std::swap(iitemnum_, other->iitemnum_);
    std::swap(itype_, other->itype_);
    std::swap(iexchangenum_, other->iexchangenum_);
    std::swap(strphonenum_, other->strphonenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineExchange_descriptor_;
  metadata.reflection = OnlineExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_OnlineExchange_Request::kUinFieldNumber;
const int World_OnlineExchange_Request::kIFromZoneIDFieldNumber;
const int World_OnlineExchange_Request::kStInfoFieldNumber;
#endif  // !_MSC_VER

World_OnlineExchange_Request::World_OnlineExchange_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_OnlineExchange_Request::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::OnlineExchange*>(&::OnlineExchange::default_instance());
}

World_OnlineExchange_Request::World_OnlineExchange_Request(const World_OnlineExchange_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_OnlineExchange_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  ifromzoneid_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_OnlineExchange_Request::~World_OnlineExchange_Request() {
  SharedDtor();
}

void World_OnlineExchange_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void World_OnlineExchange_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_OnlineExchange_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_OnlineExchange_Request_descriptor_;
}

const World_OnlineExchange_Request& World_OnlineExchange_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_OnlineExchange_Request* World_OnlineExchange_Request::default_instance_ = NULL;

World_OnlineExchange_Request* World_OnlineExchange_Request::New() const {
  return new World_OnlineExchange_Request;
}

void World_OnlineExchange_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    ifromzoneid_ = 0;
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::OnlineExchange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_OnlineExchange_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stInfo;
        break;
      }

      // optional .OnlineExchange stInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_OnlineExchange_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifromzoneid(), output);
  }

  // optional .OnlineExchange stInfo = 3;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_OnlineExchange_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifromzoneid(), target);
  }

  // optional .OnlineExchange stInfo = 3;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_OnlineExchange_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iFromZoneID = 2;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

    // optional .OnlineExchange stInfo = 3;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_OnlineExchange_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_OnlineExchange_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_OnlineExchange_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_OnlineExchange_Request::MergeFrom(const World_OnlineExchange_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
    if (from.has_stinfo()) {
      mutable_stinfo()->::OnlineExchange::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_OnlineExchange_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_OnlineExchange_Request::CopyFrom(const World_OnlineExchange_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_OnlineExchange_Request::IsInitialized() const {

  return true;
}

void World_OnlineExchange_Request::Swap(World_OnlineExchange_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_OnlineExchange_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_OnlineExchange_Request_descriptor_;
  metadata.reflection = World_OnlineExchange_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_OnlineExchange_Response::kIResultFieldNumber;
const int World_OnlineExchange_Response::kUinFieldNumber;
const int World_OnlineExchange_Response::kIFromZoneIDFieldNumber;
const int World_OnlineExchange_Response::kStInfoFieldNumber;
#endif  // !_MSC_VER

World_OnlineExchange_Response::World_OnlineExchange_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_OnlineExchange_Response::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::OnlineExchange*>(&::OnlineExchange::default_instance());
}

World_OnlineExchange_Response::World_OnlineExchange_Response(const World_OnlineExchange_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_OnlineExchange_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  ifromzoneid_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_OnlineExchange_Response::~World_OnlineExchange_Response() {
  SharedDtor();
}

void World_OnlineExchange_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void World_OnlineExchange_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_OnlineExchange_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_OnlineExchange_Response_descriptor_;
}

const World_OnlineExchange_Response& World_OnlineExchange_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_OnlineExchange_Response* World_OnlineExchange_Response::default_instance_ = NULL;

World_OnlineExchange_Response* World_OnlineExchange_Response::New() const {
  return new World_OnlineExchange_Response;
}

void World_OnlineExchange_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    ifromzoneid_ = 0;
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::OnlineExchange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_OnlineExchange_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stInfo;
        break;
      }

      // optional .OnlineExchange stInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_OnlineExchange_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iFromZoneID = 3;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifromzoneid(), output);
  }

  // optional .OnlineExchange stInfo = 4;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_OnlineExchange_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iFromZoneID = 3;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifromzoneid(), target);
  }

  // optional .OnlineExchange stInfo = 4;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_OnlineExchange_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iFromZoneID = 3;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

    // optional .OnlineExchange stInfo = 4;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_OnlineExchange_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_OnlineExchange_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_OnlineExchange_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_OnlineExchange_Response::MergeFrom(const World_OnlineExchange_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
    if (from.has_stinfo()) {
      mutable_stinfo()->::OnlineExchange::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_OnlineExchange_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_OnlineExchange_Response::CopyFrom(const World_OnlineExchange_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_OnlineExchange_Response::IsInitialized() const {

  return true;
}

void World_OnlineExchange_Response::Swap(World_OnlineExchange_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_OnlineExchange_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_OnlineExchange_Response_descriptor_;
  metadata.reflection = World_OnlineExchange_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetUserInfo_Request::kUinFieldNumber;
const int World_GetUserInfo_Request::kIPlatformIDFieldNumber;
#endif  // !_MSC_VER

World_GetUserInfo_Request::World_GetUserInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetUserInfo_Request::InitAsDefaultInstance() {
}

World_GetUserInfo_Request::World_GetUserInfo_Request(const World_GetUserInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetUserInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  iplatformid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetUserInfo_Request::~World_GetUserInfo_Request() {
  SharedDtor();
}

void World_GetUserInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_GetUserInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetUserInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetUserInfo_Request_descriptor_;
}

const World_GetUserInfo_Request& World_GetUserInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetUserInfo_Request* World_GetUserInfo_Request::default_instance_ = NULL;

World_GetUserInfo_Request* World_GetUserInfo_Request::New() const {
  return new World_GetUserInfo_Request;
}

void World_GetUserInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    iplatformid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetUserInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iPlatformID;
        break;
      }

      // optional int32 iPlatformID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iPlatformID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iplatformid_)));
          set_has_iplatformid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetUserInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional int32 iPlatformID = 2;
  if (has_iplatformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iplatformid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetUserInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional int32 iPlatformID = 2;
  if (has_iplatformid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iplatformid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetUserInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iPlatformID = 2;
    if (has_iplatformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iplatformid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetUserInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetUserInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetUserInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetUserInfo_Request::MergeFrom(const World_GetUserInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_iplatformid()) {
      set_iplatformid(from.iplatformid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetUserInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetUserInfo_Request::CopyFrom(const World_GetUserInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetUserInfo_Request::IsInitialized() const {

  return true;
}

void World_GetUserInfo_Request::Swap(World_GetUserInfo_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(iplatformid_, other->iplatformid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetUserInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetUserInfo_Request_descriptor_;
  metadata.reflection = World_GetUserInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetUserInfo_Response::kIResultFieldNumber;
const int World_GetUserInfo_Response::kStrAccountFieldNumber;
const int World_GetUserInfo_Response::kUinFieldNumber;
const int World_GetUserInfo_Response::kStrNickNameFieldNumber;
const int World_GetUserInfo_Response::kIPlatformIDFieldNumber;
#endif  // !_MSC_VER

World_GetUserInfo_Response::World_GetUserInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetUserInfo_Response::InitAsDefaultInstance() {
}

World_GetUserInfo_Response::World_GetUserInfo_Response(const World_GetUserInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetUserInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uin_ = 0u;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iplatformid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetUserInfo_Response::~World_GetUserInfo_Response() {
  SharedDtor();
}

void World_GetUserInfo_Response::SharedDtor() {
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void World_GetUserInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetUserInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetUserInfo_Response_descriptor_;
}

const World_GetUserInfo_Response& World_GetUserInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetUserInfo_Response* World_GetUserInfo_Response::default_instance_ = NULL;

World_GetUserInfo_Response* World_GetUserInfo_Response::New() const {
  return new World_GetUserInfo_Response;
}

void World_GetUserInfo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_straccount()) {
      if (straccount_ != &::google::protobuf::internal::kEmptyString) {
        straccount_->clear();
      }
    }
    uin_ = 0u;
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    iplatformid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetUserInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strAccount;
        break;
      }

      // optional string strAccount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccount().data(), this->straccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iPlatformID;
        break;
      }

      // optional int32 iPlatformID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iPlatformID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iplatformid_)));
          set_has_iplatformid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetUserInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional string strAccount = 2;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->straccount(), output);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uin(), output);
  }

  // optional string strNickName = 4;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strnickname(), output);
  }

  // optional int32 iPlatformID = 5;
  if (has_iplatformid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iplatformid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetUserInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional string strAccount = 2;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->straccount(), target);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uin(), target);
  }

  // optional string strNickName = 4;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strnickname(), target);
  }

  // optional int32 iPlatformID = 5;
  if (has_iplatformid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->iplatformid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetUserInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional string strAccount = 2;
    if (has_straccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccount());
    }

    // optional uint32 uin = 3;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional string strNickName = 4;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional int32 iPlatformID = 5;
    if (has_iplatformid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iplatformid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetUserInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetUserInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetUserInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetUserInfo_Response::MergeFrom(const World_GetUserInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_straccount()) {
      set_straccount(from.straccount());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_iplatformid()) {
      set_iplatformid(from.iplatformid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetUserInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetUserInfo_Response::CopyFrom(const World_GetUserInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetUserInfo_Response::IsInitialized() const {

  return true;
}

void World_GetUserInfo_Response::Swap(World_GetUserInfo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(straccount_, other->straccount_);
    std::swap(uin_, other->uin_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(iplatformid_, other->iplatformid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetUserInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetUserInfo_Response_descriptor_;
  metadata.reflection = World_GetUserInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_WriteLog_Request::kILogTargetTypeFieldNumber;
const int World_WriteLog_Request::kStrLogDataFieldNumber;
#endif  // !_MSC_VER

World_WriteLog_Request::World_WriteLog_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_WriteLog_Request::InitAsDefaultInstance() {
}

World_WriteLog_Request::World_WriteLog_Request(const World_WriteLog_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_WriteLog_Request::SharedCtor() {
  _cached_size_ = 0;
  ilogtargettype_ = 0;
  strlogdata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_WriteLog_Request::~World_WriteLog_Request() {
  SharedDtor();
}

void World_WriteLog_Request::SharedDtor() {
  if (strlogdata_ != &::google::protobuf::internal::kEmptyString) {
    delete strlogdata_;
  }
  if (this != default_instance_) {
  }
}

void World_WriteLog_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_WriteLog_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_WriteLog_Request_descriptor_;
}

const World_WriteLog_Request& World_WriteLog_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_WriteLog_Request* World_WriteLog_Request::default_instance_ = NULL;

World_WriteLog_Request* World_WriteLog_Request::New() const {
  return new World_WriteLog_Request;
}

void World_WriteLog_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ilogtargettype_ = 0;
    if (has_strlogdata()) {
      if (strlogdata_ != &::google::protobuf::internal::kEmptyString) {
        strlogdata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_WriteLog_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iLogTargetType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilogtargettype_)));
          set_has_ilogtargettype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strLogData;
        break;
      }

      // optional string strLogData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strLogData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strlogdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strlogdata().data(), this->strlogdata().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_WriteLog_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iLogTargetType = 1;
  if (has_ilogtargettype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ilogtargettype(), output);
  }

  // optional string strLogData = 2;
  if (has_strlogdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlogdata().data(), this->strlogdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strlogdata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_WriteLog_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iLogTargetType = 1;
  if (has_ilogtargettype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ilogtargettype(), target);
  }

  // optional string strLogData = 2;
  if (has_strlogdata()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strlogdata().data(), this->strlogdata().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strlogdata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_WriteLog_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iLogTargetType = 1;
    if (has_ilogtargettype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilogtargettype());
    }

    // optional string strLogData = 2;
    if (has_strlogdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strlogdata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_WriteLog_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_WriteLog_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_WriteLog_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_WriteLog_Request::MergeFrom(const World_WriteLog_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ilogtargettype()) {
      set_ilogtargettype(from.ilogtargettype());
    }
    if (from.has_strlogdata()) {
      set_strlogdata(from.strlogdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_WriteLog_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_WriteLog_Request::CopyFrom(const World_WriteLog_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_WriteLog_Request::IsInitialized() const {

  return true;
}

void World_WriteLog_Request::Swap(World_WriteLog_Request* other) {
  if (other != this) {
    std::swap(ilogtargettype_, other->ilogtargettype_);
    std::swap(strlogdata_, other->strlogdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_WriteLog_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_WriteLog_Request_descriptor_;
  metadata.reflection = World_WriteLog_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetCardNo_Request::kIExchangeIDFieldNumber;
const int World_GetCardNo_Request::kICardIDFieldNumber;
const int World_GetCardNo_Request::kUinFieldNumber;
const int World_GetCardNo_Request::kIFromZoneIDFieldNumber;
#endif  // !_MSC_VER

World_GetCardNo_Request::World_GetCardNo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetCardNo_Request::InitAsDefaultInstance() {
}

World_GetCardNo_Request::World_GetCardNo_Request(const World_GetCardNo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetCardNo_Request::SharedCtor() {
  _cached_size_ = 0;
  iexchangeid_ = 0;
  icardid_ = 0;
  uin_ = 0u;
  ifromzoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetCardNo_Request::~World_GetCardNo_Request() {
  SharedDtor();
}

void World_GetCardNo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_GetCardNo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetCardNo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetCardNo_Request_descriptor_;
}

const World_GetCardNo_Request& World_GetCardNo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetCardNo_Request* World_GetCardNo_Request::default_instance_ = NULL;

World_GetCardNo_Request* World_GetCardNo_Request::New() const {
  return new World_GetCardNo_Request;
}

void World_GetCardNo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iexchangeid_ = 0;
    icardid_ = 0;
    uin_ = 0u;
    ifromzoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetCardNo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iExchangeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iCardID;
        break;
      }

      // optional int32 iCardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icardid_)));
          set_has_icardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetCardNo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iexchangeid(), output);
  }

  // optional int32 iCardID = 2;
  if (has_icardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->icardid(), output);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uin(), output);
  }

  // optional int32 iFromZoneID = 4;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ifromzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetCardNo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iexchangeid(), target);
  }

  // optional int32 iCardID = 2;
  if (has_icardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->icardid(), target);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uin(), target);
  }

  // optional int32 iFromZoneID = 4;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ifromzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetCardNo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iExchangeID = 1;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

    // optional int32 iCardID = 2;
    if (has_icardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icardid());
    }

    // optional uint32 uin = 3;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iFromZoneID = 4;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetCardNo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetCardNo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetCardNo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetCardNo_Request::MergeFrom(const World_GetCardNo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
    if (from.has_icardid()) {
      set_icardid(from.icardid());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetCardNo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetCardNo_Request::CopyFrom(const World_GetCardNo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetCardNo_Request::IsInitialized() const {

  return true;
}

void World_GetCardNo_Request::Swap(World_GetCardNo_Request* other) {
  if (other != this) {
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(icardid_, other->icardid_);
    std::swap(uin_, other->uin_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetCardNo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetCardNo_Request_descriptor_;
  metadata.reflection = World_GetCardNo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_GetCardNo_Response::kIResultFieldNumber;
const int World_GetCardNo_Response::kIExchangeIDFieldNumber;
const int World_GetCardNo_Response::kICardIDFieldNumber;
const int World_GetCardNo_Response::kUinFieldNumber;
const int World_GetCardNo_Response::kIFromZoneIDFieldNumber;
const int World_GetCardNo_Response::kStrCardNoFieldNumber;
const int World_GetCardNo_Response::kStrCardPwdFieldNumber;
#endif  // !_MSC_VER

World_GetCardNo_Response::World_GetCardNo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_GetCardNo_Response::InitAsDefaultInstance() {
}

World_GetCardNo_Response::World_GetCardNo_Response(const World_GetCardNo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_GetCardNo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  iexchangeid_ = 0;
  icardid_ = 0;
  uin_ = 0u;
  ifromzoneid_ = 0;
  strcardno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strcardpwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_GetCardNo_Response::~World_GetCardNo_Response() {
  SharedDtor();
}

void World_GetCardNo_Response::SharedDtor() {
  if (strcardno_ != &::google::protobuf::internal::kEmptyString) {
    delete strcardno_;
  }
  if (strcardpwd_ != &::google::protobuf::internal::kEmptyString) {
    delete strcardpwd_;
  }
  if (this != default_instance_) {
  }
}

void World_GetCardNo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_GetCardNo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_GetCardNo_Response_descriptor_;
}

const World_GetCardNo_Response& World_GetCardNo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_GetCardNo_Response* World_GetCardNo_Response::default_instance_ = NULL;

World_GetCardNo_Response* World_GetCardNo_Response::New() const {
  return new World_GetCardNo_Response;
}

void World_GetCardNo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    iexchangeid_ = 0;
    icardid_ = 0;
    uin_ = 0u;
    ifromzoneid_ = 0;
    if (has_strcardno()) {
      if (strcardno_ != &::google::protobuf::internal::kEmptyString) {
        strcardno_->clear();
      }
    }
    if (has_strcardpwd()) {
      if (strcardpwd_ != &::google::protobuf::internal::kEmptyString) {
        strcardpwd_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_GetCardNo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iExchangeID;
        break;
      }

      // optional int32 iExchangeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iExchangeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iCardID;
        break;
      }

      // optional int32 iCardID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iCardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icardid_)));
          set_has_icardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strCardNo;
        break;
      }

      // optional string strCardNo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCardNo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcardno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcardno().data(), this->strcardno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strCardPwd;
        break;
      }

      // optional string strCardPwd = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strCardPwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcardpwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strcardpwd().data(), this->strcardpwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_GetCardNo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iExchangeID = 2;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iexchangeid(), output);
  }

  // optional int32 iCardID = 3;
  if (has_icardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->icardid(), output);
  }

  // optional uint32 uin = 4;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uin(), output);
  }

  // optional int32 iFromZoneID = 5;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ifromzoneid(), output);
  }

  // optional string strCardNo = 6;
  if (has_strcardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcardno().data(), this->strcardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strcardno(), output);
  }

  // optional string strCardPwd = 7;
  if (has_strcardpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcardpwd().data(), this->strcardpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strcardpwd(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_GetCardNo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iExchangeID = 2;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iexchangeid(), target);
  }

  // optional int32 iCardID = 3;
  if (has_icardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->icardid(), target);
  }

  // optional uint32 uin = 4;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uin(), target);
  }

  // optional int32 iFromZoneID = 5;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ifromzoneid(), target);
  }

  // optional string strCardNo = 6;
  if (has_strcardno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcardno().data(), this->strcardno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strcardno(), target);
  }

  // optional string strCardPwd = 7;
  if (has_strcardpwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strcardpwd().data(), this->strcardpwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strcardpwd(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_GetCardNo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iExchangeID = 2;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

    // optional int32 iCardID = 3;
    if (has_icardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icardid());
    }

    // optional uint32 uin = 4;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iFromZoneID = 5;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

    // optional string strCardNo = 6;
    if (has_strcardno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcardno());
    }

    // optional string strCardPwd = 7;
    if (has_strcardpwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strcardpwd());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_GetCardNo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_GetCardNo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_GetCardNo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_GetCardNo_Response::MergeFrom(const World_GetCardNo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
    if (from.has_icardid()) {
      set_icardid(from.icardid());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
    if (from.has_strcardno()) {
      set_strcardno(from.strcardno());
    }
    if (from.has_strcardpwd()) {
      set_strcardpwd(from.strcardpwd());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_GetCardNo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_GetCardNo_Response::CopyFrom(const World_GetCardNo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_GetCardNo_Response::IsInitialized() const {

  return true;
}

void World_GetCardNo_Response::Swap(World_GetCardNo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(icardid_, other->icardid_);
    std::swap(uin_, other->uin_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(strcardno_, other->strcardno_);
    std::swap(strcardpwd_, other->strcardpwd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_GetCardNo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_GetCardNo_Response_descriptor_;
  metadata.reflection = World_GetCardNo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_AddExcRec_Request::kStRecordFieldNumber;
#endif  // !_MSC_VER

World_AddExcRec_Request::World_AddExcRec_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_AddExcRec_Request::InitAsDefaultInstance() {
  strecord_ = const_cast< ::ExchangeRec*>(&::ExchangeRec::default_instance());
}

World_AddExcRec_Request::World_AddExcRec_Request(const World_AddExcRec_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_AddExcRec_Request::SharedCtor() {
  _cached_size_ = 0;
  strecord_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_AddExcRec_Request::~World_AddExcRec_Request() {
  SharedDtor();
}

void World_AddExcRec_Request::SharedDtor() {
  if (this != default_instance_) {
    delete strecord_;
  }
}

void World_AddExcRec_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_AddExcRec_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_AddExcRec_Request_descriptor_;
}

const World_AddExcRec_Request& World_AddExcRec_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_AddExcRec_Request* World_AddExcRec_Request::default_instance_ = NULL;

World_AddExcRec_Request* World_AddExcRec_Request::New() const {
  return new World_AddExcRec_Request;
}

void World_AddExcRec_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strecord()) {
      if (strecord_ != NULL) strecord_->::ExchangeRec::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_AddExcRec_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ExchangeRec stRecord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_AddExcRec_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ExchangeRec stRecord = 1;
  if (has_strecord()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->strecord(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_AddExcRec_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ExchangeRec stRecord = 1;
  if (has_strecord()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->strecord(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_AddExcRec_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ExchangeRec stRecord = 1;
    if (has_strecord()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->strecord());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_AddExcRec_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_AddExcRec_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_AddExcRec_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_AddExcRec_Request::MergeFrom(const World_AddExcRec_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strecord()) {
      mutable_strecord()->::ExchangeRec::MergeFrom(from.strecord());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_AddExcRec_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_AddExcRec_Request::CopyFrom(const World_AddExcRec_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_AddExcRec_Request::IsInitialized() const {

  return true;
}

void World_AddExcRec_Request::Swap(World_AddExcRec_Request* other) {
  if (other != this) {
    std::swap(strecord_, other->strecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_AddExcRec_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_AddExcRec_Request_descriptor_;
  metadata.reflection = World_AddExcRec_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int World_AddExcRec_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

World_AddExcRec_Response::World_AddExcRec_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void World_AddExcRec_Response::InitAsDefaultInstance() {
}

World_AddExcRec_Response::World_AddExcRec_Response(const World_AddExcRec_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void World_AddExcRec_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

World_AddExcRec_Response::~World_AddExcRec_Response() {
  SharedDtor();
}

void World_AddExcRec_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void World_AddExcRec_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* World_AddExcRec_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return World_AddExcRec_Response_descriptor_;
}

const World_AddExcRec_Response& World_AddExcRec_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fWorld_2eproto();
  return *default_instance_;
}

World_AddExcRec_Response* World_AddExcRec_Response::default_instance_ = NULL;

World_AddExcRec_Response* World_AddExcRec_Response::New() const {
  return new World_AddExcRec_Response;
}

void World_AddExcRec_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool World_AddExcRec_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void World_AddExcRec_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* World_AddExcRec_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int World_AddExcRec_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void World_AddExcRec_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const World_AddExcRec_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const World_AddExcRec_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void World_AddExcRec_Response::MergeFrom(const World_AddExcRec_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void World_AddExcRec_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void World_AddExcRec_Response::CopyFrom(const World_AddExcRec_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool World_AddExcRec_Response::IsInitialized() const {

  return true;
}

void World_AddExcRec_Response::Swap(World_AddExcRec_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata World_AddExcRec_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = World_AddExcRec_Response_descriptor_;
  metadata.reflection = World_AddExcRec_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
