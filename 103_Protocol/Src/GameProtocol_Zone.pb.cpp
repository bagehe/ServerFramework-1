// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProtocol_Zone.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GameProtocol_Zone.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GameLoginInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GameLoginInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LoginServer_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LoginServer_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LoginServer_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LoginServer_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Logout_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Logout_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetFriendInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetFriendInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_OnlineRole_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_OnlineRole_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LoginServer_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LoginServer_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RepOpera_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RepOpera_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RepOpera_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RepOpera_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* OneRepSlot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneRepSlot_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_RepChange_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_RepChange_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserResourceChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserResourceChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ResourceChange_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ResourceChange_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Chat_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Chat_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Chat_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Chat_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_DoFish_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_DoFish_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_DoFish_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_DoFish_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FormTime_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FormTime_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SyncTime_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SyncTime_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* SEATUSERINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SEATUSERINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SeatUser_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SeatUser_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FISHINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FISHINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FishInfo_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FishInfo_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* POS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POS_reflection_ = NULL;
const ::google::protobuf::Descriptor* BULLETINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BULLETINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_BulletInfo_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_BulletInfo_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* FORMFISHOUTINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FORMFISHOUTINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FormInfo_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FormInfo_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ExitFish_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ExitFish_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ExitFish_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ExitFish_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ExitFish_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ExitFish_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ChangeGun_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ChangeGun_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ChangeGun_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ChangeGun_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ChangeGun_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ChangeGun_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ShootBullet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ShootBullet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ShootBullet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ShootBullet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ShootBullet_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ShootBullet_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_HitFish_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_HitFish_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_HitFish_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_HitFish_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_HitFish_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_HitFish_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_HitFormFish_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_HitFormFish_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_HitFormFish_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_HitFormFish_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_BoomFishInfo_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_BoomFishInfo_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Lottery_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Lottery_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_Lottery_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_Lottery_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_AddTicket_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_AddTicket_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_QuestChange_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_QuestChange_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FinQuest_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FinQuest_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FinQuest_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FinQuest_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetReward_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetReward_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SetExchange_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SetExchange_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_SetExchange_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_SetExchange_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ExchangeItem_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ExchangeItem_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ExchangeItem_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ExchangeItem_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_NewMailInfo_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_NewMailInfo_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_MailOpera_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_MailOpera_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_MailOpera_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_MailOpera_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetLivness_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetLivness_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetLivness_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetLivness_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetRankInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetRankInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetRankInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetRankInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UseSkill_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UseSkill_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UseSkill_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UseSkill_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UseSkill_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UseSkill_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetLimitNum_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetLimitNum_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetLimitNum_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetLimitNum_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ChooseAimFish_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ChooseAimFish_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ChooseAimFish_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ChooseAimFish_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_ChooseAimFish_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_ChooseAimFish_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetUserAlms_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetUserAlms_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetUserAlms_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetUserAlms_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UpdateAlms_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UpdateAlms_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LimitLottery_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LimitLottery_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LimitLottery_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LimitLottery_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_PayLotteryRecord_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_PayLotteryRecord_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* PayLotteryRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PayLotteryRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_PayLotteryRecord_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_PayLotteryRecord_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseLampInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseLampInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_HorseLamp_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_HorseLamp_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_EnterLasvegas_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_EnterLasvegas_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_EnterLasvegas_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_EnterLasvegas_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LasvegasBet_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LasvegasBet_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_LasvegasBet_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_LasvegasBet_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UpdateLasvegas_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UpdateLasvegas_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetRewardInfo_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetRewardInfo_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetRewardInfo_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetRewardInfo_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetLoginReward_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetLoginReward_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetLoginReward_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetLoginReward_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetPayRecord_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetPayRecord_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetPayRecord_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetPayRecord_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetPayGift_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetPayGift_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetPayGift_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetPayGift_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UpdateMonthTime_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UpdateMonthTime_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FishUserUpdate_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FishUserUpdate_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_VipExpUpdate_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_VipExpUpdate_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UserRecharge_Notify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UserRecharge_Notify_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetPayOrder_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetPayOrder_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetPayOrder_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetPayOrder_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FinGuide_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FinGuide_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_FinGuide_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_FinGuide_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UpdateName_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UpdateName_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UpdateName_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UpdateName_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UserRecharge_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UserRecharge_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_UserRecharge_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_UserRecharge_Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetExchangeRec_Request_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetExchangeRec_Request_reflection_ = NULL;
const ::google::protobuf::Descriptor* Zone_GetExchangeRec_Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Zone_GetExchangeRec_Response_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ReqOperaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GMOperaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* LotteryType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QuestChangeType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* MailOperaType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* SkillType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* PayGiftType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GameProtocol_5fZone_2eproto() {
  protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GameProtocol_Zone.proto");
  GOOGLE_CHECK(file != NULL);
  GameLoginInfo_descriptor_ = file->message_type(0);
  static const int GameLoginInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stbaseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stquestinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stiteminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stfriendinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, stmailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, streserved1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, streserved2_),
  };
  GameLoginInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GameLoginInfo_descriptor_,
      GameLoginInfo::default_instance_,
      GameLoginInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GameLoginInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GameLoginInfo));
  Zone_LoginServer_Request_descriptor_ = file->message_type(1);
  static const int Zone_LoginServer_Request_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, uloginreason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, uclientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, strsessionkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, strchannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, irealnamestat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, straccount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, strdeviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, bisnew_),
  };
  Zone_LoginServer_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LoginServer_Request_descriptor_,
      Zone_LoginServer_Request::default_instance_,
      Zone_LoginServer_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LoginServer_Request));
  Zone_LoginServer_Response_descriptor_ = file->message_type(2);
  static const int Zone_LoginServer_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, stlogininfo_),
  };
  Zone_LoginServer_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LoginServer_Response_descriptor_,
      Zone_LoginServer_Response::default_instance_,
      Zone_LoginServer_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LoginServer_Response));
  Zone_Logout_Notify_descriptor_ = file->message_type(3);
  static const int Zone_Logout_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Logout_Notify, stroleid_),
  };
  Zone_Logout_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Logout_Notify_descriptor_,
      Zone_Logout_Notify::default_instance_,
      Zone_Logout_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Logout_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Logout_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Logout_Notify));
  Zone_GetFriendInfo_Request_descriptor_ = file->message_type(4);
  static const int Zone_GetFriendInfo_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, ucreqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, friend_uin_),
  };
  Zone_GetFriendInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetFriendInfo_Request_descriptor_,
      Zone_GetFriendInfo_Request::default_instance_,
      Zone_GetFriendInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetFriendInfo_Request));
  Zone_GetFriendInfo_Response_descriptor_ = file->message_type(5);
  static const int Zone_GetFriendInfo_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Response, iresult_),
  };
  Zone_GetFriendInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetFriendInfo_Response_descriptor_,
      Zone_GetFriendInfo_Response::default_instance_,
      Zone_GetFriendInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetFriendInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetFriendInfo_Response));
  Zone_OnlineRole_Request_descriptor_ = file->message_type(6);
  static const int Zone_OnlineRole_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, iworldid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, irolenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, strrecordtime_),
  };
  Zone_OnlineRole_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_OnlineRole_Request_descriptor_,
      Zone_OnlineRole_Request::default_instance_,
      Zone_OnlineRole_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_OnlineRole_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_OnlineRole_Request));
  Zone_LoginServer_Notify_descriptor_ = file->message_type(7);
  static const int Zone_LoginServer_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, stroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, izoneid_),
  };
  Zone_LoginServer_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LoginServer_Notify_descriptor_,
      Zone_LoginServer_Notify::default_instance_,
      Zone_LoginServer_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LoginServer_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LoginServer_Notify));
  Zone_RepOpera_Request_descriptor_ = file->message_type(8);
  static const int Zone_RepOpera_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, iitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, utouin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, strphonenum_),
  };
  Zone_RepOpera_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RepOpera_Request_descriptor_,
      Zone_RepOpera_Request::default_instance_,
      Zone_RepOpera_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RepOpera_Request));
  Zone_RepOpera_Response_descriptor_ = file->message_type(9);
  static const int Zone_RepOpera_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, iitemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, utouin_),
  };
  Zone_RepOpera_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RepOpera_Response_descriptor_,
      Zone_RepOpera_Response::default_instance_,
      Zone_RepOpera_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepOpera_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RepOpera_Response));
  OneRepSlot_descriptor_ = file->message_type(10);
  static const int OneRepSlot_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, ichangechannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, stslotinfo_),
  };
  OneRepSlot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneRepSlot_descriptor_,
      OneRepSlot::default_instance_,
      OneRepSlot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneRepSlot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneRepSlot));
  Zone_RepChange_Notify_descriptor_ = file->message_type(11);
  static const int Zone_RepChange_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepChange_Notify, stitems_),
  };
  Zone_RepChange_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_RepChange_Notify_descriptor_,
      Zone_RepChange_Notify::default_instance_,
      Zone_RepChange_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepChange_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_RepChange_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_RepChange_Notify));
  UserResourceChange_descriptor_ = file->message_type(12);
  static const int UserResourceChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, irestype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, inewresnum_),
  };
  UserResourceChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserResourceChange_descriptor_,
      UserResourceChange::default_instance_,
      UserResourceChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserResourceChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserResourceChange));
  Zone_ResourceChange_Notify_descriptor_ = file->message_type(13);
  static const int Zone_ResourceChange_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ResourceChange_Notify, stchangeinfos_),
  };
  Zone_ResourceChange_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ResourceChange_Notify_descriptor_,
      Zone_ResourceChange_Notify::default_instance_,
      Zone_ResourceChange_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ResourceChange_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ResourceChange_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ResourceChange_Notify));
  Zone_Chat_Request_descriptor_ = file->message_type(14);
  static const int Zone_Chat_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, ichannel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, sttargetroleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, strmessage_),
  };
  Zone_Chat_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Chat_Request_descriptor_,
      Zone_Chat_Request::default_instance_,
      Zone_Chat_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Chat_Request));
  Zone_Chat_Response_descriptor_ = file->message_type(15);
  static const int Zone_Chat_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Response, iresult_),
  };
  Zone_Chat_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Chat_Response_descriptor_,
      Zone_Chat_Response::default_instance_,
      Zone_Chat_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Chat_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Chat_Response));
  Zone_DoFish_Request_descriptor_ = file->message_type(16);
  static const int Zone_DoFish_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoFish_Request, ifishroomid_),
  };
  Zone_DoFish_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_DoFish_Request_descriptor_,
      Zone_DoFish_Request::default_instance_,
      Zone_DoFish_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoFish_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoFish_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_DoFish_Request));
  Zone_DoFish_Response_descriptor_ = file->message_type(17);
  static const int Zone_DoFish_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoFish_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoFish_Response, ifishroomid_),
  };
  Zone_DoFish_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_DoFish_Response_descriptor_,
      Zone_DoFish_Response::default_instance_,
      Zone_DoFish_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoFish_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_DoFish_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_DoFish_Response));
  Zone_FormTime_Notify_descriptor_ = file->message_type(18);
  static const int Zone_FormTime_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FormTime_Notify, bisbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FormTime_Notify, ltime_),
  };
  Zone_FormTime_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FormTime_Notify_descriptor_,
      Zone_FormTime_Notify::default_instance_,
      Zone_FormTime_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FormTime_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FormTime_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FormTime_Notify));
  Zone_SyncTime_Notify_descriptor_ = file->message_type(19);
  static const int Zone_SyncTime_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SyncTime_Notify, lservertime_),
  };
  Zone_SyncTime_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SyncTime_Notify_descriptor_,
      Zone_SyncTime_Notify::default_instance_,
      Zone_SyncTime_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SyncTime_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SyncTime_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SyncTime_Notify));
  SEATUSERINFO_descriptor_ = file->message_type(20);
  static const int SEATUSERINFO_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, iseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, igunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, lcoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, ltickets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, igunstyleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, strpicid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, iviplevel_),
  };
  SEATUSERINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SEATUSERINFO_descriptor_,
      SEATUSERINFO::default_instance_,
      SEATUSERINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SEATUSERINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SEATUSERINFO));
  Zone_SeatUser_Notify_descriptor_ = file->message_type(21);
  static const int Zone_SeatUser_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SeatUser_Notify, stusers_),
  };
  Zone_SeatUser_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SeatUser_Notify_descriptor_,
      Zone_SeatUser_Notify::default_instance_,
      Zone_SeatUser_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SeatUser_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SeatUser_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SeatUser_Notify));
  FISHINFO_descriptor_ = file->message_type(22);
  static const int FISHINFO_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, uuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, ifishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, ifishseqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, itraceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, lbortime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, ldeadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, cindex_),
  };
  FISHINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FISHINFO_descriptor_,
      FISHINFO::default_instance_,
      FISHINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FISHINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FISHINFO));
  Zone_FishInfo_Notify_descriptor_ = file->message_type(23);
  static const int Zone_FishInfo_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishInfo_Notify, stfishes_),
  };
  Zone_FishInfo_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FishInfo_Notify_descriptor_,
      Zone_FishInfo_Notify::default_instance_,
      Zone_FishInfo_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishInfo_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishInfo_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FishInfo_Notify));
  POS_descriptor_ = file->message_type(24);
  static const int POS_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POS, ix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POS, iy_),
  };
  POS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POS_descriptor_,
      POS::default_instance_,
      POS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POS));
  BULLETINFO_descriptor_ = file->message_type(25);
  static const int BULLETINFO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, uuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, igunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, iseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, sttargetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, lshoottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, bisaimformfish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, ifishindex_),
  };
  BULLETINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BULLETINFO_descriptor_,
      BULLETINFO::default_instance_,
      BULLETINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BULLETINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BULLETINFO));
  Zone_BulletInfo_Notify_descriptor_ = file->message_type(26);
  static const int Zone_BulletInfo_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BulletInfo_Notify, stbullets_),
  };
  Zone_BulletInfo_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_BulletInfo_Notify_descriptor_,
      Zone_BulletInfo_Notify::default_instance_,
      Zone_BulletInfo_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BulletInfo_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BulletInfo_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_BulletInfo_Notify));
  FORMFISHOUTINFO_descriptor_ = file->message_type(27);
  static const int FORMFISHOUTINFO_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, ioutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, ifishid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, ifishseqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, itraceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, lbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, iremainum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, iinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, szalivefish_),
  };
  FORMFISHOUTINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FORMFISHOUTINFO_descriptor_,
      FORMFISHOUTINFO::default_instance_,
      FORMFISHOUTINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FORMFISHOUTINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FORMFISHOUTINFO));
  Zone_FormInfo_Notify_descriptor_ = file->message_type(28);
  static const int Zone_FormInfo_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FormInfo_Notify, stforminfos_),
  };
  Zone_FormInfo_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FormInfo_Notify_descriptor_,
      Zone_FormInfo_Notify::default_instance_,
      Zone_FormInfo_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FormInfo_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FormInfo_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FormInfo_Notify));
  Zone_ExitFish_Request_descriptor_ = file->message_type(29);
  static const int Zone_ExitFish_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Request, ifishroomid_),
  };
  Zone_ExitFish_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ExitFish_Request_descriptor_,
      Zone_ExitFish_Request::default_instance_,
      Zone_ExitFish_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ExitFish_Request));
  Zone_ExitFish_Response_descriptor_ = file->message_type(30);
  static const int Zone_ExitFish_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Response, iresult_),
  };
  Zone_ExitFish_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ExitFish_Response_descriptor_,
      Zone_ExitFish_Response::default_instance_,
      Zone_ExitFish_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ExitFish_Response));
  Zone_ExitFish_Notify_descriptor_ = file->message_type(31);
  static const int Zone_ExitFish_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Notify, iseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Notify, bforceexit_),
  };
  Zone_ExitFish_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ExitFish_Notify_descriptor_,
      Zone_ExitFish_Notify::default_instance_,
      Zone_ExitFish_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExitFish_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ExitFish_Notify));
  Zone_ChangeGun_Request_descriptor_ = file->message_type(32);
  static const int Zone_ChangeGun_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Request, inewgunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Request, bisstyle_),
  };
  Zone_ChangeGun_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ChangeGun_Request_descriptor_,
      Zone_ChangeGun_Request::default_instance_,
      Zone_ChangeGun_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ChangeGun_Request));
  Zone_ChangeGun_Response_descriptor_ = file->message_type(33);
  static const int Zone_ChangeGun_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Response, inewgunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Response, bisstyle_),
  };
  Zone_ChangeGun_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ChangeGun_Response_descriptor_,
      Zone_ChangeGun_Response::default_instance_,
      Zone_ChangeGun_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ChangeGun_Response));
  Zone_ChangeGun_Notify_descriptor_ = file->message_type(34);
  static const int Zone_ChangeGun_Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Notify, iseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Notify, inewgunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Notify, bisstyle_),
  };
  Zone_ChangeGun_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ChangeGun_Notify_descriptor_,
      Zone_ChangeGun_Notify::default_instance_,
      Zone_ChangeGun_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChangeGun_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ChangeGun_Notify));
  Zone_ShootBullet_Request_descriptor_ = file->message_type(35);
  static const int Zone_ShootBullet_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Request, lshoottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Request, iposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Request, iposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Request, bautoshoot_),
  };
  Zone_ShootBullet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ShootBullet_Request_descriptor_,
      Zone_ShootBullet_Request::default_instance_,
      Zone_ShootBullet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ShootBullet_Request));
  Zone_ShootBullet_Response_descriptor_ = file->message_type(36);
  static const int Zone_ShootBullet_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Response, iresult_),
  };
  Zone_ShootBullet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ShootBullet_Response_descriptor_,
      Zone_ShootBullet_Response::default_instance_,
      Zone_ShootBullet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ShootBullet_Response));
  Zone_ShootBullet_Notify_descriptor_ = file->message_type(37);
  static const int Zone_ShootBullet_Notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, uuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, igunid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, iseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, sttargetpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, lshoottime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, bisaimformfish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, ifishindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, biswildbullet_),
  };
  Zone_ShootBullet_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ShootBullet_Notify_descriptor_,
      Zone_ShootBullet_Notify::default_instance_,
      Zone_ShootBullet_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ShootBullet_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ShootBullet_Notify));
  Zone_HitFish_Request_descriptor_ = file->message_type(38);
  static const int Zone_HitFish_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Request, lhittime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Request, ubulletuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Request, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Request, ifishindex_),
  };
  Zone_HitFish_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_HitFish_Request_descriptor_,
      Zone_HitFish_Request::default_instance_,
      Zone_HitFish_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_HitFish_Request));
  Zone_HitFish_Response_descriptor_ = file->message_type(39);
  static const int Zone_HitFish_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Response, iresult_),
  };
  Zone_HitFish_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_HitFish_Response_descriptor_,
      Zone_HitFish_Response::default_instance_,
      Zone_HitFish_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_HitFish_Response));
  Zone_HitFish_Notify_descriptor_ = file->message_type(40);
  static const int Zone_HitFish_Notify_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, ubulletuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, iseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, irewardcoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, bisform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, ifishindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, imultifish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, ibulletlivetime_),
  };
  Zone_HitFish_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_HitFish_Notify_descriptor_,
      Zone_HitFish_Notify::default_instance_,
      Zone_HitFish_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFish_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_HitFish_Notify));
  Zone_HitFormFish_Request_descriptor_ = file->message_type(41);
  static const int Zone_HitFormFish_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Request, ubulletuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Request, iformoutid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Request, ifishindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Request, lhittime_),
  };
  Zone_HitFormFish_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_HitFormFish_Request_descriptor_,
      Zone_HitFormFish_Request::default_instance_,
      Zone_HitFormFish_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_HitFormFish_Request));
  Zone_HitFormFish_Response_descriptor_ = file->message_type(42);
  static const int Zone_HitFormFish_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Response, iresult_),
  };
  Zone_HitFormFish_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_HitFormFish_Response_descriptor_,
      Zone_HitFormFish_Response::default_instance_,
      Zone_HitFormFish_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HitFormFish_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_HitFormFish_Response));
  Zone_BoomFishInfo_Notify_descriptor_ = file->message_type(43);
  static const int Zone_BoomFishInfo_Notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BoomFishInfo_Notify, ufishuniqids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BoomFishInfo_Notify, usmallfishindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BoomFishInfo_Notify, uformuniqids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BoomFishInfo_Notify, iseat_),
  };
  Zone_BoomFishInfo_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_BoomFishInfo_Notify_descriptor_,
      Zone_BoomFishInfo_Notify::default_instance_,
      Zone_BoomFishInfo_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BoomFishInfo_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_BoomFishInfo_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_BoomFishInfo_Notify));
  Zone_Lottery_Request_descriptor_ = file->message_type(44);
  static const int Zone_Lottery_Request_offsets_[1] = {
  };
  Zone_Lottery_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Lottery_Request_descriptor_,
      Zone_Lottery_Request::default_instance_,
      Zone_Lottery_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Lottery_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Lottery_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Lottery_Request));
  Zone_Lottery_Response_descriptor_ = file->message_type(45);
  static const int Zone_Lottery_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Lottery_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Lottery_Response, ilotteryitemid_),
  };
  Zone_Lottery_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_Lottery_Response_descriptor_,
      Zone_Lottery_Response::default_instance_,
      Zone_Lottery_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Lottery_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_Lottery_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_Lottery_Response));
  Zone_AddTicket_Notify_descriptor_ = file->message_type(46);
  static const int Zone_AddTicket_Notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddTicket_Notify, uiuin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddTicket_Notify, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddTicket_Notify, bisformfish_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddTicket_Notify, iaddnum_),
  };
  Zone_AddTicket_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_AddTicket_Notify_descriptor_,
      Zone_AddTicket_Notify::default_instance_,
      Zone_AddTicket_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddTicket_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_AddTicket_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_AddTicket_Notify));
  QuestChange_descriptor_ = file->message_type(47);
  static const int QuestChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestChange, iquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestChange, inum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestChange, ichangetype_),
  };
  QuestChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestChange_descriptor_,
      QuestChange::default_instance_,
      QuestChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestChange));
  Zone_QuestChange_Notify_descriptor_ = file->message_type(48);
  static const int Zone_QuestChange_Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_QuestChange_Notify, stchanges_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_QuestChange_Notify, iadventnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_QuestChange_Notify, iadventendtime_),
  };
  Zone_QuestChange_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_QuestChange_Notify_descriptor_,
      Zone_QuestChange_Notify::default_instance_,
      Zone_QuestChange_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_QuestChange_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_QuestChange_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_QuestChange_Notify));
  Zone_FinQuest_Request_descriptor_ = file->message_type(49);
  static const int Zone_FinQuest_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinQuest_Request, iquestid_),
  };
  Zone_FinQuest_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FinQuest_Request_descriptor_,
      Zone_FinQuest_Request::default_instance_,
      Zone_FinQuest_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinQuest_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinQuest_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FinQuest_Request));
  Zone_FinQuest_Response_descriptor_ = file->message_type(50);
  static const int Zone_FinQuest_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinQuest_Response, iresult_),
  };
  Zone_FinQuest_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FinQuest_Response_descriptor_,
      Zone_FinQuest_Response::default_instance_,
      Zone_FinQuest_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinQuest_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinQuest_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FinQuest_Response));
  RewardInfo_descriptor_ = file->message_type(51);
  static const int RewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, iid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, inum_),
  };
  RewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardInfo_descriptor_,
      RewardInfo::default_instance_,
      RewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardInfo));
  Zone_GetReward_Notify_descriptor_ = file->message_type(52);
  static const int Zone_GetReward_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetReward_Notify, iquestid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetReward_Notify, strewards_),
  };
  Zone_GetReward_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetReward_Notify_descriptor_,
      Zone_GetReward_Notify::default_instance_,
      Zone_GetReward_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetReward_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetReward_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetReward_Notify));
  Zone_SetExchange_Request_descriptor_ = file->message_type(53);
  static const int Zone_SetExchange_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetExchange_Request, stuserinfo_),
  };
  Zone_SetExchange_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SetExchange_Request_descriptor_,
      Zone_SetExchange_Request::default_instance_,
      Zone_SetExchange_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetExchange_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetExchange_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SetExchange_Request));
  Zone_SetExchange_Response_descriptor_ = file->message_type(54);
  static const int Zone_SetExchange_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetExchange_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetExchange_Response, stuserinfo_),
  };
  Zone_SetExchange_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_SetExchange_Response_descriptor_,
      Zone_SetExchange_Response::default_instance_,
      Zone_SetExchange_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetExchange_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_SetExchange_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_SetExchange_Response));
  Zone_ExchangeItem_Request_descriptor_ = file->message_type(55);
  static const int Zone_ExchangeItem_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExchangeItem_Request, iexchangeid_),
  };
  Zone_ExchangeItem_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ExchangeItem_Request_descriptor_,
      Zone_ExchangeItem_Request::default_instance_,
      Zone_ExchangeItem_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExchangeItem_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExchangeItem_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ExchangeItem_Request));
  Zone_ExchangeItem_Response_descriptor_ = file->message_type(56);
  static const int Zone_ExchangeItem_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExchangeItem_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExchangeItem_Response, storder_),
  };
  Zone_ExchangeItem_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ExchangeItem_Response_descriptor_,
      Zone_ExchangeItem_Response::default_instance_,
      Zone_ExchangeItem_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExchangeItem_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ExchangeItem_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ExchangeItem_Response));
  Zone_NewMailInfo_Notify_descriptor_ = file->message_type(57);
  static const int Zone_NewMailInfo_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_NewMailInfo_Notify, stmailinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_NewMailInfo_Notify, udeluniqids_),
  };
  Zone_NewMailInfo_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_NewMailInfo_Notify_descriptor_,
      Zone_NewMailInfo_Notify::default_instance_,
      Zone_NewMailInfo_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_NewMailInfo_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_NewMailInfo_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_NewMailInfo_Notify));
  Zone_MailOpera_Request_descriptor_ = file->message_type(58);
  static const int Zone_MailOpera_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Request, uuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Request, ioperatype_),
  };
  Zone_MailOpera_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_MailOpera_Request_descriptor_,
      Zone_MailOpera_Request::default_instance_,
      Zone_MailOpera_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_MailOpera_Request));
  Zone_MailOpera_Response_descriptor_ = file->message_type(59);
  static const int Zone_MailOpera_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Response, uuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Response, ioperatype_),
  };
  Zone_MailOpera_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_MailOpera_Response_descriptor_,
      Zone_MailOpera_Response::default_instance_,
      Zone_MailOpera_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_MailOpera_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_MailOpera_Response));
  Zone_GetLivness_Request_descriptor_ = file->message_type(60);
  static const int Zone_GetLivness_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLivness_Request, ilivnessrewardid_),
  };
  Zone_GetLivness_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetLivness_Request_descriptor_,
      Zone_GetLivness_Request::default_instance_,
      Zone_GetLivness_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLivness_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLivness_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetLivness_Request));
  Zone_GetLivness_Response_descriptor_ = file->message_type(61);
  static const int Zone_GetLivness_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLivness_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLivness_Response, ilivnessrewardid_),
  };
  Zone_GetLivness_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetLivness_Response_descriptor_,
      Zone_GetLivness_Response::default_instance_,
      Zone_GetLivness_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLivness_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLivness_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetLivness_Response));
  Zone_GetRankInfo_Request_descriptor_ = file->message_type(62);
  static const int Zone_GetRankInfo_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Request, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Request, ifromindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Request, inum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Request, blastrank_),
  };
  Zone_GetRankInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetRankInfo_Request_descriptor_,
      Zone_GetRankInfo_Request::default_instance_,
      Zone_GetRankInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetRankInfo_Request));
  Zone_GetRankInfo_Response_descriptor_ = file->message_type(63);
  static const int Zone_GetRankInfo_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Response, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Response, stranks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Response, blastrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Response, imyrank_),
  };
  Zone_GetRankInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetRankInfo_Response_descriptor_,
      Zone_GetRankInfo_Response::default_instance_,
      Zone_GetRankInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRankInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetRankInfo_Response));
  Zone_UseSkill_Request_descriptor_ = file->message_type(64);
  static const int Zone_UseSkill_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Request, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Request, iitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Request, ufishuniqids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Request, stwarheadpos_),
  };
  Zone_UseSkill_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UseSkill_Request_descriptor_,
      Zone_UseSkill_Request::default_instance_,
      Zone_UseSkill_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UseSkill_Request));
  Zone_UseSkill_Response_descriptor_ = file->message_type(65);
  static const int Zone_UseSkill_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Response, itype_),
  };
  Zone_UseSkill_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UseSkill_Response_descriptor_,
      Zone_UseSkill_Response::default_instance_,
      Zone_UseSkill_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UseSkill_Response));
  Zone_UseSkill_Notify_descriptor_ = file->message_type(66);
  static const int Zone_UseSkill_Notify_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, itype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, bisopen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, laimendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, ufishuniqids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, lrewardcoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, lwildendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, iwildnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, stwarheadpos_),
  };
  Zone_UseSkill_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UseSkill_Notify_descriptor_,
      Zone_UseSkill_Notify::default_instance_,
      Zone_UseSkill_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UseSkill_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UseSkill_Notify));
  Zone_GetLimitNum_Request_descriptor_ = file->message_type(67);
  static const int Zone_GetLimitNum_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Request, izoneid_),
  };
  Zone_GetLimitNum_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetLimitNum_Request_descriptor_,
      Zone_GetLimitNum_Request::default_instance_,
      Zone_GetLimitNum_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetLimitNum_Request));
  LimitInfo_descriptor_ = file->message_type(68);
  static const int LimitInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitInfo, iexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitInfo, inum_),
  };
  LimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitInfo_descriptor_,
      LimitInfo::default_instance_,
      LimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitInfo));
  Zone_GetLimitNum_Response_descriptor_ = file->message_type(69);
  static const int Zone_GetLimitNum_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Response, stlimits_),
  };
  Zone_GetLimitNum_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetLimitNum_Response_descriptor_,
      Zone_GetLimitNum_Response::default_instance_,
      Zone_GetLimitNum_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLimitNum_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetLimitNum_Response));
  Zone_ChooseAimFish_Request_descriptor_ = file->message_type(70);
  static const int Zone_ChooseAimFish_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Request, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Request, ifishindex_),
  };
  Zone_ChooseAimFish_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ChooseAimFish_Request_descriptor_,
      Zone_ChooseAimFish_Request::default_instance_,
      Zone_ChooseAimFish_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ChooseAimFish_Request));
  Zone_ChooseAimFish_Response_descriptor_ = file->message_type(71);
  static const int Zone_ChooseAimFish_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Response, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Response, ifishindex_),
  };
  Zone_ChooseAimFish_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ChooseAimFish_Response_descriptor_,
      Zone_ChooseAimFish_Response::default_instance_,
      Zone_ChooseAimFish_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ChooseAimFish_Response));
  Zone_ChooseAimFish_Notify_descriptor_ = file->message_type(72);
  static const int Zone_ChooseAimFish_Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Notify, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Notify, ufishuniqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Notify, ifishindex_),
  };
  Zone_ChooseAimFish_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_ChooseAimFish_Notify_descriptor_,
      Zone_ChooseAimFish_Notify::default_instance_,
      Zone_ChooseAimFish_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_ChooseAimFish_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_ChooseAimFish_Notify));
  Zone_GetUserAlms_Request_descriptor_ = file->message_type(73);
  static const int Zone_GetUserAlms_Request_offsets_[1] = {
  };
  Zone_GetUserAlms_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetUserAlms_Request_descriptor_,
      Zone_GetUserAlms_Request::default_instance_,
      Zone_GetUserAlms_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetUserAlms_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetUserAlms_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetUserAlms_Request));
  Zone_GetUserAlms_Response_descriptor_ = file->message_type(74);
  static const int Zone_GetUserAlms_Response_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetUserAlms_Response, iresult_),
  };
  Zone_GetUserAlms_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetUserAlms_Response_descriptor_,
      Zone_GetUserAlms_Response::default_instance_,
      Zone_GetUserAlms_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetUserAlms_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetUserAlms_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetUserAlms_Response));
  Zone_UpdateAlms_Notify_descriptor_ = file->message_type(75);
  static const int Zone_UpdateAlms_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateAlms_Notify, igetnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateAlms_Notify, inextgettime_),
  };
  Zone_UpdateAlms_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UpdateAlms_Notify_descriptor_,
      Zone_UpdateAlms_Notify::default_instance_,
      Zone_UpdateAlms_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateAlms_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateAlms_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UpdateAlms_Notify));
  Zone_LimitLottery_Request_descriptor_ = file->message_type(76);
  static const int Zone_LimitLottery_Request_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Request, bistentimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Request, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Request, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Request, ilotterytype_),
  };
  Zone_LimitLottery_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LimitLottery_Request_descriptor_,
      Zone_LimitLottery_Request::default_instance_,
      Zone_LimitLottery_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LimitLottery_Request));
  Zone_LimitLottery_Response_descriptor_ = file->message_type(77);
  static const int Zone_LimitLottery_Response_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Response, ilotteryids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Response, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Response, ilotterytype_),
  };
  Zone_LimitLottery_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LimitLottery_Response_descriptor_,
      Zone_LimitLottery_Response::default_instance_,
      Zone_LimitLottery_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LimitLottery_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LimitLottery_Response));
  Zone_PayLotteryRecord_Request_descriptor_ = file->message_type(78);
  static const int Zone_PayLotteryRecord_Request_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Request, ifrom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Request, inum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Request, izoneid_),
  };
  Zone_PayLotteryRecord_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_PayLotteryRecord_Request_descriptor_,
      Zone_PayLotteryRecord_Request::default_instance_,
      Zone_PayLotteryRecord_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_PayLotteryRecord_Request));
  PayLotteryRecord_descriptor_ = file->message_type(79);
  static const int PayLotteryRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLotteryRecord, strnickname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLotteryRecord, ilotteryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLotteryRecord, iindex_),
  };
  PayLotteryRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PayLotteryRecord_descriptor_,
      PayLotteryRecord::default_instance_,
      PayLotteryRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLotteryRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PayLotteryRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PayLotteryRecord));
  Zone_PayLotteryRecord_Response_descriptor_ = file->message_type(80);
  static const int Zone_PayLotteryRecord_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Response, strecords_),
  };
  Zone_PayLotteryRecord_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_PayLotteryRecord_Response_descriptor_,
      Zone_PayLotteryRecord_Response::default_instance_,
      Zone_PayLotteryRecord_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_PayLotteryRecord_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_PayLotteryRecord_Response));
  HorseLampInfo_descriptor_ = file->message_type(81);
  static const int HorseLampInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseLampInfo, ilampid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseLampInfo, iendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseLampInfo, iinterval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseLampInfo, itimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseLampInfo, strparams_),
  };
  HorseLampInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseLampInfo_descriptor_,
      HorseLampInfo::default_instance_,
      HorseLampInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseLampInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseLampInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseLampInfo));
  Zone_HorseLamp_Notify_descriptor_ = file->message_type(82);
  static const int Zone_HorseLamp_Notify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HorseLamp_Notify, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HorseLamp_Notify, stinfos_),
  };
  Zone_HorseLamp_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_HorseLamp_Notify_descriptor_,
      Zone_HorseLamp_Notify::default_instance_,
      Zone_HorseLamp_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HorseLamp_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_HorseLamp_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_HorseLamp_Notify));
  Zone_EnterLasvegas_Request_descriptor_ = file->message_type(83);
  static const int Zone_EnterLasvegas_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_EnterLasvegas_Request, bisenter_),
  };
  Zone_EnterLasvegas_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_EnterLasvegas_Request_descriptor_,
      Zone_EnterLasvegas_Request::default_instance_,
      Zone_EnterLasvegas_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_EnterLasvegas_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_EnterLasvegas_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_EnterLasvegas_Request));
  Zone_EnterLasvegas_Response_descriptor_ = file->message_type(84);
  static const int Zone_EnterLasvegas_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_EnterLasvegas_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_EnterLasvegas_Response, bisenter_),
  };
  Zone_EnterLasvegas_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_EnterLasvegas_Response_descriptor_,
      Zone_EnterLasvegas_Response::default_instance_,
      Zone_EnterLasvegas_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_EnterLasvegas_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_EnterLasvegas_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_EnterLasvegas_Response));
  Zone_LasvegasBet_Request_descriptor_ = file->message_type(85);
  static const int Zone_LasvegasBet_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LasvegasBet_Request, stbet_),
  };
  Zone_LasvegasBet_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LasvegasBet_Request_descriptor_,
      Zone_LasvegasBet_Request::default_instance_,
      Zone_LasvegasBet_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LasvegasBet_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LasvegasBet_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LasvegasBet_Request));
  Zone_LasvegasBet_Response_descriptor_ = file->message_type(86);
  static const int Zone_LasvegasBet_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LasvegasBet_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LasvegasBet_Response, stbet_),
  };
  Zone_LasvegasBet_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_LasvegasBet_Response_descriptor_,
      Zone_LasvegasBet_Response::default_instance_,
      Zone_LasvegasBet_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LasvegasBet_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_LasvegasBet_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_LasvegasBet_Response));
  Zone_UpdateLasvegas_Notify_descriptor_ = file->message_type(87);
  static const int Zone_UpdateLasvegas_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateLasvegas_Notify, stinfo_),
  };
  Zone_UpdateLasvegas_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UpdateLasvegas_Notify_descriptor_,
      Zone_UpdateLasvegas_Notify::default_instance_,
      Zone_UpdateLasvegas_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateLasvegas_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateLasvegas_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UpdateLasvegas_Notify));
  Zone_GetRewardInfo_Request_descriptor_ = file->message_type(88);
  static const int Zone_GetRewardInfo_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Request, ifromindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Request, inum_),
  };
  Zone_GetRewardInfo_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetRewardInfo_Request_descriptor_,
      Zone_GetRewardInfo_Request::default_instance_,
      Zone_GetRewardInfo_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetRewardInfo_Request));
  Zone_GetRewardInfo_Response_descriptor_ = file->message_type(89);
  static const int Zone_GetRewardInfo_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Response, stinfos_),
  };
  Zone_GetRewardInfo_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetRewardInfo_Response_descriptor_,
      Zone_GetRewardInfo_Response::default_instance_,
      Zone_GetRewardInfo_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetRewardInfo_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetRewardInfo_Response));
  Zone_GetLoginReward_Request_descriptor_ = file->message_type(90);
  static const int Zone_GetLoginReward_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLoginReward_Request, irewardid_),
  };
  Zone_GetLoginReward_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetLoginReward_Request_descriptor_,
      Zone_GetLoginReward_Request::default_instance_,
      Zone_GetLoginReward_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLoginReward_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLoginReward_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetLoginReward_Request));
  Zone_GetLoginReward_Response_descriptor_ = file->message_type(91);
  static const int Zone_GetLoginReward_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLoginReward_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLoginReward_Response, irewardid_),
  };
  Zone_GetLoginReward_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetLoginReward_Response_descriptor_,
      Zone_GetLoginReward_Response::default_instance_,
      Zone_GetLoginReward_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLoginReward_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetLoginReward_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetLoginReward_Response));
  Zone_GetPayRecord_Request_descriptor_ = file->message_type(92);
  static const int Zone_GetPayRecord_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayRecord_Request, uin_),
  };
  Zone_GetPayRecord_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetPayRecord_Request_descriptor_,
      Zone_GetPayRecord_Request::default_instance_,
      Zone_GetPayRecord_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayRecord_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayRecord_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetPayRecord_Request));
  Zone_GetPayRecord_Response_descriptor_ = file->message_type(93);
  static const int Zone_GetPayRecord_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayRecord_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayRecord_Response, strecords_),
  };
  Zone_GetPayRecord_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetPayRecord_Response_descriptor_,
      Zone_GetPayRecord_Response::default_instance_,
      Zone_GetPayRecord_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayRecord_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayRecord_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetPayRecord_Response));
  Zone_GetPayGift_Request_descriptor_ = file->message_type(94);
  static const int Zone_GetPayGift_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayGift_Request, igifttype_),
  };
  Zone_GetPayGift_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetPayGift_Request_descriptor_,
      Zone_GetPayGift_Request::default_instance_,
      Zone_GetPayGift_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayGift_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayGift_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetPayGift_Request));
  Zone_GetPayGift_Response_descriptor_ = file->message_type(95);
  static const int Zone_GetPayGift_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayGift_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayGift_Response, igifttype_),
  };
  Zone_GetPayGift_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetPayGift_Response_descriptor_,
      Zone_GetPayGift_Response::default_instance_,
      Zone_GetPayGift_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayGift_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayGift_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetPayGift_Response));
  Zone_UpdateMonthTime_Notify_descriptor_ = file->message_type(96);
  static const int Zone_UpdateMonthTime_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateMonthTime_Notify, imonthendtime_),
  };
  Zone_UpdateMonthTime_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UpdateMonthTime_Notify_descriptor_,
      Zone_UpdateMonthTime_Notify::default_instance_,
      Zone_UpdateMonthTime_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateMonthTime_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateMonthTime_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UpdateMonthTime_Notify));
  Zone_FishUserUpdate_Notify_descriptor_ = file->message_type(97);
  static const int Zone_FishUserUpdate_Notify_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishUserUpdate_Notify, iseat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishUserUpdate_Notify, iaddcoins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishUserUpdate_Notify, iaddtickets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishUserUpdate_Notify, stadditem_),
  };
  Zone_FishUserUpdate_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FishUserUpdate_Notify_descriptor_,
      Zone_FishUserUpdate_Notify::default_instance_,
      Zone_FishUserUpdate_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishUserUpdate_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FishUserUpdate_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FishUserUpdate_Notify));
  Zone_VipExpUpdate_Notify_descriptor_ = file->message_type(98);
  static const int Zone_VipExpUpdate_Notify_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_VipExpUpdate_Notify, iviplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_VipExpUpdate_Notify, ivipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_VipExpUpdate_Notify, ivippriv_),
  };
  Zone_VipExpUpdate_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_VipExpUpdate_Notify_descriptor_,
      Zone_VipExpUpdate_Notify::default_instance_,
      Zone_VipExpUpdate_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_VipExpUpdate_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_VipExpUpdate_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_VipExpUpdate_Notify));
  Zone_UserRecharge_Notify_descriptor_ = file->message_type(99);
  static const int Zone_UserRecharge_Notify_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Notify, irechargeid_),
  };
  Zone_UserRecharge_Notify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UserRecharge_Notify_descriptor_,
      Zone_UserRecharge_Notify::default_instance_,
      Zone_UserRecharge_Notify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Notify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Notify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UserRecharge_Notify));
  Zone_GetPayOrder_Request_descriptor_ = file->message_type(100);
  static const int Zone_GetPayOrder_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Request, uin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Request, ifromzoneid_),
  };
  Zone_GetPayOrder_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetPayOrder_Request_descriptor_,
      Zone_GetPayOrder_Request::default_instance_,
      Zone_GetPayOrder_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetPayOrder_Request));
  Zone_GetPayOrder_Response_descriptor_ = file->message_type(101);
  static const int Zone_GetPayOrder_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Response, strorderid_),
  };
  Zone_GetPayOrder_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetPayOrder_Response_descriptor_,
      Zone_GetPayOrder_Response::default_instance_,
      Zone_GetPayOrder_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetPayOrder_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetPayOrder_Response));
  Zone_FinGuide_Request_descriptor_ = file->message_type(102);
  static const int Zone_FinGuide_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinGuide_Request, iguideid_),
  };
  Zone_FinGuide_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FinGuide_Request_descriptor_,
      Zone_FinGuide_Request::default_instance_,
      Zone_FinGuide_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinGuide_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinGuide_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FinGuide_Request));
  Zone_FinGuide_Response_descriptor_ = file->message_type(103);
  static const int Zone_FinGuide_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinGuide_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinGuide_Response, iguideid_),
  };
  Zone_FinGuide_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_FinGuide_Response_descriptor_,
      Zone_FinGuide_Response::default_instance_,
      Zone_FinGuide_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinGuide_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_FinGuide_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_FinGuide_Response));
  Zone_UpdateName_Request_descriptor_ = file->message_type(104);
  static const int Zone_UpdateName_Request_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Request, strnewname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Request, bissign_),
  };
  Zone_UpdateName_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UpdateName_Request_descriptor_,
      Zone_UpdateName_Request::default_instance_,
      Zone_UpdateName_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UpdateName_Request));
  Zone_UpdateName_Response_descriptor_ = file->message_type(105);
  static const int Zone_UpdateName_Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Response, strnewname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Response, bissign_),
  };
  Zone_UpdateName_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UpdateName_Response_descriptor_,
      Zone_UpdateName_Response::default_instance_,
      Zone_UpdateName_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UpdateName_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UpdateName_Response));
  Zone_UserRecharge_Request_descriptor_ = file->message_type(106);
  static const int Zone_UserRecharge_Request_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Request, irechargeid_),
  };
  Zone_UserRecharge_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UserRecharge_Request_descriptor_,
      Zone_UserRecharge_Request::default_instance_,
      Zone_UserRecharge_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UserRecharge_Request));
  Zone_UserRecharge_Response_descriptor_ = file->message_type(107);
  static const int Zone_UserRecharge_Response_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Response, irechargeid_),
  };
  Zone_UserRecharge_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_UserRecharge_Response_descriptor_,
      Zone_UserRecharge_Response::default_instance_,
      Zone_UserRecharge_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_UserRecharge_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_UserRecharge_Response));
  Zone_GetExchangeRec_Request_descriptor_ = file->message_type(108);
  static const int Zone_GetExchangeRec_Request_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Request, ifromindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Request, inum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Request, izoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Request, uin_),
  };
  Zone_GetExchangeRec_Request_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetExchangeRec_Request_descriptor_,
      Zone_GetExchangeRec_Request::default_instance_,
      Zone_GetExchangeRec_Request_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Request, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Request, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetExchangeRec_Request));
  Zone_GetExchangeRec_Response_descriptor_ = file->message_type(109);
  static const int Zone_GetExchangeRec_Response_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Response, iresult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Response, ifromindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Response, inum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Response, strecords_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Response, uin_),
  };
  Zone_GetExchangeRec_Response_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Zone_GetExchangeRec_Response_descriptor_,
      Zone_GetExchangeRec_Response::default_instance_,
      Zone_GetExchangeRec_Response_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Response, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Zone_GetExchangeRec_Response, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Zone_GetExchangeRec_Response));
  ReqOperaType_descriptor_ = file->enum_type(0);
  GMOperaType_descriptor_ = file->enum_type(1);
  LotteryType_descriptor_ = file->enum_type(2);
  QuestChangeType_descriptor_ = file->enum_type(3);
  MailOperaType_descriptor_ = file->enum_type(4);
  SkillType_descriptor_ = file->enum_type(5);
  PayGiftType_descriptor_ = file->enum_type(6);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GameProtocol_5fZone_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GameLoginInfo_descriptor_, &GameLoginInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LoginServer_Request_descriptor_, &Zone_LoginServer_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LoginServer_Response_descriptor_, &Zone_LoginServer_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Logout_Notify_descriptor_, &Zone_Logout_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetFriendInfo_Request_descriptor_, &Zone_GetFriendInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetFriendInfo_Response_descriptor_, &Zone_GetFriendInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_OnlineRole_Request_descriptor_, &Zone_OnlineRole_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LoginServer_Notify_descriptor_, &Zone_LoginServer_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RepOpera_Request_descriptor_, &Zone_RepOpera_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RepOpera_Response_descriptor_, &Zone_RepOpera_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneRepSlot_descriptor_, &OneRepSlot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_RepChange_Notify_descriptor_, &Zone_RepChange_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserResourceChange_descriptor_, &UserResourceChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ResourceChange_Notify_descriptor_, &Zone_ResourceChange_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Chat_Request_descriptor_, &Zone_Chat_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Chat_Response_descriptor_, &Zone_Chat_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_DoFish_Request_descriptor_, &Zone_DoFish_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_DoFish_Response_descriptor_, &Zone_DoFish_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FormTime_Notify_descriptor_, &Zone_FormTime_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SyncTime_Notify_descriptor_, &Zone_SyncTime_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SEATUSERINFO_descriptor_, &SEATUSERINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SeatUser_Notify_descriptor_, &Zone_SeatUser_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FISHINFO_descriptor_, &FISHINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FishInfo_Notify_descriptor_, &Zone_FishInfo_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POS_descriptor_, &POS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BULLETINFO_descriptor_, &BULLETINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_BulletInfo_Notify_descriptor_, &Zone_BulletInfo_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FORMFISHOUTINFO_descriptor_, &FORMFISHOUTINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FormInfo_Notify_descriptor_, &Zone_FormInfo_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ExitFish_Request_descriptor_, &Zone_ExitFish_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ExitFish_Response_descriptor_, &Zone_ExitFish_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ExitFish_Notify_descriptor_, &Zone_ExitFish_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ChangeGun_Request_descriptor_, &Zone_ChangeGun_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ChangeGun_Response_descriptor_, &Zone_ChangeGun_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ChangeGun_Notify_descriptor_, &Zone_ChangeGun_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ShootBullet_Request_descriptor_, &Zone_ShootBullet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ShootBullet_Response_descriptor_, &Zone_ShootBullet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ShootBullet_Notify_descriptor_, &Zone_ShootBullet_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_HitFish_Request_descriptor_, &Zone_HitFish_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_HitFish_Response_descriptor_, &Zone_HitFish_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_HitFish_Notify_descriptor_, &Zone_HitFish_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_HitFormFish_Request_descriptor_, &Zone_HitFormFish_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_HitFormFish_Response_descriptor_, &Zone_HitFormFish_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_BoomFishInfo_Notify_descriptor_, &Zone_BoomFishInfo_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Lottery_Request_descriptor_, &Zone_Lottery_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_Lottery_Response_descriptor_, &Zone_Lottery_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_AddTicket_Notify_descriptor_, &Zone_AddTicket_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestChange_descriptor_, &QuestChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_QuestChange_Notify_descriptor_, &Zone_QuestChange_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FinQuest_Request_descriptor_, &Zone_FinQuest_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FinQuest_Response_descriptor_, &Zone_FinQuest_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardInfo_descriptor_, &RewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetReward_Notify_descriptor_, &Zone_GetReward_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SetExchange_Request_descriptor_, &Zone_SetExchange_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_SetExchange_Response_descriptor_, &Zone_SetExchange_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ExchangeItem_Request_descriptor_, &Zone_ExchangeItem_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ExchangeItem_Response_descriptor_, &Zone_ExchangeItem_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_NewMailInfo_Notify_descriptor_, &Zone_NewMailInfo_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_MailOpera_Request_descriptor_, &Zone_MailOpera_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_MailOpera_Response_descriptor_, &Zone_MailOpera_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetLivness_Request_descriptor_, &Zone_GetLivness_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetLivness_Response_descriptor_, &Zone_GetLivness_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetRankInfo_Request_descriptor_, &Zone_GetRankInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetRankInfo_Response_descriptor_, &Zone_GetRankInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UseSkill_Request_descriptor_, &Zone_UseSkill_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UseSkill_Response_descriptor_, &Zone_UseSkill_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UseSkill_Notify_descriptor_, &Zone_UseSkill_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetLimitNum_Request_descriptor_, &Zone_GetLimitNum_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitInfo_descriptor_, &LimitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetLimitNum_Response_descriptor_, &Zone_GetLimitNum_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ChooseAimFish_Request_descriptor_, &Zone_ChooseAimFish_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ChooseAimFish_Response_descriptor_, &Zone_ChooseAimFish_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_ChooseAimFish_Notify_descriptor_, &Zone_ChooseAimFish_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetUserAlms_Request_descriptor_, &Zone_GetUserAlms_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetUserAlms_Response_descriptor_, &Zone_GetUserAlms_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UpdateAlms_Notify_descriptor_, &Zone_UpdateAlms_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LimitLottery_Request_descriptor_, &Zone_LimitLottery_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LimitLottery_Response_descriptor_, &Zone_LimitLottery_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_PayLotteryRecord_Request_descriptor_, &Zone_PayLotteryRecord_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PayLotteryRecord_descriptor_, &PayLotteryRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_PayLotteryRecord_Response_descriptor_, &Zone_PayLotteryRecord_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseLampInfo_descriptor_, &HorseLampInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_HorseLamp_Notify_descriptor_, &Zone_HorseLamp_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_EnterLasvegas_Request_descriptor_, &Zone_EnterLasvegas_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_EnterLasvegas_Response_descriptor_, &Zone_EnterLasvegas_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LasvegasBet_Request_descriptor_, &Zone_LasvegasBet_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_LasvegasBet_Response_descriptor_, &Zone_LasvegasBet_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UpdateLasvegas_Notify_descriptor_, &Zone_UpdateLasvegas_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetRewardInfo_Request_descriptor_, &Zone_GetRewardInfo_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetRewardInfo_Response_descriptor_, &Zone_GetRewardInfo_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetLoginReward_Request_descriptor_, &Zone_GetLoginReward_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetLoginReward_Response_descriptor_, &Zone_GetLoginReward_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetPayRecord_Request_descriptor_, &Zone_GetPayRecord_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetPayRecord_Response_descriptor_, &Zone_GetPayRecord_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetPayGift_Request_descriptor_, &Zone_GetPayGift_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetPayGift_Response_descriptor_, &Zone_GetPayGift_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UpdateMonthTime_Notify_descriptor_, &Zone_UpdateMonthTime_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FishUserUpdate_Notify_descriptor_, &Zone_FishUserUpdate_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_VipExpUpdate_Notify_descriptor_, &Zone_VipExpUpdate_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UserRecharge_Notify_descriptor_, &Zone_UserRecharge_Notify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetPayOrder_Request_descriptor_, &Zone_GetPayOrder_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetPayOrder_Response_descriptor_, &Zone_GetPayOrder_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FinGuide_Request_descriptor_, &Zone_FinGuide_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_FinGuide_Response_descriptor_, &Zone_FinGuide_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UpdateName_Request_descriptor_, &Zone_UpdateName_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UpdateName_Response_descriptor_, &Zone_UpdateName_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UserRecharge_Request_descriptor_, &Zone_UserRecharge_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_UserRecharge_Response_descriptor_, &Zone_UserRecharge_Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetExchangeRec_Request_descriptor_, &Zone_GetExchangeRec_Request::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Zone_GetExchangeRec_Response_descriptor_, &Zone_GetExchangeRec_Response::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GameProtocol_5fZone_2eproto() {
  delete GameLoginInfo::default_instance_;
  delete GameLoginInfo_reflection_;
  delete Zone_LoginServer_Request::default_instance_;
  delete Zone_LoginServer_Request_reflection_;
  delete Zone_LoginServer_Response::default_instance_;
  delete Zone_LoginServer_Response_reflection_;
  delete Zone_Logout_Notify::default_instance_;
  delete Zone_Logout_Notify_reflection_;
  delete Zone_GetFriendInfo_Request::default_instance_;
  delete Zone_GetFriendInfo_Request_reflection_;
  delete Zone_GetFriendInfo_Response::default_instance_;
  delete Zone_GetFriendInfo_Response_reflection_;
  delete Zone_OnlineRole_Request::default_instance_;
  delete Zone_OnlineRole_Request_reflection_;
  delete Zone_LoginServer_Notify::default_instance_;
  delete Zone_LoginServer_Notify_reflection_;
  delete Zone_RepOpera_Request::default_instance_;
  delete Zone_RepOpera_Request_reflection_;
  delete Zone_RepOpera_Response::default_instance_;
  delete Zone_RepOpera_Response_reflection_;
  delete OneRepSlot::default_instance_;
  delete OneRepSlot_reflection_;
  delete Zone_RepChange_Notify::default_instance_;
  delete Zone_RepChange_Notify_reflection_;
  delete UserResourceChange::default_instance_;
  delete UserResourceChange_reflection_;
  delete Zone_ResourceChange_Notify::default_instance_;
  delete Zone_ResourceChange_Notify_reflection_;
  delete Zone_Chat_Request::default_instance_;
  delete Zone_Chat_Request_reflection_;
  delete Zone_Chat_Response::default_instance_;
  delete Zone_Chat_Response_reflection_;
  delete Zone_DoFish_Request::default_instance_;
  delete Zone_DoFish_Request_reflection_;
  delete Zone_DoFish_Response::default_instance_;
  delete Zone_DoFish_Response_reflection_;
  delete Zone_FormTime_Notify::default_instance_;
  delete Zone_FormTime_Notify_reflection_;
  delete Zone_SyncTime_Notify::default_instance_;
  delete Zone_SyncTime_Notify_reflection_;
  delete SEATUSERINFO::default_instance_;
  delete SEATUSERINFO_reflection_;
  delete Zone_SeatUser_Notify::default_instance_;
  delete Zone_SeatUser_Notify_reflection_;
  delete FISHINFO::default_instance_;
  delete FISHINFO_reflection_;
  delete Zone_FishInfo_Notify::default_instance_;
  delete Zone_FishInfo_Notify_reflection_;
  delete POS::default_instance_;
  delete POS_reflection_;
  delete BULLETINFO::default_instance_;
  delete BULLETINFO_reflection_;
  delete Zone_BulletInfo_Notify::default_instance_;
  delete Zone_BulletInfo_Notify_reflection_;
  delete FORMFISHOUTINFO::default_instance_;
  delete FORMFISHOUTINFO_reflection_;
  delete Zone_FormInfo_Notify::default_instance_;
  delete Zone_FormInfo_Notify_reflection_;
  delete Zone_ExitFish_Request::default_instance_;
  delete Zone_ExitFish_Request_reflection_;
  delete Zone_ExitFish_Response::default_instance_;
  delete Zone_ExitFish_Response_reflection_;
  delete Zone_ExitFish_Notify::default_instance_;
  delete Zone_ExitFish_Notify_reflection_;
  delete Zone_ChangeGun_Request::default_instance_;
  delete Zone_ChangeGun_Request_reflection_;
  delete Zone_ChangeGun_Response::default_instance_;
  delete Zone_ChangeGun_Response_reflection_;
  delete Zone_ChangeGun_Notify::default_instance_;
  delete Zone_ChangeGun_Notify_reflection_;
  delete Zone_ShootBullet_Request::default_instance_;
  delete Zone_ShootBullet_Request_reflection_;
  delete Zone_ShootBullet_Response::default_instance_;
  delete Zone_ShootBullet_Response_reflection_;
  delete Zone_ShootBullet_Notify::default_instance_;
  delete Zone_ShootBullet_Notify_reflection_;
  delete Zone_HitFish_Request::default_instance_;
  delete Zone_HitFish_Request_reflection_;
  delete Zone_HitFish_Response::default_instance_;
  delete Zone_HitFish_Response_reflection_;
  delete Zone_HitFish_Notify::default_instance_;
  delete Zone_HitFish_Notify_reflection_;
  delete Zone_HitFormFish_Request::default_instance_;
  delete Zone_HitFormFish_Request_reflection_;
  delete Zone_HitFormFish_Response::default_instance_;
  delete Zone_HitFormFish_Response_reflection_;
  delete Zone_BoomFishInfo_Notify::default_instance_;
  delete Zone_BoomFishInfo_Notify_reflection_;
  delete Zone_Lottery_Request::default_instance_;
  delete Zone_Lottery_Request_reflection_;
  delete Zone_Lottery_Response::default_instance_;
  delete Zone_Lottery_Response_reflection_;
  delete Zone_AddTicket_Notify::default_instance_;
  delete Zone_AddTicket_Notify_reflection_;
  delete QuestChange::default_instance_;
  delete QuestChange_reflection_;
  delete Zone_QuestChange_Notify::default_instance_;
  delete Zone_QuestChange_Notify_reflection_;
  delete Zone_FinQuest_Request::default_instance_;
  delete Zone_FinQuest_Request_reflection_;
  delete Zone_FinQuest_Response::default_instance_;
  delete Zone_FinQuest_Response_reflection_;
  delete RewardInfo::default_instance_;
  delete RewardInfo_reflection_;
  delete Zone_GetReward_Notify::default_instance_;
  delete Zone_GetReward_Notify_reflection_;
  delete Zone_SetExchange_Request::default_instance_;
  delete Zone_SetExchange_Request_reflection_;
  delete Zone_SetExchange_Response::default_instance_;
  delete Zone_SetExchange_Response_reflection_;
  delete Zone_ExchangeItem_Request::default_instance_;
  delete Zone_ExchangeItem_Request_reflection_;
  delete Zone_ExchangeItem_Response::default_instance_;
  delete Zone_ExchangeItem_Response_reflection_;
  delete Zone_NewMailInfo_Notify::default_instance_;
  delete Zone_NewMailInfo_Notify_reflection_;
  delete Zone_MailOpera_Request::default_instance_;
  delete Zone_MailOpera_Request_reflection_;
  delete Zone_MailOpera_Response::default_instance_;
  delete Zone_MailOpera_Response_reflection_;
  delete Zone_GetLivness_Request::default_instance_;
  delete Zone_GetLivness_Request_reflection_;
  delete Zone_GetLivness_Response::default_instance_;
  delete Zone_GetLivness_Response_reflection_;
  delete Zone_GetRankInfo_Request::default_instance_;
  delete Zone_GetRankInfo_Request_reflection_;
  delete Zone_GetRankInfo_Response::default_instance_;
  delete Zone_GetRankInfo_Response_reflection_;
  delete Zone_UseSkill_Request::default_instance_;
  delete Zone_UseSkill_Request_reflection_;
  delete Zone_UseSkill_Response::default_instance_;
  delete Zone_UseSkill_Response_reflection_;
  delete Zone_UseSkill_Notify::default_instance_;
  delete Zone_UseSkill_Notify_reflection_;
  delete Zone_GetLimitNum_Request::default_instance_;
  delete Zone_GetLimitNum_Request_reflection_;
  delete LimitInfo::default_instance_;
  delete LimitInfo_reflection_;
  delete Zone_GetLimitNum_Response::default_instance_;
  delete Zone_GetLimitNum_Response_reflection_;
  delete Zone_ChooseAimFish_Request::default_instance_;
  delete Zone_ChooseAimFish_Request_reflection_;
  delete Zone_ChooseAimFish_Response::default_instance_;
  delete Zone_ChooseAimFish_Response_reflection_;
  delete Zone_ChooseAimFish_Notify::default_instance_;
  delete Zone_ChooseAimFish_Notify_reflection_;
  delete Zone_GetUserAlms_Request::default_instance_;
  delete Zone_GetUserAlms_Request_reflection_;
  delete Zone_GetUserAlms_Response::default_instance_;
  delete Zone_GetUserAlms_Response_reflection_;
  delete Zone_UpdateAlms_Notify::default_instance_;
  delete Zone_UpdateAlms_Notify_reflection_;
  delete Zone_LimitLottery_Request::default_instance_;
  delete Zone_LimitLottery_Request_reflection_;
  delete Zone_LimitLottery_Response::default_instance_;
  delete Zone_LimitLottery_Response_reflection_;
  delete Zone_PayLotteryRecord_Request::default_instance_;
  delete Zone_PayLotteryRecord_Request_reflection_;
  delete PayLotteryRecord::default_instance_;
  delete PayLotteryRecord_reflection_;
  delete Zone_PayLotteryRecord_Response::default_instance_;
  delete Zone_PayLotteryRecord_Response_reflection_;
  delete HorseLampInfo::default_instance_;
  delete HorseLampInfo_reflection_;
  delete Zone_HorseLamp_Notify::default_instance_;
  delete Zone_HorseLamp_Notify_reflection_;
  delete Zone_EnterLasvegas_Request::default_instance_;
  delete Zone_EnterLasvegas_Request_reflection_;
  delete Zone_EnterLasvegas_Response::default_instance_;
  delete Zone_EnterLasvegas_Response_reflection_;
  delete Zone_LasvegasBet_Request::default_instance_;
  delete Zone_LasvegasBet_Request_reflection_;
  delete Zone_LasvegasBet_Response::default_instance_;
  delete Zone_LasvegasBet_Response_reflection_;
  delete Zone_UpdateLasvegas_Notify::default_instance_;
  delete Zone_UpdateLasvegas_Notify_reflection_;
  delete Zone_GetRewardInfo_Request::default_instance_;
  delete Zone_GetRewardInfo_Request_reflection_;
  delete Zone_GetRewardInfo_Response::default_instance_;
  delete Zone_GetRewardInfo_Response_reflection_;
  delete Zone_GetLoginReward_Request::default_instance_;
  delete Zone_GetLoginReward_Request_reflection_;
  delete Zone_GetLoginReward_Response::default_instance_;
  delete Zone_GetLoginReward_Response_reflection_;
  delete Zone_GetPayRecord_Request::default_instance_;
  delete Zone_GetPayRecord_Request_reflection_;
  delete Zone_GetPayRecord_Response::default_instance_;
  delete Zone_GetPayRecord_Response_reflection_;
  delete Zone_GetPayGift_Request::default_instance_;
  delete Zone_GetPayGift_Request_reflection_;
  delete Zone_GetPayGift_Response::default_instance_;
  delete Zone_GetPayGift_Response_reflection_;
  delete Zone_UpdateMonthTime_Notify::default_instance_;
  delete Zone_UpdateMonthTime_Notify_reflection_;
  delete Zone_FishUserUpdate_Notify::default_instance_;
  delete Zone_FishUserUpdate_Notify_reflection_;
  delete Zone_VipExpUpdate_Notify::default_instance_;
  delete Zone_VipExpUpdate_Notify_reflection_;
  delete Zone_UserRecharge_Notify::default_instance_;
  delete Zone_UserRecharge_Notify_reflection_;
  delete Zone_GetPayOrder_Request::default_instance_;
  delete Zone_GetPayOrder_Request_reflection_;
  delete Zone_GetPayOrder_Response::default_instance_;
  delete Zone_GetPayOrder_Response_reflection_;
  delete Zone_FinGuide_Request::default_instance_;
  delete Zone_FinGuide_Request_reflection_;
  delete Zone_FinGuide_Response::default_instance_;
  delete Zone_FinGuide_Response_reflection_;
  delete Zone_UpdateName_Request::default_instance_;
  delete Zone_UpdateName_Request_reflection_;
  delete Zone_UpdateName_Response::default_instance_;
  delete Zone_UpdateName_Response_reflection_;
  delete Zone_UserRecharge_Request::default_instance_;
  delete Zone_UserRecharge_Request_reflection_;
  delete Zone_UserRecharge_Response::default_instance_;
  delete Zone_UserRecharge_Response_reflection_;
  delete Zone_GetExchangeRec_Request::default_instance_;
  delete Zone_GetExchangeRec_Request_reflection_;
  delete Zone_GetExchangeRec_Response::default_instance_;
  delete Zone_GetExchangeRec_Response_reflection_;
}

void protobuf_AddDesc_GameProtocol_5fZone_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::protobuf_AddDesc_GameProtocol_5fCommon_2eproto();
  ::protobuf_AddDesc_GameProtocol_5fUSERDB_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027GameProtocol_Zone.proto\032\031GameProtocol_"
    "Common.proto\032\031GameProtocol_USERDB.proto\""
    "\210\002\n\rGameLoginInfo\022\037\n\nstBaseInfo\030\001 \001(\0132\013."
    "BASEDBINFO\022!\n\013stQuestInfo\030\002 \001(\0132\014.QUESTD"
    "BINFO\022\037\n\nstItemInfo\030\003 \001(\0132\013.ITEMDBINFO\022#"
    "\n\014stFriendInfo\030\004 \001(\0132\r.FRIENDDBINFO\022\037\n\ns"
    "tMailInfo\030\005 \001(\0132\013.MAILDBINFO\022%\n\013stReserv"
    "ed1\030\006 \001(\0132\020.RESERVED1DBINFO\022%\n\013stReserve"
    "d2\030\007 \001(\0132\020.RESERVED2DBINFO\"\363\001\n\030Zone_Logi"
    "nServer_Request\022\031\n\010stRoleID\030\001 \001(\0132\007.Role"
    "ID\022\024\n\014uLoginReason\030\003 \001(\r\022\026\n\016uClientVersi"
    "on\030\004 \001(\r\022\025\n\rstrSessionKey\030\005 \001(\t\022\023\n\013strNi"
    "ckName\030\006 \001(\t\022\022\n\nstrChannel\030\007 \001(\t\022\025\n\riRea"
    "lNameStat\030\010 \001(\005\022\022\n\nstrAccount\030\t \001(\t\022\023\n\013s"
    "trDeviceID\030\n \001(\t\022\016\n\006bIsNew\030\013 \001(\010\"\201\001\n\031Zon"
    "e_LoginServer_Response\022\017\n\007iResult\030\001 \001(\005\022"
    "\013\n\003uin\030\002 \001(\r\022\017\n\007iZoneID\030\003 \001(\005\022\020\n\010iWorldI"
    "D\030\004 \001(\005\022#\n\013stLoginInfo\030\005 \001(\0132\016.GameLogin"
    "Info\"/\n\022Zone_Logout_Notify\022\031\n\010stRoleID\030\001"
    " \001(\0132\007.RoleID\"P\n\032Zone_GetFriendInfo_Requ"
    "est\022\021\n\tucReqType\030\001 \001(\r\022\013\n\003uin\030\002 \001(\r\022\022\n\nf"
    "riend_uin\030\003 \001(\r\".\n\033Zone_GetFriendInfo_Re"
    "sponse\022\017\n\007iResult\030\001 \001(\005\"e\n\027Zone_OnlineRo"
    "le_Request\022\020\n\010iWorldID\030\001 \001(\005\022\017\n\007iZoneID\030"
    "\002 \001(\005\022\020\n\010iRoleNum\030\003 \001(\005\022\025\n\rstrRecordTime"
    "\030\004 \001(\t\"E\n\027Zone_LoginServer_Notify\022\031\n\010stR"
    "oleID\030\001 \001(\0132\007.RoleID\022\017\n\007iZoneID\030\004 \001(\005\"\225\001"
    "\n\025Zone_RepOpera_Request\0224\n\005eType\030\001 \001(\0162\r"
    ".ReqOperaType:\026REQ_OPERA_TYPE_INVALID\022\017\n"
    "\007iItemID\030\002 \001(\005\022\020\n\010iItemNum\030\003 \001(\005\022\016\n\006uToU"
    "in\030\004 \001(\r\022\023\n\013strPhoneNum\030\005 \001(\t\"\222\001\n\026Zone_R"
    "epOpera_Response\022\017\n\007iResult\030\001 \001(\005\0224\n\005eTy"
    "pe\030\002 \001(\0162\r.ReqOperaType:\026REQ_OPERA_TYPE_"
    "INVALID\022\017\n\007iItemID\030\003 \001(\005\022\020\n\010iItemNum\030\004 \001"
    "(\005\022\016\n\006uToUin\030\005 \001(\r\"F\n\nOneRepSlot\022\026\n\016iCha"
    "ngeChannel\030\003 \001(\005\022 \n\nstSlotInfo\030\002 \001(\0132\014.O"
    "neSlotInfo\"5\n\025Zone_RepChange_Notify\022\034\n\007s"
    "tItems\030\001 \003(\0132\013.OneRepSlot\":\n\022UserResourc"
    "eChange\022\020\n\010iResType\030\001 \001(\005\022\022\n\niNewResNum\030"
    "\002 \001(\005\"H\n\032Zone_ResourceChange_Notify\022*\n\rs"
    "tChangeInfos\030\001 \003(\0132\023.UserResourceChange\""
    "\202\001\n\021Zone_Chat_Request\0228\n\010iChannel\030\001 \001(\0162"
    "\020.ChatChannelType:\024CHAT_CHANNEL_INVALID\022"
    "\037\n\016stTargetRoleID\030\002 \001(\0132\007.RoleID\022\022\n\nstrM"
    "essage\030\003 \001(\t\"%\n\022Zone_Chat_Response\022\017\n\007iR"
    "esult\030\001 \001(\005\"*\n\023Zone_DoFish_Request\022\023\n\013iF"
    "ishRoomID\030\001 \001(\005\"<\n\024Zone_DoFish_Response\022"
    "\017\n\007iResult\030\001 \001(\005\022\023\n\013iFishRoomID\030\002 \001(\005\"7\n"
    "\024Zone_FormTime_Notify\022\020\n\010bIsBegin\030\001 \001(\010\022"
    "\r\n\005lTime\030\002 \001(\003\"+\n\024Zone_SyncTime_Notify\022\023"
    "\n\013lServerTime\030\001 \001(\003\"\253\001\n\014SEATUSERINFO\022\r\n\005"
    "iSeat\030\001 \001(\005\022\013\n\003uin\030\002 \001(\r\022\016\n\006iGunID\030\003 \001(\005"
    "\022\016\n\006lCoins\030\004 \001(\003\022\020\n\010lTickets\030\006 \001(\003\022\023\n\013st"
    "rNickName\030\005 \001(\t\022\023\n\013iGunStyleID\030\007 \001(\005\022\020\n\010"
    "strPicID\030\010 \001(\t\022\021\n\tiVIPLevel\030\t \001(\005\"6\n\024Zon"
    "e_SeatUser_Notify\022\036\n\007stUsers\030\001 \003(\0132\r.SEA"
    "TUSERINFO\"\207\001\n\010FISHINFO\022\017\n\007uUniqID\030\001 \001(\r\022"
    "\017\n\007iFishID\030\002 \001(\005\022\022\n\niFishSeqID\030\003 \001(\005\022\020\n\010"
    "iTraceID\030\004 \001(\005\022\020\n\010lBorTime\030\005 \001(\003\022\021\n\tlDea"
    "dTime\030\006 \001(\003\022\016\n\006cIndex\030\007 \001(\r\"3\n\024Zone_Fish"
    "Info_Notify\022\033\n\010stFishes\030\001 \003(\0132\t.FISHINFO"
    "\"\035\n\003POS\022\n\n\002iX\030\001 \001(\005\022\n\n\002iY\030\002 \001(\005\"\254\001\n\nBULL"
    "ETINFO\022\017\n\007uUniqID\030\001 \001(\r\022\016\n\006iGunID\030\002 \001(\005\022"
    "\r\n\005iSeat\030\003 \001(\005\022\031\n\013stTargetPos\030\004 \001(\0132\004.PO"
    "S\022\022\n\nlShootTime\030\005 \001(\003\022\023\n\013uFishUniqID\030\006 \001"
    "(\r\022\026\n\016bIsAimFormFish\030\007 \001(\010\022\022\n\niFishIndex"
    "\030\010 \001(\005\"8\n\026Zone_BulletInfo_Notify\022\036\n\tstBu"
    "llets\030\001 \003(\0132\013.BULLETINFO\"\247\001\n\017FORMFISHOUT"
    "INFO\022\016\n\006iOutID\030\001 \001(\005\022\017\n\007iFishID\030\002 \001(\005\022\022\n"
    "\niFishSeqID\030\003 \001(\005\022\020\n\010iTraceID\030\004 \001(\005\022\022\n\nl"
    "BeginTime\030\005 \001(\003\022\021\n\tiRemaiNum\030\006 \001(\005\022\021\n\tiI"
    "nterval\030\007 \001(\005\022\023\n\013szAliveFish\030\010 \003(\004\"=\n\024Zo"
    "ne_FormInfo_Notify\022%\n\013stFormInfos\030\001 \003(\0132"
    "\020.FORMFISHOUTINFO\",\n\025Zone_ExitFish_Reque"
    "st\022\023\n\013iFishRoomID\030\001 \001(\005\")\n\026Zone_ExitFish"
    "_Response\022\017\n\007iResult\030\001 \001(\005\"9\n\024Zone_ExitF"
    "ish_Notify\022\r\n\005iSeat\030\001 \001(\005\022\022\n\nbForceExit\030"
    "\002 \001(\010\"=\n\026Zone_ChangeGun_Request\022\021\n\tiNewG"
    "unID\030\001 \001(\005\022\020\n\010bIsStyle\030\002 \001(\010\"O\n\027Zone_Cha"
    "ngeGun_Response\022\017\n\007iResult\030\001 \001(\005\022\021\n\tiNew"
    "GunID\030\002 \001(\005\022\020\n\010bIsStyle\030\003 \001(\010\"K\n\025Zone_Ch"
    "angeGun_Notify\022\r\n\005iSeat\030\001 \001(\005\022\021\n\tiNewGun"
    "ID\030\002 \001(\005\022\020\n\010bIsStyle\030\003 \001(\010\"`\n\030Zone_Shoot"
    "Bullet_Request\022\022\n\nlShootTime\030\001 \001(\003\022\r\n\005iP"
    "osX\030\002 \001(\005\022\r\n\005iPosY\030\003 \001(\005\022\022\n\nbAutoShoot\030\004"
    " \001(\010\",\n\031Zone_ShootBullet_Response\022\017\n\007iRe"
    "sult\030\001 \001(\005\"\320\001\n\027Zone_ShootBullet_Notify\022\017"
    "\n\007uUniqID\030\001 \001(\r\022\016\n\006iGunID\030\002 \001(\005\022\r\n\005iSeat"
    "\030\003 \001(\005\022\031\n\013stTargetPos\030\004 \001(\0132\004.POS\022\022\n\nlSh"
    "ootTime\030\005 \001(\003\022\023\n\013uFishUniqID\030\006 \001(\r\022\026\n\016bI"
    "sAimFormFish\030\007 \001(\010\022\022\n\niFishIndex\030\010 \001(\005\022\025"
    "\n\rbIsWildBullet\030\t \001(\010\"h\n\024Zone_HitFish_Re"
    "quest\022\020\n\010lHitTime\030\001 \001(\003\022\025\n\ruBulletUniqID"
    "\030\002 \001(\r\022\023\n\013uFishUniqID\030\003 \001(\r\022\022\n\niFishInde"
    "x\030\004 \001(\005\"(\n\025Zone_HitFish_Response\022\017\n\007iRes"
    "ult\030\001 \001(\005\"\270\001\n\023Zone_HitFish_Notify\022\025\n\ruBu"
    "lletUniqID\030\001 \001(\r\022\023\n\013uFishUniqID\030\002 \001(\r\022\r\n"
    "\005iSeat\030\003 \001(\005\022\024\n\014iRewardCoins\030\004 \001(\005\022\017\n\007bI"
    "sForm\030\005 \001(\010\022\022\n\niFishIndex\030\006 \001(\005\022\022\n\niMult"
    "iFish\030\007 \001(\005\022\027\n\017iBulletLiveTime\030\010 \001(\005\"k\n\030"
    "Zone_HitFormFish_Request\022\025\n\ruBulletUniqI"
    "D\030\001 \001(\r\022\022\n\niFormOutID\030\002 \001(\005\022\022\n\niFishInde"
    "x\030\003 \001(\005\022\020\n\010lHitTime\030\004 \001(\003\",\n\031Zone_HitFor"
    "mFish_Response\022\017\n\007iResult\030\001 \001(\005\"n\n\030Zone_"
    "BoomFishInfo_Notify\022\024\n\014uFishUniqIDs\030\001 \003("
    "\r\022\027\n\017uSmallFishIndex\030\002 \003(\005\022\024\n\014uFormUniqI"
    "Ds\030\003 \003(\r\022\r\n\005iSeat\030\004 \001(\005\"\026\n\024Zone_Lottery_"
    "Request\"@\n\025Zone_Lottery_Response\022\017\n\007iRes"
    "ult\030\001 \001(\005\022\026\n\016iLotteryItemID\030\002 \001(\005\"a\n\025Zon"
    "e_AddTicket_Notify\022\r\n\005uiUin\030\001 \001(\r\022\023\n\013uFi"
    "shUniqID\030\002 \001(\r\022\023\n\013bIsFormFish\030\003 \001(\010\022\017\n\007i"
    "AddNum\030\004 \001(\005\"B\n\013QuestChange\022\020\n\010iQuestID\030"
    "\001 \001(\005\022\014\n\004iNum\030\002 \001(\005\022\023\n\013iChangeType\030\003 \001(\005"
    "\"f\n\027Zone_QuestChange_Notify\022\037\n\tstChanges"
    "\030\001 \003(\0132\014.QuestChange\022\022\n\niAdventNum\030\002 \001(\005"
    "\022\026\n\016iAdventEndTime\030\003 \001(\005\")\n\025Zone_FinQues"
    "t_Request\022\020\n\010iQuestID\030\001 \001(\005\")\n\026Zone_FinQ"
    "uest_Response\022\017\n\007iResult\030\001 \001(\005\"6\n\nReward"
    "Info\022\r\n\005iType\030\001 \001(\005\022\013\n\003iID\030\002 \001(\005\022\014\n\004iNum"
    "\030\003 \001(\005\"I\n\025Zone_GetReward_Notify\022\020\n\010iQues"
    "tID\030\001 \001(\005\022\036\n\tstRewards\030\002 \003(\0132\013.RewardInf"
    "o\"=\n\030Zone_SetExchange_Request\022!\n\nstUserI"
    "nfo\030\001 \001(\0132\r.ExchangeUser\"O\n\031Zone_SetExch"
    "ange_Response\022\017\n\007iResult\030\001 \001(\005\022!\n\nstUser"
    "Info\030\002 \001(\0132\r.ExchangeUser\"0\n\031Zone_Exchan"
    "geItem_Request\022\023\n\013iExchangeID\030\001 \001(\005\"N\n\032Z"
    "one_ExchangeItem_Response\022\017\n\007iResult\030\001 \001"
    "(\005\022\037\n\007stOrder\030\002 \001(\0132\016.ExchangeOrder\"P\n\027Z"
    "one_NewMailInfo_Notify\022 \n\nstMailInfo\030\001 \001"
    "(\0132\014.OneMailInfo\022\023\n\013uDelUniqIDs\030\002 \003(\r\"=\n"
    "\026Zone_MailOpera_Request\022\017\n\007uUniqID\030\001 \001(\r"
    "\022\022\n\niOperaType\030\002 \001(\005\"O\n\027Zone_MailOpera_R"
    "esponse\022\017\n\007iResult\030\001 \001(\005\022\017\n\007uUniqID\030\002 \001("
    "\r\022\022\n\niOperaType\030\004 \001(\005\"3\n\027Zone_GetLivness"
    "_Request\022\030\n\020iLivnessRewardID\030\001 \001(\005\"E\n\030Zo"
    "ne_GetLivness_Response\022\017\n\007iResult\030\001 \001(\005\022"
    "\030\n\020iLivnessRewardID\030\002 \001(\005\"^\n\030Zone_GetRan"
    "kInfo_Request\022\r\n\005iType\030\001 \001(\005\022\022\n\niFromInd"
    "ex\030\002 \001(\005\022\014\n\004iNum\030\003 \001(\005\022\021\n\tbLastRank\030\004 \001("
    "\010\"{\n\031Zone_GetRankInfo_Response\022\017\n\007iResul"
    "t\030\001 \001(\005\022\r\n\005iType\030\002 \001(\005\022\032\n\007stRanks\030\003 \003(\0132"
    "\t.RankInfo\022\021\n\tbLastRank\030\004 \001(\010\022\017\n\007iMyRank"
    "\030\005 \001(\005\"i\n\025Zone_UseSkill_Request\022\r\n\005iType"
    "\030\001 \001(\005\022\017\n\007iItemID\030\002 \001(\005\022\024\n\014uFishUniqIDs\030"
    "\003 \003(\r\022\032\n\014stWarHeadPos\030\004 \001(\0132\004.POS\"8\n\026Zon"
    "e_UseSkill_Response\022\017\n\007iResult\030\001 \001(\005\022\r\n\005"
    "iType\030\002 \001(\005\"\310\001\n\024Zone_UseSkill_Notify\022\013\n\003"
    "uin\030\001 \001(\r\022\r\n\005iType\030\002 \001(\005\022\017\n\007bIsOpen\030\003 \001("
    "\010\022\023\n\013lAimEndTime\030\004 \001(\003\022\024\n\014uFishUniqIDs\030\005"
    " \003(\r\022\024\n\014lRewardCoins\030\006 \001(\003\022\024\n\014lWildEndTi"
    "me\030\007 \001(\003\022\020\n\010iWildNum\030\010 \001(\005\022\032\n\014stWarHeadP"
    "os\030\t \001(\0132\004.POS\"8\n\030Zone_GetLimitNum_Reque"
    "st\022\013\n\003uin\030\001 \001(\r\022\017\n\007iZoneID\030\002 \001(\005\".\n\tLimi"
    "tInfo\022\023\n\013iExchangeID\030\001 \001(\005\022\014\n\004iNum\030\002 \001(\005"
    "\"J\n\031Zone_GetLimitNum_Response\022\017\n\007iResult"
    "\030\001 \001(\005\022\034\n\010stLimits\030\002 \003(\0132\n.LimitInfo\"E\n\032"
    "Zone_ChooseAimFish_Request\022\023\n\013uFishUniqI"
    "D\030\001 \001(\r\022\022\n\niFishIndex\030\002 \001(\005\"W\n\033Zone_Choo"
    "seAimFish_Response\022\017\n\007iResult\030\001 \001(\005\022\023\n\013u"
    "FishUniqID\030\002 \001(\r\022\022\n\niFishIndex\030\003 \001(\005\"Q\n\031"
    "Zone_ChooseAimFish_Notify\022\013\n\003uin\030\001 \001(\r\022\023"
    "\n\013uFishUniqID\030\002 \001(\r\022\022\n\niFishIndex\030\003 \001(\005\""
    "\032\n\030Zone_GetUserAlms_Request\",\n\031Zone_GetU"
    "serAlms_Response\022\017\n\007iResult\030\001 \001(\005\"\?\n\026Zon"
    "e_UpdateAlms_Notify\022\017\n\007iGetNum\030\001 \001(\005\022\024\n\014"
    "iNextGetTime\030\002 \001(\005\"y\n\031Zone_LimitLottery_"
    "Request\022\023\n\013bIsTenTimes\030\001 \001(\010\022\013\n\003uin\030\002 \001("
    "\r\022\017\n\007izoneid\030\003 \001(\005\022\023\n\013strNickName\030\004 \001(\t\022"
    "\024\n\014iLotteryType\030\005 \001(\005\"e\n\032Zone_LimitLotte"
    "ry_Response\022\017\n\007iResult\030\001 \001(\005\022\023\n\013iLottery"
    "IDs\030\002 \003(\005\022\013\n\003uin\030\003 \001(\r\022\024\n\014iLotteryType\030\004"
    " \001(\005\"M\n\035Zone_PayLotteryRecord_Request\022\r\n"
    "\005iFrom\030\001 \001(\005\022\014\n\004iNum\030\002 \001(\005\022\017\n\007izoneid\030\003 "
    "\001(\005\"K\n\020PayLotteryRecord\022\023\n\013strNickName\030\001"
    " \001(\t\022\022\n\niLotteryID\030\002 \001(\005\022\016\n\006iIndex\030\003 \001(\005"
    "\"W\n\036Zone_PayLotteryRecord_Response\022\017\n\007iR"
    "esult\030\001 \001(\005\022$\n\tstRecords\030\002 \003(\0132\021.PayLott"
    "eryRecord\"h\n\rHorseLampInfo\022\017\n\007iLampID\030\001 "
    "\001(\005\022\020\n\010iEndTime\030\002 \001(\005\022\021\n\tiInterval\030\003 \001(\005"
    "\022\016\n\006iTimes\030\004 \001(\005\022\021\n\tstrParams\030\005 \003(\014\"I\n\025Z"
    "one_HorseLamp_Notify\022\017\n\007iZoneID\030\001 \001(\005\022\037\n"
    "\007stInfos\030\002 \003(\0132\016.HorseLampInfo\".\n\032Zone_E"
    "nterLasvegas_Request\022\020\n\010bIsEnter\030\001 \001(\010\"@"
    "\n\033Zone_EnterLasvegas_Response\022\017\n\007iResult"
    "\030\001 \001(\005\022\020\n\010bIsEnter\030\002 \001(\010\"9\n\030Zone_Lasvega"
    "sBet_Request\022\035\n\005stBet\030\001 \001(\0132\016.NumberBetI"
    "nfo\"K\n\031Zone_LasvegasBet_Response\022\017\n\007iRes"
    "ult\030\001 \001(\005\022\035\n\005stBet\030\002 \001(\0132\016.NumberBetInfo"
    "\";\n\032Zone_UpdateLasvegas_Notify\022\035\n\006stInfo"
    "\030\001 \001(\0132\r.LasvegasInfo\">\n\032Zone_GetRewardI"
    "nfo_Request\022\022\n\niFromIndex\030\001 \001(\005\022\014\n\004iNum\030"
    "\002 \001(\005\"K\n\033Zone_GetRewardInfo_Response\022\017\n\007"
    "iResult\030\001 \001(\005\022\033\n\007stInfos\030\002 \003(\0132\n.PrizeIn"
    "fo\"0\n\033Zone_GetLoginReward_Request\022\021\n\tiRe"
    "wardID\030\001 \001(\005\"B\n\034Zone_GetLoginReward_Resp"
    "onse\022\017\n\007iResult\030\001 \001(\005\022\021\n\tiRewardID\030\002 \001(\005"
    "\"(\n\031Zone_GetPayRecord_Request\022\013\n\003uin\030\001 \001"
    "(\r\"Q\n\032Zone_GetPayRecord_Response\022\017\n\007iRes"
    "ult\030\001 \001(\005\022\"\n\tstRecords\030\002 \003(\0132\017.RechargeR"
    "ecord\",\n\027Zone_GetPayGift_Request\022\021\n\tiGif"
    "tType\030\001 \001(\005\">\n\030Zone_GetPayGift_Response\022"
    "\017\n\007iResult\030\001 \001(\005\022\021\n\tiGiftType\030\002 \001(\005\"4\n\033Z"
    "one_UpdateMonthTime_Notify\022\025\n\riMonthEndT"
    "ime\030\001 \001(\005\"t\n\032Zone_FishUserUpdate_Notify\022"
    "\r\n\005iSeat\030\001 \001(\005\022\021\n\tiAddCoins\030\002 \001(\003\022\023\n\013iAd"
    "dTickets\030\003 \001(\003\022\037\n\tstAddItem\030\004 \001(\0132\014.OneS"
    "lotInfo\"P\n\030Zone_VipExpUpdate_Notify\022\021\n\ti"
    "VipLevel\030\001 \001(\005\022\017\n\007iVipExp\030\002 \001(\005\022\020\n\010iVipP"
    "riv\030\003 \001(\005\"/\n\030Zone_UserRecharge_Notify\022\023\n"
    "\013iRechargeID\030\001 \001(\005\"<\n\030Zone_GetPayOrder_R"
    "equest\022\013\n\003uin\030\001 \001(\005\022\023\n\013iFromZoneID\030\002 \001(\005"
    "\"@\n\031Zone_GetPayOrder_Response\022\017\n\007iResult"
    "\030\001 \001(\005\022\022\n\nstrOrderID\030\002 \001(\t\")\n\025Zone_FinGu"
    "ide_Request\022\020\n\010iGuideID\030\001 \001(\005\";\n\026Zone_Fi"
    "nGuide_Response\022\017\n\007iResult\030\001 \001(\005\022\020\n\010iGui"
    "deID\030\002 \001(\005\">\n\027Zone_UpdateName_Request\022\022\n"
    "\nstrNewName\030\001 \001(\t\022\017\n\007bIsSign\030\002 \001(\010\"P\n\030Zo"
    "ne_UpdateName_Response\022\017\n\007iResult\030\001 \001(\005\022"
    "\022\n\nstrNewName\030\002 \001(\t\022\017\n\007bIsSign\030\003 \001(\010\"0\n\031"
    "Zone_UserRecharge_Request\022\023\n\013iRechargeID"
    "\030\001 \001(\005\"B\n\032Zone_UserRecharge_Response\022\017\n\007"
    "iResult\030\001 \001(\005\022\023\n\013iRechargeID\030\002 \001(\005\"]\n\033Zo"
    "ne_GetExchangeRec_Request\022\022\n\niFromIndex\030"
    "\001 \001(\005\022\014\n\004iNum\030\002 \001(\005\022\017\n\007iZoneID\030\003 \001(\005\022\013\n\003"
    "uin\030\004 \001(\r\"\177\n\034Zone_GetExchangeRec_Respons"
    "e\022\017\n\007iResult\030\001 \001(\005\022\022\n\niFromIndex\030\002 \001(\005\022\014"
    "\n\004iNum\030\003 \001(\005\022\037\n\tstRecords\030\004 \003(\0132\014.Exchan"
    "geRec\022\013\n\003uin\030\005 \001(\r*\254\001\n\014ReqOperaType\022\032\n\026R"
    "EQ_OPERA_TYPE_INVALID\020\000\022\027\n\023REQ_OPERA_TYP"
    "E_OPEN\020\001\022\026\n\022REQ_OPERA_TYPE_USE\020\002\022\033\n\027REQ_"
    "OPERA_TYPE_SENDGIFT\020\003\022\030\n\024REQ_OPERA_TYPE_"
    "STYLE\020\004\022\030\n\024REQ_OPERA_TYPE_MONTH\020\005*\357\001\n\013GM"
    "OperaType\022\024\n\020GM_OPERA_INVALID\020\000\022\023\n\017GM_OP"
    "ERA_ADDRES\020\001\022\024\n\020GM_OPERA_ADDITEM\020\002\022\026\n\022GM"
    "_OPERA_HORSELAMP\020\003\022\025\n\021GM_OPERA_SENDMAIL\020"
    "\004\022\025\n\021GM_OPERA_RECHARGE\020\005\022\030\n\024GM_OPERA_GET"
    "BASEINFO\020\006\022\027\n\023GM_OPERA_GETREPINFO\020\007\022\024\n\020G"
    "M_OPERA_DELMAIL\020\010\022\020\n\014GM_OPERA_MAX\020d*[\n\013L"
    "otteryType\022\030\n\024LOTTERY_TYPE_INVALID\020\000\022\031\n\025"
    "LOTTERY_TYPE_RECHARGE\020\001\022\027\n\023LOTTERY_TYPE_"
    "TICKET\020\002*\211\001\n\017QuestChangeType\022\030\n\024QUEST_CH"
    "ANGE_INVALID\020\000\022\024\n\020QUEST_CHANGE_ADD\020\001\022\027\n\023"
    "QUEST_CHANGE_DELETE\020\002\022\027\n\023QUEST_CHANGE_UP"
    "DATE\020\003\022\024\n\020QUEST_CHANGE_FIN\020\004*\264\001\n\rMailOpe"
    "raType\022\026\n\022MAIL_OPERA_INVALID\020\000\022\023\n\017MAIL_O"
    "PERA_READ\020\001\022\026\n\022MAIL_OPERA_RECIEVE\020\002\022\025\n\021M"
    "AIL_OPERA_DELETE\020\003\022\031\n\025MAIL_OPERA_ONERECI"
    "EVE\020\004\022\030\n\024MAIL_OPERA_ONEDELETE\020\005\022\022\n\016MAIL_"
    "OPERA_MAX\020\006*\235\001\n\tSkillType\022\026\n\022SKILL_TYPE_"
    "INVALID\020\000\022\030\n\024SKILL_TYPE_AUTOSHOOT\020\001\022\026\n\022S"
    "KILL_TYPE_AIMFISH\020\002\022\026\n\022SKILL_TYPE_WARHEA"
    "D\020\003\022\023\n\017SKILL_TYPE_WILD\020\004\022\031\n\025SKILL_TYPE_P"
    "REWARHEAD\020\005*O\n\013PayGiftType\022\024\n\020PAY_GIFT_I"
    "NVALID\020\000\022\022\n\016PAY_GIFT_FIRST\020\001\022\026\n\022PAY_GIFT"
    "_MONTHCARD\020\002", 10172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GameProtocol_Zone.proto", &protobuf_RegisterTypes);
  GameLoginInfo::default_instance_ = new GameLoginInfo();
  Zone_LoginServer_Request::default_instance_ = new Zone_LoginServer_Request();
  Zone_LoginServer_Response::default_instance_ = new Zone_LoginServer_Response();
  Zone_Logout_Notify::default_instance_ = new Zone_Logout_Notify();
  Zone_GetFriendInfo_Request::default_instance_ = new Zone_GetFriendInfo_Request();
  Zone_GetFriendInfo_Response::default_instance_ = new Zone_GetFriendInfo_Response();
  Zone_OnlineRole_Request::default_instance_ = new Zone_OnlineRole_Request();
  Zone_LoginServer_Notify::default_instance_ = new Zone_LoginServer_Notify();
  Zone_RepOpera_Request::default_instance_ = new Zone_RepOpera_Request();
  Zone_RepOpera_Response::default_instance_ = new Zone_RepOpera_Response();
  OneRepSlot::default_instance_ = new OneRepSlot();
  Zone_RepChange_Notify::default_instance_ = new Zone_RepChange_Notify();
  UserResourceChange::default_instance_ = new UserResourceChange();
  Zone_ResourceChange_Notify::default_instance_ = new Zone_ResourceChange_Notify();
  Zone_Chat_Request::default_instance_ = new Zone_Chat_Request();
  Zone_Chat_Response::default_instance_ = new Zone_Chat_Response();
  Zone_DoFish_Request::default_instance_ = new Zone_DoFish_Request();
  Zone_DoFish_Response::default_instance_ = new Zone_DoFish_Response();
  Zone_FormTime_Notify::default_instance_ = new Zone_FormTime_Notify();
  Zone_SyncTime_Notify::default_instance_ = new Zone_SyncTime_Notify();
  SEATUSERINFO::default_instance_ = new SEATUSERINFO();
  Zone_SeatUser_Notify::default_instance_ = new Zone_SeatUser_Notify();
  FISHINFO::default_instance_ = new FISHINFO();
  Zone_FishInfo_Notify::default_instance_ = new Zone_FishInfo_Notify();
  POS::default_instance_ = new POS();
  BULLETINFO::default_instance_ = new BULLETINFO();
  Zone_BulletInfo_Notify::default_instance_ = new Zone_BulletInfo_Notify();
  FORMFISHOUTINFO::default_instance_ = new FORMFISHOUTINFO();
  Zone_FormInfo_Notify::default_instance_ = new Zone_FormInfo_Notify();
  Zone_ExitFish_Request::default_instance_ = new Zone_ExitFish_Request();
  Zone_ExitFish_Response::default_instance_ = new Zone_ExitFish_Response();
  Zone_ExitFish_Notify::default_instance_ = new Zone_ExitFish_Notify();
  Zone_ChangeGun_Request::default_instance_ = new Zone_ChangeGun_Request();
  Zone_ChangeGun_Response::default_instance_ = new Zone_ChangeGun_Response();
  Zone_ChangeGun_Notify::default_instance_ = new Zone_ChangeGun_Notify();
  Zone_ShootBullet_Request::default_instance_ = new Zone_ShootBullet_Request();
  Zone_ShootBullet_Response::default_instance_ = new Zone_ShootBullet_Response();
  Zone_ShootBullet_Notify::default_instance_ = new Zone_ShootBullet_Notify();
  Zone_HitFish_Request::default_instance_ = new Zone_HitFish_Request();
  Zone_HitFish_Response::default_instance_ = new Zone_HitFish_Response();
  Zone_HitFish_Notify::default_instance_ = new Zone_HitFish_Notify();
  Zone_HitFormFish_Request::default_instance_ = new Zone_HitFormFish_Request();
  Zone_HitFormFish_Response::default_instance_ = new Zone_HitFormFish_Response();
  Zone_BoomFishInfo_Notify::default_instance_ = new Zone_BoomFishInfo_Notify();
  Zone_Lottery_Request::default_instance_ = new Zone_Lottery_Request();
  Zone_Lottery_Response::default_instance_ = new Zone_Lottery_Response();
  Zone_AddTicket_Notify::default_instance_ = new Zone_AddTicket_Notify();
  QuestChange::default_instance_ = new QuestChange();
  Zone_QuestChange_Notify::default_instance_ = new Zone_QuestChange_Notify();
  Zone_FinQuest_Request::default_instance_ = new Zone_FinQuest_Request();
  Zone_FinQuest_Response::default_instance_ = new Zone_FinQuest_Response();
  RewardInfo::default_instance_ = new RewardInfo();
  Zone_GetReward_Notify::default_instance_ = new Zone_GetReward_Notify();
  Zone_SetExchange_Request::default_instance_ = new Zone_SetExchange_Request();
  Zone_SetExchange_Response::default_instance_ = new Zone_SetExchange_Response();
  Zone_ExchangeItem_Request::default_instance_ = new Zone_ExchangeItem_Request();
  Zone_ExchangeItem_Response::default_instance_ = new Zone_ExchangeItem_Response();
  Zone_NewMailInfo_Notify::default_instance_ = new Zone_NewMailInfo_Notify();
  Zone_MailOpera_Request::default_instance_ = new Zone_MailOpera_Request();
  Zone_MailOpera_Response::default_instance_ = new Zone_MailOpera_Response();
  Zone_GetLivness_Request::default_instance_ = new Zone_GetLivness_Request();
  Zone_GetLivness_Response::default_instance_ = new Zone_GetLivness_Response();
  Zone_GetRankInfo_Request::default_instance_ = new Zone_GetRankInfo_Request();
  Zone_GetRankInfo_Response::default_instance_ = new Zone_GetRankInfo_Response();
  Zone_UseSkill_Request::default_instance_ = new Zone_UseSkill_Request();
  Zone_UseSkill_Response::default_instance_ = new Zone_UseSkill_Response();
  Zone_UseSkill_Notify::default_instance_ = new Zone_UseSkill_Notify();
  Zone_GetLimitNum_Request::default_instance_ = new Zone_GetLimitNum_Request();
  LimitInfo::default_instance_ = new LimitInfo();
  Zone_GetLimitNum_Response::default_instance_ = new Zone_GetLimitNum_Response();
  Zone_ChooseAimFish_Request::default_instance_ = new Zone_ChooseAimFish_Request();
  Zone_ChooseAimFish_Response::default_instance_ = new Zone_ChooseAimFish_Response();
  Zone_ChooseAimFish_Notify::default_instance_ = new Zone_ChooseAimFish_Notify();
  Zone_GetUserAlms_Request::default_instance_ = new Zone_GetUserAlms_Request();
  Zone_GetUserAlms_Response::default_instance_ = new Zone_GetUserAlms_Response();
  Zone_UpdateAlms_Notify::default_instance_ = new Zone_UpdateAlms_Notify();
  Zone_LimitLottery_Request::default_instance_ = new Zone_LimitLottery_Request();
  Zone_LimitLottery_Response::default_instance_ = new Zone_LimitLottery_Response();
  Zone_PayLotteryRecord_Request::default_instance_ = new Zone_PayLotteryRecord_Request();
  PayLotteryRecord::default_instance_ = new PayLotteryRecord();
  Zone_PayLotteryRecord_Response::default_instance_ = new Zone_PayLotteryRecord_Response();
  HorseLampInfo::default_instance_ = new HorseLampInfo();
  Zone_HorseLamp_Notify::default_instance_ = new Zone_HorseLamp_Notify();
  Zone_EnterLasvegas_Request::default_instance_ = new Zone_EnterLasvegas_Request();
  Zone_EnterLasvegas_Response::default_instance_ = new Zone_EnterLasvegas_Response();
  Zone_LasvegasBet_Request::default_instance_ = new Zone_LasvegasBet_Request();
  Zone_LasvegasBet_Response::default_instance_ = new Zone_LasvegasBet_Response();
  Zone_UpdateLasvegas_Notify::default_instance_ = new Zone_UpdateLasvegas_Notify();
  Zone_GetRewardInfo_Request::default_instance_ = new Zone_GetRewardInfo_Request();
  Zone_GetRewardInfo_Response::default_instance_ = new Zone_GetRewardInfo_Response();
  Zone_GetLoginReward_Request::default_instance_ = new Zone_GetLoginReward_Request();
  Zone_GetLoginReward_Response::default_instance_ = new Zone_GetLoginReward_Response();
  Zone_GetPayRecord_Request::default_instance_ = new Zone_GetPayRecord_Request();
  Zone_GetPayRecord_Response::default_instance_ = new Zone_GetPayRecord_Response();
  Zone_GetPayGift_Request::default_instance_ = new Zone_GetPayGift_Request();
  Zone_GetPayGift_Response::default_instance_ = new Zone_GetPayGift_Response();
  Zone_UpdateMonthTime_Notify::default_instance_ = new Zone_UpdateMonthTime_Notify();
  Zone_FishUserUpdate_Notify::default_instance_ = new Zone_FishUserUpdate_Notify();
  Zone_VipExpUpdate_Notify::default_instance_ = new Zone_VipExpUpdate_Notify();
  Zone_UserRecharge_Notify::default_instance_ = new Zone_UserRecharge_Notify();
  Zone_GetPayOrder_Request::default_instance_ = new Zone_GetPayOrder_Request();
  Zone_GetPayOrder_Response::default_instance_ = new Zone_GetPayOrder_Response();
  Zone_FinGuide_Request::default_instance_ = new Zone_FinGuide_Request();
  Zone_FinGuide_Response::default_instance_ = new Zone_FinGuide_Response();
  Zone_UpdateName_Request::default_instance_ = new Zone_UpdateName_Request();
  Zone_UpdateName_Response::default_instance_ = new Zone_UpdateName_Response();
  Zone_UserRecharge_Request::default_instance_ = new Zone_UserRecharge_Request();
  Zone_UserRecharge_Response::default_instance_ = new Zone_UserRecharge_Response();
  Zone_GetExchangeRec_Request::default_instance_ = new Zone_GetExchangeRec_Request();
  Zone_GetExchangeRec_Response::default_instance_ = new Zone_GetExchangeRec_Response();
  GameLoginInfo::default_instance_->InitAsDefaultInstance();
  Zone_LoginServer_Request::default_instance_->InitAsDefaultInstance();
  Zone_LoginServer_Response::default_instance_->InitAsDefaultInstance();
  Zone_Logout_Notify::default_instance_->InitAsDefaultInstance();
  Zone_GetFriendInfo_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetFriendInfo_Response::default_instance_->InitAsDefaultInstance();
  Zone_OnlineRole_Request::default_instance_->InitAsDefaultInstance();
  Zone_LoginServer_Notify::default_instance_->InitAsDefaultInstance();
  Zone_RepOpera_Request::default_instance_->InitAsDefaultInstance();
  Zone_RepOpera_Response::default_instance_->InitAsDefaultInstance();
  OneRepSlot::default_instance_->InitAsDefaultInstance();
  Zone_RepChange_Notify::default_instance_->InitAsDefaultInstance();
  UserResourceChange::default_instance_->InitAsDefaultInstance();
  Zone_ResourceChange_Notify::default_instance_->InitAsDefaultInstance();
  Zone_Chat_Request::default_instance_->InitAsDefaultInstance();
  Zone_Chat_Response::default_instance_->InitAsDefaultInstance();
  Zone_DoFish_Request::default_instance_->InitAsDefaultInstance();
  Zone_DoFish_Response::default_instance_->InitAsDefaultInstance();
  Zone_FormTime_Notify::default_instance_->InitAsDefaultInstance();
  Zone_SyncTime_Notify::default_instance_->InitAsDefaultInstance();
  SEATUSERINFO::default_instance_->InitAsDefaultInstance();
  Zone_SeatUser_Notify::default_instance_->InitAsDefaultInstance();
  FISHINFO::default_instance_->InitAsDefaultInstance();
  Zone_FishInfo_Notify::default_instance_->InitAsDefaultInstance();
  POS::default_instance_->InitAsDefaultInstance();
  BULLETINFO::default_instance_->InitAsDefaultInstance();
  Zone_BulletInfo_Notify::default_instance_->InitAsDefaultInstance();
  FORMFISHOUTINFO::default_instance_->InitAsDefaultInstance();
  Zone_FormInfo_Notify::default_instance_->InitAsDefaultInstance();
  Zone_ExitFish_Request::default_instance_->InitAsDefaultInstance();
  Zone_ExitFish_Response::default_instance_->InitAsDefaultInstance();
  Zone_ExitFish_Notify::default_instance_->InitAsDefaultInstance();
  Zone_ChangeGun_Request::default_instance_->InitAsDefaultInstance();
  Zone_ChangeGun_Response::default_instance_->InitAsDefaultInstance();
  Zone_ChangeGun_Notify::default_instance_->InitAsDefaultInstance();
  Zone_ShootBullet_Request::default_instance_->InitAsDefaultInstance();
  Zone_ShootBullet_Response::default_instance_->InitAsDefaultInstance();
  Zone_ShootBullet_Notify::default_instance_->InitAsDefaultInstance();
  Zone_HitFish_Request::default_instance_->InitAsDefaultInstance();
  Zone_HitFish_Response::default_instance_->InitAsDefaultInstance();
  Zone_HitFish_Notify::default_instance_->InitAsDefaultInstance();
  Zone_HitFormFish_Request::default_instance_->InitAsDefaultInstance();
  Zone_HitFormFish_Response::default_instance_->InitAsDefaultInstance();
  Zone_BoomFishInfo_Notify::default_instance_->InitAsDefaultInstance();
  Zone_Lottery_Request::default_instance_->InitAsDefaultInstance();
  Zone_Lottery_Response::default_instance_->InitAsDefaultInstance();
  Zone_AddTicket_Notify::default_instance_->InitAsDefaultInstance();
  QuestChange::default_instance_->InitAsDefaultInstance();
  Zone_QuestChange_Notify::default_instance_->InitAsDefaultInstance();
  Zone_FinQuest_Request::default_instance_->InitAsDefaultInstance();
  Zone_FinQuest_Response::default_instance_->InitAsDefaultInstance();
  RewardInfo::default_instance_->InitAsDefaultInstance();
  Zone_GetReward_Notify::default_instance_->InitAsDefaultInstance();
  Zone_SetExchange_Request::default_instance_->InitAsDefaultInstance();
  Zone_SetExchange_Response::default_instance_->InitAsDefaultInstance();
  Zone_ExchangeItem_Request::default_instance_->InitAsDefaultInstance();
  Zone_ExchangeItem_Response::default_instance_->InitAsDefaultInstance();
  Zone_NewMailInfo_Notify::default_instance_->InitAsDefaultInstance();
  Zone_MailOpera_Request::default_instance_->InitAsDefaultInstance();
  Zone_MailOpera_Response::default_instance_->InitAsDefaultInstance();
  Zone_GetLivness_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetLivness_Response::default_instance_->InitAsDefaultInstance();
  Zone_GetRankInfo_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetRankInfo_Response::default_instance_->InitAsDefaultInstance();
  Zone_UseSkill_Request::default_instance_->InitAsDefaultInstance();
  Zone_UseSkill_Response::default_instance_->InitAsDefaultInstance();
  Zone_UseSkill_Notify::default_instance_->InitAsDefaultInstance();
  Zone_GetLimitNum_Request::default_instance_->InitAsDefaultInstance();
  LimitInfo::default_instance_->InitAsDefaultInstance();
  Zone_GetLimitNum_Response::default_instance_->InitAsDefaultInstance();
  Zone_ChooseAimFish_Request::default_instance_->InitAsDefaultInstance();
  Zone_ChooseAimFish_Response::default_instance_->InitAsDefaultInstance();
  Zone_ChooseAimFish_Notify::default_instance_->InitAsDefaultInstance();
  Zone_GetUserAlms_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetUserAlms_Response::default_instance_->InitAsDefaultInstance();
  Zone_UpdateAlms_Notify::default_instance_->InitAsDefaultInstance();
  Zone_LimitLottery_Request::default_instance_->InitAsDefaultInstance();
  Zone_LimitLottery_Response::default_instance_->InitAsDefaultInstance();
  Zone_PayLotteryRecord_Request::default_instance_->InitAsDefaultInstance();
  PayLotteryRecord::default_instance_->InitAsDefaultInstance();
  Zone_PayLotteryRecord_Response::default_instance_->InitAsDefaultInstance();
  HorseLampInfo::default_instance_->InitAsDefaultInstance();
  Zone_HorseLamp_Notify::default_instance_->InitAsDefaultInstance();
  Zone_EnterLasvegas_Request::default_instance_->InitAsDefaultInstance();
  Zone_EnterLasvegas_Response::default_instance_->InitAsDefaultInstance();
  Zone_LasvegasBet_Request::default_instance_->InitAsDefaultInstance();
  Zone_LasvegasBet_Response::default_instance_->InitAsDefaultInstance();
  Zone_UpdateLasvegas_Notify::default_instance_->InitAsDefaultInstance();
  Zone_GetRewardInfo_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetRewardInfo_Response::default_instance_->InitAsDefaultInstance();
  Zone_GetLoginReward_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetLoginReward_Response::default_instance_->InitAsDefaultInstance();
  Zone_GetPayRecord_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetPayRecord_Response::default_instance_->InitAsDefaultInstance();
  Zone_GetPayGift_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetPayGift_Response::default_instance_->InitAsDefaultInstance();
  Zone_UpdateMonthTime_Notify::default_instance_->InitAsDefaultInstance();
  Zone_FishUserUpdate_Notify::default_instance_->InitAsDefaultInstance();
  Zone_VipExpUpdate_Notify::default_instance_->InitAsDefaultInstance();
  Zone_UserRecharge_Notify::default_instance_->InitAsDefaultInstance();
  Zone_GetPayOrder_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetPayOrder_Response::default_instance_->InitAsDefaultInstance();
  Zone_FinGuide_Request::default_instance_->InitAsDefaultInstance();
  Zone_FinGuide_Response::default_instance_->InitAsDefaultInstance();
  Zone_UpdateName_Request::default_instance_->InitAsDefaultInstance();
  Zone_UpdateName_Response::default_instance_->InitAsDefaultInstance();
  Zone_UserRecharge_Request::default_instance_->InitAsDefaultInstance();
  Zone_UserRecharge_Response::default_instance_->InitAsDefaultInstance();
  Zone_GetExchangeRec_Request::default_instance_->InitAsDefaultInstance();
  Zone_GetExchangeRec_Response::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GameProtocol_5fZone_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GameProtocol_5fZone_2eproto {
  StaticDescriptorInitializer_GameProtocol_5fZone_2eproto() {
    protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  }
} static_descriptor_initializer_GameProtocol_5fZone_2eproto_;
const ::google::protobuf::EnumDescriptor* ReqOperaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOperaType_descriptor_;
}
bool ReqOperaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GMOperaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMOperaType_descriptor_;
}
bool GMOperaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LotteryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LotteryType_descriptor_;
}
bool LotteryType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* QuestChangeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestChangeType_descriptor_;
}
bool QuestChangeType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* MailOperaType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MailOperaType_descriptor_;
}
bool MailOperaType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SkillType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillType_descriptor_;
}
bool SkillType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* PayGiftType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayGiftType_descriptor_;
}
bool PayGiftType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int GameLoginInfo::kStBaseInfoFieldNumber;
const int GameLoginInfo::kStQuestInfoFieldNumber;
const int GameLoginInfo::kStItemInfoFieldNumber;
const int GameLoginInfo::kStFriendInfoFieldNumber;
const int GameLoginInfo::kStMailInfoFieldNumber;
const int GameLoginInfo::kStReserved1FieldNumber;
const int GameLoginInfo::kStReserved2FieldNumber;
#endif  // !_MSC_VER

GameLoginInfo::GameLoginInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GameLoginInfo::InitAsDefaultInstance() {
  stbaseinfo_ = const_cast< ::BASEDBINFO*>(&::BASEDBINFO::default_instance());
  stquestinfo_ = const_cast< ::QUESTDBINFO*>(&::QUESTDBINFO::default_instance());
  stiteminfo_ = const_cast< ::ITEMDBINFO*>(&::ITEMDBINFO::default_instance());
  stfriendinfo_ = const_cast< ::FRIENDDBINFO*>(&::FRIENDDBINFO::default_instance());
  stmailinfo_ = const_cast< ::MAILDBINFO*>(&::MAILDBINFO::default_instance());
  streserved1_ = const_cast< ::RESERVED1DBINFO*>(&::RESERVED1DBINFO::default_instance());
  streserved2_ = const_cast< ::RESERVED2DBINFO*>(&::RESERVED2DBINFO::default_instance());
}

GameLoginInfo::GameLoginInfo(const GameLoginInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GameLoginInfo::SharedCtor() {
  _cached_size_ = 0;
  stbaseinfo_ = NULL;
  stquestinfo_ = NULL;
  stiteminfo_ = NULL;
  stfriendinfo_ = NULL;
  stmailinfo_ = NULL;
  streserved1_ = NULL;
  streserved2_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GameLoginInfo::~GameLoginInfo() {
  SharedDtor();
}

void GameLoginInfo::SharedDtor() {
  if (this != default_instance_) {
    delete stbaseinfo_;
    delete stquestinfo_;
    delete stiteminfo_;
    delete stfriendinfo_;
    delete stmailinfo_;
    delete streserved1_;
    delete streserved2_;
  }
}

void GameLoginInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GameLoginInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameLoginInfo_descriptor_;
}

const GameLoginInfo& GameLoginInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

GameLoginInfo* GameLoginInfo::default_instance_ = NULL;

GameLoginInfo* GameLoginInfo::New() const {
  return new GameLoginInfo;
}

void GameLoginInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stbaseinfo()) {
      if (stbaseinfo_ != NULL) stbaseinfo_->::BASEDBINFO::Clear();
    }
    if (has_stquestinfo()) {
      if (stquestinfo_ != NULL) stquestinfo_->::QUESTDBINFO::Clear();
    }
    if (has_stiteminfo()) {
      if (stiteminfo_ != NULL) stiteminfo_->::ITEMDBINFO::Clear();
    }
    if (has_stfriendinfo()) {
      if (stfriendinfo_ != NULL) stfriendinfo_->::FRIENDDBINFO::Clear();
    }
    if (has_stmailinfo()) {
      if (stmailinfo_ != NULL) stmailinfo_->::MAILDBINFO::Clear();
    }
    if (has_streserved1()) {
      if (streserved1_ != NULL) streserved1_->::RESERVED1DBINFO::Clear();
    }
    if (has_streserved2()) {
      if (streserved2_ != NULL) streserved2_->::RESERVED2DBINFO::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GameLoginInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .BASEDBINFO stBaseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbaseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stQuestInfo;
        break;
      }

      // optional .QUESTDBINFO stQuestInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stQuestInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stquestinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stItemInfo;
        break;
      }

      // optional .ITEMDBINFO stItemInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stiteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stFriendInfo;
        break;
      }

      // optional .FRIENDDBINFO stFriendInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stFriendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stfriendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stMailInfo;
        break;
      }

      // optional .MAILDBINFO stMailInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stMailInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stmailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stReserved1;
        break;
      }

      // optional .RESERVED1DBINFO stReserved1 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stReserved1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streserved1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stReserved2;
        break;
      }

      // optional .RESERVED2DBINFO stReserved2 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stReserved2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streserved2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GameLoginInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .BASEDBINFO stBaseInfo = 1;
  if (has_stbaseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stbaseinfo(), output);
  }

  // optional .QUESTDBINFO stQuestInfo = 2;
  if (has_stquestinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stquestinfo(), output);
  }

  // optional .ITEMDBINFO stItemInfo = 3;
  if (has_stiteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stiteminfo(), output);
  }

  // optional .FRIENDDBINFO stFriendInfo = 4;
  if (has_stfriendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stfriendinfo(), output);
  }

  // optional .MAILDBINFO stMailInfo = 5;
  if (has_stmailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stmailinfo(), output);
  }

  // optional .RESERVED1DBINFO stReserved1 = 6;
  if (has_streserved1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->streserved1(), output);
  }

  // optional .RESERVED2DBINFO stReserved2 = 7;
  if (has_streserved2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->streserved2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GameLoginInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .BASEDBINFO stBaseInfo = 1;
  if (has_stbaseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stbaseinfo(), target);
  }

  // optional .QUESTDBINFO stQuestInfo = 2;
  if (has_stquestinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stquestinfo(), target);
  }

  // optional .ITEMDBINFO stItemInfo = 3;
  if (has_stiteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stiteminfo(), target);
  }

  // optional .FRIENDDBINFO stFriendInfo = 4;
  if (has_stfriendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stfriendinfo(), target);
  }

  // optional .MAILDBINFO stMailInfo = 5;
  if (has_stmailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stmailinfo(), target);
  }

  // optional .RESERVED1DBINFO stReserved1 = 6;
  if (has_streserved1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->streserved1(), target);
  }

  // optional .RESERVED2DBINFO stReserved2 = 7;
  if (has_streserved2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->streserved2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GameLoginInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .BASEDBINFO stBaseInfo = 1;
    if (has_stbaseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbaseinfo());
    }

    // optional .QUESTDBINFO stQuestInfo = 2;
    if (has_stquestinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stquestinfo());
    }

    // optional .ITEMDBINFO stItemInfo = 3;
    if (has_stiteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stiteminfo());
    }

    // optional .FRIENDDBINFO stFriendInfo = 4;
    if (has_stfriendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stfriendinfo());
    }

    // optional .MAILDBINFO stMailInfo = 5;
    if (has_stmailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stmailinfo());
    }

    // optional .RESERVED1DBINFO stReserved1 = 6;
    if (has_streserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streserved1());
    }

    // optional .RESERVED2DBINFO stReserved2 = 7;
    if (has_streserved2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streserved2());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GameLoginInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GameLoginInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GameLoginInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GameLoginInfo::MergeFrom(const GameLoginInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stbaseinfo()) {
      mutable_stbaseinfo()->::BASEDBINFO::MergeFrom(from.stbaseinfo());
    }
    if (from.has_stquestinfo()) {
      mutable_stquestinfo()->::QUESTDBINFO::MergeFrom(from.stquestinfo());
    }
    if (from.has_stiteminfo()) {
      mutable_stiteminfo()->::ITEMDBINFO::MergeFrom(from.stiteminfo());
    }
    if (from.has_stfriendinfo()) {
      mutable_stfriendinfo()->::FRIENDDBINFO::MergeFrom(from.stfriendinfo());
    }
    if (from.has_stmailinfo()) {
      mutable_stmailinfo()->::MAILDBINFO::MergeFrom(from.stmailinfo());
    }
    if (from.has_streserved1()) {
      mutable_streserved1()->::RESERVED1DBINFO::MergeFrom(from.streserved1());
    }
    if (from.has_streserved2()) {
      mutable_streserved2()->::RESERVED2DBINFO::MergeFrom(from.streserved2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GameLoginInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GameLoginInfo::CopyFrom(const GameLoginInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GameLoginInfo::IsInitialized() const {

  return true;
}

void GameLoginInfo::Swap(GameLoginInfo* other) {
  if (other != this) {
    std::swap(stbaseinfo_, other->stbaseinfo_);
    std::swap(stquestinfo_, other->stquestinfo_);
    std::swap(stiteminfo_, other->stiteminfo_);
    std::swap(stfriendinfo_, other->stfriendinfo_);
    std::swap(stmailinfo_, other->stmailinfo_);
    std::swap(streserved1_, other->streserved1_);
    std::swap(streserved2_, other->streserved2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GameLoginInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GameLoginInfo_descriptor_;
  metadata.reflection = GameLoginInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LoginServer_Request::kStRoleIDFieldNumber;
const int Zone_LoginServer_Request::kULoginReasonFieldNumber;
const int Zone_LoginServer_Request::kUClientVersionFieldNumber;
const int Zone_LoginServer_Request::kStrSessionKeyFieldNumber;
const int Zone_LoginServer_Request::kStrNickNameFieldNumber;
const int Zone_LoginServer_Request::kStrChannelFieldNumber;
const int Zone_LoginServer_Request::kIRealNameStatFieldNumber;
const int Zone_LoginServer_Request::kStrAccountFieldNumber;
const int Zone_LoginServer_Request::kStrDeviceIDFieldNumber;
const int Zone_LoginServer_Request::kBIsNewFieldNumber;
#endif  // !_MSC_VER

Zone_LoginServer_Request::Zone_LoginServer_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LoginServer_Request::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_LoginServer_Request::Zone_LoginServer_Request(const Zone_LoginServer_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LoginServer_Request::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  uloginreason_ = 0u;
  uclientversion_ = 0u;
  strsessionkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strchannel_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  irealnamestat_ = 0;
  straccount_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  strdeviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bisnew_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LoginServer_Request::~Zone_LoginServer_Request() {
  SharedDtor();
}

void Zone_LoginServer_Request::SharedDtor() {
  if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
    delete strsessionkey_;
  }
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
    delete strchannel_;
  }
  if (straccount_ != &::google::protobuf::internal::kEmptyString) {
    delete straccount_;
  }
  if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete strdeviceid_;
  }
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void Zone_LoginServer_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LoginServer_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LoginServer_Request_descriptor_;
}

const Zone_LoginServer_Request& Zone_LoginServer_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_LoginServer_Request* Zone_LoginServer_Request::default_instance_ = NULL;

Zone_LoginServer_Request* Zone_LoginServer_Request::New() const {
  return new Zone_LoginServer_Request;
}

void Zone_LoginServer_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    uloginreason_ = 0u;
    uclientversion_ = 0u;
    if (has_strsessionkey()) {
      if (strsessionkey_ != &::google::protobuf::internal::kEmptyString) {
        strsessionkey_->clear();
      }
    }
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    if (has_strchannel()) {
      if (strchannel_ != &::google::protobuf::internal::kEmptyString) {
        strchannel_->clear();
      }
    }
    irealnamestat_ = 0;
    if (has_straccount()) {
      if (straccount_ != &::google::protobuf::internal::kEmptyString) {
        straccount_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_strdeviceid()) {
      if (strdeviceid_ != &::google::protobuf::internal::kEmptyString) {
        strdeviceid_->clear();
      }
    }
    bisnew_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LoginServer_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uLoginReason;
        break;
      }

      // optional uint32 uLoginReason = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uLoginReason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uloginreason_)));
          set_has_uloginreason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uClientVersion;
        break;
      }

      // optional uint32 uClientVersion = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uClientVersion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uclientversion_)));
          set_has_uclientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strSessionKey;
        break;
      }

      // optional string strSessionKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strSessionKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strsessionkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strsessionkey().data(), this->strsessionkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strChannel;
        break;
      }

      // optional string strChannel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strChannel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strchannel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strchannel().data(), this->strchannel().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iRealNameStat;
        break;
      }

      // optional int32 iRealNameStat = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRealNameStat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irealnamestat_)));
          set_has_irealnamestat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_strAccount;
        break;
      }

      // optional string strAccount = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strAccount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_straccount()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->straccount().data(), this->straccount().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_strDeviceID;
        break;
      }

      // optional string strDeviceID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strDeviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strdeviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strdeviceid().data(), this->strdeviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bIsNew;
        break;
      }

      // optional bool bIsNew = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsNew:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisnew_)));
          set_has_bisnew();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LoginServer_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional uint32 uLoginReason = 3;
  if (has_uloginreason()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uloginreason(), output);
  }

  // optional uint32 uClientVersion = 4;
  if (has_uclientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uclientversion(), output);
  }

  // optional string strSessionKey = 5;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strsessionkey(), output);
  }

  // optional string strNickName = 6;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strnickname(), output);
  }

  // optional string strChannel = 7;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->strchannel(), output);
  }

  // optional int32 iRealNameStat = 8;
  if (has_irealnamestat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->irealnamestat(), output);
  }

  // optional string strAccount = 9;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->straccount(), output);
  }

  // optional string strDeviceID = 10;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->strdeviceid(), output);
  }

  // optional bool bIsNew = 11;
  if (has_bisnew()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->bisnew(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LoginServer_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional uint32 uLoginReason = 3;
  if (has_uloginreason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uloginreason(), target);
  }

  // optional uint32 uClientVersion = 4;
  if (has_uclientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uclientversion(), target);
  }

  // optional string strSessionKey = 5;
  if (has_strsessionkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strsessionkey().data(), this->strsessionkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strsessionkey(), target);
  }

  // optional string strNickName = 6;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strnickname(), target);
  }

  // optional string strChannel = 7;
  if (has_strchannel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strchannel().data(), this->strchannel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->strchannel(), target);
  }

  // optional int32 iRealNameStat = 8;
  if (has_irealnamestat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->irealnamestat(), target);
  }

  // optional string strAccount = 9;
  if (has_straccount()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->straccount().data(), this->straccount().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->straccount(), target);
  }

  // optional string strDeviceID = 10;
  if (has_strdeviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strdeviceid().data(), this->strdeviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->strdeviceid(), target);
  }

  // optional bool bIsNew = 11;
  if (has_bisnew()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->bisnew(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LoginServer_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional uint32 uLoginReason = 3;
    if (has_uloginreason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uloginreason());
    }

    // optional uint32 uClientVersion = 4;
    if (has_uclientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uclientversion());
    }

    // optional string strSessionKey = 5;
    if (has_strsessionkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strsessionkey());
    }

    // optional string strNickName = 6;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional string strChannel = 7;
    if (has_strchannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strchannel());
    }

    // optional int32 iRealNameStat = 8;
    if (has_irealnamestat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irealnamestat());
    }

    // optional string strAccount = 9;
    if (has_straccount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->straccount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string strDeviceID = 10;
    if (has_strdeviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strdeviceid());
    }

    // optional bool bIsNew = 11;
    if (has_bisnew()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LoginServer_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LoginServer_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LoginServer_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LoginServer_Request::MergeFrom(const Zone_LoginServer_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_uloginreason()) {
      set_uloginreason(from.uloginreason());
    }
    if (from.has_uclientversion()) {
      set_uclientversion(from.uclientversion());
    }
    if (from.has_strsessionkey()) {
      set_strsessionkey(from.strsessionkey());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_strchannel()) {
      set_strchannel(from.strchannel());
    }
    if (from.has_irealnamestat()) {
      set_irealnamestat(from.irealnamestat());
    }
    if (from.has_straccount()) {
      set_straccount(from.straccount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strdeviceid()) {
      set_strdeviceid(from.strdeviceid());
    }
    if (from.has_bisnew()) {
      set_bisnew(from.bisnew());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LoginServer_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LoginServer_Request::CopyFrom(const Zone_LoginServer_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LoginServer_Request::IsInitialized() const {

  return true;
}

void Zone_LoginServer_Request::Swap(Zone_LoginServer_Request* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(uloginreason_, other->uloginreason_);
    std::swap(uclientversion_, other->uclientversion_);
    std::swap(strsessionkey_, other->strsessionkey_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(strchannel_, other->strchannel_);
    std::swap(irealnamestat_, other->irealnamestat_);
    std::swap(straccount_, other->straccount_);
    std::swap(strdeviceid_, other->strdeviceid_);
    std::swap(bisnew_, other->bisnew_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LoginServer_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LoginServer_Request_descriptor_;
  metadata.reflection = Zone_LoginServer_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LoginServer_Response::kIResultFieldNumber;
const int Zone_LoginServer_Response::kUinFieldNumber;
const int Zone_LoginServer_Response::kIZoneIDFieldNumber;
const int Zone_LoginServer_Response::kIWorldIDFieldNumber;
const int Zone_LoginServer_Response::kStLoginInfoFieldNumber;
#endif  // !_MSC_VER

Zone_LoginServer_Response::Zone_LoginServer_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LoginServer_Response::InitAsDefaultInstance() {
  stlogininfo_ = const_cast< ::GameLoginInfo*>(&::GameLoginInfo::default_instance());
}

Zone_LoginServer_Response::Zone_LoginServer_Response(const Zone_LoginServer_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LoginServer_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  izoneid_ = 0;
  iworldid_ = 0;
  stlogininfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LoginServer_Response::~Zone_LoginServer_Response() {
  SharedDtor();
}

void Zone_LoginServer_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stlogininfo_;
  }
}

void Zone_LoginServer_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LoginServer_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LoginServer_Response_descriptor_;
}

const Zone_LoginServer_Response& Zone_LoginServer_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_LoginServer_Response* Zone_LoginServer_Response::default_instance_ = NULL;

Zone_LoginServer_Response* Zone_LoginServer_Response::New() const {
  return new Zone_LoginServer_Response;
}

void Zone_LoginServer_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    izoneid_ = 0;
    iworldid_ = 0;
    if (has_stlogininfo()) {
      if (stlogininfo_ != NULL) stlogininfo_->::GameLoginInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LoginServer_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iWorldID;
        break;
      }

      // optional int32 iWorldID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWorldID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_stLoginInfo;
        break;
      }

      // optional .GameLoginInfo stLoginInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLoginInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stlogininfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LoginServer_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iZoneID = 3;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->izoneid(), output);
  }

  // optional int32 iWorldID = 4;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iworldid(), output);
  }

  // optional .GameLoginInfo stLoginInfo = 5;
  if (has_stlogininfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stlogininfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LoginServer_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iZoneID = 3;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->izoneid(), target);
  }

  // optional int32 iWorldID = 4;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iworldid(), target);
  }

  // optional .GameLoginInfo stLoginInfo = 5;
  if (has_stlogininfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stlogininfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LoginServer_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iZoneID = 3;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional int32 iWorldID = 4;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional .GameLoginInfo stLoginInfo = 5;
    if (has_stlogininfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stlogininfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LoginServer_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LoginServer_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LoginServer_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LoginServer_Response::MergeFrom(const Zone_LoginServer_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_stlogininfo()) {
      mutable_stlogininfo()->::GameLoginInfo::MergeFrom(from.stlogininfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LoginServer_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LoginServer_Response::CopyFrom(const Zone_LoginServer_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LoginServer_Response::IsInitialized() const {

  return true;
}

void Zone_LoginServer_Response::Swap(Zone_LoginServer_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uin_, other->uin_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(iworldid_, other->iworldid_);
    std::swap(stlogininfo_, other->stlogininfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LoginServer_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LoginServer_Response_descriptor_;
  metadata.reflection = Zone_LoginServer_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Logout_Notify::kStRoleIDFieldNumber;
#endif  // !_MSC_VER

Zone_Logout_Notify::Zone_Logout_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Logout_Notify::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_Logout_Notify::Zone_Logout_Notify(const Zone_Logout_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Logout_Notify::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Logout_Notify::~Zone_Logout_Notify() {
  SharedDtor();
}

void Zone_Logout_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void Zone_Logout_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Logout_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Logout_Notify_descriptor_;
}

const Zone_Logout_Notify& Zone_Logout_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_Logout_Notify* Zone_Logout_Notify::default_instance_ = NULL;

Zone_Logout_Notify* Zone_Logout_Notify::New() const {
  return new Zone_Logout_Notify;
}

void Zone_Logout_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Logout_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Logout_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Logout_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Logout_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Logout_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Logout_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Logout_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Logout_Notify::MergeFrom(const Zone_Logout_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Logout_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Logout_Notify::CopyFrom(const Zone_Logout_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Logout_Notify::IsInitialized() const {

  return true;
}

void Zone_Logout_Notify::Swap(Zone_Logout_Notify* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Logout_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Logout_Notify_descriptor_;
  metadata.reflection = Zone_Logout_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetFriendInfo_Request::kUcReqTypeFieldNumber;
const int Zone_GetFriendInfo_Request::kUinFieldNumber;
const int Zone_GetFriendInfo_Request::kFriendUinFieldNumber;
#endif  // !_MSC_VER

Zone_GetFriendInfo_Request::Zone_GetFriendInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetFriendInfo_Request::InitAsDefaultInstance() {
}

Zone_GetFriendInfo_Request::Zone_GetFriendInfo_Request(const Zone_GetFriendInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ucreqtype_ = 0u;
  uin_ = 0u;
  friend_uin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetFriendInfo_Request::~Zone_GetFriendInfo_Request() {
  SharedDtor();
}

void Zone_GetFriendInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetFriendInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetFriendInfo_Request_descriptor_;
}

const Zone_GetFriendInfo_Request& Zone_GetFriendInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetFriendInfo_Request* Zone_GetFriendInfo_Request::default_instance_ = NULL;

Zone_GetFriendInfo_Request* Zone_GetFriendInfo_Request::New() const {
  return new Zone_GetFriendInfo_Request;
}

void Zone_GetFriendInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ucreqtype_ = 0u;
    uin_ = 0u;
    friend_uin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetFriendInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 ucReqType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ucreqtype_)));
          set_has_ucreqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_friend_uin;
        break;
      }

      // optional uint32 friend_uin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_friend_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &friend_uin_)));
          set_has_friend_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetFriendInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 ucReqType = 1;
  if (has_ucreqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ucreqtype(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional uint32 friend_uin = 3;
  if (has_friend_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->friend_uin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetFriendInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 ucReqType = 1;
  if (has_ucreqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ucreqtype(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional uint32 friend_uin = 3;
  if (has_friend_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->friend_uin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetFriendInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 ucReqType = 1;
    if (has_ucreqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ucreqtype());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 friend_uin = 3;
    if (has_friend_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->friend_uin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetFriendInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetFriendInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetFriendInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetFriendInfo_Request::MergeFrom(const Zone_GetFriendInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ucreqtype()) {
      set_ucreqtype(from.ucreqtype());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_friend_uin()) {
      set_friend_uin(from.friend_uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetFriendInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Request::CopyFrom(const Zone_GetFriendInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetFriendInfo_Request::IsInitialized() const {

  return true;
}

void Zone_GetFriendInfo_Request::Swap(Zone_GetFriendInfo_Request* other) {
  if (other != this) {
    std::swap(ucreqtype_, other->ucreqtype_);
    std::swap(uin_, other->uin_);
    std::swap(friend_uin_, other->friend_uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetFriendInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetFriendInfo_Request_descriptor_;
  metadata.reflection = Zone_GetFriendInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetFriendInfo_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_GetFriendInfo_Response::Zone_GetFriendInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetFriendInfo_Response::InitAsDefaultInstance() {
}

Zone_GetFriendInfo_Response::Zone_GetFriendInfo_Response(const Zone_GetFriendInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetFriendInfo_Response::~Zone_GetFriendInfo_Response() {
  SharedDtor();
}

void Zone_GetFriendInfo_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetFriendInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetFriendInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetFriendInfo_Response_descriptor_;
}

const Zone_GetFriendInfo_Response& Zone_GetFriendInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetFriendInfo_Response* Zone_GetFriendInfo_Response::default_instance_ = NULL;

Zone_GetFriendInfo_Response* Zone_GetFriendInfo_Response::New() const {
  return new Zone_GetFriendInfo_Response;
}

void Zone_GetFriendInfo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetFriendInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetFriendInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetFriendInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetFriendInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetFriendInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetFriendInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetFriendInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetFriendInfo_Response::MergeFrom(const Zone_GetFriendInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetFriendInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetFriendInfo_Response::CopyFrom(const Zone_GetFriendInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetFriendInfo_Response::IsInitialized() const {

  return true;
}

void Zone_GetFriendInfo_Response::Swap(Zone_GetFriendInfo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetFriendInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetFriendInfo_Response_descriptor_;
  metadata.reflection = Zone_GetFriendInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_OnlineRole_Request::kIWorldIDFieldNumber;
const int Zone_OnlineRole_Request::kIZoneIDFieldNumber;
const int Zone_OnlineRole_Request::kIRoleNumFieldNumber;
const int Zone_OnlineRole_Request::kStrRecordTimeFieldNumber;
#endif  // !_MSC_VER

Zone_OnlineRole_Request::Zone_OnlineRole_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_OnlineRole_Request::InitAsDefaultInstance() {
}

Zone_OnlineRole_Request::Zone_OnlineRole_Request(const Zone_OnlineRole_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_OnlineRole_Request::SharedCtor() {
  _cached_size_ = 0;
  iworldid_ = 0;
  izoneid_ = 0;
  irolenum_ = 0;
  strrecordtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_OnlineRole_Request::~Zone_OnlineRole_Request() {
  SharedDtor();
}

void Zone_OnlineRole_Request::SharedDtor() {
  if (strrecordtime_ != &::google::protobuf::internal::kEmptyString) {
    delete strrecordtime_;
  }
  if (this != default_instance_) {
  }
}

void Zone_OnlineRole_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_OnlineRole_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_OnlineRole_Request_descriptor_;
}

const Zone_OnlineRole_Request& Zone_OnlineRole_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_OnlineRole_Request* Zone_OnlineRole_Request::default_instance_ = NULL;

Zone_OnlineRole_Request* Zone_OnlineRole_Request::New() const {
  return new Zone_OnlineRole_Request;
}

void Zone_OnlineRole_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iworldid_ = 0;
    izoneid_ = 0;
    irolenum_ = 0;
    if (has_strrecordtime()) {
      if (strrecordtime_ != &::google::protobuf::internal::kEmptyString) {
        strrecordtime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_OnlineRole_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iWorldID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iworldid_)));
          set_has_iworldid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iRoleNum;
        break;
      }

      // optional int32 iRoleNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRoleNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irolenum_)));
          set_has_irolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strRecordTime;
        break;
      }

      // optional string strRecordTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strRecordTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strrecordtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strrecordtime().data(), this->strrecordtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_OnlineRole_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iworldid(), output);
  }

  // optional int32 iZoneID = 2;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->izoneid(), output);
  }

  // optional int32 iRoleNum = 3;
  if (has_irolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->irolenum(), output);
  }

  // optional string strRecordTime = 4;
  if (has_strrecordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordtime().data(), this->strrecordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strrecordtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_OnlineRole_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iWorldID = 1;
  if (has_iworldid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iworldid(), target);
  }

  // optional int32 iZoneID = 2;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->izoneid(), target);
  }

  // optional int32 iRoleNum = 3;
  if (has_irolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->irolenum(), target);
  }

  // optional string strRecordTime = 4;
  if (has_strrecordtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strrecordtime().data(), this->strrecordtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strrecordtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_OnlineRole_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iWorldID = 1;
    if (has_iworldid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iworldid());
    }

    // optional int32 iZoneID = 2;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional int32 iRoleNum = 3;
    if (has_irolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irolenum());
    }

    // optional string strRecordTime = 4;
    if (has_strrecordtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strrecordtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_OnlineRole_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_OnlineRole_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_OnlineRole_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_OnlineRole_Request::MergeFrom(const Zone_OnlineRole_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iworldid()) {
      set_iworldid(from.iworldid());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_irolenum()) {
      set_irolenum(from.irolenum());
    }
    if (from.has_strrecordtime()) {
      set_strrecordtime(from.strrecordtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_OnlineRole_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_OnlineRole_Request::CopyFrom(const Zone_OnlineRole_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_OnlineRole_Request::IsInitialized() const {

  return true;
}

void Zone_OnlineRole_Request::Swap(Zone_OnlineRole_Request* other) {
  if (other != this) {
    std::swap(iworldid_, other->iworldid_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(irolenum_, other->irolenum_);
    std::swap(strrecordtime_, other->strrecordtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_OnlineRole_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_OnlineRole_Request_descriptor_;
  metadata.reflection = Zone_OnlineRole_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LoginServer_Notify::kStRoleIDFieldNumber;
const int Zone_LoginServer_Notify::kIZoneIDFieldNumber;
#endif  // !_MSC_VER

Zone_LoginServer_Notify::Zone_LoginServer_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LoginServer_Notify::InitAsDefaultInstance() {
  stroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_LoginServer_Notify::Zone_LoginServer_Notify(const Zone_LoginServer_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LoginServer_Notify::SharedCtor() {
  _cached_size_ = 0;
  stroleid_ = NULL;
  izoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LoginServer_Notify::~Zone_LoginServer_Notify() {
  SharedDtor();
}

void Zone_LoginServer_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stroleid_;
  }
}

void Zone_LoginServer_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LoginServer_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LoginServer_Notify_descriptor_;
}

const Zone_LoginServer_Notify& Zone_LoginServer_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_LoginServer_Notify* Zone_LoginServer_Notify::default_instance_ = NULL;

Zone_LoginServer_Notify* Zone_LoginServer_Notify::New() const {
  return new Zone_LoginServer_Notify;
}

void Zone_LoginServer_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stroleid()) {
      if (stroleid_ != NULL) stroleid_->::RoleID::Clear();
    }
    izoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LoginServer_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RoleID stRoleID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LoginServer_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stroleid(), output);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->izoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LoginServer_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RoleID stRoleID = 1;
  if (has_stroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stroleid(), target);
  }

  // optional int32 iZoneID = 4;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->izoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LoginServer_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RoleID stRoleID = 1;
    if (has_stroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stroleid());
    }

    // optional int32 iZoneID = 4;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LoginServer_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LoginServer_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LoginServer_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LoginServer_Notify::MergeFrom(const Zone_LoginServer_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stroleid()) {
      mutable_stroleid()->::RoleID::MergeFrom(from.stroleid());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LoginServer_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LoginServer_Notify::CopyFrom(const Zone_LoginServer_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LoginServer_Notify::IsInitialized() const {

  return true;
}

void Zone_LoginServer_Notify::Swap(Zone_LoginServer_Notify* other) {
  if (other != this) {
    std::swap(stroleid_, other->stroleid_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LoginServer_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LoginServer_Notify_descriptor_;
  metadata.reflection = Zone_LoginServer_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RepOpera_Request::kETypeFieldNumber;
const int Zone_RepOpera_Request::kIItemIDFieldNumber;
const int Zone_RepOpera_Request::kIItemNumFieldNumber;
const int Zone_RepOpera_Request::kUToUinFieldNumber;
const int Zone_RepOpera_Request::kStrPhoneNumFieldNumber;
#endif  // !_MSC_VER

Zone_RepOpera_Request::Zone_RepOpera_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RepOpera_Request::InitAsDefaultInstance() {
}

Zone_RepOpera_Request::Zone_RepOpera_Request(const Zone_RepOpera_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RepOpera_Request::SharedCtor() {
  _cached_size_ = 0;
  etype_ = 0;
  iitemid_ = 0;
  iitemnum_ = 0;
  utouin_ = 0u;
  strphonenum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RepOpera_Request::~Zone_RepOpera_Request() {
  SharedDtor();
}

void Zone_RepOpera_Request::SharedDtor() {
  if (strphonenum_ != &::google::protobuf::internal::kEmptyString) {
    delete strphonenum_;
  }
  if (this != default_instance_) {
  }
}

void Zone_RepOpera_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RepOpera_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RepOpera_Request_descriptor_;
}

const Zone_RepOpera_Request& Zone_RepOpera_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_RepOpera_Request* Zone_RepOpera_Request::default_instance_ = NULL;

Zone_RepOpera_Request* Zone_RepOpera_Request::New() const {
  return new Zone_RepOpera_Request;
}

void Zone_RepOpera_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etype_ = 0;
    iitemid_ = 0;
    iitemnum_ = 0;
    utouin_ = 0u;
    if (has_strphonenum()) {
      if (strphonenum_ != &::google::protobuf::internal::kEmptyString) {
        strphonenum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RepOpera_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReqOperaType_IsValid(value)) {
            set_etype(static_cast< ::ReqOperaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iItemID;
        break;
      }

      // optional int32 iItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iItemNum;
        break;
      }

      // optional int32 iItemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemnum_)));
          set_has_iitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uToUin;
        break;
      }

      // optional uint32 uToUin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uToUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utouin_)));
          set_has_utouin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strPhoneNum;
        break;
      }

      // optional string strPhoneNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPhoneNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strphonenum()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strphonenum().data(), this->strphonenum().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RepOpera_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etype(), output);
  }

  // optional int32 iItemID = 2;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iitemid(), output);
  }

  // optional int32 iItemNum = 3;
  if (has_iitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iitemnum(), output);
  }

  // optional uint32 uToUin = 4;
  if (has_utouin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->utouin(), output);
  }

  // optional string strPhoneNum = 5;
  if (has_strphonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphonenum().data(), this->strphonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strphonenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RepOpera_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etype(), target);
  }

  // optional int32 iItemID = 2;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iitemid(), target);
  }

  // optional int32 iItemNum = 3;
  if (has_iitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iitemnum(), target);
  }

  // optional uint32 uToUin = 4;
  if (has_utouin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->utouin(), target);
  }

  // optional string strPhoneNum = 5;
  if (has_strphonenum()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strphonenum().data(), this->strphonenum().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strphonenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RepOpera_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ReqOperaType eType = 1 [default = REQ_OPERA_TYPE_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional int32 iItemID = 2;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional int32 iItemNum = 3;
    if (has_iitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemnum());
    }

    // optional uint32 uToUin = 4;
    if (has_utouin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utouin());
    }

    // optional string strPhoneNum = 5;
    if (has_strphonenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strphonenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RepOpera_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RepOpera_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RepOpera_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RepOpera_Request::MergeFrom(const Zone_RepOpera_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_iitemnum()) {
      set_iitemnum(from.iitemnum());
    }
    if (from.has_utouin()) {
      set_utouin(from.utouin());
    }
    if (from.has_strphonenum()) {
      set_strphonenum(from.strphonenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RepOpera_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RepOpera_Request::CopyFrom(const Zone_RepOpera_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RepOpera_Request::IsInitialized() const {

  return true;
}

void Zone_RepOpera_Request::Swap(Zone_RepOpera_Request* other) {
  if (other != this) {
    std::swap(etype_, other->etype_);
    std::swap(iitemid_, other->iitemid_);
    std::swap(iitemnum_, other->iitemnum_);
    std::swap(utouin_, other->utouin_);
    std::swap(strphonenum_, other->strphonenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RepOpera_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RepOpera_Request_descriptor_;
  metadata.reflection = Zone_RepOpera_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RepOpera_Response::kIResultFieldNumber;
const int Zone_RepOpera_Response::kETypeFieldNumber;
const int Zone_RepOpera_Response::kIItemIDFieldNumber;
const int Zone_RepOpera_Response::kIItemNumFieldNumber;
const int Zone_RepOpera_Response::kUToUinFieldNumber;
#endif  // !_MSC_VER

Zone_RepOpera_Response::Zone_RepOpera_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RepOpera_Response::InitAsDefaultInstance() {
}

Zone_RepOpera_Response::Zone_RepOpera_Response(const Zone_RepOpera_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RepOpera_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  etype_ = 0;
  iitemid_ = 0;
  iitemnum_ = 0;
  utouin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RepOpera_Response::~Zone_RepOpera_Response() {
  SharedDtor();
}

void Zone_RepOpera_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_RepOpera_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RepOpera_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RepOpera_Response_descriptor_;
}

const Zone_RepOpera_Response& Zone_RepOpera_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_RepOpera_Response* Zone_RepOpera_Response::default_instance_ = NULL;

Zone_RepOpera_Response* Zone_RepOpera_Response::New() const {
  return new Zone_RepOpera_Response;
}

void Zone_RepOpera_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    etype_ = 0;
    iitemid_ = 0;
    iitemnum_ = 0;
    utouin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RepOpera_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eType;
        break;
      }

      // optional .ReqOperaType eType = 2 [default = REQ_OPERA_TYPE_INVALID];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ReqOperaType_IsValid(value)) {
            set_etype(static_cast< ::ReqOperaType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iItemID;
        break;
      }

      // optional int32 iItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iItemNum;
        break;
      }

      // optional int32 iItemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemnum_)));
          set_has_iitemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uToUin;
        break;
      }

      // optional uint32 uToUin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uToUin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &utouin_)));
          set_has_utouin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RepOpera_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .ReqOperaType eType = 2 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  // optional int32 iItemID = 3;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iitemid(), output);
  }

  // optional int32 iItemNum = 4;
  if (has_iitemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iitemnum(), output);
  }

  // optional uint32 uToUin = 5;
  if (has_utouin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->utouin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RepOpera_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .ReqOperaType eType = 2 [default = REQ_OPERA_TYPE_INVALID];
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  // optional int32 iItemID = 3;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iitemid(), target);
  }

  // optional int32 iItemNum = 4;
  if (has_iitemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iitemnum(), target);
  }

  // optional uint32 uToUin = 5;
  if (has_utouin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->utouin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RepOpera_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .ReqOperaType eType = 2 [default = REQ_OPERA_TYPE_INVALID];
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional int32 iItemID = 3;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional int32 iItemNum = 4;
    if (has_iitemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemnum());
    }

    // optional uint32 uToUin = 5;
    if (has_utouin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->utouin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RepOpera_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RepOpera_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RepOpera_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RepOpera_Response::MergeFrom(const Zone_RepOpera_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_iitemnum()) {
      set_iitemnum(from.iitemnum());
    }
    if (from.has_utouin()) {
      set_utouin(from.utouin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RepOpera_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RepOpera_Response::CopyFrom(const Zone_RepOpera_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RepOpera_Response::IsInitialized() const {

  return true;
}

void Zone_RepOpera_Response::Swap(Zone_RepOpera_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(etype_, other->etype_);
    std::swap(iitemid_, other->iitemid_);
    std::swap(iitemnum_, other->iitemnum_);
    std::swap(utouin_, other->utouin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RepOpera_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RepOpera_Response_descriptor_;
  metadata.reflection = Zone_RepOpera_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OneRepSlot::kIChangeChannelFieldNumber;
const int OneRepSlot::kStSlotInfoFieldNumber;
#endif  // !_MSC_VER

OneRepSlot::OneRepSlot()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneRepSlot::InitAsDefaultInstance() {
  stslotinfo_ = const_cast< ::OneSlotInfo*>(&::OneSlotInfo::default_instance());
}

OneRepSlot::OneRepSlot(const OneRepSlot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneRepSlot::SharedCtor() {
  _cached_size_ = 0;
  ichangechannel_ = 0;
  stslotinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneRepSlot::~OneRepSlot() {
  SharedDtor();
}

void OneRepSlot::SharedDtor() {
  if (this != default_instance_) {
    delete stslotinfo_;
  }
}

void OneRepSlot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneRepSlot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneRepSlot_descriptor_;
}

const OneRepSlot& OneRepSlot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

OneRepSlot* OneRepSlot::default_instance_ = NULL;

OneRepSlot* OneRepSlot::New() const {
  return new OneRepSlot;
}

void OneRepSlot::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ichangechannel_ = 0;
    if (has_stslotinfo()) {
      if (stslotinfo_ != NULL) stslotinfo_->::OneSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneRepSlot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OneSlotInfo stSlotInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stslotinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iChangeChannel;
        break;
      }

      // optional int32 iChangeChannel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iChangeChannel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ichangechannel_)));
          set_has_ichangechannel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneRepSlot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OneSlotInfo stSlotInfo = 2;
  if (has_stslotinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stslotinfo(), output);
  }

  // optional int32 iChangeChannel = 3;
  if (has_ichangechannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ichangechannel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneRepSlot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OneSlotInfo stSlotInfo = 2;
  if (has_stslotinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stslotinfo(), target);
  }

  // optional int32 iChangeChannel = 3;
  if (has_ichangechannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ichangechannel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneRepSlot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iChangeChannel = 3;
    if (has_ichangechannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ichangechannel());
    }

    // optional .OneSlotInfo stSlotInfo = 2;
    if (has_stslotinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stslotinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneRepSlot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneRepSlot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneRepSlot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneRepSlot::MergeFrom(const OneRepSlot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ichangechannel()) {
      set_ichangechannel(from.ichangechannel());
    }
    if (from.has_stslotinfo()) {
      mutable_stslotinfo()->::OneSlotInfo::MergeFrom(from.stslotinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneRepSlot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneRepSlot::CopyFrom(const OneRepSlot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneRepSlot::IsInitialized() const {

  return true;
}

void OneRepSlot::Swap(OneRepSlot* other) {
  if (other != this) {
    std::swap(ichangechannel_, other->ichangechannel_);
    std::swap(stslotinfo_, other->stslotinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneRepSlot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneRepSlot_descriptor_;
  metadata.reflection = OneRepSlot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_RepChange_Notify::kStItemsFieldNumber;
#endif  // !_MSC_VER

Zone_RepChange_Notify::Zone_RepChange_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_RepChange_Notify::InitAsDefaultInstance() {
}

Zone_RepChange_Notify::Zone_RepChange_Notify(const Zone_RepChange_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_RepChange_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_RepChange_Notify::~Zone_RepChange_Notify() {
  SharedDtor();
}

void Zone_RepChange_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_RepChange_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_RepChange_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_RepChange_Notify_descriptor_;
}

const Zone_RepChange_Notify& Zone_RepChange_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_RepChange_Notify* Zone_RepChange_Notify::default_instance_ = NULL;

Zone_RepChange_Notify* Zone_RepChange_Notify::New() const {
  return new Zone_RepChange_Notify;
}

void Zone_RepChange_Notify::Clear() {
  stitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_RepChange_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .OneRepSlot stItems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_RepChange_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .OneRepSlot stItems = 1;
  for (int i = 0; i < this->stitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_RepChange_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .OneRepSlot stItems = 1;
  for (int i = 0; i < this->stitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_RepChange_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .OneRepSlot stItems = 1;
  total_size += 1 * this->stitems_size();
  for (int i = 0; i < this->stitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_RepChange_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_RepChange_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_RepChange_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_RepChange_Notify::MergeFrom(const Zone_RepChange_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stitems_.MergeFrom(from.stitems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_RepChange_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_RepChange_Notify::CopyFrom(const Zone_RepChange_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_RepChange_Notify::IsInitialized() const {

  return true;
}

void Zone_RepChange_Notify::Swap(Zone_RepChange_Notify* other) {
  if (other != this) {
    stitems_.Swap(&other->stitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_RepChange_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_RepChange_Notify_descriptor_;
  metadata.reflection = Zone_RepChange_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserResourceChange::kIResTypeFieldNumber;
const int UserResourceChange::kINewResNumFieldNumber;
#endif  // !_MSC_VER

UserResourceChange::UserResourceChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserResourceChange::InitAsDefaultInstance() {
}

UserResourceChange::UserResourceChange(const UserResourceChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserResourceChange::SharedCtor() {
  _cached_size_ = 0;
  irestype_ = 0;
  inewresnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserResourceChange::~UserResourceChange() {
  SharedDtor();
}

void UserResourceChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserResourceChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserResourceChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserResourceChange_descriptor_;
}

const UserResourceChange& UserResourceChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

UserResourceChange* UserResourceChange::default_instance_ = NULL;

UserResourceChange* UserResourceChange::New() const {
  return new UserResourceChange;
}

void UserResourceChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irestype_ = 0;
    inewresnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserResourceChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irestype_)));
          set_has_irestype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNewResNum;
        break;
      }

      // optional int32 iNewResNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNewResNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inewresnum_)));
          set_has_inewresnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserResourceChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResType = 1;
  if (has_irestype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irestype(), output);
  }

  // optional int32 iNewResNum = 2;
  if (has_inewresnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inewresnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserResourceChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResType = 1;
  if (has_irestype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irestype(), target);
  }

  // optional int32 iNewResNum = 2;
  if (has_inewresnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inewresnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserResourceChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResType = 1;
    if (has_irestype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irestype());
    }

    // optional int32 iNewResNum = 2;
    if (has_inewresnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inewresnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserResourceChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserResourceChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserResourceChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserResourceChange::MergeFrom(const UserResourceChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irestype()) {
      set_irestype(from.irestype());
    }
    if (from.has_inewresnum()) {
      set_inewresnum(from.inewresnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserResourceChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserResourceChange::CopyFrom(const UserResourceChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResourceChange::IsInitialized() const {

  return true;
}

void UserResourceChange::Swap(UserResourceChange* other) {
  if (other != this) {
    std::swap(irestype_, other->irestype_);
    std::swap(inewresnum_, other->inewresnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserResourceChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserResourceChange_descriptor_;
  metadata.reflection = UserResourceChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ResourceChange_Notify::kStChangeInfosFieldNumber;
#endif  // !_MSC_VER

Zone_ResourceChange_Notify::Zone_ResourceChange_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ResourceChange_Notify::InitAsDefaultInstance() {
}

Zone_ResourceChange_Notify::Zone_ResourceChange_Notify(const Zone_ResourceChange_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ResourceChange_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ResourceChange_Notify::~Zone_ResourceChange_Notify() {
  SharedDtor();
}

void Zone_ResourceChange_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ResourceChange_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ResourceChange_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ResourceChange_Notify_descriptor_;
}

const Zone_ResourceChange_Notify& Zone_ResourceChange_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ResourceChange_Notify* Zone_ResourceChange_Notify::default_instance_ = NULL;

Zone_ResourceChange_Notify* Zone_ResourceChange_Notify::New() const {
  return new Zone_ResourceChange_Notify;
}

void Zone_ResourceChange_Notify::Clear() {
  stchangeinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ResourceChange_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .UserResourceChange stChangeInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stChangeInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stchangeinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stChangeInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ResourceChange_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .UserResourceChange stChangeInfos = 1;
  for (int i = 0; i < this->stchangeinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stchangeinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ResourceChange_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .UserResourceChange stChangeInfos = 1;
  for (int i = 0; i < this->stchangeinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stchangeinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ResourceChange_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .UserResourceChange stChangeInfos = 1;
  total_size += 1 * this->stchangeinfos_size();
  for (int i = 0; i < this->stchangeinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stchangeinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ResourceChange_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ResourceChange_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ResourceChange_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ResourceChange_Notify::MergeFrom(const Zone_ResourceChange_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stchangeinfos_.MergeFrom(from.stchangeinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ResourceChange_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ResourceChange_Notify::CopyFrom(const Zone_ResourceChange_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ResourceChange_Notify::IsInitialized() const {

  return true;
}

void Zone_ResourceChange_Notify::Swap(Zone_ResourceChange_Notify* other) {
  if (other != this) {
    stchangeinfos_.Swap(&other->stchangeinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ResourceChange_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ResourceChange_Notify_descriptor_;
  metadata.reflection = Zone_ResourceChange_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Chat_Request::kIChannelFieldNumber;
const int Zone_Chat_Request::kStTargetRoleIDFieldNumber;
const int Zone_Chat_Request::kStrMessageFieldNumber;
#endif  // !_MSC_VER

Zone_Chat_Request::Zone_Chat_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Chat_Request::InitAsDefaultInstance() {
  sttargetroleid_ = const_cast< ::RoleID*>(&::RoleID::default_instance());
}

Zone_Chat_Request::Zone_Chat_Request(const Zone_Chat_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Chat_Request::SharedCtor() {
  _cached_size_ = 0;
  ichannel_ = 0;
  sttargetroleid_ = NULL;
  strmessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Chat_Request::~Zone_Chat_Request() {
  SharedDtor();
}

void Zone_Chat_Request::SharedDtor() {
  if (strmessage_ != &::google::protobuf::internal::kEmptyString) {
    delete strmessage_;
  }
  if (this != default_instance_) {
    delete sttargetroleid_;
  }
}

void Zone_Chat_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Chat_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Chat_Request_descriptor_;
}

const Zone_Chat_Request& Zone_Chat_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_Chat_Request* Zone_Chat_Request::default_instance_ = NULL;

Zone_Chat_Request* Zone_Chat_Request::New() const {
  return new Zone_Chat_Request;
}

void Zone_Chat_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ichannel_ = 0;
    if (has_sttargetroleid()) {
      if (sttargetroleid_ != NULL) sttargetroleid_->::RoleID::Clear();
    }
    if (has_strmessage()) {
      if (strmessage_ != &::google::protobuf::internal::kEmptyString) {
        strmessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Chat_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ChatChannelType_IsValid(value)) {
            set_ichannel(static_cast< ::ChatChannelType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stTargetRoleID;
        break;
      }

      // optional .RoleID stTargetRoleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetRoleID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetroleid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_strMessage;
        break;
      }

      // optional string strMessage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strmessage().data(), this->strmessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Chat_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ichannel(), output);
  }

  // optional .RoleID stTargetRoleID = 2;
  if (has_sttargetroleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sttargetroleid(), output);
  }

  // optional string strMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmessage().data(), this->strmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->strmessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Chat_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
  if (has_ichannel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ichannel(), target);
  }

  // optional .RoleID stTargetRoleID = 2;
  if (has_sttargetroleid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sttargetroleid(), target);
  }

  // optional string strMessage = 3;
  if (has_strmessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strmessage().data(), this->strmessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strmessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Chat_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ChatChannelType iChannel = 1 [default = CHAT_CHANNEL_INVALID];
    if (has_ichannel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ichannel());
    }

    // optional .RoleID stTargetRoleID = 2;
    if (has_sttargetroleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetroleid());
    }

    // optional string strMessage = 3;
    if (has_strmessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strmessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Chat_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Chat_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Chat_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Chat_Request::MergeFrom(const Zone_Chat_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ichannel()) {
      set_ichannel(from.ichannel());
    }
    if (from.has_sttargetroleid()) {
      mutable_sttargetroleid()->::RoleID::MergeFrom(from.sttargetroleid());
    }
    if (from.has_strmessage()) {
      set_strmessage(from.strmessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Chat_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Chat_Request::CopyFrom(const Zone_Chat_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Chat_Request::IsInitialized() const {

  return true;
}

void Zone_Chat_Request::Swap(Zone_Chat_Request* other) {
  if (other != this) {
    std::swap(ichannel_, other->ichannel_);
    std::swap(sttargetroleid_, other->sttargetroleid_);
    std::swap(strmessage_, other->strmessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Chat_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Chat_Request_descriptor_;
  metadata.reflection = Zone_Chat_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Chat_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_Chat_Response::Zone_Chat_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Chat_Response::InitAsDefaultInstance() {
}

Zone_Chat_Response::Zone_Chat_Response(const Zone_Chat_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Chat_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Chat_Response::~Zone_Chat_Response() {
  SharedDtor();
}

void Zone_Chat_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_Chat_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Chat_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Chat_Response_descriptor_;
}

const Zone_Chat_Response& Zone_Chat_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_Chat_Response* Zone_Chat_Response::default_instance_ = NULL;

Zone_Chat_Response* Zone_Chat_Response::New() const {
  return new Zone_Chat_Response;
}

void Zone_Chat_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Chat_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Chat_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Chat_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Chat_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Chat_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Chat_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Chat_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Chat_Response::MergeFrom(const Zone_Chat_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Chat_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Chat_Response::CopyFrom(const Zone_Chat_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Chat_Response::IsInitialized() const {

  return true;
}

void Zone_Chat_Response::Swap(Zone_Chat_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Chat_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Chat_Response_descriptor_;
  metadata.reflection = Zone_Chat_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_DoFish_Request::kIFishRoomIDFieldNumber;
#endif  // !_MSC_VER

Zone_DoFish_Request::Zone_DoFish_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_DoFish_Request::InitAsDefaultInstance() {
}

Zone_DoFish_Request::Zone_DoFish_Request(const Zone_DoFish_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_DoFish_Request::SharedCtor() {
  _cached_size_ = 0;
  ifishroomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_DoFish_Request::~Zone_DoFish_Request() {
  SharedDtor();
}

void Zone_DoFish_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_DoFish_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_DoFish_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_DoFish_Request_descriptor_;
}

const Zone_DoFish_Request& Zone_DoFish_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_DoFish_Request* Zone_DoFish_Request::default_instance_ = NULL;

Zone_DoFish_Request* Zone_DoFish_Request::New() const {
  return new Zone_DoFish_Request;
}

void Zone_DoFish_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifishroomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_DoFish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFishRoomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishroomid_)));
          set_has_ifishroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_DoFish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFishRoomID = 1;
  if (has_ifishroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifishroomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_DoFish_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFishRoomID = 1;
  if (has_ifishroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifishroomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_DoFish_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFishRoomID = 1;
    if (has_ifishroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishroomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_DoFish_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_DoFish_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_DoFish_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_DoFish_Request::MergeFrom(const Zone_DoFish_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifishroomid()) {
      set_ifishroomid(from.ifishroomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_DoFish_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_DoFish_Request::CopyFrom(const Zone_DoFish_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_DoFish_Request::IsInitialized() const {

  return true;
}

void Zone_DoFish_Request::Swap(Zone_DoFish_Request* other) {
  if (other != this) {
    std::swap(ifishroomid_, other->ifishroomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_DoFish_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_DoFish_Request_descriptor_;
  metadata.reflection = Zone_DoFish_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_DoFish_Response::kIResultFieldNumber;
const int Zone_DoFish_Response::kIFishRoomIDFieldNumber;
#endif  // !_MSC_VER

Zone_DoFish_Response::Zone_DoFish_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_DoFish_Response::InitAsDefaultInstance() {
}

Zone_DoFish_Response::Zone_DoFish_Response(const Zone_DoFish_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_DoFish_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ifishroomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_DoFish_Response::~Zone_DoFish_Response() {
  SharedDtor();
}

void Zone_DoFish_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_DoFish_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_DoFish_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_DoFish_Response_descriptor_;
}

const Zone_DoFish_Response& Zone_DoFish_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_DoFish_Response* Zone_DoFish_Response::default_instance_ = NULL;

Zone_DoFish_Response* Zone_DoFish_Response::New() const {
  return new Zone_DoFish_Response;
}

void Zone_DoFish_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ifishroomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_DoFish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFishRoomID;
        break;
      }

      // optional int32 iFishRoomID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishRoomID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishroomid_)));
          set_has_ifishroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_DoFish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iFishRoomID = 2;
  if (has_ifishroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifishroomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_DoFish_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iFishRoomID = 2;
  if (has_ifishroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifishroomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_DoFish_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iFishRoomID = 2;
    if (has_ifishroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishroomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_DoFish_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_DoFish_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_DoFish_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_DoFish_Response::MergeFrom(const Zone_DoFish_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ifishroomid()) {
      set_ifishroomid(from.ifishroomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_DoFish_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_DoFish_Response::CopyFrom(const Zone_DoFish_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_DoFish_Response::IsInitialized() const {

  return true;
}

void Zone_DoFish_Response::Swap(Zone_DoFish_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ifishroomid_, other->ifishroomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_DoFish_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_DoFish_Response_descriptor_;
  metadata.reflection = Zone_DoFish_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FormTime_Notify::kBIsBeginFieldNumber;
const int Zone_FormTime_Notify::kLTimeFieldNumber;
#endif  // !_MSC_VER

Zone_FormTime_Notify::Zone_FormTime_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FormTime_Notify::InitAsDefaultInstance() {
}

Zone_FormTime_Notify::Zone_FormTime_Notify(const Zone_FormTime_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FormTime_Notify::SharedCtor() {
  _cached_size_ = 0;
  bisbegin_ = false;
  ltime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FormTime_Notify::~Zone_FormTime_Notify() {
  SharedDtor();
}

void Zone_FormTime_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FormTime_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FormTime_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FormTime_Notify_descriptor_;
}

const Zone_FormTime_Notify& Zone_FormTime_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FormTime_Notify* Zone_FormTime_Notify::default_instance_ = NULL;

Zone_FormTime_Notify* Zone_FormTime_Notify::New() const {
  return new Zone_FormTime_Notify;
}

void Zone_FormTime_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bisbegin_ = false;
    ltime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FormTime_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsBegin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisbegin_)));
          set_has_bisbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lTime;
        break;
      }

      // optional int64 lTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ltime_)));
          set_has_ltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FormTime_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsBegin = 1;
  if (has_bisbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bisbegin(), output);
  }

  // optional int64 lTime = 2;
  if (has_ltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ltime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FormTime_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsBegin = 1;
  if (has_bisbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bisbegin(), target);
  }

  // optional int64 lTime = 2;
  if (has_ltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ltime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FormTime_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsBegin = 1;
    if (has_bisbegin()) {
      total_size += 1 + 1;
    }

    // optional int64 lTime = 2;
    if (has_ltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FormTime_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FormTime_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FormTime_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FormTime_Notify::MergeFrom(const Zone_FormTime_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bisbegin()) {
      set_bisbegin(from.bisbegin());
    }
    if (from.has_ltime()) {
      set_ltime(from.ltime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FormTime_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FormTime_Notify::CopyFrom(const Zone_FormTime_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FormTime_Notify::IsInitialized() const {

  return true;
}

void Zone_FormTime_Notify::Swap(Zone_FormTime_Notify* other) {
  if (other != this) {
    std::swap(bisbegin_, other->bisbegin_);
    std::swap(ltime_, other->ltime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FormTime_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FormTime_Notify_descriptor_;
  metadata.reflection = Zone_FormTime_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SyncTime_Notify::kLServerTimeFieldNumber;
#endif  // !_MSC_VER

Zone_SyncTime_Notify::Zone_SyncTime_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SyncTime_Notify::InitAsDefaultInstance() {
}

Zone_SyncTime_Notify::Zone_SyncTime_Notify(const Zone_SyncTime_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SyncTime_Notify::SharedCtor() {
  _cached_size_ = 0;
  lservertime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SyncTime_Notify::~Zone_SyncTime_Notify() {
  SharedDtor();
}

void Zone_SyncTime_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_SyncTime_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SyncTime_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SyncTime_Notify_descriptor_;
}

const Zone_SyncTime_Notify& Zone_SyncTime_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_SyncTime_Notify* Zone_SyncTime_Notify::default_instance_ = NULL;

Zone_SyncTime_Notify* Zone_SyncTime_Notify::New() const {
  return new Zone_SyncTime_Notify;
}

void Zone_SyncTime_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lservertime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SyncTime_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lServerTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lservertime_)));
          set_has_lservertime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SyncTime_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 lServerTime = 1;
  if (has_lservertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lservertime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SyncTime_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 lServerTime = 1;
  if (has_lservertime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lservertime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SyncTime_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 lServerTime = 1;
    if (has_lservertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lservertime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SyncTime_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SyncTime_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SyncTime_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SyncTime_Notify::MergeFrom(const Zone_SyncTime_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lservertime()) {
      set_lservertime(from.lservertime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SyncTime_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SyncTime_Notify::CopyFrom(const Zone_SyncTime_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SyncTime_Notify::IsInitialized() const {

  return true;
}

void Zone_SyncTime_Notify::Swap(Zone_SyncTime_Notify* other) {
  if (other != this) {
    std::swap(lservertime_, other->lservertime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SyncTime_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SyncTime_Notify_descriptor_;
  metadata.reflection = Zone_SyncTime_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SEATUSERINFO::kISeatFieldNumber;
const int SEATUSERINFO::kUinFieldNumber;
const int SEATUSERINFO::kIGunIDFieldNumber;
const int SEATUSERINFO::kLCoinsFieldNumber;
const int SEATUSERINFO::kLTicketsFieldNumber;
const int SEATUSERINFO::kStrNickNameFieldNumber;
const int SEATUSERINFO::kIGunStyleIDFieldNumber;
const int SEATUSERINFO::kStrPicIDFieldNumber;
const int SEATUSERINFO::kIVIPLevelFieldNumber;
#endif  // !_MSC_VER

SEATUSERINFO::SEATUSERINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SEATUSERINFO::InitAsDefaultInstance() {
}

SEATUSERINFO::SEATUSERINFO(const SEATUSERINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SEATUSERINFO::SharedCtor() {
  _cached_size_ = 0;
  iseat_ = 0;
  uin_ = 0u;
  igunid_ = 0;
  lcoins_ = GOOGLE_LONGLONG(0);
  ltickets_ = GOOGLE_LONGLONG(0);
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  igunstyleid_ = 0;
  strpicid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  iviplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SEATUSERINFO::~SEATUSERINFO() {
  SharedDtor();
}

void SEATUSERINFO::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
    delete strpicid_;
  }
  if (this != default_instance_) {
  }
}

void SEATUSERINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SEATUSERINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SEATUSERINFO_descriptor_;
}

const SEATUSERINFO& SEATUSERINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

SEATUSERINFO* SEATUSERINFO::default_instance_ = NULL;

SEATUSERINFO* SEATUSERINFO::New() const {
  return new SEATUSERINFO;
}

void SEATUSERINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iseat_ = 0;
    uin_ = 0u;
    igunid_ = 0;
    lcoins_ = GOOGLE_LONGLONG(0);
    ltickets_ = GOOGLE_LONGLONG(0);
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    igunstyleid_ = 0;
    if (has_strpicid()) {
      if (strpicid_ != &::google::protobuf::internal::kEmptyString) {
        strpicid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    iviplevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SEATUSERINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iGunID;
        break;
      }

      // optional int32 iGunID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igunid_)));
          set_has_igunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lCoins;
        break;
      }

      // optional int64 lCoins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lcoins_)));
          set_has_lcoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lTickets;
        break;
      }

      // optional int64 lTickets = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lTickets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ltickets_)));
          set_has_ltickets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iGunStyleID;
        break;
      }

      // optional int32 iGunStyleID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGunStyleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igunstyleid_)));
          set_has_igunstyleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_strPicID;
        break;
      }

      // optional string strPicID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strPicID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpicid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strpicid().data(), this->strpicid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_iVIPLevel;
        break;
      }

      // optional int32 iVIPLevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iviplevel_)));
          set_has_iviplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SEATUSERINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iseat(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 iGunID = 3;
  if (has_igunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->igunid(), output);
  }

  // optional int64 lCoins = 4;
  if (has_lcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lcoins(), output);
  }

  // optional string strNickName = 5;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->strnickname(), output);
  }

  // optional int64 lTickets = 6;
  if (has_ltickets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ltickets(), output);
  }

  // optional int32 iGunStyleID = 7;
  if (has_igunstyleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->igunstyleid(), output);
  }

  // optional string strPicID = 8;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->strpicid(), output);
  }

  // optional int32 iVIPLevel = 9;
  if (has_iviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->iviplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SEATUSERINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iseat(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 iGunID = 3;
  if (has_igunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->igunid(), target);
  }

  // optional int64 lCoins = 4;
  if (has_lcoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lcoins(), target);
  }

  // optional string strNickName = 5;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strnickname(), target);
  }

  // optional int64 lTickets = 6;
  if (has_ltickets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ltickets(), target);
  }

  // optional int32 iGunStyleID = 7;
  if (has_igunstyleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->igunstyleid(), target);
  }

  // optional string strPicID = 8;
  if (has_strpicid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strpicid().data(), this->strpicid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->strpicid(), target);
  }

  // optional int32 iVIPLevel = 9;
  if (has_iviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->iviplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SEATUSERINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iSeat = 1;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iGunID = 3;
    if (has_igunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igunid());
    }

    // optional int64 lCoins = 4;
    if (has_lcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lcoins());
    }

    // optional int64 lTickets = 6;
    if (has_ltickets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ltickets());
    }

    // optional string strNickName = 5;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional int32 iGunStyleID = 7;
    if (has_igunstyleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igunstyleid());
    }

    // optional string strPicID = 8;
    if (has_strpicid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strpicid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 iVIPLevel = 9;
    if (has_iviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iviplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SEATUSERINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SEATUSERINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SEATUSERINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SEATUSERINFO::MergeFrom(const SEATUSERINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_igunid()) {
      set_igunid(from.igunid());
    }
    if (from.has_lcoins()) {
      set_lcoins(from.lcoins());
    }
    if (from.has_ltickets()) {
      set_ltickets(from.ltickets());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_igunstyleid()) {
      set_igunstyleid(from.igunstyleid());
    }
    if (from.has_strpicid()) {
      set_strpicid(from.strpicid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_iviplevel()) {
      set_iviplevel(from.iviplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SEATUSERINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SEATUSERINFO::CopyFrom(const SEATUSERINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEATUSERINFO::IsInitialized() const {

  return true;
}

void SEATUSERINFO::Swap(SEATUSERINFO* other) {
  if (other != this) {
    std::swap(iseat_, other->iseat_);
    std::swap(uin_, other->uin_);
    std::swap(igunid_, other->igunid_);
    std::swap(lcoins_, other->lcoins_);
    std::swap(ltickets_, other->ltickets_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(igunstyleid_, other->igunstyleid_);
    std::swap(strpicid_, other->strpicid_);
    std::swap(iviplevel_, other->iviplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SEATUSERINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SEATUSERINFO_descriptor_;
  metadata.reflection = SEATUSERINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SeatUser_Notify::kStUsersFieldNumber;
#endif  // !_MSC_VER

Zone_SeatUser_Notify::Zone_SeatUser_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SeatUser_Notify::InitAsDefaultInstance() {
}

Zone_SeatUser_Notify::Zone_SeatUser_Notify(const Zone_SeatUser_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SeatUser_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SeatUser_Notify::~Zone_SeatUser_Notify() {
  SharedDtor();
}

void Zone_SeatUser_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_SeatUser_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SeatUser_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SeatUser_Notify_descriptor_;
}

const Zone_SeatUser_Notify& Zone_SeatUser_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_SeatUser_Notify* Zone_SeatUser_Notify::default_instance_ = NULL;

Zone_SeatUser_Notify* Zone_SeatUser_Notify::New() const {
  return new Zone_SeatUser_Notify;
}

void Zone_SeatUser_Notify::Clear() {
  stusers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SeatUser_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SEATUSERINFO stUsers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUsers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stusers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stUsers;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SeatUser_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .SEATUSERINFO stUsers = 1;
  for (int i = 0; i < this->stusers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stusers(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SeatUser_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .SEATUSERINFO stUsers = 1;
  for (int i = 0; i < this->stusers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stusers(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SeatUser_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .SEATUSERINFO stUsers = 1;
  total_size += 1 * this->stusers_size();
  for (int i = 0; i < this->stusers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stusers(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SeatUser_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SeatUser_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SeatUser_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SeatUser_Notify::MergeFrom(const Zone_SeatUser_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stusers_.MergeFrom(from.stusers_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SeatUser_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SeatUser_Notify::CopyFrom(const Zone_SeatUser_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SeatUser_Notify::IsInitialized() const {

  return true;
}

void Zone_SeatUser_Notify::Swap(Zone_SeatUser_Notify* other) {
  if (other != this) {
    stusers_.Swap(&other->stusers_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SeatUser_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SeatUser_Notify_descriptor_;
  metadata.reflection = Zone_SeatUser_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FISHINFO::kUUniqIDFieldNumber;
const int FISHINFO::kIFishIDFieldNumber;
const int FISHINFO::kIFishSeqIDFieldNumber;
const int FISHINFO::kITraceIDFieldNumber;
const int FISHINFO::kLBorTimeFieldNumber;
const int FISHINFO::kLDeadTimeFieldNumber;
const int FISHINFO::kCIndexFieldNumber;
#endif  // !_MSC_VER

FISHINFO::FISHINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FISHINFO::InitAsDefaultInstance() {
}

FISHINFO::FISHINFO(const FISHINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FISHINFO::SharedCtor() {
  _cached_size_ = 0;
  uuniqid_ = 0u;
  ifishid_ = 0;
  ifishseqid_ = 0;
  itraceid_ = 0;
  lbortime_ = GOOGLE_LONGLONG(0);
  ldeadtime_ = GOOGLE_LONGLONG(0);
  cindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FISHINFO::~FISHINFO() {
  SharedDtor();
}

void FISHINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FISHINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FISHINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FISHINFO_descriptor_;
}

const FISHINFO& FISHINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

FISHINFO* FISHINFO::default_instance_ = NULL;

FISHINFO* FISHINFO::New() const {
  return new FISHINFO;
}

void FISHINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuniqid_ = 0u;
    ifishid_ = 0;
    ifishseqid_ = 0;
    itraceid_ = 0;
    lbortime_ = GOOGLE_LONGLONG(0);
    ldeadtime_ = GOOGLE_LONGLONG(0);
    cindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FISHINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuniqid_)));
          set_has_uuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFishID;
        break;
      }

      // optional int32 iFishID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishid_)));
          set_has_ifishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFishSeqID;
        break;
      }

      // optional int32 iFishSeqID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishSeqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishseqid_)));
          set_has_ifishseqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iTraceID;
        break;
      }

      // optional int32 iTraceID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTraceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itraceid_)));
          set_has_itraceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lBorTime;
        break;
      }

      // optional int64 lBorTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lBorTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lbortime_)));
          set_has_lbortime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lDeadTime;
        break;
      }

      // optional int64 lDeadTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lDeadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ldeadtime_)));
          set_has_ldeadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cIndex;
        break;
      }

      // optional uint32 cIndex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cindex_)));
          set_has_cindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FISHINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuniqid(), output);
  }

  // optional int32 iFishID = 2;
  if (has_ifishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifishid(), output);
  }

  // optional int32 iFishSeqID = 3;
  if (has_ifishseqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifishseqid(), output);
  }

  // optional int32 iTraceID = 4;
  if (has_itraceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itraceid(), output);
  }

  // optional int64 lBorTime = 5;
  if (has_lbortime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lbortime(), output);
  }

  // optional int64 lDeadTime = 6;
  if (has_ldeadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->ldeadtime(), output);
  }

  // optional uint32 cIndex = 7;
  if (has_cindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->cindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FISHINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuniqid(), target);
  }

  // optional int32 iFishID = 2;
  if (has_ifishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifishid(), target);
  }

  // optional int32 iFishSeqID = 3;
  if (has_ifishseqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifishseqid(), target);
  }

  // optional int32 iTraceID = 4;
  if (has_itraceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itraceid(), target);
  }

  // optional int64 lBorTime = 5;
  if (has_lbortime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lbortime(), target);
  }

  // optional int64 lDeadTime = 6;
  if (has_ldeadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->ldeadtime(), target);
  }

  // optional uint32 cIndex = 7;
  if (has_cindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->cindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FISHINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uUniqID = 1;
    if (has_uuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuniqid());
    }

    // optional int32 iFishID = 2;
    if (has_ifishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishid());
    }

    // optional int32 iFishSeqID = 3;
    if (has_ifishseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishseqid());
    }

    // optional int32 iTraceID = 4;
    if (has_itraceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itraceid());
    }

    // optional int64 lBorTime = 5;
    if (has_lbortime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lbortime());
    }

    // optional int64 lDeadTime = 6;
    if (has_ldeadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ldeadtime());
    }

    // optional uint32 cIndex = 7;
    if (has_cindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FISHINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FISHINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FISHINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FISHINFO::MergeFrom(const FISHINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuniqid()) {
      set_uuniqid(from.uuniqid());
    }
    if (from.has_ifishid()) {
      set_ifishid(from.ifishid());
    }
    if (from.has_ifishseqid()) {
      set_ifishseqid(from.ifishseqid());
    }
    if (from.has_itraceid()) {
      set_itraceid(from.itraceid());
    }
    if (from.has_lbortime()) {
      set_lbortime(from.lbortime());
    }
    if (from.has_ldeadtime()) {
      set_ldeadtime(from.ldeadtime());
    }
    if (from.has_cindex()) {
      set_cindex(from.cindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FISHINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FISHINFO::CopyFrom(const FISHINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FISHINFO::IsInitialized() const {

  return true;
}

void FISHINFO::Swap(FISHINFO* other) {
  if (other != this) {
    std::swap(uuniqid_, other->uuniqid_);
    std::swap(ifishid_, other->ifishid_);
    std::swap(ifishseqid_, other->ifishseqid_);
    std::swap(itraceid_, other->itraceid_);
    std::swap(lbortime_, other->lbortime_);
    std::swap(ldeadtime_, other->ldeadtime_);
    std::swap(cindex_, other->cindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FISHINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FISHINFO_descriptor_;
  metadata.reflection = FISHINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FishInfo_Notify::kStFishesFieldNumber;
#endif  // !_MSC_VER

Zone_FishInfo_Notify::Zone_FishInfo_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FishInfo_Notify::InitAsDefaultInstance() {
}

Zone_FishInfo_Notify::Zone_FishInfo_Notify(const Zone_FishInfo_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FishInfo_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FishInfo_Notify::~Zone_FishInfo_Notify() {
  SharedDtor();
}

void Zone_FishInfo_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FishInfo_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FishInfo_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FishInfo_Notify_descriptor_;
}

const Zone_FishInfo_Notify& Zone_FishInfo_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FishInfo_Notify* Zone_FishInfo_Notify::default_instance_ = NULL;

Zone_FishInfo_Notify* Zone_FishInfo_Notify::New() const {
  return new Zone_FishInfo_Notify;
}

void Zone_FishInfo_Notify::Clear() {
  stfishes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FishInfo_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FISHINFO stFishes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stFishes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stfishes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stFishes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FishInfo_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FISHINFO stFishes = 1;
  for (int i = 0; i < this->stfishes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stfishes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FishInfo_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FISHINFO stFishes = 1;
  for (int i = 0; i < this->stfishes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stfishes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FishInfo_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .FISHINFO stFishes = 1;
  total_size += 1 * this->stfishes_size();
  for (int i = 0; i < this->stfishes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stfishes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FishInfo_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FishInfo_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FishInfo_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FishInfo_Notify::MergeFrom(const Zone_FishInfo_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stfishes_.MergeFrom(from.stfishes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FishInfo_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FishInfo_Notify::CopyFrom(const Zone_FishInfo_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FishInfo_Notify::IsInitialized() const {

  return true;
}

void Zone_FishInfo_Notify::Swap(Zone_FishInfo_Notify* other) {
  if (other != this) {
    stfishes_.Swap(&other->stfishes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FishInfo_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FishInfo_Notify_descriptor_;
  metadata.reflection = Zone_FishInfo_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POS::kIXFieldNumber;
const int POS::kIYFieldNumber;
#endif  // !_MSC_VER

POS::POS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void POS::InitAsDefaultInstance() {
}

POS::POS(const POS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void POS::SharedCtor() {
  _cached_size_ = 0;
  ix_ = 0;
  iy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POS::~POS() {
  SharedDtor();
}

void POS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void POS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POS_descriptor_;
}

const POS& POS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

POS* POS::default_instance_ = NULL;

POS* POS::New() const {
  return new POS;
}

void POS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ix_ = 0;
    iy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iX = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ix_)));
          set_has_ix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iY;
        break;
      }

      // optional int32 iY = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iy_)));
          set_has_iy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void POS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iX = 1;
  if (has_ix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ix(), output);
  }

  // optional int32 iY = 2;
  if (has_iy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iy(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* POS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iX = 1;
  if (has_ix()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ix(), target);
  }

  // optional int32 iY = 2;
  if (has_iy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iy(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int POS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iX = 1;
    if (has_ix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ix());
    }

    // optional int32 iY = 2;
    if (has_iy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iy());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POS::MergeFrom(const POS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ix()) {
      set_ix(from.ix());
    }
    if (from.has_iy()) {
      set_iy(from.iy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POS::CopyFrom(const POS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POS::IsInitialized() const {

  return true;
}

void POS::Swap(POS* other) {
  if (other != this) {
    std::swap(ix_, other->ix_);
    std::swap(iy_, other->iy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POS_descriptor_;
  metadata.reflection = POS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BULLETINFO::kUUniqIDFieldNumber;
const int BULLETINFO::kIGunIDFieldNumber;
const int BULLETINFO::kISeatFieldNumber;
const int BULLETINFO::kStTargetPosFieldNumber;
const int BULLETINFO::kLShootTimeFieldNumber;
const int BULLETINFO::kUFishUniqIDFieldNumber;
const int BULLETINFO::kBIsAimFormFishFieldNumber;
const int BULLETINFO::kIFishIndexFieldNumber;
#endif  // !_MSC_VER

BULLETINFO::BULLETINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BULLETINFO::InitAsDefaultInstance() {
  sttargetpos_ = const_cast< ::POS*>(&::POS::default_instance());
}

BULLETINFO::BULLETINFO(const BULLETINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BULLETINFO::SharedCtor() {
  _cached_size_ = 0;
  uuniqid_ = 0u;
  igunid_ = 0;
  iseat_ = 0;
  sttargetpos_ = NULL;
  lshoottime_ = GOOGLE_LONGLONG(0);
  ufishuniqid_ = 0u;
  bisaimformfish_ = false;
  ifishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BULLETINFO::~BULLETINFO() {
  SharedDtor();
}

void BULLETINFO::SharedDtor() {
  if (this != default_instance_) {
    delete sttargetpos_;
  }
}

void BULLETINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BULLETINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BULLETINFO_descriptor_;
}

const BULLETINFO& BULLETINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

BULLETINFO* BULLETINFO::default_instance_ = NULL;

BULLETINFO* BULLETINFO::New() const {
  return new BULLETINFO;
}

void BULLETINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuniqid_ = 0u;
    igunid_ = 0;
    iseat_ = 0;
    if (has_sttargetpos()) {
      if (sttargetpos_ != NULL) sttargetpos_->::POS::Clear();
    }
    lshoottime_ = GOOGLE_LONGLONG(0);
    ufishuniqid_ = 0u;
    bisaimformfish_ = false;
    ifishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BULLETINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuniqid_)));
          set_has_uuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iGunID;
        break;
      }

      // optional int32 iGunID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igunid_)));
          set_has_igunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iSeat;
        break;
      }

      // optional int32 iSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stTargetPos;
        break;
      }

      // optional .POS stTargetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lShootTime;
        break;
      }

      // optional int64 lShootTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lShootTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lshoottime_)));
          set_has_lshoottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uFishUniqID;
        break;
      }

      // optional uint32 uFishUniqID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bIsAimFormFish;
        break;
      }

      // optional bool bIsAimFormFish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsAimFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisaimformfish_)));
          set_has_bisaimformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BULLETINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuniqid(), output);
  }

  // optional int32 iGunID = 2;
  if (has_igunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->igunid(), output);
  }

  // optional int32 iSeat = 3;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iseat(), output);
  }

  // optional .POS stTargetPos = 4;
  if (has_sttargetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sttargetpos(), output);
  }

  // optional int64 lShootTime = 5;
  if (has_lshoottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lshoottime(), output);
  }

  // optional uint32 uFishUniqID = 6;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ufishuniqid(), output);
  }

  // optional bool bIsAimFormFish = 7;
  if (has_bisaimformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisaimformfish(), output);
  }

  // optional int32 iFishIndex = 8;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ifishindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BULLETINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuniqid(), target);
  }

  // optional int32 iGunID = 2;
  if (has_igunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->igunid(), target);
  }

  // optional int32 iSeat = 3;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iseat(), target);
  }

  // optional .POS stTargetPos = 4;
  if (has_sttargetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sttargetpos(), target);
  }

  // optional int64 lShootTime = 5;
  if (has_lshoottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lshoottime(), target);
  }

  // optional uint32 uFishUniqID = 6;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ufishuniqid(), target);
  }

  // optional bool bIsAimFormFish = 7;
  if (has_bisaimformfish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisaimformfish(), target);
  }

  // optional int32 iFishIndex = 8;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ifishindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BULLETINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uUniqID = 1;
    if (has_uuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuniqid());
    }

    // optional int32 iGunID = 2;
    if (has_igunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igunid());
    }

    // optional int32 iSeat = 3;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

    // optional .POS stTargetPos = 4;
    if (has_sttargetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetpos());
    }

    // optional int64 lShootTime = 5;
    if (has_lshoottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lshoottime());
    }

    // optional uint32 uFishUniqID = 6;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional bool bIsAimFormFish = 7;
    if (has_bisaimformfish()) {
      total_size += 1 + 1;
    }

    // optional int32 iFishIndex = 8;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BULLETINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BULLETINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BULLETINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BULLETINFO::MergeFrom(const BULLETINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuniqid()) {
      set_uuniqid(from.uuniqid());
    }
    if (from.has_igunid()) {
      set_igunid(from.igunid());
    }
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
    if (from.has_sttargetpos()) {
      mutable_sttargetpos()->::POS::MergeFrom(from.sttargetpos());
    }
    if (from.has_lshoottime()) {
      set_lshoottime(from.lshoottime());
    }
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_bisaimformfish()) {
      set_bisaimformfish(from.bisaimformfish());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BULLETINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BULLETINFO::CopyFrom(const BULLETINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BULLETINFO::IsInitialized() const {

  return true;
}

void BULLETINFO::Swap(BULLETINFO* other) {
  if (other != this) {
    std::swap(uuniqid_, other->uuniqid_);
    std::swap(igunid_, other->igunid_);
    std::swap(iseat_, other->iseat_);
    std::swap(sttargetpos_, other->sttargetpos_);
    std::swap(lshoottime_, other->lshoottime_);
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(bisaimformfish_, other->bisaimformfish_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BULLETINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BULLETINFO_descriptor_;
  metadata.reflection = BULLETINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_BulletInfo_Notify::kStBulletsFieldNumber;
#endif  // !_MSC_VER

Zone_BulletInfo_Notify::Zone_BulletInfo_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_BulletInfo_Notify::InitAsDefaultInstance() {
}

Zone_BulletInfo_Notify::Zone_BulletInfo_Notify(const Zone_BulletInfo_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_BulletInfo_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_BulletInfo_Notify::~Zone_BulletInfo_Notify() {
  SharedDtor();
}

void Zone_BulletInfo_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_BulletInfo_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_BulletInfo_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_BulletInfo_Notify_descriptor_;
}

const Zone_BulletInfo_Notify& Zone_BulletInfo_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_BulletInfo_Notify* Zone_BulletInfo_Notify::default_instance_ = NULL;

Zone_BulletInfo_Notify* Zone_BulletInfo_Notify::New() const {
  return new Zone_BulletInfo_Notify;
}

void Zone_BulletInfo_Notify::Clear() {
  stbullets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_BulletInfo_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BULLETINFO stBullets = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBullets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stbullets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stBullets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_BulletInfo_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BULLETINFO stBullets = 1;
  for (int i = 0; i < this->stbullets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stbullets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_BulletInfo_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BULLETINFO stBullets = 1;
  for (int i = 0; i < this->stbullets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stbullets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_BulletInfo_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .BULLETINFO stBullets = 1;
  total_size += 1 * this->stbullets_size();
  for (int i = 0; i < this->stbullets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stbullets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_BulletInfo_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_BulletInfo_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_BulletInfo_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_BulletInfo_Notify::MergeFrom(const Zone_BulletInfo_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stbullets_.MergeFrom(from.stbullets_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_BulletInfo_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_BulletInfo_Notify::CopyFrom(const Zone_BulletInfo_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_BulletInfo_Notify::IsInitialized() const {

  return true;
}

void Zone_BulletInfo_Notify::Swap(Zone_BulletInfo_Notify* other) {
  if (other != this) {
    stbullets_.Swap(&other->stbullets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_BulletInfo_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_BulletInfo_Notify_descriptor_;
  metadata.reflection = Zone_BulletInfo_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FORMFISHOUTINFO::kIOutIDFieldNumber;
const int FORMFISHOUTINFO::kIFishIDFieldNumber;
const int FORMFISHOUTINFO::kIFishSeqIDFieldNumber;
const int FORMFISHOUTINFO::kITraceIDFieldNumber;
const int FORMFISHOUTINFO::kLBeginTimeFieldNumber;
const int FORMFISHOUTINFO::kIRemaiNumFieldNumber;
const int FORMFISHOUTINFO::kIIntervalFieldNumber;
const int FORMFISHOUTINFO::kSzAliveFishFieldNumber;
#endif  // !_MSC_VER

FORMFISHOUTINFO::FORMFISHOUTINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FORMFISHOUTINFO::InitAsDefaultInstance() {
}

FORMFISHOUTINFO::FORMFISHOUTINFO(const FORMFISHOUTINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FORMFISHOUTINFO::SharedCtor() {
  _cached_size_ = 0;
  ioutid_ = 0;
  ifishid_ = 0;
  ifishseqid_ = 0;
  itraceid_ = 0;
  lbegintime_ = GOOGLE_LONGLONG(0);
  iremainum_ = 0;
  iinterval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FORMFISHOUTINFO::~FORMFISHOUTINFO() {
  SharedDtor();
}

void FORMFISHOUTINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FORMFISHOUTINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FORMFISHOUTINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FORMFISHOUTINFO_descriptor_;
}

const FORMFISHOUTINFO& FORMFISHOUTINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

FORMFISHOUTINFO* FORMFISHOUTINFO::default_instance_ = NULL;

FORMFISHOUTINFO* FORMFISHOUTINFO::New() const {
  return new FORMFISHOUTINFO;
}

void FORMFISHOUTINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ioutid_ = 0;
    ifishid_ = 0;
    ifishseqid_ = 0;
    itraceid_ = 0;
    lbegintime_ = GOOGLE_LONGLONG(0);
    iremainum_ = 0;
    iinterval_ = 0;
  }
  szalivefish_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FORMFISHOUTINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iOutID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioutid_)));
          set_has_ioutid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFishID;
        break;
      }

      // optional int32 iFishID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishid_)));
          set_has_ifishid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFishSeqID;
        break;
      }

      // optional int32 iFishSeqID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishSeqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishseqid_)));
          set_has_ifishseqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iTraceID;
        break;
      }

      // optional int32 iTraceID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTraceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itraceid_)));
          set_has_itraceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lBeginTime;
        break;
      }

      // optional int64 lBeginTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lbegintime_)));
          set_has_lbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iRemaiNum;
        break;
      }

      // optional int32 iRemaiNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRemaiNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iremainum_)));
          set_has_iremainum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iInterval;
        break;
      }

      // optional int32 iInterval = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iinterval_)));
          set_has_iinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_szAliveFish;
        break;
      }

      // repeated uint64 szAliveFish = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_szAliveFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 64, input, this->mutable_szalivefish())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_szalivefish())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_szAliveFish;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FORMFISHOUTINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iOutID = 1;
  if (has_ioutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ioutid(), output);
  }

  // optional int32 iFishID = 2;
  if (has_ifishid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifishid(), output);
  }

  // optional int32 iFishSeqID = 3;
  if (has_ifishseqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifishseqid(), output);
  }

  // optional int32 iTraceID = 4;
  if (has_itraceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itraceid(), output);
  }

  // optional int64 lBeginTime = 5;
  if (has_lbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lbegintime(), output);
  }

  // optional int32 iRemaiNum = 6;
  if (has_iremainum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->iremainum(), output);
  }

  // optional int32 iInterval = 7;
  if (has_iinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iinterval(), output);
  }

  // repeated uint64 szAliveFish = 8;
  for (int i = 0; i < this->szalivefish_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      8, this->szalivefish(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FORMFISHOUTINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iOutID = 1;
  if (has_ioutid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ioutid(), target);
  }

  // optional int32 iFishID = 2;
  if (has_ifishid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifishid(), target);
  }

  // optional int32 iFishSeqID = 3;
  if (has_ifishseqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifishseqid(), target);
  }

  // optional int32 iTraceID = 4;
  if (has_itraceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itraceid(), target);
  }

  // optional int64 lBeginTime = 5;
  if (has_lbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lbegintime(), target);
  }

  // optional int32 iRemaiNum = 6;
  if (has_iremainum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->iremainum(), target);
  }

  // optional int32 iInterval = 7;
  if (has_iinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->iinterval(), target);
  }

  // repeated uint64 szAliveFish = 8;
  for (int i = 0; i < this->szalivefish_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt64ToArray(8, this->szalivefish(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FORMFISHOUTINFO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iOutID = 1;
    if (has_ioutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioutid());
    }

    // optional int32 iFishID = 2;
    if (has_ifishid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishid());
    }

    // optional int32 iFishSeqID = 3;
    if (has_ifishseqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishseqid());
    }

    // optional int32 iTraceID = 4;
    if (has_itraceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itraceid());
    }

    // optional int64 lBeginTime = 5;
    if (has_lbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lbegintime());
    }

    // optional int32 iRemaiNum = 6;
    if (has_iremainum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iremainum());
    }

    // optional int32 iInterval = 7;
    if (has_iinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iinterval());
    }

  }
  // repeated uint64 szAliveFish = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->szalivefish_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt64Size(this->szalivefish(i));
    }
    total_size += 1 * this->szalivefish_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FORMFISHOUTINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FORMFISHOUTINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FORMFISHOUTINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FORMFISHOUTINFO::MergeFrom(const FORMFISHOUTINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  szalivefish_.MergeFrom(from.szalivefish_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ioutid()) {
      set_ioutid(from.ioutid());
    }
    if (from.has_ifishid()) {
      set_ifishid(from.ifishid());
    }
    if (from.has_ifishseqid()) {
      set_ifishseqid(from.ifishseqid());
    }
    if (from.has_itraceid()) {
      set_itraceid(from.itraceid());
    }
    if (from.has_lbegintime()) {
      set_lbegintime(from.lbegintime());
    }
    if (from.has_iremainum()) {
      set_iremainum(from.iremainum());
    }
    if (from.has_iinterval()) {
      set_iinterval(from.iinterval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FORMFISHOUTINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FORMFISHOUTINFO::CopyFrom(const FORMFISHOUTINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FORMFISHOUTINFO::IsInitialized() const {

  return true;
}

void FORMFISHOUTINFO::Swap(FORMFISHOUTINFO* other) {
  if (other != this) {
    std::swap(ioutid_, other->ioutid_);
    std::swap(ifishid_, other->ifishid_);
    std::swap(ifishseqid_, other->ifishseqid_);
    std::swap(itraceid_, other->itraceid_);
    std::swap(lbegintime_, other->lbegintime_);
    std::swap(iremainum_, other->iremainum_);
    std::swap(iinterval_, other->iinterval_);
    szalivefish_.Swap(&other->szalivefish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FORMFISHOUTINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FORMFISHOUTINFO_descriptor_;
  metadata.reflection = FORMFISHOUTINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FormInfo_Notify::kStFormInfosFieldNumber;
#endif  // !_MSC_VER

Zone_FormInfo_Notify::Zone_FormInfo_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FormInfo_Notify::InitAsDefaultInstance() {
}

Zone_FormInfo_Notify::Zone_FormInfo_Notify(const Zone_FormInfo_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FormInfo_Notify::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FormInfo_Notify::~Zone_FormInfo_Notify() {
  SharedDtor();
}

void Zone_FormInfo_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FormInfo_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FormInfo_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FormInfo_Notify_descriptor_;
}

const Zone_FormInfo_Notify& Zone_FormInfo_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FormInfo_Notify* Zone_FormInfo_Notify::default_instance_ = NULL;

Zone_FormInfo_Notify* Zone_FormInfo_Notify::New() const {
  return new Zone_FormInfo_Notify;
}

void Zone_FormInfo_Notify::Clear() {
  stforminfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FormInfo_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FORMFISHOUTINFO stFormInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stFormInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stforminfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stFormInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FormInfo_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FORMFISHOUTINFO stFormInfos = 1;
  for (int i = 0; i < this->stforminfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stforminfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FormInfo_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FORMFISHOUTINFO stFormInfos = 1;
  for (int i = 0; i < this->stforminfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stforminfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FormInfo_Notify::ByteSize() const {
  int total_size = 0;

  // repeated .FORMFISHOUTINFO stFormInfos = 1;
  total_size += 1 * this->stforminfos_size();
  for (int i = 0; i < this->stforminfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stforminfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FormInfo_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FormInfo_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FormInfo_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FormInfo_Notify::MergeFrom(const Zone_FormInfo_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stforminfos_.MergeFrom(from.stforminfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FormInfo_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FormInfo_Notify::CopyFrom(const Zone_FormInfo_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FormInfo_Notify::IsInitialized() const {

  return true;
}

void Zone_FormInfo_Notify::Swap(Zone_FormInfo_Notify* other) {
  if (other != this) {
    stforminfos_.Swap(&other->stforminfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FormInfo_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FormInfo_Notify_descriptor_;
  metadata.reflection = Zone_FormInfo_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ExitFish_Request::kIFishRoomIDFieldNumber;
#endif  // !_MSC_VER

Zone_ExitFish_Request::Zone_ExitFish_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ExitFish_Request::InitAsDefaultInstance() {
}

Zone_ExitFish_Request::Zone_ExitFish_Request(const Zone_ExitFish_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ExitFish_Request::SharedCtor() {
  _cached_size_ = 0;
  ifishroomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ExitFish_Request::~Zone_ExitFish_Request() {
  SharedDtor();
}

void Zone_ExitFish_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ExitFish_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ExitFish_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ExitFish_Request_descriptor_;
}

const Zone_ExitFish_Request& Zone_ExitFish_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ExitFish_Request* Zone_ExitFish_Request::default_instance_ = NULL;

Zone_ExitFish_Request* Zone_ExitFish_Request::New() const {
  return new Zone_ExitFish_Request;
}

void Zone_ExitFish_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifishroomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ExitFish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFishRoomID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishroomid_)));
          set_has_ifishroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ExitFish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFishRoomID = 1;
  if (has_ifishroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifishroomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ExitFish_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFishRoomID = 1;
  if (has_ifishroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifishroomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ExitFish_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFishRoomID = 1;
    if (has_ifishroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishroomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ExitFish_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ExitFish_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ExitFish_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ExitFish_Request::MergeFrom(const Zone_ExitFish_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifishroomid()) {
      set_ifishroomid(from.ifishroomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ExitFish_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ExitFish_Request::CopyFrom(const Zone_ExitFish_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ExitFish_Request::IsInitialized() const {

  return true;
}

void Zone_ExitFish_Request::Swap(Zone_ExitFish_Request* other) {
  if (other != this) {
    std::swap(ifishroomid_, other->ifishroomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ExitFish_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ExitFish_Request_descriptor_;
  metadata.reflection = Zone_ExitFish_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ExitFish_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_ExitFish_Response::Zone_ExitFish_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ExitFish_Response::InitAsDefaultInstance() {
}

Zone_ExitFish_Response::Zone_ExitFish_Response(const Zone_ExitFish_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ExitFish_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ExitFish_Response::~Zone_ExitFish_Response() {
  SharedDtor();
}

void Zone_ExitFish_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ExitFish_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ExitFish_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ExitFish_Response_descriptor_;
}

const Zone_ExitFish_Response& Zone_ExitFish_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ExitFish_Response* Zone_ExitFish_Response::default_instance_ = NULL;

Zone_ExitFish_Response* Zone_ExitFish_Response::New() const {
  return new Zone_ExitFish_Response;
}

void Zone_ExitFish_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ExitFish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ExitFish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ExitFish_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ExitFish_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ExitFish_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ExitFish_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ExitFish_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ExitFish_Response::MergeFrom(const Zone_ExitFish_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ExitFish_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ExitFish_Response::CopyFrom(const Zone_ExitFish_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ExitFish_Response::IsInitialized() const {

  return true;
}

void Zone_ExitFish_Response::Swap(Zone_ExitFish_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ExitFish_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ExitFish_Response_descriptor_;
  metadata.reflection = Zone_ExitFish_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ExitFish_Notify::kISeatFieldNumber;
const int Zone_ExitFish_Notify::kBForceExitFieldNumber;
#endif  // !_MSC_VER

Zone_ExitFish_Notify::Zone_ExitFish_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ExitFish_Notify::InitAsDefaultInstance() {
}

Zone_ExitFish_Notify::Zone_ExitFish_Notify(const Zone_ExitFish_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ExitFish_Notify::SharedCtor() {
  _cached_size_ = 0;
  iseat_ = 0;
  bforceexit_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ExitFish_Notify::~Zone_ExitFish_Notify() {
  SharedDtor();
}

void Zone_ExitFish_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ExitFish_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ExitFish_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ExitFish_Notify_descriptor_;
}

const Zone_ExitFish_Notify& Zone_ExitFish_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ExitFish_Notify* Zone_ExitFish_Notify::default_instance_ = NULL;

Zone_ExitFish_Notify* Zone_ExitFish_Notify::New() const {
  return new Zone_ExitFish_Notify;
}

void Zone_ExitFish_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iseat_ = 0;
    bforceexit_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ExitFish_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bForceExit;
        break;
      }

      // optional bool bForceExit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bForceExit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bforceexit_)));
          set_has_bforceexit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ExitFish_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iseat(), output);
  }

  // optional bool bForceExit = 2;
  if (has_bforceexit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bforceexit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ExitFish_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iseat(), target);
  }

  // optional bool bForceExit = 2;
  if (has_bforceexit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bforceexit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ExitFish_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iSeat = 1;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

    // optional bool bForceExit = 2;
    if (has_bforceexit()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ExitFish_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ExitFish_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ExitFish_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ExitFish_Notify::MergeFrom(const Zone_ExitFish_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
    if (from.has_bforceexit()) {
      set_bforceexit(from.bforceexit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ExitFish_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ExitFish_Notify::CopyFrom(const Zone_ExitFish_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ExitFish_Notify::IsInitialized() const {

  return true;
}

void Zone_ExitFish_Notify::Swap(Zone_ExitFish_Notify* other) {
  if (other != this) {
    std::swap(iseat_, other->iseat_);
    std::swap(bforceexit_, other->bforceexit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ExitFish_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ExitFish_Notify_descriptor_;
  metadata.reflection = Zone_ExitFish_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ChangeGun_Request::kINewGunIDFieldNumber;
const int Zone_ChangeGun_Request::kBIsStyleFieldNumber;
#endif  // !_MSC_VER

Zone_ChangeGun_Request::Zone_ChangeGun_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ChangeGun_Request::InitAsDefaultInstance() {
}

Zone_ChangeGun_Request::Zone_ChangeGun_Request(const Zone_ChangeGun_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ChangeGun_Request::SharedCtor() {
  _cached_size_ = 0;
  inewgunid_ = 0;
  bisstyle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ChangeGun_Request::~Zone_ChangeGun_Request() {
  SharedDtor();
}

void Zone_ChangeGun_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ChangeGun_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ChangeGun_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ChangeGun_Request_descriptor_;
}

const Zone_ChangeGun_Request& Zone_ChangeGun_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ChangeGun_Request* Zone_ChangeGun_Request::default_instance_ = NULL;

Zone_ChangeGun_Request* Zone_ChangeGun_Request::New() const {
  return new Zone_ChangeGun_Request;
}

void Zone_ChangeGun_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    inewgunid_ = 0;
    bisstyle_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ChangeGun_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iNewGunID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inewgunid_)));
          set_has_inewgunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsStyle;
        break;
      }

      // optional bool bIsStyle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisstyle_)));
          set_has_bisstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ChangeGun_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iNewGunID = 1;
  if (has_inewgunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->inewgunid(), output);
  }

  // optional bool bIsStyle = 2;
  if (has_bisstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisstyle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ChangeGun_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iNewGunID = 1;
  if (has_inewgunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->inewgunid(), target);
  }

  // optional bool bIsStyle = 2;
  if (has_bisstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisstyle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ChangeGun_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iNewGunID = 1;
    if (has_inewgunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inewgunid());
    }

    // optional bool bIsStyle = 2;
    if (has_bisstyle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ChangeGun_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ChangeGun_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ChangeGun_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ChangeGun_Request::MergeFrom(const Zone_ChangeGun_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_inewgunid()) {
      set_inewgunid(from.inewgunid());
    }
    if (from.has_bisstyle()) {
      set_bisstyle(from.bisstyle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ChangeGun_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ChangeGun_Request::CopyFrom(const Zone_ChangeGun_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ChangeGun_Request::IsInitialized() const {

  return true;
}

void Zone_ChangeGun_Request::Swap(Zone_ChangeGun_Request* other) {
  if (other != this) {
    std::swap(inewgunid_, other->inewgunid_);
    std::swap(bisstyle_, other->bisstyle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ChangeGun_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ChangeGun_Request_descriptor_;
  metadata.reflection = Zone_ChangeGun_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ChangeGun_Response::kIResultFieldNumber;
const int Zone_ChangeGun_Response::kINewGunIDFieldNumber;
const int Zone_ChangeGun_Response::kBIsStyleFieldNumber;
#endif  // !_MSC_VER

Zone_ChangeGun_Response::Zone_ChangeGun_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ChangeGun_Response::InitAsDefaultInstance() {
}

Zone_ChangeGun_Response::Zone_ChangeGun_Response(const Zone_ChangeGun_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ChangeGun_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  inewgunid_ = 0;
  bisstyle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ChangeGun_Response::~Zone_ChangeGun_Response() {
  SharedDtor();
}

void Zone_ChangeGun_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ChangeGun_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ChangeGun_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ChangeGun_Response_descriptor_;
}

const Zone_ChangeGun_Response& Zone_ChangeGun_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ChangeGun_Response* Zone_ChangeGun_Response::default_instance_ = NULL;

Zone_ChangeGun_Response* Zone_ChangeGun_Response::New() const {
  return new Zone_ChangeGun_Response;
}

void Zone_ChangeGun_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    inewgunid_ = 0;
    bisstyle_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ChangeGun_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNewGunID;
        break;
      }

      // optional int32 iNewGunID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNewGunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inewgunid_)));
          set_has_inewgunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bIsStyle;
        break;
      }

      // optional bool bIsStyle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisstyle_)));
          set_has_bisstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ChangeGun_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iNewGunID = 2;
  if (has_inewgunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inewgunid(), output);
  }

  // optional bool bIsStyle = 3;
  if (has_bisstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bisstyle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ChangeGun_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iNewGunID = 2;
  if (has_inewgunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inewgunid(), target);
  }

  // optional bool bIsStyle = 3;
  if (has_bisstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bisstyle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ChangeGun_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iNewGunID = 2;
    if (has_inewgunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inewgunid());
    }

    // optional bool bIsStyle = 3;
    if (has_bisstyle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ChangeGun_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ChangeGun_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ChangeGun_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ChangeGun_Response::MergeFrom(const Zone_ChangeGun_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_inewgunid()) {
      set_inewgunid(from.inewgunid());
    }
    if (from.has_bisstyle()) {
      set_bisstyle(from.bisstyle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ChangeGun_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ChangeGun_Response::CopyFrom(const Zone_ChangeGun_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ChangeGun_Response::IsInitialized() const {

  return true;
}

void Zone_ChangeGun_Response::Swap(Zone_ChangeGun_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(inewgunid_, other->inewgunid_);
    std::swap(bisstyle_, other->bisstyle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ChangeGun_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ChangeGun_Response_descriptor_;
  metadata.reflection = Zone_ChangeGun_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ChangeGun_Notify::kISeatFieldNumber;
const int Zone_ChangeGun_Notify::kINewGunIDFieldNumber;
const int Zone_ChangeGun_Notify::kBIsStyleFieldNumber;
#endif  // !_MSC_VER

Zone_ChangeGun_Notify::Zone_ChangeGun_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ChangeGun_Notify::InitAsDefaultInstance() {
}

Zone_ChangeGun_Notify::Zone_ChangeGun_Notify(const Zone_ChangeGun_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ChangeGun_Notify::SharedCtor() {
  _cached_size_ = 0;
  iseat_ = 0;
  inewgunid_ = 0;
  bisstyle_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ChangeGun_Notify::~Zone_ChangeGun_Notify() {
  SharedDtor();
}

void Zone_ChangeGun_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ChangeGun_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ChangeGun_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ChangeGun_Notify_descriptor_;
}

const Zone_ChangeGun_Notify& Zone_ChangeGun_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ChangeGun_Notify* Zone_ChangeGun_Notify::default_instance_ = NULL;

Zone_ChangeGun_Notify* Zone_ChangeGun_Notify::New() const {
  return new Zone_ChangeGun_Notify;
}

void Zone_ChangeGun_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iseat_ = 0;
    inewgunid_ = 0;
    bisstyle_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ChangeGun_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNewGunID;
        break;
      }

      // optional int32 iNewGunID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNewGunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inewgunid_)));
          set_has_inewgunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bIsStyle;
        break;
      }

      // optional bool bIsStyle = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsStyle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisstyle_)));
          set_has_bisstyle();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ChangeGun_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iseat(), output);
  }

  // optional int32 iNewGunID = 2;
  if (has_inewgunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inewgunid(), output);
  }

  // optional bool bIsStyle = 3;
  if (has_bisstyle()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bisstyle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ChangeGun_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iseat(), target);
  }

  // optional int32 iNewGunID = 2;
  if (has_inewgunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inewgunid(), target);
  }

  // optional bool bIsStyle = 3;
  if (has_bisstyle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bisstyle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ChangeGun_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iSeat = 1;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

    // optional int32 iNewGunID = 2;
    if (has_inewgunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inewgunid());
    }

    // optional bool bIsStyle = 3;
    if (has_bisstyle()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ChangeGun_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ChangeGun_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ChangeGun_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ChangeGun_Notify::MergeFrom(const Zone_ChangeGun_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
    if (from.has_inewgunid()) {
      set_inewgunid(from.inewgunid());
    }
    if (from.has_bisstyle()) {
      set_bisstyle(from.bisstyle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ChangeGun_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ChangeGun_Notify::CopyFrom(const Zone_ChangeGun_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ChangeGun_Notify::IsInitialized() const {

  return true;
}

void Zone_ChangeGun_Notify::Swap(Zone_ChangeGun_Notify* other) {
  if (other != this) {
    std::swap(iseat_, other->iseat_);
    std::swap(inewgunid_, other->inewgunid_);
    std::swap(bisstyle_, other->bisstyle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ChangeGun_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ChangeGun_Notify_descriptor_;
  metadata.reflection = Zone_ChangeGun_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ShootBullet_Request::kLShootTimeFieldNumber;
const int Zone_ShootBullet_Request::kIPosXFieldNumber;
const int Zone_ShootBullet_Request::kIPosYFieldNumber;
const int Zone_ShootBullet_Request::kBAutoShootFieldNumber;
#endif  // !_MSC_VER

Zone_ShootBullet_Request::Zone_ShootBullet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ShootBullet_Request::InitAsDefaultInstance() {
}

Zone_ShootBullet_Request::Zone_ShootBullet_Request(const Zone_ShootBullet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ShootBullet_Request::SharedCtor() {
  _cached_size_ = 0;
  lshoottime_ = GOOGLE_LONGLONG(0);
  iposx_ = 0;
  iposy_ = 0;
  bautoshoot_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ShootBullet_Request::~Zone_ShootBullet_Request() {
  SharedDtor();
}

void Zone_ShootBullet_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ShootBullet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ShootBullet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ShootBullet_Request_descriptor_;
}

const Zone_ShootBullet_Request& Zone_ShootBullet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ShootBullet_Request* Zone_ShootBullet_Request::default_instance_ = NULL;

Zone_ShootBullet_Request* Zone_ShootBullet_Request::New() const {
  return new Zone_ShootBullet_Request;
}

void Zone_ShootBullet_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lshoottime_ = GOOGLE_LONGLONG(0);
    iposx_ = 0;
    iposy_ = 0;
    bautoshoot_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ShootBullet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lShootTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lshoottime_)));
          set_has_lshoottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iPosX;
        break;
      }

      // optional int32 iPosX = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iPosX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iposx_)));
          set_has_iposx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iPosY;
        break;
      }

      // optional int32 iPosY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iPosY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iposy_)));
          set_has_iposy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bAutoShoot;
        break;
      }

      // optional bool bAutoShoot = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bAutoShoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bautoshoot_)));
          set_has_bautoshoot();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ShootBullet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 lShootTime = 1;
  if (has_lshoottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lshoottime(), output);
  }

  // optional int32 iPosX = 2;
  if (has_iposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iposx(), output);
  }

  // optional int32 iPosY = 3;
  if (has_iposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iposy(), output);
  }

  // optional bool bAutoShoot = 4;
  if (has_bautoshoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bautoshoot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ShootBullet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 lShootTime = 1;
  if (has_lshoottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lshoottime(), target);
  }

  // optional int32 iPosX = 2;
  if (has_iposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iposx(), target);
  }

  // optional int32 iPosY = 3;
  if (has_iposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iposy(), target);
  }

  // optional bool bAutoShoot = 4;
  if (has_bautoshoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bautoshoot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ShootBullet_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 lShootTime = 1;
    if (has_lshoottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lshoottime());
    }

    // optional int32 iPosX = 2;
    if (has_iposx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iposx());
    }

    // optional int32 iPosY = 3;
    if (has_iposy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iposy());
    }

    // optional bool bAutoShoot = 4;
    if (has_bautoshoot()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ShootBullet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ShootBullet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ShootBullet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ShootBullet_Request::MergeFrom(const Zone_ShootBullet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lshoottime()) {
      set_lshoottime(from.lshoottime());
    }
    if (from.has_iposx()) {
      set_iposx(from.iposx());
    }
    if (from.has_iposy()) {
      set_iposy(from.iposy());
    }
    if (from.has_bautoshoot()) {
      set_bautoshoot(from.bautoshoot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ShootBullet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ShootBullet_Request::CopyFrom(const Zone_ShootBullet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ShootBullet_Request::IsInitialized() const {

  return true;
}

void Zone_ShootBullet_Request::Swap(Zone_ShootBullet_Request* other) {
  if (other != this) {
    std::swap(lshoottime_, other->lshoottime_);
    std::swap(iposx_, other->iposx_);
    std::swap(iposy_, other->iposy_);
    std::swap(bautoshoot_, other->bautoshoot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ShootBullet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ShootBullet_Request_descriptor_;
  metadata.reflection = Zone_ShootBullet_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ShootBullet_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_ShootBullet_Response::Zone_ShootBullet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ShootBullet_Response::InitAsDefaultInstance() {
}

Zone_ShootBullet_Response::Zone_ShootBullet_Response(const Zone_ShootBullet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ShootBullet_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ShootBullet_Response::~Zone_ShootBullet_Response() {
  SharedDtor();
}

void Zone_ShootBullet_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ShootBullet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ShootBullet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ShootBullet_Response_descriptor_;
}

const Zone_ShootBullet_Response& Zone_ShootBullet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ShootBullet_Response* Zone_ShootBullet_Response::default_instance_ = NULL;

Zone_ShootBullet_Response* Zone_ShootBullet_Response::New() const {
  return new Zone_ShootBullet_Response;
}

void Zone_ShootBullet_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ShootBullet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ShootBullet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ShootBullet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ShootBullet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ShootBullet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ShootBullet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ShootBullet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ShootBullet_Response::MergeFrom(const Zone_ShootBullet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ShootBullet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ShootBullet_Response::CopyFrom(const Zone_ShootBullet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ShootBullet_Response::IsInitialized() const {

  return true;
}

void Zone_ShootBullet_Response::Swap(Zone_ShootBullet_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ShootBullet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ShootBullet_Response_descriptor_;
  metadata.reflection = Zone_ShootBullet_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ShootBullet_Notify::kUUniqIDFieldNumber;
const int Zone_ShootBullet_Notify::kIGunIDFieldNumber;
const int Zone_ShootBullet_Notify::kISeatFieldNumber;
const int Zone_ShootBullet_Notify::kStTargetPosFieldNumber;
const int Zone_ShootBullet_Notify::kLShootTimeFieldNumber;
const int Zone_ShootBullet_Notify::kUFishUniqIDFieldNumber;
const int Zone_ShootBullet_Notify::kBIsAimFormFishFieldNumber;
const int Zone_ShootBullet_Notify::kIFishIndexFieldNumber;
const int Zone_ShootBullet_Notify::kBIsWildBulletFieldNumber;
#endif  // !_MSC_VER

Zone_ShootBullet_Notify::Zone_ShootBullet_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ShootBullet_Notify::InitAsDefaultInstance() {
  sttargetpos_ = const_cast< ::POS*>(&::POS::default_instance());
}

Zone_ShootBullet_Notify::Zone_ShootBullet_Notify(const Zone_ShootBullet_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ShootBullet_Notify::SharedCtor() {
  _cached_size_ = 0;
  uuniqid_ = 0u;
  igunid_ = 0;
  iseat_ = 0;
  sttargetpos_ = NULL;
  lshoottime_ = GOOGLE_LONGLONG(0);
  ufishuniqid_ = 0u;
  bisaimformfish_ = false;
  ifishindex_ = 0;
  biswildbullet_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ShootBullet_Notify::~Zone_ShootBullet_Notify() {
  SharedDtor();
}

void Zone_ShootBullet_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete sttargetpos_;
  }
}

void Zone_ShootBullet_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ShootBullet_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ShootBullet_Notify_descriptor_;
}

const Zone_ShootBullet_Notify& Zone_ShootBullet_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ShootBullet_Notify* Zone_ShootBullet_Notify::default_instance_ = NULL;

Zone_ShootBullet_Notify* Zone_ShootBullet_Notify::New() const {
  return new Zone_ShootBullet_Notify;
}

void Zone_ShootBullet_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuniqid_ = 0u;
    igunid_ = 0;
    iseat_ = 0;
    if (has_sttargetpos()) {
      if (sttargetpos_ != NULL) sttargetpos_->::POS::Clear();
    }
    lshoottime_ = GOOGLE_LONGLONG(0);
    ufishuniqid_ = 0u;
    bisaimformfish_ = false;
    ifishindex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    biswildbullet_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ShootBullet_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuniqid_)));
          set_has_uuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iGunID;
        break;
      }

      // optional int32 iGunID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGunID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igunid_)));
          set_has_igunid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iSeat;
        break;
      }

      // optional int32 iSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stTargetPos;
        break;
      }

      // optional .POS stTargetPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stTargetPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttargetpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lShootTime;
        break;
      }

      // optional int64 lShootTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lShootTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lshoottime_)));
          set_has_lshoottime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_uFishUniqID;
        break;
      }

      // optional uint32 uFishUniqID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bIsAimFormFish;
        break;
      }

      // optional bool bIsAimFormFish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsAimFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisaimformfish_)));
          set_has_bisaimformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_bIsWildBullet;
        break;
      }

      // optional bool bIsWildBullet = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsWildBullet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &biswildbullet_)));
          set_has_biswildbullet();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ShootBullet_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuniqid(), output);
  }

  // optional int32 iGunID = 2;
  if (has_igunid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->igunid(), output);
  }

  // optional int32 iSeat = 3;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iseat(), output);
  }

  // optional .POS stTargetPos = 4;
  if (has_sttargetpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sttargetpos(), output);
  }

  // optional int64 lShootTime = 5;
  if (has_lshoottime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->lshoottime(), output);
  }

  // optional uint32 uFishUniqID = 6;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->ufishuniqid(), output);
  }

  // optional bool bIsAimFormFish = 7;
  if (has_bisaimformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->bisaimformfish(), output);
  }

  // optional int32 iFishIndex = 8;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ifishindex(), output);
  }

  // optional bool bIsWildBullet = 9;
  if (has_biswildbullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->biswildbullet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ShootBullet_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuniqid(), target);
  }

  // optional int32 iGunID = 2;
  if (has_igunid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->igunid(), target);
  }

  // optional int32 iSeat = 3;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iseat(), target);
  }

  // optional .POS stTargetPos = 4;
  if (has_sttargetpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sttargetpos(), target);
  }

  // optional int64 lShootTime = 5;
  if (has_lshoottime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->lshoottime(), target);
  }

  // optional uint32 uFishUniqID = 6;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->ufishuniqid(), target);
  }

  // optional bool bIsAimFormFish = 7;
  if (has_bisaimformfish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->bisaimformfish(), target);
  }

  // optional int32 iFishIndex = 8;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ifishindex(), target);
  }

  // optional bool bIsWildBullet = 9;
  if (has_biswildbullet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->biswildbullet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ShootBullet_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uUniqID = 1;
    if (has_uuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuniqid());
    }

    // optional int32 iGunID = 2;
    if (has_igunid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igunid());
    }

    // optional int32 iSeat = 3;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

    // optional .POS stTargetPos = 4;
    if (has_sttargetpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sttargetpos());
    }

    // optional int64 lShootTime = 5;
    if (has_lshoottime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lshoottime());
    }

    // optional uint32 uFishUniqID = 6;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional bool bIsAimFormFish = 7;
    if (has_bisaimformfish()) {
      total_size += 1 + 1;
    }

    // optional int32 iFishIndex = 8;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool bIsWildBullet = 9;
    if (has_biswildbullet()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ShootBullet_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ShootBullet_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ShootBullet_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ShootBullet_Notify::MergeFrom(const Zone_ShootBullet_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuniqid()) {
      set_uuniqid(from.uuniqid());
    }
    if (from.has_igunid()) {
      set_igunid(from.igunid());
    }
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
    if (from.has_sttargetpos()) {
      mutable_sttargetpos()->::POS::MergeFrom(from.sttargetpos());
    }
    if (from.has_lshoottime()) {
      set_lshoottime(from.lshoottime());
    }
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_bisaimformfish()) {
      set_bisaimformfish(from.bisaimformfish());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_biswildbullet()) {
      set_biswildbullet(from.biswildbullet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ShootBullet_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ShootBullet_Notify::CopyFrom(const Zone_ShootBullet_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ShootBullet_Notify::IsInitialized() const {

  return true;
}

void Zone_ShootBullet_Notify::Swap(Zone_ShootBullet_Notify* other) {
  if (other != this) {
    std::swap(uuniqid_, other->uuniqid_);
    std::swap(igunid_, other->igunid_);
    std::swap(iseat_, other->iseat_);
    std::swap(sttargetpos_, other->sttargetpos_);
    std::swap(lshoottime_, other->lshoottime_);
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(bisaimformfish_, other->bisaimformfish_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(biswildbullet_, other->biswildbullet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ShootBullet_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ShootBullet_Notify_descriptor_;
  metadata.reflection = Zone_ShootBullet_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_HitFish_Request::kLHitTimeFieldNumber;
const int Zone_HitFish_Request::kUBulletUniqIDFieldNumber;
const int Zone_HitFish_Request::kUFishUniqIDFieldNumber;
const int Zone_HitFish_Request::kIFishIndexFieldNumber;
#endif  // !_MSC_VER

Zone_HitFish_Request::Zone_HitFish_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_HitFish_Request::InitAsDefaultInstance() {
}

Zone_HitFish_Request::Zone_HitFish_Request(const Zone_HitFish_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_HitFish_Request::SharedCtor() {
  _cached_size_ = 0;
  lhittime_ = GOOGLE_LONGLONG(0);
  ubulletuniqid_ = 0u;
  ufishuniqid_ = 0u;
  ifishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_HitFish_Request::~Zone_HitFish_Request() {
  SharedDtor();
}

void Zone_HitFish_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_HitFish_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_HitFish_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_HitFish_Request_descriptor_;
}

const Zone_HitFish_Request& Zone_HitFish_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_HitFish_Request* Zone_HitFish_Request::default_instance_ = NULL;

Zone_HitFish_Request* Zone_HitFish_Request::New() const {
  return new Zone_HitFish_Request;
}

void Zone_HitFish_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lhittime_ = GOOGLE_LONGLONG(0);
    ubulletuniqid_ = 0u;
    ufishuniqid_ = 0u;
    ifishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_HitFish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 lHitTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lhittime_)));
          set_has_lhittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uBulletUniqID;
        break;
      }

      // optional uint32 uBulletUniqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uBulletUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ubulletuniqid_)));
          set_has_ubulletuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uFishUniqID;
        break;
      }

      // optional uint32 uFishUniqID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_HitFish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 lHitTime = 1;
  if (has_lhittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->lhittime(), output);
  }

  // optional uint32 uBulletUniqID = 2;
  if (has_ubulletuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ubulletuniqid(), output);
  }

  // optional uint32 uFishUniqID = 3;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ufishuniqid(), output);
  }

  // optional int32 iFishIndex = 4;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ifishindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_HitFish_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 lHitTime = 1;
  if (has_lhittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->lhittime(), target);
  }

  // optional uint32 uBulletUniqID = 2;
  if (has_ubulletuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ubulletuniqid(), target);
  }

  // optional uint32 uFishUniqID = 3;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ufishuniqid(), target);
  }

  // optional int32 iFishIndex = 4;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ifishindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_HitFish_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 lHitTime = 1;
    if (has_lhittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lhittime());
    }

    // optional uint32 uBulletUniqID = 2;
    if (has_ubulletuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ubulletuniqid());
    }

    // optional uint32 uFishUniqID = 3;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional int32 iFishIndex = 4;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_HitFish_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_HitFish_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_HitFish_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_HitFish_Request::MergeFrom(const Zone_HitFish_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lhittime()) {
      set_lhittime(from.lhittime());
    }
    if (from.has_ubulletuniqid()) {
      set_ubulletuniqid(from.ubulletuniqid());
    }
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_HitFish_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_HitFish_Request::CopyFrom(const Zone_HitFish_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_HitFish_Request::IsInitialized() const {

  return true;
}

void Zone_HitFish_Request::Swap(Zone_HitFish_Request* other) {
  if (other != this) {
    std::swap(lhittime_, other->lhittime_);
    std::swap(ubulletuniqid_, other->ubulletuniqid_);
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_HitFish_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_HitFish_Request_descriptor_;
  metadata.reflection = Zone_HitFish_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_HitFish_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_HitFish_Response::Zone_HitFish_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_HitFish_Response::InitAsDefaultInstance() {
}

Zone_HitFish_Response::Zone_HitFish_Response(const Zone_HitFish_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_HitFish_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_HitFish_Response::~Zone_HitFish_Response() {
  SharedDtor();
}

void Zone_HitFish_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_HitFish_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_HitFish_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_HitFish_Response_descriptor_;
}

const Zone_HitFish_Response& Zone_HitFish_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_HitFish_Response* Zone_HitFish_Response::default_instance_ = NULL;

Zone_HitFish_Response* Zone_HitFish_Response::New() const {
  return new Zone_HitFish_Response;
}

void Zone_HitFish_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_HitFish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_HitFish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_HitFish_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_HitFish_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_HitFish_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_HitFish_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_HitFish_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_HitFish_Response::MergeFrom(const Zone_HitFish_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_HitFish_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_HitFish_Response::CopyFrom(const Zone_HitFish_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_HitFish_Response::IsInitialized() const {

  return true;
}

void Zone_HitFish_Response::Swap(Zone_HitFish_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_HitFish_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_HitFish_Response_descriptor_;
  metadata.reflection = Zone_HitFish_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_HitFish_Notify::kUBulletUniqIDFieldNumber;
const int Zone_HitFish_Notify::kUFishUniqIDFieldNumber;
const int Zone_HitFish_Notify::kISeatFieldNumber;
const int Zone_HitFish_Notify::kIRewardCoinsFieldNumber;
const int Zone_HitFish_Notify::kBIsFormFieldNumber;
const int Zone_HitFish_Notify::kIFishIndexFieldNumber;
const int Zone_HitFish_Notify::kIMultiFishFieldNumber;
const int Zone_HitFish_Notify::kIBulletLiveTimeFieldNumber;
#endif  // !_MSC_VER

Zone_HitFish_Notify::Zone_HitFish_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_HitFish_Notify::InitAsDefaultInstance() {
}

Zone_HitFish_Notify::Zone_HitFish_Notify(const Zone_HitFish_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_HitFish_Notify::SharedCtor() {
  _cached_size_ = 0;
  ubulletuniqid_ = 0u;
  ufishuniqid_ = 0u;
  iseat_ = 0;
  irewardcoins_ = 0;
  bisform_ = false;
  ifishindex_ = 0;
  imultifish_ = 0;
  ibulletlivetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_HitFish_Notify::~Zone_HitFish_Notify() {
  SharedDtor();
}

void Zone_HitFish_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_HitFish_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_HitFish_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_HitFish_Notify_descriptor_;
}

const Zone_HitFish_Notify& Zone_HitFish_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_HitFish_Notify* Zone_HitFish_Notify::default_instance_ = NULL;

Zone_HitFish_Notify* Zone_HitFish_Notify::New() const {
  return new Zone_HitFish_Notify;
}

void Zone_HitFish_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ubulletuniqid_ = 0u;
    ufishuniqid_ = 0u;
    iseat_ = 0;
    irewardcoins_ = 0;
    bisform_ = false;
    ifishindex_ = 0;
    imultifish_ = 0;
    ibulletlivetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_HitFish_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uBulletUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ubulletuniqid_)));
          set_has_ubulletuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uFishUniqID;
        break;
      }

      // optional uint32 uFishUniqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iSeat;
        break;
      }

      // optional int32 iSeat = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iRewardCoins;
        break;
      }

      // optional int32 iRewardCoins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRewardCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irewardcoins_)));
          set_has_irewardcoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bIsForm;
        break;
      }

      // optional bool bIsForm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsForm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisform_)));
          set_has_bisform();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_iMultiFish;
        break;
      }

      // optional int32 iMultiFish = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMultiFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imultifish_)));
          set_has_imultifish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iBulletLiveTime;
        break;
      }

      // optional int32 iBulletLiveTime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iBulletLiveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ibulletlivetime_)));
          set_has_ibulletlivetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_HitFish_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uBulletUniqID = 1;
  if (has_ubulletuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ubulletuniqid(), output);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ufishuniqid(), output);
  }

  // optional int32 iSeat = 3;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iseat(), output);
  }

  // optional int32 iRewardCoins = 4;
  if (has_irewardcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->irewardcoins(), output);
  }

  // optional bool bIsForm = 5;
  if (has_bisform()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->bisform(), output);
  }

  // optional int32 iFishIndex = 6;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ifishindex(), output);
  }

  // optional int32 iMultiFish = 7;
  if (has_imultifish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->imultifish(), output);
  }

  // optional int32 iBulletLiveTime = 8;
  if (has_ibulletlivetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ibulletlivetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_HitFish_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uBulletUniqID = 1;
  if (has_ubulletuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ubulletuniqid(), target);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ufishuniqid(), target);
  }

  // optional int32 iSeat = 3;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iseat(), target);
  }

  // optional int32 iRewardCoins = 4;
  if (has_irewardcoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->irewardcoins(), target);
  }

  // optional bool bIsForm = 5;
  if (has_bisform()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->bisform(), target);
  }

  // optional int32 iFishIndex = 6;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ifishindex(), target);
  }

  // optional int32 iMultiFish = 7;
  if (has_imultifish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->imultifish(), target);
  }

  // optional int32 iBulletLiveTime = 8;
  if (has_ibulletlivetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ibulletlivetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_HitFish_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uBulletUniqID = 1;
    if (has_ubulletuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ubulletuniqid());
    }

    // optional uint32 uFishUniqID = 2;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional int32 iSeat = 3;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

    // optional int32 iRewardCoins = 4;
    if (has_irewardcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irewardcoins());
    }

    // optional bool bIsForm = 5;
    if (has_bisform()) {
      total_size += 1 + 1;
    }

    // optional int32 iFishIndex = 6;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

    // optional int32 iMultiFish = 7;
    if (has_imultifish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imultifish());
    }

    // optional int32 iBulletLiveTime = 8;
    if (has_ibulletlivetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ibulletlivetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_HitFish_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_HitFish_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_HitFish_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_HitFish_Notify::MergeFrom(const Zone_HitFish_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ubulletuniqid()) {
      set_ubulletuniqid(from.ubulletuniqid());
    }
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
    if (from.has_irewardcoins()) {
      set_irewardcoins(from.irewardcoins());
    }
    if (from.has_bisform()) {
      set_bisform(from.bisform());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
    if (from.has_imultifish()) {
      set_imultifish(from.imultifish());
    }
    if (from.has_ibulletlivetime()) {
      set_ibulletlivetime(from.ibulletlivetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_HitFish_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_HitFish_Notify::CopyFrom(const Zone_HitFish_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_HitFish_Notify::IsInitialized() const {

  return true;
}

void Zone_HitFish_Notify::Swap(Zone_HitFish_Notify* other) {
  if (other != this) {
    std::swap(ubulletuniqid_, other->ubulletuniqid_);
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(iseat_, other->iseat_);
    std::swap(irewardcoins_, other->irewardcoins_);
    std::swap(bisform_, other->bisform_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(imultifish_, other->imultifish_);
    std::swap(ibulletlivetime_, other->ibulletlivetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_HitFish_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_HitFish_Notify_descriptor_;
  metadata.reflection = Zone_HitFish_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_HitFormFish_Request::kUBulletUniqIDFieldNumber;
const int Zone_HitFormFish_Request::kIFormOutIDFieldNumber;
const int Zone_HitFormFish_Request::kIFishIndexFieldNumber;
const int Zone_HitFormFish_Request::kLHitTimeFieldNumber;
#endif  // !_MSC_VER

Zone_HitFormFish_Request::Zone_HitFormFish_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_HitFormFish_Request::InitAsDefaultInstance() {
}

Zone_HitFormFish_Request::Zone_HitFormFish_Request(const Zone_HitFormFish_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_HitFormFish_Request::SharedCtor() {
  _cached_size_ = 0;
  ubulletuniqid_ = 0u;
  iformoutid_ = 0;
  ifishindex_ = 0;
  lhittime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_HitFormFish_Request::~Zone_HitFormFish_Request() {
  SharedDtor();
}

void Zone_HitFormFish_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_HitFormFish_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_HitFormFish_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_HitFormFish_Request_descriptor_;
}

const Zone_HitFormFish_Request& Zone_HitFormFish_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_HitFormFish_Request* Zone_HitFormFish_Request::default_instance_ = NULL;

Zone_HitFormFish_Request* Zone_HitFormFish_Request::New() const {
  return new Zone_HitFormFish_Request;
}

void Zone_HitFormFish_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ubulletuniqid_ = 0u;
    iformoutid_ = 0;
    ifishindex_ = 0;
    lhittime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_HitFormFish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uBulletUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ubulletuniqid_)));
          set_has_ubulletuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFormOutID;
        break;
      }

      // optional int32 iFormOutID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFormOutID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iformoutid_)));
          set_has_iformoutid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lHitTime;
        break;
      }

      // optional int64 lHitTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lHitTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lhittime_)));
          set_has_lhittime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_HitFormFish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uBulletUniqID = 1;
  if (has_ubulletuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ubulletuniqid(), output);
  }

  // optional int32 iFormOutID = 2;
  if (has_iformoutid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iformoutid(), output);
  }

  // optional int32 iFishIndex = 3;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifishindex(), output);
  }

  // optional int64 lHitTime = 4;
  if (has_lhittime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lhittime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_HitFormFish_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uBulletUniqID = 1;
  if (has_ubulletuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ubulletuniqid(), target);
  }

  // optional int32 iFormOutID = 2;
  if (has_iformoutid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iformoutid(), target);
  }

  // optional int32 iFishIndex = 3;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifishindex(), target);
  }

  // optional int64 lHitTime = 4;
  if (has_lhittime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lhittime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_HitFormFish_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uBulletUniqID = 1;
    if (has_ubulletuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ubulletuniqid());
    }

    // optional int32 iFormOutID = 2;
    if (has_iformoutid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iformoutid());
    }

    // optional int32 iFishIndex = 3;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

    // optional int64 lHitTime = 4;
    if (has_lhittime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lhittime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_HitFormFish_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_HitFormFish_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_HitFormFish_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_HitFormFish_Request::MergeFrom(const Zone_HitFormFish_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ubulletuniqid()) {
      set_ubulletuniqid(from.ubulletuniqid());
    }
    if (from.has_iformoutid()) {
      set_iformoutid(from.iformoutid());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
    if (from.has_lhittime()) {
      set_lhittime(from.lhittime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_HitFormFish_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_HitFormFish_Request::CopyFrom(const Zone_HitFormFish_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_HitFormFish_Request::IsInitialized() const {

  return true;
}

void Zone_HitFormFish_Request::Swap(Zone_HitFormFish_Request* other) {
  if (other != this) {
    std::swap(ubulletuniqid_, other->ubulletuniqid_);
    std::swap(iformoutid_, other->iformoutid_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(lhittime_, other->lhittime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_HitFormFish_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_HitFormFish_Request_descriptor_;
  metadata.reflection = Zone_HitFormFish_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_HitFormFish_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_HitFormFish_Response::Zone_HitFormFish_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_HitFormFish_Response::InitAsDefaultInstance() {
}

Zone_HitFormFish_Response::Zone_HitFormFish_Response(const Zone_HitFormFish_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_HitFormFish_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_HitFormFish_Response::~Zone_HitFormFish_Response() {
  SharedDtor();
}

void Zone_HitFormFish_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_HitFormFish_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_HitFormFish_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_HitFormFish_Response_descriptor_;
}

const Zone_HitFormFish_Response& Zone_HitFormFish_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_HitFormFish_Response* Zone_HitFormFish_Response::default_instance_ = NULL;

Zone_HitFormFish_Response* Zone_HitFormFish_Response::New() const {
  return new Zone_HitFormFish_Response;
}

void Zone_HitFormFish_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_HitFormFish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_HitFormFish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_HitFormFish_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_HitFormFish_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_HitFormFish_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_HitFormFish_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_HitFormFish_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_HitFormFish_Response::MergeFrom(const Zone_HitFormFish_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_HitFormFish_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_HitFormFish_Response::CopyFrom(const Zone_HitFormFish_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_HitFormFish_Response::IsInitialized() const {

  return true;
}

void Zone_HitFormFish_Response::Swap(Zone_HitFormFish_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_HitFormFish_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_HitFormFish_Response_descriptor_;
  metadata.reflection = Zone_HitFormFish_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_BoomFishInfo_Notify::kUFishUniqIDsFieldNumber;
const int Zone_BoomFishInfo_Notify::kUSmallFishIndexFieldNumber;
const int Zone_BoomFishInfo_Notify::kUFormUniqIDsFieldNumber;
const int Zone_BoomFishInfo_Notify::kISeatFieldNumber;
#endif  // !_MSC_VER

Zone_BoomFishInfo_Notify::Zone_BoomFishInfo_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_BoomFishInfo_Notify::InitAsDefaultInstance() {
}

Zone_BoomFishInfo_Notify::Zone_BoomFishInfo_Notify(const Zone_BoomFishInfo_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_BoomFishInfo_Notify::SharedCtor() {
  _cached_size_ = 0;
  iseat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_BoomFishInfo_Notify::~Zone_BoomFishInfo_Notify() {
  SharedDtor();
}

void Zone_BoomFishInfo_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_BoomFishInfo_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_BoomFishInfo_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_BoomFishInfo_Notify_descriptor_;
}

const Zone_BoomFishInfo_Notify& Zone_BoomFishInfo_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_BoomFishInfo_Notify* Zone_BoomFishInfo_Notify::default_instance_ = NULL;

Zone_BoomFishInfo_Notify* Zone_BoomFishInfo_Notify::New() const {
  return new Zone_BoomFishInfo_Notify;
}

void Zone_BoomFishInfo_Notify::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    iseat_ = 0;
  }
  ufishuniqids_.Clear();
  usmallfishindex_.Clear();
  uformuniqids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_BoomFishInfo_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 uFishUniqIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_ufishuniqids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ufishuniqids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_uFishUniqIDs;
        if (input->ExpectTag(16)) goto parse_uSmallFishIndex;
        break;
      }

      // repeated int32 uSmallFishIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uSmallFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_usmallfishindex())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_usmallfishindex())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uSmallFishIndex;
        if (input->ExpectTag(24)) goto parse_uFormUniqIDs;
        break;
      }

      // repeated uint32 uFormUniqIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFormUniqIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_uformuniqids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_uformuniqids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uFormUniqIDs;
        if (input->ExpectTag(32)) goto parse_iSeat;
        break;
      }

      // optional int32 iSeat = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iSeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_BoomFishInfo_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 uFishUniqIDs = 1;
  for (int i = 0; i < this->ufishuniqids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->ufishuniqids(i), output);
  }

  // repeated int32 uSmallFishIndex = 2;
  for (int i = 0; i < this->usmallfishindex_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->usmallfishindex(i), output);
  }

  // repeated uint32 uFormUniqIDs = 3;
  for (int i = 0; i < this->uformuniqids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->uformuniqids(i), output);
  }

  // optional int32 iSeat = 4;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iseat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_BoomFishInfo_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 uFishUniqIDs = 1;
  for (int i = 0; i < this->ufishuniqids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->ufishuniqids(i), target);
  }

  // repeated int32 uSmallFishIndex = 2;
  for (int i = 0; i < this->usmallfishindex_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->usmallfishindex(i), target);
  }

  // repeated uint32 uFormUniqIDs = 3;
  for (int i = 0; i < this->uformuniqids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->uformuniqids(i), target);
  }

  // optional int32 iSeat = 4;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iseat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_BoomFishInfo_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 iSeat = 4;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

  }
  // repeated uint32 uFishUniqIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->ufishuniqids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ufishuniqids(i));
    }
    total_size += 1 * this->ufishuniqids_size() + data_size;
  }

  // repeated int32 uSmallFishIndex = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->usmallfishindex_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->usmallfishindex(i));
    }
    total_size += 1 * this->usmallfishindex_size() + data_size;
  }

  // repeated uint32 uFormUniqIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->uformuniqids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->uformuniqids(i));
    }
    total_size += 1 * this->uformuniqids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_BoomFishInfo_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_BoomFishInfo_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_BoomFishInfo_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_BoomFishInfo_Notify::MergeFrom(const Zone_BoomFishInfo_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  ufishuniqids_.MergeFrom(from.ufishuniqids_);
  usmallfishindex_.MergeFrom(from.usmallfishindex_);
  uformuniqids_.MergeFrom(from.uformuniqids_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_BoomFishInfo_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_BoomFishInfo_Notify::CopyFrom(const Zone_BoomFishInfo_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_BoomFishInfo_Notify::IsInitialized() const {

  return true;
}

void Zone_BoomFishInfo_Notify::Swap(Zone_BoomFishInfo_Notify* other) {
  if (other != this) {
    ufishuniqids_.Swap(&other->ufishuniqids_);
    usmallfishindex_.Swap(&other->usmallfishindex_);
    uformuniqids_.Swap(&other->uformuniqids_);
    std::swap(iseat_, other->iseat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_BoomFishInfo_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_BoomFishInfo_Notify_descriptor_;
  metadata.reflection = Zone_BoomFishInfo_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Zone_Lottery_Request::Zone_Lottery_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Lottery_Request::InitAsDefaultInstance() {
}

Zone_Lottery_Request::Zone_Lottery_Request(const Zone_Lottery_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Lottery_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Lottery_Request::~Zone_Lottery_Request() {
  SharedDtor();
}

void Zone_Lottery_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_Lottery_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Lottery_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Lottery_Request_descriptor_;
}

const Zone_Lottery_Request& Zone_Lottery_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_Lottery_Request* Zone_Lottery_Request::default_instance_ = NULL;

Zone_Lottery_Request* Zone_Lottery_Request::New() const {
  return new Zone_Lottery_Request;
}

void Zone_Lottery_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Lottery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Zone_Lottery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Lottery_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Lottery_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Lottery_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Lottery_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Lottery_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Lottery_Request::MergeFrom(const Zone_Lottery_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Lottery_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Lottery_Request::CopyFrom(const Zone_Lottery_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Lottery_Request::IsInitialized() const {

  return true;
}

void Zone_Lottery_Request::Swap(Zone_Lottery_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Lottery_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Lottery_Request_descriptor_;
  metadata.reflection = Zone_Lottery_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_Lottery_Response::kIResultFieldNumber;
const int Zone_Lottery_Response::kILotteryItemIDFieldNumber;
#endif  // !_MSC_VER

Zone_Lottery_Response::Zone_Lottery_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_Lottery_Response::InitAsDefaultInstance() {
}

Zone_Lottery_Response::Zone_Lottery_Response(const Zone_Lottery_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_Lottery_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ilotteryitemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_Lottery_Response::~Zone_Lottery_Response() {
  SharedDtor();
}

void Zone_Lottery_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_Lottery_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_Lottery_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_Lottery_Response_descriptor_;
}

const Zone_Lottery_Response& Zone_Lottery_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_Lottery_Response* Zone_Lottery_Response::default_instance_ = NULL;

Zone_Lottery_Response* Zone_Lottery_Response::New() const {
  return new Zone_Lottery_Response;
}

void Zone_Lottery_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ilotteryitemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_Lottery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iLotteryItemID;
        break;
      }

      // optional int32 iLotteryItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLotteryItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilotteryitemid_)));
          set_has_ilotteryitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_Lottery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iLotteryItemID = 2;
  if (has_ilotteryitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ilotteryitemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_Lottery_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iLotteryItemID = 2;
  if (has_ilotteryitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ilotteryitemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_Lottery_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iLotteryItemID = 2;
    if (has_ilotteryitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilotteryitemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_Lottery_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_Lottery_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_Lottery_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_Lottery_Response::MergeFrom(const Zone_Lottery_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ilotteryitemid()) {
      set_ilotteryitemid(from.ilotteryitemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_Lottery_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_Lottery_Response::CopyFrom(const Zone_Lottery_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_Lottery_Response::IsInitialized() const {

  return true;
}

void Zone_Lottery_Response::Swap(Zone_Lottery_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ilotteryitemid_, other->ilotteryitemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_Lottery_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_Lottery_Response_descriptor_;
  metadata.reflection = Zone_Lottery_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_AddTicket_Notify::kUiUinFieldNumber;
const int Zone_AddTicket_Notify::kUFishUniqIDFieldNumber;
const int Zone_AddTicket_Notify::kBIsFormFishFieldNumber;
const int Zone_AddTicket_Notify::kIAddNumFieldNumber;
#endif  // !_MSC_VER

Zone_AddTicket_Notify::Zone_AddTicket_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_AddTicket_Notify::InitAsDefaultInstance() {
}

Zone_AddTicket_Notify::Zone_AddTicket_Notify(const Zone_AddTicket_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_AddTicket_Notify::SharedCtor() {
  _cached_size_ = 0;
  uiuin_ = 0u;
  ufishuniqid_ = 0u;
  bisformfish_ = false;
  iaddnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_AddTicket_Notify::~Zone_AddTicket_Notify() {
  SharedDtor();
}

void Zone_AddTicket_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_AddTicket_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_AddTicket_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_AddTicket_Notify_descriptor_;
}

const Zone_AddTicket_Notify& Zone_AddTicket_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_AddTicket_Notify* Zone_AddTicket_Notify::default_instance_ = NULL;

Zone_AddTicket_Notify* Zone_AddTicket_Notify::New() const {
  return new Zone_AddTicket_Notify;
}

void Zone_AddTicket_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uiuin_ = 0u;
    ufishuniqid_ = 0u;
    bisformfish_ = false;
    iaddnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_AddTicket_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uiUin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uiuin_)));
          set_has_uiuin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uFishUniqID;
        break;
      }

      // optional uint32 uFishUniqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bIsFormFish;
        break;
      }

      // optional bool bIsFormFish = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsFormFish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisformfish_)));
          set_has_bisformfish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iAddNum;
        break;
      }

      // optional int32 iAddNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iaddnum_)));
          set_has_iaddnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_AddTicket_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uiUin = 1;
  if (has_uiuin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uiuin(), output);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ufishuniqid(), output);
  }

  // optional bool bIsFormFish = 3;
  if (has_bisformfish()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bisformfish(), output);
  }

  // optional int32 iAddNum = 4;
  if (has_iaddnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iaddnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_AddTicket_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uiUin = 1;
  if (has_uiuin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uiuin(), target);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ufishuniqid(), target);
  }

  // optional bool bIsFormFish = 3;
  if (has_bisformfish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bisformfish(), target);
  }

  // optional int32 iAddNum = 4;
  if (has_iaddnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iaddnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_AddTicket_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uiUin = 1;
    if (has_uiuin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uiuin());
    }

    // optional uint32 uFishUniqID = 2;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional bool bIsFormFish = 3;
    if (has_bisformfish()) {
      total_size += 1 + 1;
    }

    // optional int32 iAddNum = 4;
    if (has_iaddnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iaddnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_AddTicket_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_AddTicket_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_AddTicket_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_AddTicket_Notify::MergeFrom(const Zone_AddTicket_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uiuin()) {
      set_uiuin(from.uiuin());
    }
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_bisformfish()) {
      set_bisformfish(from.bisformfish());
    }
    if (from.has_iaddnum()) {
      set_iaddnum(from.iaddnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_AddTicket_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_AddTicket_Notify::CopyFrom(const Zone_AddTicket_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_AddTicket_Notify::IsInitialized() const {

  return true;
}

void Zone_AddTicket_Notify::Swap(Zone_AddTicket_Notify* other) {
  if (other != this) {
    std::swap(uiuin_, other->uiuin_);
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(bisformfish_, other->bisformfish_);
    std::swap(iaddnum_, other->iaddnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_AddTicket_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_AddTicket_Notify_descriptor_;
  metadata.reflection = Zone_AddTicket_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestChange::kIQuestIDFieldNumber;
const int QuestChange::kINumFieldNumber;
const int QuestChange::kIChangeTypeFieldNumber;
#endif  // !_MSC_VER

QuestChange::QuestChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestChange::InitAsDefaultInstance() {
}

QuestChange::QuestChange(const QuestChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestChange::SharedCtor() {
  _cached_size_ = 0;
  iquestid_ = 0;
  inum_ = 0;
  ichangetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestChange::~QuestChange() {
  SharedDtor();
}

void QuestChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuestChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestChange_descriptor_;
}

const QuestChange& QuestChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

QuestChange* QuestChange::default_instance_ = NULL;

QuestChange* QuestChange::New() const {
  return new QuestChange;
}

void QuestChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iquestid_ = 0;
    inum_ = 0;
    ichangetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iQuestID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iquestid_)));
          set_has_iquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iChangeType;
        break;
      }

      // optional int32 iChangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iChangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ichangetype_)));
          set_has_ichangetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iquestid(), output);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inum(), output);
  }

  // optional int32 iChangeType = 3;
  if (has_ichangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ichangetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iquestid(), target);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inum(), target);
  }

  // optional int32 iChangeType = 3;
  if (has_ichangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ichangetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iQuestID = 1;
    if (has_iquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iquestid());
    }

    // optional int32 iNum = 2;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

    // optional int32 iChangeType = 3;
    if (has_ichangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ichangetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestChange::MergeFrom(const QuestChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iquestid()) {
      set_iquestid(from.iquestid());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
    if (from.has_ichangetype()) {
      set_ichangetype(from.ichangetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestChange::CopyFrom(const QuestChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestChange::IsInitialized() const {

  return true;
}

void QuestChange::Swap(QuestChange* other) {
  if (other != this) {
    std::swap(iquestid_, other->iquestid_);
    std::swap(inum_, other->inum_);
    std::swap(ichangetype_, other->ichangetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestChange_descriptor_;
  metadata.reflection = QuestChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_QuestChange_Notify::kStChangesFieldNumber;
const int Zone_QuestChange_Notify::kIAdventNumFieldNumber;
const int Zone_QuestChange_Notify::kIAdventEndTimeFieldNumber;
#endif  // !_MSC_VER

Zone_QuestChange_Notify::Zone_QuestChange_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_QuestChange_Notify::InitAsDefaultInstance() {
}

Zone_QuestChange_Notify::Zone_QuestChange_Notify(const Zone_QuestChange_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_QuestChange_Notify::SharedCtor() {
  _cached_size_ = 0;
  iadventnum_ = 0;
  iadventendtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_QuestChange_Notify::~Zone_QuestChange_Notify() {
  SharedDtor();
}

void Zone_QuestChange_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_QuestChange_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_QuestChange_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_QuestChange_Notify_descriptor_;
}

const Zone_QuestChange_Notify& Zone_QuestChange_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_QuestChange_Notify* Zone_QuestChange_Notify::default_instance_ = NULL;

Zone_QuestChange_Notify* Zone_QuestChange_Notify::New() const {
  return new Zone_QuestChange_Notify;
}

void Zone_QuestChange_Notify::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    iadventnum_ = 0;
    iadventendtime_ = 0;
  }
  stchanges_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_QuestChange_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .QuestChange stChanges = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stChanges:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stchanges()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stChanges;
        if (input->ExpectTag(16)) goto parse_iAdventNum;
        break;
      }

      // optional int32 iAdventNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAdventNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadventnum_)));
          set_has_iadventnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAdventEndTime;
        break;
      }

      // optional int32 iAdventEndTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAdventEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadventendtime_)));
          set_has_iadventendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_QuestChange_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .QuestChange stChanges = 1;
  for (int i = 0; i < this->stchanges_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stchanges(i), output);
  }

  // optional int32 iAdventNum = 2;
  if (has_iadventnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iadventnum(), output);
  }

  // optional int32 iAdventEndTime = 3;
  if (has_iadventendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iadventendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_QuestChange_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .QuestChange stChanges = 1;
  for (int i = 0; i < this->stchanges_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stchanges(i), target);
  }

  // optional int32 iAdventNum = 2;
  if (has_iadventnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iadventnum(), target);
  }

  // optional int32 iAdventEndTime = 3;
  if (has_iadventendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iadventendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_QuestChange_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 iAdventNum = 2;
    if (has_iadventnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadventnum());
    }

    // optional int32 iAdventEndTime = 3;
    if (has_iadventendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadventendtime());
    }

  }
  // repeated .QuestChange stChanges = 1;
  total_size += 1 * this->stchanges_size();
  for (int i = 0; i < this->stchanges_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stchanges(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_QuestChange_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_QuestChange_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_QuestChange_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_QuestChange_Notify::MergeFrom(const Zone_QuestChange_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stchanges_.MergeFrom(from.stchanges_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_iadventnum()) {
      set_iadventnum(from.iadventnum());
    }
    if (from.has_iadventendtime()) {
      set_iadventendtime(from.iadventendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_QuestChange_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_QuestChange_Notify::CopyFrom(const Zone_QuestChange_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_QuestChange_Notify::IsInitialized() const {

  return true;
}

void Zone_QuestChange_Notify::Swap(Zone_QuestChange_Notify* other) {
  if (other != this) {
    stchanges_.Swap(&other->stchanges_);
    std::swap(iadventnum_, other->iadventnum_);
    std::swap(iadventendtime_, other->iadventendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_QuestChange_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_QuestChange_Notify_descriptor_;
  metadata.reflection = Zone_QuestChange_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FinQuest_Request::kIQuestIDFieldNumber;
#endif  // !_MSC_VER

Zone_FinQuest_Request::Zone_FinQuest_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FinQuest_Request::InitAsDefaultInstance() {
}

Zone_FinQuest_Request::Zone_FinQuest_Request(const Zone_FinQuest_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FinQuest_Request::SharedCtor() {
  _cached_size_ = 0;
  iquestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FinQuest_Request::~Zone_FinQuest_Request() {
  SharedDtor();
}

void Zone_FinQuest_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FinQuest_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FinQuest_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FinQuest_Request_descriptor_;
}

const Zone_FinQuest_Request& Zone_FinQuest_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FinQuest_Request* Zone_FinQuest_Request::default_instance_ = NULL;

Zone_FinQuest_Request* Zone_FinQuest_Request::New() const {
  return new Zone_FinQuest_Request;
}

void Zone_FinQuest_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iquestid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FinQuest_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iQuestID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iquestid_)));
          set_has_iquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FinQuest_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iquestid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FinQuest_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iquestid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FinQuest_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iQuestID = 1;
    if (has_iquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iquestid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FinQuest_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FinQuest_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FinQuest_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FinQuest_Request::MergeFrom(const Zone_FinQuest_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iquestid()) {
      set_iquestid(from.iquestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FinQuest_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FinQuest_Request::CopyFrom(const Zone_FinQuest_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FinQuest_Request::IsInitialized() const {

  return true;
}

void Zone_FinQuest_Request::Swap(Zone_FinQuest_Request* other) {
  if (other != this) {
    std::swap(iquestid_, other->iquestid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FinQuest_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FinQuest_Request_descriptor_;
  metadata.reflection = Zone_FinQuest_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FinQuest_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_FinQuest_Response::Zone_FinQuest_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FinQuest_Response::InitAsDefaultInstance() {
}

Zone_FinQuest_Response::Zone_FinQuest_Response(const Zone_FinQuest_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FinQuest_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FinQuest_Response::~Zone_FinQuest_Response() {
  SharedDtor();
}

void Zone_FinQuest_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FinQuest_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FinQuest_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FinQuest_Response_descriptor_;
}

const Zone_FinQuest_Response& Zone_FinQuest_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FinQuest_Response* Zone_FinQuest_Response::default_instance_ = NULL;

Zone_FinQuest_Response* Zone_FinQuest_Response::New() const {
  return new Zone_FinQuest_Response;
}

void Zone_FinQuest_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FinQuest_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FinQuest_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FinQuest_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FinQuest_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FinQuest_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FinQuest_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FinQuest_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FinQuest_Response::MergeFrom(const Zone_FinQuest_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FinQuest_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FinQuest_Response::CopyFrom(const Zone_FinQuest_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FinQuest_Response::IsInitialized() const {

  return true;
}

void Zone_FinQuest_Response::Swap(Zone_FinQuest_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FinQuest_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FinQuest_Response_descriptor_;
  metadata.reflection = Zone_FinQuest_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardInfo::kITypeFieldNumber;
const int RewardInfo::kIIDFieldNumber;
const int RewardInfo::kINumFieldNumber;
#endif  // !_MSC_VER

RewardInfo::RewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardInfo::InitAsDefaultInstance() {
}

RewardInfo::RewardInfo(const RewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  itype_ = 0;
  iid_ = 0;
  inum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardInfo::~RewardInfo() {
  SharedDtor();
}

void RewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardInfo_descriptor_;
}

const RewardInfo& RewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

RewardInfo* RewardInfo::default_instance_ = NULL;

RewardInfo* RewardInfo::New() const {
  return new RewardInfo;
}

void RewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itype_ = 0;
    iid_ = 0;
    inum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iID;
        break;
      }

      // optional int32 iID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iid_)));
          set_has_iid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itype(), output);
  }

  // optional int32 iID = 2;
  if (has_iid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iid(), output);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itype(), target);
  }

  // optional int32 iID = 2;
  if (has_iid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iid(), target);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iType = 1;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional int32 iID = 2;
    if (has_iid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iid());
    }

    // optional int32 iNum = 3;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_iid()) {
      set_iid(from.iid());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {

  return true;
}

void RewardInfo::Swap(RewardInfo* other) {
  if (other != this) {
    std::swap(itype_, other->itype_);
    std::swap(iid_, other->iid_);
    std::swap(inum_, other->inum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardInfo_descriptor_;
  metadata.reflection = RewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetReward_Notify::kIQuestIDFieldNumber;
const int Zone_GetReward_Notify::kStRewardsFieldNumber;
#endif  // !_MSC_VER

Zone_GetReward_Notify::Zone_GetReward_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetReward_Notify::InitAsDefaultInstance() {
}

Zone_GetReward_Notify::Zone_GetReward_Notify(const Zone_GetReward_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetReward_Notify::SharedCtor() {
  _cached_size_ = 0;
  iquestid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetReward_Notify::~Zone_GetReward_Notify() {
  SharedDtor();
}

void Zone_GetReward_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetReward_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetReward_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetReward_Notify_descriptor_;
}

const Zone_GetReward_Notify& Zone_GetReward_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetReward_Notify* Zone_GetReward_Notify::default_instance_ = NULL;

Zone_GetReward_Notify* Zone_GetReward_Notify::New() const {
  return new Zone_GetReward_Notify;
}

void Zone_GetReward_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iquestid_ = 0;
  }
  strewards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetReward_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iQuestID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iquestid_)));
          set_has_iquestid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRewards;
        break;
      }

      // repeated .RewardInfo stRewards = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRewards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strewards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRewards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetReward_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iquestid(), output);
  }

  // repeated .RewardInfo stRewards = 2;
  for (int i = 0; i < this->strewards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strewards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetReward_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iQuestID = 1;
  if (has_iquestid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iquestid(), target);
  }

  // repeated .RewardInfo stRewards = 2;
  for (int i = 0; i < this->strewards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strewards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetReward_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iQuestID = 1;
    if (has_iquestid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iquestid());
    }

  }
  // repeated .RewardInfo stRewards = 2;
  total_size += 1 * this->strewards_size();
  for (int i = 0; i < this->strewards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strewards(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetReward_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetReward_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetReward_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetReward_Notify::MergeFrom(const Zone_GetReward_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  strewards_.MergeFrom(from.strewards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iquestid()) {
      set_iquestid(from.iquestid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetReward_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetReward_Notify::CopyFrom(const Zone_GetReward_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetReward_Notify::IsInitialized() const {

  return true;
}

void Zone_GetReward_Notify::Swap(Zone_GetReward_Notify* other) {
  if (other != this) {
    std::swap(iquestid_, other->iquestid_);
    strewards_.Swap(&other->strewards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetReward_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetReward_Notify_descriptor_;
  metadata.reflection = Zone_GetReward_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SetExchange_Request::kStUserInfoFieldNumber;
#endif  // !_MSC_VER

Zone_SetExchange_Request::Zone_SetExchange_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SetExchange_Request::InitAsDefaultInstance() {
  stuserinfo_ = const_cast< ::ExchangeUser*>(&::ExchangeUser::default_instance());
}

Zone_SetExchange_Request::Zone_SetExchange_Request(const Zone_SetExchange_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SetExchange_Request::SharedCtor() {
  _cached_size_ = 0;
  stuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SetExchange_Request::~Zone_SetExchange_Request() {
  SharedDtor();
}

void Zone_SetExchange_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stuserinfo_;
  }
}

void Zone_SetExchange_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SetExchange_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SetExchange_Request_descriptor_;
}

const Zone_SetExchange_Request& Zone_SetExchange_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_SetExchange_Request* Zone_SetExchange_Request::default_instance_ = NULL;

Zone_SetExchange_Request* Zone_SetExchange_Request::New() const {
  return new Zone_SetExchange_Request;
}

void Zone_SetExchange_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stuserinfo()) {
      if (stuserinfo_ != NULL) stuserinfo_->::ExchangeUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SetExchange_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ExchangeUser stUserInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SetExchange_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ExchangeUser stUserInfo = 1;
  if (has_stuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SetExchange_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ExchangeUser stUserInfo = 1;
  if (has_stuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SetExchange_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ExchangeUser stUserInfo = 1;
    if (has_stuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SetExchange_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SetExchange_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SetExchange_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SetExchange_Request::MergeFrom(const Zone_SetExchange_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stuserinfo()) {
      mutable_stuserinfo()->::ExchangeUser::MergeFrom(from.stuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SetExchange_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SetExchange_Request::CopyFrom(const Zone_SetExchange_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SetExchange_Request::IsInitialized() const {

  return true;
}

void Zone_SetExchange_Request::Swap(Zone_SetExchange_Request* other) {
  if (other != this) {
    std::swap(stuserinfo_, other->stuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SetExchange_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SetExchange_Request_descriptor_;
  metadata.reflection = Zone_SetExchange_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_SetExchange_Response::kIResultFieldNumber;
const int Zone_SetExchange_Response::kStUserInfoFieldNumber;
#endif  // !_MSC_VER

Zone_SetExchange_Response::Zone_SetExchange_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_SetExchange_Response::InitAsDefaultInstance() {
  stuserinfo_ = const_cast< ::ExchangeUser*>(&::ExchangeUser::default_instance());
}

Zone_SetExchange_Response::Zone_SetExchange_Response(const Zone_SetExchange_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_SetExchange_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stuserinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_SetExchange_Response::~Zone_SetExchange_Response() {
  SharedDtor();
}

void Zone_SetExchange_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stuserinfo_;
  }
}

void Zone_SetExchange_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_SetExchange_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_SetExchange_Response_descriptor_;
}

const Zone_SetExchange_Response& Zone_SetExchange_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_SetExchange_Response* Zone_SetExchange_Response::default_instance_ = NULL;

Zone_SetExchange_Response* Zone_SetExchange_Response::New() const {
  return new Zone_SetExchange_Response;
}

void Zone_SetExchange_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stuserinfo()) {
      if (stuserinfo_ != NULL) stuserinfo_->::ExchangeUser::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_SetExchange_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stUserInfo;
        break;
      }

      // optional .ExchangeUser stUserInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stUserInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuserinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_SetExchange_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .ExchangeUser stUserInfo = 2;
  if (has_stuserinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stuserinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_SetExchange_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .ExchangeUser stUserInfo = 2;
  if (has_stuserinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stuserinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_SetExchange_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .ExchangeUser stUserInfo = 2;
    if (has_stuserinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuserinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_SetExchange_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_SetExchange_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_SetExchange_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_SetExchange_Response::MergeFrom(const Zone_SetExchange_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stuserinfo()) {
      mutable_stuserinfo()->::ExchangeUser::MergeFrom(from.stuserinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_SetExchange_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_SetExchange_Response::CopyFrom(const Zone_SetExchange_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_SetExchange_Response::IsInitialized() const {

  return true;
}

void Zone_SetExchange_Response::Swap(Zone_SetExchange_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stuserinfo_, other->stuserinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_SetExchange_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_SetExchange_Response_descriptor_;
  metadata.reflection = Zone_SetExchange_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ExchangeItem_Request::kIExchangeIDFieldNumber;
#endif  // !_MSC_VER

Zone_ExchangeItem_Request::Zone_ExchangeItem_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ExchangeItem_Request::InitAsDefaultInstance() {
}

Zone_ExchangeItem_Request::Zone_ExchangeItem_Request(const Zone_ExchangeItem_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ExchangeItem_Request::SharedCtor() {
  _cached_size_ = 0;
  iexchangeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ExchangeItem_Request::~Zone_ExchangeItem_Request() {
  SharedDtor();
}

void Zone_ExchangeItem_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ExchangeItem_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ExchangeItem_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ExchangeItem_Request_descriptor_;
}

const Zone_ExchangeItem_Request& Zone_ExchangeItem_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ExchangeItem_Request* Zone_ExchangeItem_Request::default_instance_ = NULL;

Zone_ExchangeItem_Request* Zone_ExchangeItem_Request::New() const {
  return new Zone_ExchangeItem_Request;
}

void Zone_ExchangeItem_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iexchangeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ExchangeItem_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iExchangeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ExchangeItem_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iexchangeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ExchangeItem_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iexchangeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ExchangeItem_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iExchangeID = 1;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ExchangeItem_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ExchangeItem_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ExchangeItem_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ExchangeItem_Request::MergeFrom(const Zone_ExchangeItem_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ExchangeItem_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ExchangeItem_Request::CopyFrom(const Zone_ExchangeItem_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ExchangeItem_Request::IsInitialized() const {

  return true;
}

void Zone_ExchangeItem_Request::Swap(Zone_ExchangeItem_Request* other) {
  if (other != this) {
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ExchangeItem_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ExchangeItem_Request_descriptor_;
  metadata.reflection = Zone_ExchangeItem_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ExchangeItem_Response::kIResultFieldNumber;
const int Zone_ExchangeItem_Response::kStOrderFieldNumber;
#endif  // !_MSC_VER

Zone_ExchangeItem_Response::Zone_ExchangeItem_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ExchangeItem_Response::InitAsDefaultInstance() {
  storder_ = const_cast< ::ExchangeOrder*>(&::ExchangeOrder::default_instance());
}

Zone_ExchangeItem_Response::Zone_ExchangeItem_Response(const Zone_ExchangeItem_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ExchangeItem_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  storder_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ExchangeItem_Response::~Zone_ExchangeItem_Response() {
  SharedDtor();
}

void Zone_ExchangeItem_Response::SharedDtor() {
  if (this != default_instance_) {
    delete storder_;
  }
}

void Zone_ExchangeItem_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ExchangeItem_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ExchangeItem_Response_descriptor_;
}

const Zone_ExchangeItem_Response& Zone_ExchangeItem_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ExchangeItem_Response* Zone_ExchangeItem_Response::default_instance_ = NULL;

Zone_ExchangeItem_Response* Zone_ExchangeItem_Response::New() const {
  return new Zone_ExchangeItem_Response;
}

void Zone_ExchangeItem_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_storder()) {
      if (storder_ != NULL) storder_->::ExchangeOrder::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ExchangeItem_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stOrder;
        break;
      }

      // optional .ExchangeOrder stOrder = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stOrder:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storder()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ExchangeItem_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .ExchangeOrder stOrder = 2;
  if (has_storder()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storder(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ExchangeItem_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .ExchangeOrder stOrder = 2;
  if (has_storder()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storder(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ExchangeItem_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .ExchangeOrder stOrder = 2;
    if (has_storder()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storder());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ExchangeItem_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ExchangeItem_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ExchangeItem_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ExchangeItem_Response::MergeFrom(const Zone_ExchangeItem_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_storder()) {
      mutable_storder()->::ExchangeOrder::MergeFrom(from.storder());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ExchangeItem_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ExchangeItem_Response::CopyFrom(const Zone_ExchangeItem_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ExchangeItem_Response::IsInitialized() const {

  return true;
}

void Zone_ExchangeItem_Response::Swap(Zone_ExchangeItem_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(storder_, other->storder_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ExchangeItem_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ExchangeItem_Response_descriptor_;
  metadata.reflection = Zone_ExchangeItem_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_NewMailInfo_Notify::kStMailInfoFieldNumber;
const int Zone_NewMailInfo_Notify::kUDelUniqIDsFieldNumber;
#endif  // !_MSC_VER

Zone_NewMailInfo_Notify::Zone_NewMailInfo_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_NewMailInfo_Notify::InitAsDefaultInstance() {
  stmailinfo_ = const_cast< ::OneMailInfo*>(&::OneMailInfo::default_instance());
}

Zone_NewMailInfo_Notify::Zone_NewMailInfo_Notify(const Zone_NewMailInfo_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_NewMailInfo_Notify::SharedCtor() {
  _cached_size_ = 0;
  stmailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_NewMailInfo_Notify::~Zone_NewMailInfo_Notify() {
  SharedDtor();
}

void Zone_NewMailInfo_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stmailinfo_;
  }
}

void Zone_NewMailInfo_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_NewMailInfo_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_NewMailInfo_Notify_descriptor_;
}

const Zone_NewMailInfo_Notify& Zone_NewMailInfo_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_NewMailInfo_Notify* Zone_NewMailInfo_Notify::default_instance_ = NULL;

Zone_NewMailInfo_Notify* Zone_NewMailInfo_Notify::New() const {
  return new Zone_NewMailInfo_Notify;
}

void Zone_NewMailInfo_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stmailinfo()) {
      if (stmailinfo_ != NULL) stmailinfo_->::OneMailInfo::Clear();
    }
  }
  udeluniqids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_NewMailInfo_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .OneMailInfo stMailInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stmailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uDelUniqIDs;
        break;
      }

      // repeated uint32 uDelUniqIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uDelUniqIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_udeluniqids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_udeluniqids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uDelUniqIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_NewMailInfo_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .OneMailInfo stMailInfo = 1;
  if (has_stmailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stmailinfo(), output);
  }

  // repeated uint32 uDelUniqIDs = 2;
  for (int i = 0; i < this->udeluniqids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->udeluniqids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_NewMailInfo_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .OneMailInfo stMailInfo = 1;
  if (has_stmailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stmailinfo(), target);
  }

  // repeated uint32 uDelUniqIDs = 2;
  for (int i = 0; i < this->udeluniqids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->udeluniqids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_NewMailInfo_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .OneMailInfo stMailInfo = 1;
    if (has_stmailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stmailinfo());
    }

  }
  // repeated uint32 uDelUniqIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->udeluniqids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->udeluniqids(i));
    }
    total_size += 1 * this->udeluniqids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_NewMailInfo_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_NewMailInfo_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_NewMailInfo_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_NewMailInfo_Notify::MergeFrom(const Zone_NewMailInfo_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  udeluniqids_.MergeFrom(from.udeluniqids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stmailinfo()) {
      mutable_stmailinfo()->::OneMailInfo::MergeFrom(from.stmailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_NewMailInfo_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_NewMailInfo_Notify::CopyFrom(const Zone_NewMailInfo_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_NewMailInfo_Notify::IsInitialized() const {

  return true;
}

void Zone_NewMailInfo_Notify::Swap(Zone_NewMailInfo_Notify* other) {
  if (other != this) {
    std::swap(stmailinfo_, other->stmailinfo_);
    udeluniqids_.Swap(&other->udeluniqids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_NewMailInfo_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_NewMailInfo_Notify_descriptor_;
  metadata.reflection = Zone_NewMailInfo_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_MailOpera_Request::kUUniqIDFieldNumber;
const int Zone_MailOpera_Request::kIOperaTypeFieldNumber;
#endif  // !_MSC_VER

Zone_MailOpera_Request::Zone_MailOpera_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_MailOpera_Request::InitAsDefaultInstance() {
}

Zone_MailOpera_Request::Zone_MailOpera_Request(const Zone_MailOpera_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_MailOpera_Request::SharedCtor() {
  _cached_size_ = 0;
  uuniqid_ = 0u;
  ioperatype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_MailOpera_Request::~Zone_MailOpera_Request() {
  SharedDtor();
}

void Zone_MailOpera_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_MailOpera_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_MailOpera_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_MailOpera_Request_descriptor_;
}

const Zone_MailOpera_Request& Zone_MailOpera_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_MailOpera_Request* Zone_MailOpera_Request::default_instance_ = NULL;

Zone_MailOpera_Request* Zone_MailOpera_Request::New() const {
  return new Zone_MailOpera_Request;
}

void Zone_MailOpera_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uuniqid_ = 0u;
    ioperatype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_MailOpera_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuniqid_)));
          set_has_uuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iOperaType;
        break;
      }

      // optional int32 iOperaType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOperaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioperatype_)));
          set_has_ioperatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_MailOpera_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uuniqid(), output);
  }

  // optional int32 iOperaType = 2;
  if (has_ioperatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ioperatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_MailOpera_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uUniqID = 1;
  if (has_uuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uuniqid(), target);
  }

  // optional int32 iOperaType = 2;
  if (has_ioperatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ioperatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_MailOpera_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uUniqID = 1;
    if (has_uuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuniqid());
    }

    // optional int32 iOperaType = 2;
    if (has_ioperatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioperatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_MailOpera_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_MailOpera_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_MailOpera_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_MailOpera_Request::MergeFrom(const Zone_MailOpera_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uuniqid()) {
      set_uuniqid(from.uuniqid());
    }
    if (from.has_ioperatype()) {
      set_ioperatype(from.ioperatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_MailOpera_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_MailOpera_Request::CopyFrom(const Zone_MailOpera_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_MailOpera_Request::IsInitialized() const {

  return true;
}

void Zone_MailOpera_Request::Swap(Zone_MailOpera_Request* other) {
  if (other != this) {
    std::swap(uuniqid_, other->uuniqid_);
    std::swap(ioperatype_, other->ioperatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_MailOpera_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_MailOpera_Request_descriptor_;
  metadata.reflection = Zone_MailOpera_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_MailOpera_Response::kIResultFieldNumber;
const int Zone_MailOpera_Response::kUUniqIDFieldNumber;
const int Zone_MailOpera_Response::kIOperaTypeFieldNumber;
#endif  // !_MSC_VER

Zone_MailOpera_Response::Zone_MailOpera_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_MailOpera_Response::InitAsDefaultInstance() {
}

Zone_MailOpera_Response::Zone_MailOpera_Response(const Zone_MailOpera_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_MailOpera_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uuniqid_ = 0u;
  ioperatype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_MailOpera_Response::~Zone_MailOpera_Response() {
  SharedDtor();
}

void Zone_MailOpera_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_MailOpera_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_MailOpera_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_MailOpera_Response_descriptor_;
}

const Zone_MailOpera_Response& Zone_MailOpera_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_MailOpera_Response* Zone_MailOpera_Response::default_instance_ = NULL;

Zone_MailOpera_Response* Zone_MailOpera_Response::New() const {
  return new Zone_MailOpera_Response;
}

void Zone_MailOpera_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uuniqid_ = 0u;
    ioperatype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_MailOpera_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uUniqID;
        break;
      }

      // optional uint32 uUniqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uuniqid_)));
          set_has_uuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iOperaType;
        break;
      }

      // optional int32 iOperaType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iOperaType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ioperatype_)));
          set_has_ioperatype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_MailOpera_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uUniqID = 2;
  if (has_uuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uuniqid(), output);
  }

  // optional int32 iOperaType = 4;
  if (has_ioperatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ioperatype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_MailOpera_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uUniqID = 2;
  if (has_uuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uuniqid(), target);
  }

  // optional int32 iOperaType = 4;
  if (has_ioperatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ioperatype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_MailOpera_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uUniqID = 2;
    if (has_uuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uuniqid());
    }

    // optional int32 iOperaType = 4;
    if (has_ioperatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ioperatype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_MailOpera_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_MailOpera_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_MailOpera_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_MailOpera_Response::MergeFrom(const Zone_MailOpera_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uuniqid()) {
      set_uuniqid(from.uuniqid());
    }
    if (from.has_ioperatype()) {
      set_ioperatype(from.ioperatype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_MailOpera_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_MailOpera_Response::CopyFrom(const Zone_MailOpera_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_MailOpera_Response::IsInitialized() const {

  return true;
}

void Zone_MailOpera_Response::Swap(Zone_MailOpera_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(uuniqid_, other->uuniqid_);
    std::swap(ioperatype_, other->ioperatype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_MailOpera_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_MailOpera_Response_descriptor_;
  metadata.reflection = Zone_MailOpera_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetLivness_Request::kILivnessRewardIDFieldNumber;
#endif  // !_MSC_VER

Zone_GetLivness_Request::Zone_GetLivness_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetLivness_Request::InitAsDefaultInstance() {
}

Zone_GetLivness_Request::Zone_GetLivness_Request(const Zone_GetLivness_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetLivness_Request::SharedCtor() {
  _cached_size_ = 0;
  ilivnessrewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetLivness_Request::~Zone_GetLivness_Request() {
  SharedDtor();
}

void Zone_GetLivness_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetLivness_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetLivness_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetLivness_Request_descriptor_;
}

const Zone_GetLivness_Request& Zone_GetLivness_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetLivness_Request* Zone_GetLivness_Request::default_instance_ = NULL;

Zone_GetLivness_Request* Zone_GetLivness_Request::New() const {
  return new Zone_GetLivness_Request;
}

void Zone_GetLivness_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ilivnessrewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetLivness_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iLivnessRewardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilivnessrewardid_)));
          set_has_ilivnessrewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetLivness_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iLivnessRewardID = 1;
  if (has_ilivnessrewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ilivnessrewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetLivness_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iLivnessRewardID = 1;
  if (has_ilivnessrewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ilivnessrewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetLivness_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iLivnessRewardID = 1;
    if (has_ilivnessrewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilivnessrewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetLivness_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetLivness_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetLivness_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetLivness_Request::MergeFrom(const Zone_GetLivness_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ilivnessrewardid()) {
      set_ilivnessrewardid(from.ilivnessrewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetLivness_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetLivness_Request::CopyFrom(const Zone_GetLivness_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetLivness_Request::IsInitialized() const {

  return true;
}

void Zone_GetLivness_Request::Swap(Zone_GetLivness_Request* other) {
  if (other != this) {
    std::swap(ilivnessrewardid_, other->ilivnessrewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetLivness_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetLivness_Request_descriptor_;
  metadata.reflection = Zone_GetLivness_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetLivness_Response::kIResultFieldNumber;
const int Zone_GetLivness_Response::kILivnessRewardIDFieldNumber;
#endif  // !_MSC_VER

Zone_GetLivness_Response::Zone_GetLivness_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetLivness_Response::InitAsDefaultInstance() {
}

Zone_GetLivness_Response::Zone_GetLivness_Response(const Zone_GetLivness_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetLivness_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ilivnessrewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetLivness_Response::~Zone_GetLivness_Response() {
  SharedDtor();
}

void Zone_GetLivness_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetLivness_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetLivness_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetLivness_Response_descriptor_;
}

const Zone_GetLivness_Response& Zone_GetLivness_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetLivness_Response* Zone_GetLivness_Response::default_instance_ = NULL;

Zone_GetLivness_Response* Zone_GetLivness_Response::New() const {
  return new Zone_GetLivness_Response;
}

void Zone_GetLivness_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ilivnessrewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetLivness_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iLivnessRewardID;
        break;
      }

      // optional int32 iLivnessRewardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLivnessRewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilivnessrewardid_)));
          set_has_ilivnessrewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetLivness_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iLivnessRewardID = 2;
  if (has_ilivnessrewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ilivnessrewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetLivness_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iLivnessRewardID = 2;
  if (has_ilivnessrewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ilivnessrewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetLivness_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iLivnessRewardID = 2;
    if (has_ilivnessrewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilivnessrewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetLivness_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetLivness_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetLivness_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetLivness_Response::MergeFrom(const Zone_GetLivness_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ilivnessrewardid()) {
      set_ilivnessrewardid(from.ilivnessrewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetLivness_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetLivness_Response::CopyFrom(const Zone_GetLivness_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetLivness_Response::IsInitialized() const {

  return true;
}

void Zone_GetLivness_Response::Swap(Zone_GetLivness_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ilivnessrewardid_, other->ilivnessrewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetLivness_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetLivness_Response_descriptor_;
  metadata.reflection = Zone_GetLivness_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetRankInfo_Request::kITypeFieldNumber;
const int Zone_GetRankInfo_Request::kIFromIndexFieldNumber;
const int Zone_GetRankInfo_Request::kINumFieldNumber;
const int Zone_GetRankInfo_Request::kBLastRankFieldNumber;
#endif  // !_MSC_VER

Zone_GetRankInfo_Request::Zone_GetRankInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetRankInfo_Request::InitAsDefaultInstance() {
}

Zone_GetRankInfo_Request::Zone_GetRankInfo_Request(const Zone_GetRankInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetRankInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  itype_ = 0;
  ifromindex_ = 0;
  inum_ = 0;
  blastrank_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetRankInfo_Request::~Zone_GetRankInfo_Request() {
  SharedDtor();
}

void Zone_GetRankInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetRankInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetRankInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetRankInfo_Request_descriptor_;
}

const Zone_GetRankInfo_Request& Zone_GetRankInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetRankInfo_Request* Zone_GetRankInfo_Request::default_instance_ = NULL;

Zone_GetRankInfo_Request* Zone_GetRankInfo_Request::New() const {
  return new Zone_GetRankInfo_Request;
}

void Zone_GetRankInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itype_ = 0;
    ifromindex_ = 0;
    inum_ = 0;
    blastrank_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetRankInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFromIndex;
        break;
      }

      // optional int32 iFromIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromindex_)));
          set_has_ifromindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bLastRank;
        break;
      }

      // optional bool bLastRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bLastRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blastrank_)));
          set_has_blastrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetRankInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itype(), output);
  }

  // optional int32 iFromIndex = 2;
  if (has_ifromindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifromindex(), output);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inum(), output);
  }

  // optional bool bLastRank = 4;
  if (has_blastrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blastrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetRankInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itype(), target);
  }

  // optional int32 iFromIndex = 2;
  if (has_ifromindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifromindex(), target);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inum(), target);
  }

  // optional bool bLastRank = 4;
  if (has_blastrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blastrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetRankInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iType = 1;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional int32 iFromIndex = 2;
    if (has_ifromindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromindex());
    }

    // optional int32 iNum = 3;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

    // optional bool bLastRank = 4;
    if (has_blastrank()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetRankInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetRankInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetRankInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetRankInfo_Request::MergeFrom(const Zone_GetRankInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_ifromindex()) {
      set_ifromindex(from.ifromindex());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
    if (from.has_blastrank()) {
      set_blastrank(from.blastrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetRankInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetRankInfo_Request::CopyFrom(const Zone_GetRankInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetRankInfo_Request::IsInitialized() const {

  return true;
}

void Zone_GetRankInfo_Request::Swap(Zone_GetRankInfo_Request* other) {
  if (other != this) {
    std::swap(itype_, other->itype_);
    std::swap(ifromindex_, other->ifromindex_);
    std::swap(inum_, other->inum_);
    std::swap(blastrank_, other->blastrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetRankInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetRankInfo_Request_descriptor_;
  metadata.reflection = Zone_GetRankInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetRankInfo_Response::kIResultFieldNumber;
const int Zone_GetRankInfo_Response::kITypeFieldNumber;
const int Zone_GetRankInfo_Response::kStRanksFieldNumber;
const int Zone_GetRankInfo_Response::kBLastRankFieldNumber;
const int Zone_GetRankInfo_Response::kIMyRankFieldNumber;
#endif  // !_MSC_VER

Zone_GetRankInfo_Response::Zone_GetRankInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetRankInfo_Response::InitAsDefaultInstance() {
}

Zone_GetRankInfo_Response::Zone_GetRankInfo_Response(const Zone_GetRankInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetRankInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  itype_ = 0;
  blastrank_ = false;
  imyrank_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetRankInfo_Response::~Zone_GetRankInfo_Response() {
  SharedDtor();
}

void Zone_GetRankInfo_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetRankInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetRankInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetRankInfo_Response_descriptor_;
}

const Zone_GetRankInfo_Response& Zone_GetRankInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetRankInfo_Response* Zone_GetRankInfo_Response::default_instance_ = NULL;

Zone_GetRankInfo_Response* Zone_GetRankInfo_Response::New() const {
  return new Zone_GetRankInfo_Response;
}

void Zone_GetRankInfo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    itype_ = 0;
    blastrank_ = false;
    imyrank_ = 0;
  }
  stranks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetRankInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stRanks;
        break;
      }

      // repeated .RankInfo stRanks = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRanks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stranks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_stRanks;
        if (input->ExpectTag(32)) goto parse_bLastRank;
        break;
      }

      // optional bool bLastRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bLastRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &blastrank_)));
          set_has_blastrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iMyRank;
        break;
      }

      // optional int32 iMyRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iMyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imyrank_)));
          set_has_imyrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetRankInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // repeated .RankInfo stRanks = 3;
  for (int i = 0; i < this->stranks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stranks(i), output);
  }

  // optional bool bLastRank = 4;
  if (has_blastrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->blastrank(), output);
  }

  // optional int32 iMyRank = 5;
  if (has_imyrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->imyrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetRankInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // repeated .RankInfo stRanks = 3;
  for (int i = 0; i < this->stranks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->stranks(i), target);
  }

  // optional bool bLastRank = 4;
  if (has_blastrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->blastrank(), target);
  }

  // optional int32 iMyRank = 5;
  if (has_imyrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->imyrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetRankInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional bool bLastRank = 4;
    if (has_blastrank()) {
      total_size += 1 + 1;
    }

    // optional int32 iMyRank = 5;
    if (has_imyrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imyrank());
    }

  }
  // repeated .RankInfo stRanks = 3;
  total_size += 1 * this->stranks_size();
  for (int i = 0; i < this->stranks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stranks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetRankInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetRankInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetRankInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetRankInfo_Response::MergeFrom(const Zone_GetRankInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  stranks_.MergeFrom(from.stranks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_blastrank()) {
      set_blastrank(from.blastrank());
    }
    if (from.has_imyrank()) {
      set_imyrank(from.imyrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetRankInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetRankInfo_Response::CopyFrom(const Zone_GetRankInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetRankInfo_Response::IsInitialized() const {

  return true;
}

void Zone_GetRankInfo_Response::Swap(Zone_GetRankInfo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(itype_, other->itype_);
    stranks_.Swap(&other->stranks_);
    std::swap(blastrank_, other->blastrank_);
    std::swap(imyrank_, other->imyrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetRankInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetRankInfo_Response_descriptor_;
  metadata.reflection = Zone_GetRankInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UseSkill_Request::kITypeFieldNumber;
const int Zone_UseSkill_Request::kIItemIDFieldNumber;
const int Zone_UseSkill_Request::kUFishUniqIDsFieldNumber;
const int Zone_UseSkill_Request::kStWarHeadPosFieldNumber;
#endif  // !_MSC_VER

Zone_UseSkill_Request::Zone_UseSkill_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UseSkill_Request::InitAsDefaultInstance() {
  stwarheadpos_ = const_cast< ::POS*>(&::POS::default_instance());
}

Zone_UseSkill_Request::Zone_UseSkill_Request(const Zone_UseSkill_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UseSkill_Request::SharedCtor() {
  _cached_size_ = 0;
  itype_ = 0;
  iitemid_ = 0;
  stwarheadpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UseSkill_Request::~Zone_UseSkill_Request() {
  SharedDtor();
}

void Zone_UseSkill_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stwarheadpos_;
  }
}

void Zone_UseSkill_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UseSkill_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UseSkill_Request_descriptor_;
}

const Zone_UseSkill_Request& Zone_UseSkill_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UseSkill_Request* Zone_UseSkill_Request::default_instance_ = NULL;

Zone_UseSkill_Request* Zone_UseSkill_Request::New() const {
  return new Zone_UseSkill_Request;
}

void Zone_UseSkill_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itype_ = 0;
    iitemid_ = 0;
    if (has_stwarheadpos()) {
      if (stwarheadpos_ != NULL) stwarheadpos_->::POS::Clear();
    }
  }
  ufishuniqids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UseSkill_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iItemID;
        break;
      }

      // optional int32 iItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iitemid_)));
          set_has_iitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uFishUniqIDs;
        break;
      }

      // repeated uint32 uFishUniqIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_ufishuniqids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ufishuniqids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_uFishUniqIDs;
        if (input->ExpectTag(34)) goto parse_stWarHeadPos;
        break;
      }

      // optional .POS stWarHeadPos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stWarHeadPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stwarheadpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UseSkill_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itype(), output);
  }

  // optional int32 iItemID = 2;
  if (has_iitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iitemid(), output);
  }

  // repeated uint32 uFishUniqIDs = 3;
  for (int i = 0; i < this->ufishuniqids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->ufishuniqids(i), output);
  }

  // optional .POS stWarHeadPos = 4;
  if (has_stwarheadpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stwarheadpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UseSkill_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iType = 1;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itype(), target);
  }

  // optional int32 iItemID = 2;
  if (has_iitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iitemid(), target);
  }

  // repeated uint32 uFishUniqIDs = 3;
  for (int i = 0; i < this->ufishuniqids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->ufishuniqids(i), target);
  }

  // optional .POS stWarHeadPos = 4;
  if (has_stwarheadpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stwarheadpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UseSkill_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iType = 1;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional int32 iItemID = 2;
    if (has_iitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iitemid());
    }

    // optional .POS stWarHeadPos = 4;
    if (has_stwarheadpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stwarheadpos());
    }

  }
  // repeated uint32 uFishUniqIDs = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->ufishuniqids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ufishuniqids(i));
    }
    total_size += 1 * this->ufishuniqids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UseSkill_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UseSkill_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UseSkill_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UseSkill_Request::MergeFrom(const Zone_UseSkill_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  ufishuniqids_.MergeFrom(from.ufishuniqids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_iitemid()) {
      set_iitemid(from.iitemid());
    }
    if (from.has_stwarheadpos()) {
      mutable_stwarheadpos()->::POS::MergeFrom(from.stwarheadpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UseSkill_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UseSkill_Request::CopyFrom(const Zone_UseSkill_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UseSkill_Request::IsInitialized() const {

  return true;
}

void Zone_UseSkill_Request::Swap(Zone_UseSkill_Request* other) {
  if (other != this) {
    std::swap(itype_, other->itype_);
    std::swap(iitemid_, other->iitemid_);
    ufishuniqids_.Swap(&other->ufishuniqids_);
    std::swap(stwarheadpos_, other->stwarheadpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UseSkill_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UseSkill_Request_descriptor_;
  metadata.reflection = Zone_UseSkill_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UseSkill_Response::kIResultFieldNumber;
const int Zone_UseSkill_Response::kITypeFieldNumber;
#endif  // !_MSC_VER

Zone_UseSkill_Response::Zone_UseSkill_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UseSkill_Response::InitAsDefaultInstance() {
}

Zone_UseSkill_Response::Zone_UseSkill_Response(const Zone_UseSkill_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UseSkill_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  itype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UseSkill_Response::~Zone_UseSkill_Response() {
  SharedDtor();
}

void Zone_UseSkill_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UseSkill_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UseSkill_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UseSkill_Response_descriptor_;
}

const Zone_UseSkill_Response& Zone_UseSkill_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UseSkill_Response* Zone_UseSkill_Response::default_instance_ = NULL;

Zone_UseSkill_Response* Zone_UseSkill_Response::New() const {
  return new Zone_UseSkill_Response;
}

void Zone_UseSkill_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    itype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UseSkill_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UseSkill_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UseSkill_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UseSkill_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UseSkill_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UseSkill_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UseSkill_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UseSkill_Response::MergeFrom(const Zone_UseSkill_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UseSkill_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UseSkill_Response::CopyFrom(const Zone_UseSkill_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UseSkill_Response::IsInitialized() const {

  return true;
}

void Zone_UseSkill_Response::Swap(Zone_UseSkill_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(itype_, other->itype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UseSkill_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UseSkill_Response_descriptor_;
  metadata.reflection = Zone_UseSkill_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UseSkill_Notify::kUinFieldNumber;
const int Zone_UseSkill_Notify::kITypeFieldNumber;
const int Zone_UseSkill_Notify::kBIsOpenFieldNumber;
const int Zone_UseSkill_Notify::kLAimEndTimeFieldNumber;
const int Zone_UseSkill_Notify::kUFishUniqIDsFieldNumber;
const int Zone_UseSkill_Notify::kLRewardCoinsFieldNumber;
const int Zone_UseSkill_Notify::kLWildEndTimeFieldNumber;
const int Zone_UseSkill_Notify::kIWildNumFieldNumber;
const int Zone_UseSkill_Notify::kStWarHeadPosFieldNumber;
#endif  // !_MSC_VER

Zone_UseSkill_Notify::Zone_UseSkill_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UseSkill_Notify::InitAsDefaultInstance() {
  stwarheadpos_ = const_cast< ::POS*>(&::POS::default_instance());
}

Zone_UseSkill_Notify::Zone_UseSkill_Notify(const Zone_UseSkill_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UseSkill_Notify::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  itype_ = 0;
  bisopen_ = false;
  laimendtime_ = GOOGLE_LONGLONG(0);
  lrewardcoins_ = GOOGLE_LONGLONG(0);
  lwildendtime_ = GOOGLE_LONGLONG(0);
  iwildnum_ = 0;
  stwarheadpos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UseSkill_Notify::~Zone_UseSkill_Notify() {
  SharedDtor();
}

void Zone_UseSkill_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stwarheadpos_;
  }
}

void Zone_UseSkill_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UseSkill_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UseSkill_Notify_descriptor_;
}

const Zone_UseSkill_Notify& Zone_UseSkill_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UseSkill_Notify* Zone_UseSkill_Notify::default_instance_ = NULL;

Zone_UseSkill_Notify* Zone_UseSkill_Notify::New() const {
  return new Zone_UseSkill_Notify;
}

void Zone_UseSkill_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    itype_ = 0;
    bisopen_ = false;
    laimendtime_ = GOOGLE_LONGLONG(0);
    lrewardcoins_ = GOOGLE_LONGLONG(0);
    lwildendtime_ = GOOGLE_LONGLONG(0);
    iwildnum_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stwarheadpos()) {
      if (stwarheadpos_ != NULL) stwarheadpos_->::POS::Clear();
    }
  }
  ufishuniqids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UseSkill_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iType;
        break;
      }

      // optional int32 iType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itype_)));
          set_has_itype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bIsOpen;
        break;
      }

      // optional bool bIsOpen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsOpen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisopen_)));
          set_has_bisopen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lAimEndTime;
        break;
      }

      // optional int64 lAimEndTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lAimEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &laimendtime_)));
          set_has_laimendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uFishUniqIDs;
        break;
      }

      // repeated uint32 uFishUniqIDs = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 40, input, this->mutable_ufishuniqids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_ufishuniqids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uFishUniqIDs;
        if (input->ExpectTag(48)) goto parse_lRewardCoins;
        break;
      }

      // optional int64 lRewardCoins = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lRewardCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lrewardcoins_)));
          set_has_lrewardcoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lWildEndTime;
        break;
      }

      // optional int64 lWildEndTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lWildEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lwildendtime_)));
          set_has_lwildendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_iWildNum;
        break;
      }

      // optional int32 iWildNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iWildNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iwildnum_)));
          set_has_iwildnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stWarHeadPos;
        break;
      }

      // optional .POS stWarHeadPos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stWarHeadPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stwarheadpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UseSkill_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itype(), output);
  }

  // optional bool bIsOpen = 3;
  if (has_bisopen()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bisopen(), output);
  }

  // optional int64 lAimEndTime = 4;
  if (has_laimendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->laimendtime(), output);
  }

  // repeated uint32 uFishUniqIDs = 5;
  for (int i = 0; i < this->ufishuniqids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      5, this->ufishuniqids(i), output);
  }

  // optional int64 lRewardCoins = 6;
  if (has_lrewardcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lrewardcoins(), output);
  }

  // optional int64 lWildEndTime = 7;
  if (has_lwildendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lwildendtime(), output);
  }

  // optional int32 iWildNum = 8;
  if (has_iwildnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iwildnum(), output);
  }

  // optional .POS stWarHeadPos = 9;
  if (has_stwarheadpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->stwarheadpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UseSkill_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional int32 iType = 2;
  if (has_itype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itype(), target);
  }

  // optional bool bIsOpen = 3;
  if (has_bisopen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bisopen(), target);
  }

  // optional int64 lAimEndTime = 4;
  if (has_laimendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->laimendtime(), target);
  }

  // repeated uint32 uFishUniqIDs = 5;
  for (int i = 0; i < this->ufishuniqids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(5, this->ufishuniqids(i), target);
  }

  // optional int64 lRewardCoins = 6;
  if (has_lrewardcoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lrewardcoins(), target);
  }

  // optional int64 lWildEndTime = 7;
  if (has_lwildendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lwildendtime(), target);
  }

  // optional int32 iWildNum = 8;
  if (has_iwildnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->iwildnum(), target);
  }

  // optional .POS stWarHeadPos = 9;
  if (has_stwarheadpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->stwarheadpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UseSkill_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iType = 2;
    if (has_itype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itype());
    }

    // optional bool bIsOpen = 3;
    if (has_bisopen()) {
      total_size += 1 + 1;
    }

    // optional int64 lAimEndTime = 4;
    if (has_laimendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->laimendtime());
    }

    // optional int64 lRewardCoins = 6;
    if (has_lrewardcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lrewardcoins());
    }

    // optional int64 lWildEndTime = 7;
    if (has_lwildendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lwildendtime());
    }

    // optional int32 iWildNum = 8;
    if (has_iwildnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iwildnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .POS stWarHeadPos = 9;
    if (has_stwarheadpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stwarheadpos());
    }

  }
  // repeated uint32 uFishUniqIDs = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->ufishuniqids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->ufishuniqids(i));
    }
    total_size += 1 * this->ufishuniqids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UseSkill_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UseSkill_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UseSkill_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UseSkill_Notify::MergeFrom(const Zone_UseSkill_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  ufishuniqids_.MergeFrom(from.ufishuniqids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_itype()) {
      set_itype(from.itype());
    }
    if (from.has_bisopen()) {
      set_bisopen(from.bisopen());
    }
    if (from.has_laimendtime()) {
      set_laimendtime(from.laimendtime());
    }
    if (from.has_lrewardcoins()) {
      set_lrewardcoins(from.lrewardcoins());
    }
    if (from.has_lwildendtime()) {
      set_lwildendtime(from.lwildendtime());
    }
    if (from.has_iwildnum()) {
      set_iwildnum(from.iwildnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stwarheadpos()) {
      mutable_stwarheadpos()->::POS::MergeFrom(from.stwarheadpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UseSkill_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UseSkill_Notify::CopyFrom(const Zone_UseSkill_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UseSkill_Notify::IsInitialized() const {

  return true;
}

void Zone_UseSkill_Notify::Swap(Zone_UseSkill_Notify* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(itype_, other->itype_);
    std::swap(bisopen_, other->bisopen_);
    std::swap(laimendtime_, other->laimendtime_);
    ufishuniqids_.Swap(&other->ufishuniqids_);
    std::swap(lrewardcoins_, other->lrewardcoins_);
    std::swap(lwildendtime_, other->lwildendtime_);
    std::swap(iwildnum_, other->iwildnum_);
    std::swap(stwarheadpos_, other->stwarheadpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UseSkill_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UseSkill_Notify_descriptor_;
  metadata.reflection = Zone_UseSkill_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetLimitNum_Request::kUinFieldNumber;
const int Zone_GetLimitNum_Request::kIZoneIDFieldNumber;
#endif  // !_MSC_VER

Zone_GetLimitNum_Request::Zone_GetLimitNum_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetLimitNum_Request::InitAsDefaultInstance() {
}

Zone_GetLimitNum_Request::Zone_GetLimitNum_Request(const Zone_GetLimitNum_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetLimitNum_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  izoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetLimitNum_Request::~Zone_GetLimitNum_Request() {
  SharedDtor();
}

void Zone_GetLimitNum_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetLimitNum_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetLimitNum_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetLimitNum_Request_descriptor_;
}

const Zone_GetLimitNum_Request& Zone_GetLimitNum_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetLimitNum_Request* Zone_GetLimitNum_Request::default_instance_ = NULL;

Zone_GetLimitNum_Request* Zone_GetLimitNum_Request::New() const {
  return new Zone_GetLimitNum_Request;
}

void Zone_GetLimitNum_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    izoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetLimitNum_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetLimitNum_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional int32 iZoneID = 2;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->izoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetLimitNum_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional int32 iZoneID = 2;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->izoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetLimitNum_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iZoneID = 2;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetLimitNum_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetLimitNum_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetLimitNum_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetLimitNum_Request::MergeFrom(const Zone_GetLimitNum_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetLimitNum_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetLimitNum_Request::CopyFrom(const Zone_GetLimitNum_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetLimitNum_Request::IsInitialized() const {

  return true;
}

void Zone_GetLimitNum_Request::Swap(Zone_GetLimitNum_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetLimitNum_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetLimitNum_Request_descriptor_;
  metadata.reflection = Zone_GetLimitNum_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimitInfo::kIExchangeIDFieldNumber;
const int LimitInfo::kINumFieldNumber;
#endif  // !_MSC_VER

LimitInfo::LimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitInfo::InitAsDefaultInstance() {
}

LimitInfo::LimitInfo(const LimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitInfo::SharedCtor() {
  _cached_size_ = 0;
  iexchangeid_ = 0;
  inum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitInfo::~LimitInfo() {
  SharedDtor();
}

void LimitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitInfo_descriptor_;
}

const LimitInfo& LimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

LimitInfo* LimitInfo::default_instance_ = NULL;

LimitInfo* LimitInfo::New() const {
  return new LimitInfo;
}

void LimitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iexchangeid_ = 0;
    inum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iExchangeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iexchangeid_)));
          set_has_iexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iexchangeid(), output);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iExchangeID = 1;
  if (has_iexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iexchangeid(), target);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iExchangeID = 1;
    if (has_iexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iexchangeid());
    }

    // optional int32 iNum = 2;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitInfo::MergeFrom(const LimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iexchangeid()) {
      set_iexchangeid(from.iexchangeid());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitInfo::CopyFrom(const LimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitInfo::IsInitialized() const {

  return true;
}

void LimitInfo::Swap(LimitInfo* other) {
  if (other != this) {
    std::swap(iexchangeid_, other->iexchangeid_);
    std::swap(inum_, other->inum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitInfo_descriptor_;
  metadata.reflection = LimitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetLimitNum_Response::kIResultFieldNumber;
const int Zone_GetLimitNum_Response::kStLimitsFieldNumber;
#endif  // !_MSC_VER

Zone_GetLimitNum_Response::Zone_GetLimitNum_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetLimitNum_Response::InitAsDefaultInstance() {
}

Zone_GetLimitNum_Response::Zone_GetLimitNum_Response(const Zone_GetLimitNum_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetLimitNum_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetLimitNum_Response::~Zone_GetLimitNum_Response() {
  SharedDtor();
}

void Zone_GetLimitNum_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetLimitNum_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetLimitNum_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetLimitNum_Response_descriptor_;
}

const Zone_GetLimitNum_Response& Zone_GetLimitNum_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetLimitNum_Response* Zone_GetLimitNum_Response::default_instance_ = NULL;

Zone_GetLimitNum_Response* Zone_GetLimitNum_Response::New() const {
  return new Zone_GetLimitNum_Response;
}

void Zone_GetLimitNum_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  stlimits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetLimitNum_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stLimits;
        break;
      }

      // repeated .LimitInfo stLimits = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stLimits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stlimits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stLimits;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetLimitNum_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // repeated .LimitInfo stLimits = 2;
  for (int i = 0; i < this->stlimits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stlimits(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetLimitNum_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // repeated .LimitInfo stLimits = 2;
  for (int i = 0; i < this->stlimits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stlimits(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetLimitNum_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  // repeated .LimitInfo stLimits = 2;
  total_size += 1 * this->stlimits_size();
  for (int i = 0; i < this->stlimits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stlimits(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetLimitNum_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetLimitNum_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetLimitNum_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetLimitNum_Response::MergeFrom(const Zone_GetLimitNum_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  stlimits_.MergeFrom(from.stlimits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetLimitNum_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetLimitNum_Response::CopyFrom(const Zone_GetLimitNum_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetLimitNum_Response::IsInitialized() const {

  return true;
}

void Zone_GetLimitNum_Response::Swap(Zone_GetLimitNum_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    stlimits_.Swap(&other->stlimits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetLimitNum_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetLimitNum_Response_descriptor_;
  metadata.reflection = Zone_GetLimitNum_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ChooseAimFish_Request::kUFishUniqIDFieldNumber;
const int Zone_ChooseAimFish_Request::kIFishIndexFieldNumber;
#endif  // !_MSC_VER

Zone_ChooseAimFish_Request::Zone_ChooseAimFish_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ChooseAimFish_Request::InitAsDefaultInstance() {
}

Zone_ChooseAimFish_Request::Zone_ChooseAimFish_Request(const Zone_ChooseAimFish_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ChooseAimFish_Request::SharedCtor() {
  _cached_size_ = 0;
  ufishuniqid_ = 0u;
  ifishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ChooseAimFish_Request::~Zone_ChooseAimFish_Request() {
  SharedDtor();
}

void Zone_ChooseAimFish_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ChooseAimFish_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ChooseAimFish_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ChooseAimFish_Request_descriptor_;
}

const Zone_ChooseAimFish_Request& Zone_ChooseAimFish_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ChooseAimFish_Request* Zone_ChooseAimFish_Request::default_instance_ = NULL;

Zone_ChooseAimFish_Request* Zone_ChooseAimFish_Request::New() const {
  return new Zone_ChooseAimFish_Request;
}

void Zone_ChooseAimFish_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ufishuniqid_ = 0u;
    ifishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ChooseAimFish_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uFishUniqID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ChooseAimFish_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uFishUniqID = 1;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ufishuniqid(), output);
  }

  // optional int32 iFishIndex = 2;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifishindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ChooseAimFish_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uFishUniqID = 1;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ufishuniqid(), target);
  }

  // optional int32 iFishIndex = 2;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifishindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ChooseAimFish_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uFishUniqID = 1;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional int32 iFishIndex = 2;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ChooseAimFish_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ChooseAimFish_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ChooseAimFish_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ChooseAimFish_Request::MergeFrom(const Zone_ChooseAimFish_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ChooseAimFish_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ChooseAimFish_Request::CopyFrom(const Zone_ChooseAimFish_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ChooseAimFish_Request::IsInitialized() const {

  return true;
}

void Zone_ChooseAimFish_Request::Swap(Zone_ChooseAimFish_Request* other) {
  if (other != this) {
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ChooseAimFish_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ChooseAimFish_Request_descriptor_;
  metadata.reflection = Zone_ChooseAimFish_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ChooseAimFish_Response::kIResultFieldNumber;
const int Zone_ChooseAimFish_Response::kUFishUniqIDFieldNumber;
const int Zone_ChooseAimFish_Response::kIFishIndexFieldNumber;
#endif  // !_MSC_VER

Zone_ChooseAimFish_Response::Zone_ChooseAimFish_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ChooseAimFish_Response::InitAsDefaultInstance() {
}

Zone_ChooseAimFish_Response::Zone_ChooseAimFish_Response(const Zone_ChooseAimFish_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ChooseAimFish_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ufishuniqid_ = 0u;
  ifishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ChooseAimFish_Response::~Zone_ChooseAimFish_Response() {
  SharedDtor();
}

void Zone_ChooseAimFish_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ChooseAimFish_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ChooseAimFish_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ChooseAimFish_Response_descriptor_;
}

const Zone_ChooseAimFish_Response& Zone_ChooseAimFish_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ChooseAimFish_Response* Zone_ChooseAimFish_Response::default_instance_ = NULL;

Zone_ChooseAimFish_Response* Zone_ChooseAimFish_Response::New() const {
  return new Zone_ChooseAimFish_Response;
}

void Zone_ChooseAimFish_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ufishuniqid_ = 0u;
    ifishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ChooseAimFish_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uFishUniqID;
        break;
      }

      // optional uint32 uFishUniqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ChooseAimFish_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ufishuniqid(), output);
  }

  // optional int32 iFishIndex = 3;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifishindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ChooseAimFish_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ufishuniqid(), target);
  }

  // optional int32 iFishIndex = 3;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifishindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ChooseAimFish_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uFishUniqID = 2;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional int32 iFishIndex = 3;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ChooseAimFish_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ChooseAimFish_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ChooseAimFish_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ChooseAimFish_Response::MergeFrom(const Zone_ChooseAimFish_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ChooseAimFish_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ChooseAimFish_Response::CopyFrom(const Zone_ChooseAimFish_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ChooseAimFish_Response::IsInitialized() const {

  return true;
}

void Zone_ChooseAimFish_Response::Swap(Zone_ChooseAimFish_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ChooseAimFish_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ChooseAimFish_Response_descriptor_;
  metadata.reflection = Zone_ChooseAimFish_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_ChooseAimFish_Notify::kUinFieldNumber;
const int Zone_ChooseAimFish_Notify::kUFishUniqIDFieldNumber;
const int Zone_ChooseAimFish_Notify::kIFishIndexFieldNumber;
#endif  // !_MSC_VER

Zone_ChooseAimFish_Notify::Zone_ChooseAimFish_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_ChooseAimFish_Notify::InitAsDefaultInstance() {
}

Zone_ChooseAimFish_Notify::Zone_ChooseAimFish_Notify(const Zone_ChooseAimFish_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_ChooseAimFish_Notify::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  ufishuniqid_ = 0u;
  ifishindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_ChooseAimFish_Notify::~Zone_ChooseAimFish_Notify() {
  SharedDtor();
}

void Zone_ChooseAimFish_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_ChooseAimFish_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_ChooseAimFish_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_ChooseAimFish_Notify_descriptor_;
}

const Zone_ChooseAimFish_Notify& Zone_ChooseAimFish_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_ChooseAimFish_Notify* Zone_ChooseAimFish_Notify::default_instance_ = NULL;

Zone_ChooseAimFish_Notify* Zone_ChooseAimFish_Notify::New() const {
  return new Zone_ChooseAimFish_Notify;
}

void Zone_ChooseAimFish_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
    ufishuniqid_ = 0u;
    ifishindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_ChooseAimFish_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uFishUniqID;
        break;
      }

      // optional uint32 uFishUniqID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uFishUniqID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ufishuniqid_)));
          set_has_ufishuniqid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iFishIndex;
        break;
      }

      // optional int32 iFishIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFishIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifishindex_)));
          set_has_ifishindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_ChooseAimFish_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ufishuniqid(), output);
  }

  // optional int32 iFishIndex = 3;
  if (has_ifishindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ifishindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_ChooseAimFish_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  // optional uint32 uFishUniqID = 2;
  if (has_ufishuniqid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ufishuniqid(), target);
  }

  // optional int32 iFishIndex = 3;
  if (has_ifishindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ifishindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_ChooseAimFish_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional uint32 uFishUniqID = 2;
    if (has_ufishuniqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ufishuniqid());
    }

    // optional int32 iFishIndex = 3;
    if (has_ifishindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifishindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_ChooseAimFish_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_ChooseAimFish_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_ChooseAimFish_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_ChooseAimFish_Notify::MergeFrom(const Zone_ChooseAimFish_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ufishuniqid()) {
      set_ufishuniqid(from.ufishuniqid());
    }
    if (from.has_ifishindex()) {
      set_ifishindex(from.ifishindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_ChooseAimFish_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_ChooseAimFish_Notify::CopyFrom(const Zone_ChooseAimFish_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_ChooseAimFish_Notify::IsInitialized() const {

  return true;
}

void Zone_ChooseAimFish_Notify::Swap(Zone_ChooseAimFish_Notify* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(ufishuniqid_, other->ufishuniqid_);
    std::swap(ifishindex_, other->ifishindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_ChooseAimFish_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_ChooseAimFish_Notify_descriptor_;
  metadata.reflection = Zone_ChooseAimFish_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

Zone_GetUserAlms_Request::Zone_GetUserAlms_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetUserAlms_Request::InitAsDefaultInstance() {
}

Zone_GetUserAlms_Request::Zone_GetUserAlms_Request(const Zone_GetUserAlms_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetUserAlms_Request::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetUserAlms_Request::~Zone_GetUserAlms_Request() {
  SharedDtor();
}

void Zone_GetUserAlms_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetUserAlms_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetUserAlms_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetUserAlms_Request_descriptor_;
}

const Zone_GetUserAlms_Request& Zone_GetUserAlms_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetUserAlms_Request* Zone_GetUserAlms_Request::default_instance_ = NULL;

Zone_GetUserAlms_Request* Zone_GetUserAlms_Request::New() const {
  return new Zone_GetUserAlms_Request;
}

void Zone_GetUserAlms_Request::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetUserAlms_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Zone_GetUserAlms_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetUserAlms_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetUserAlms_Request::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetUserAlms_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetUserAlms_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetUserAlms_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetUserAlms_Request::MergeFrom(const Zone_GetUserAlms_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetUserAlms_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetUserAlms_Request::CopyFrom(const Zone_GetUserAlms_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetUserAlms_Request::IsInitialized() const {

  return true;
}

void Zone_GetUserAlms_Request::Swap(Zone_GetUserAlms_Request* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetUserAlms_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetUserAlms_Request_descriptor_;
  metadata.reflection = Zone_GetUserAlms_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetUserAlms_Response::kIResultFieldNumber;
#endif  // !_MSC_VER

Zone_GetUserAlms_Response::Zone_GetUserAlms_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetUserAlms_Response::InitAsDefaultInstance() {
}

Zone_GetUserAlms_Response::Zone_GetUserAlms_Response(const Zone_GetUserAlms_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetUserAlms_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetUserAlms_Response::~Zone_GetUserAlms_Response() {
  SharedDtor();
}

void Zone_GetUserAlms_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetUserAlms_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetUserAlms_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetUserAlms_Response_descriptor_;
}

const Zone_GetUserAlms_Response& Zone_GetUserAlms_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetUserAlms_Response* Zone_GetUserAlms_Response::default_instance_ = NULL;

Zone_GetUserAlms_Response* Zone_GetUserAlms_Response::New() const {
  return new Zone_GetUserAlms_Response;
}

void Zone_GetUserAlms_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetUserAlms_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetUserAlms_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetUserAlms_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetUserAlms_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetUserAlms_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetUserAlms_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetUserAlms_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetUserAlms_Response::MergeFrom(const Zone_GetUserAlms_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetUserAlms_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetUserAlms_Response::CopyFrom(const Zone_GetUserAlms_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetUserAlms_Response::IsInitialized() const {

  return true;
}

void Zone_GetUserAlms_Response::Swap(Zone_GetUserAlms_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetUserAlms_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetUserAlms_Response_descriptor_;
  metadata.reflection = Zone_GetUserAlms_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UpdateAlms_Notify::kIGetNumFieldNumber;
const int Zone_UpdateAlms_Notify::kINextGetTimeFieldNumber;
#endif  // !_MSC_VER

Zone_UpdateAlms_Notify::Zone_UpdateAlms_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UpdateAlms_Notify::InitAsDefaultInstance() {
}

Zone_UpdateAlms_Notify::Zone_UpdateAlms_Notify(const Zone_UpdateAlms_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UpdateAlms_Notify::SharedCtor() {
  _cached_size_ = 0;
  igetnum_ = 0;
  inextgettime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UpdateAlms_Notify::~Zone_UpdateAlms_Notify() {
  SharedDtor();
}

void Zone_UpdateAlms_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UpdateAlms_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UpdateAlms_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UpdateAlms_Notify_descriptor_;
}

const Zone_UpdateAlms_Notify& Zone_UpdateAlms_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UpdateAlms_Notify* Zone_UpdateAlms_Notify::default_instance_ = NULL;

Zone_UpdateAlms_Notify* Zone_UpdateAlms_Notify::New() const {
  return new Zone_UpdateAlms_Notify;
}

void Zone_UpdateAlms_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    igetnum_ = 0;
    inextgettime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UpdateAlms_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iGetNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igetnum_)));
          set_has_igetnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNextGetTime;
        break;
      }

      // optional int32 iNextGetTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNextGetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inextgettime_)));
          set_has_inextgettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UpdateAlms_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iGetNum = 1;
  if (has_igetnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->igetnum(), output);
  }

  // optional int32 iNextGetTime = 2;
  if (has_inextgettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inextgettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UpdateAlms_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iGetNum = 1;
  if (has_igetnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->igetnum(), target);
  }

  // optional int32 iNextGetTime = 2;
  if (has_inextgettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inextgettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UpdateAlms_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iGetNum = 1;
    if (has_igetnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igetnum());
    }

    // optional int32 iNextGetTime = 2;
    if (has_inextgettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inextgettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UpdateAlms_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UpdateAlms_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UpdateAlms_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UpdateAlms_Notify::MergeFrom(const Zone_UpdateAlms_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_igetnum()) {
      set_igetnum(from.igetnum());
    }
    if (from.has_inextgettime()) {
      set_inextgettime(from.inextgettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UpdateAlms_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UpdateAlms_Notify::CopyFrom(const Zone_UpdateAlms_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UpdateAlms_Notify::IsInitialized() const {

  return true;
}

void Zone_UpdateAlms_Notify::Swap(Zone_UpdateAlms_Notify* other) {
  if (other != this) {
    std::swap(igetnum_, other->igetnum_);
    std::swap(inextgettime_, other->inextgettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UpdateAlms_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UpdateAlms_Notify_descriptor_;
  metadata.reflection = Zone_UpdateAlms_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LimitLottery_Request::kBIsTenTimesFieldNumber;
const int Zone_LimitLottery_Request::kUinFieldNumber;
const int Zone_LimitLottery_Request::kIzoneidFieldNumber;
const int Zone_LimitLottery_Request::kStrNickNameFieldNumber;
const int Zone_LimitLottery_Request::kILotteryTypeFieldNumber;
#endif  // !_MSC_VER

Zone_LimitLottery_Request::Zone_LimitLottery_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LimitLottery_Request::InitAsDefaultInstance() {
}

Zone_LimitLottery_Request::Zone_LimitLottery_Request(const Zone_LimitLottery_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LimitLottery_Request::SharedCtor() {
  _cached_size_ = 0;
  bistentimes_ = false;
  uin_ = 0u;
  izoneid_ = 0;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ilotterytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LimitLottery_Request::~Zone_LimitLottery_Request() {
  SharedDtor();
}

void Zone_LimitLottery_Request::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void Zone_LimitLottery_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LimitLottery_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LimitLottery_Request_descriptor_;
}

const Zone_LimitLottery_Request& Zone_LimitLottery_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_LimitLottery_Request* Zone_LimitLottery_Request::default_instance_ = NULL;

Zone_LimitLottery_Request* Zone_LimitLottery_Request::New() const {
  return new Zone_LimitLottery_Request;
}

void Zone_LimitLottery_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bistentimes_ = false;
    uin_ = 0u;
    izoneid_ = 0;
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    ilotterytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LimitLottery_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsTenTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bistentimes_)));
          set_has_bistentimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_izoneid;
        break;
      }

      // optional int32 izoneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_izoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_strNickName;
        break;
      }

      // optional string strNickName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNickName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_iLotteryType;
        break;
      }

      // optional int32 iLotteryType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLotteryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilotterytype_)));
          set_has_ilotterytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LimitLottery_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsTenTimes = 1;
  if (has_bistentimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bistentimes(), output);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->uin(), output);
  }

  // optional int32 izoneid = 3;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->izoneid(), output);
  }

  // optional string strNickName = 4;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->strnickname(), output);
  }

  // optional int32 iLotteryType = 5;
  if (has_ilotterytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ilotterytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LimitLottery_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsTenTimes = 1;
  if (has_bistentimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bistentimes(), target);
  }

  // optional uint32 uin = 2;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->uin(), target);
  }

  // optional int32 izoneid = 3;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->izoneid(), target);
  }

  // optional string strNickName = 4;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strnickname(), target);
  }

  // optional int32 iLotteryType = 5;
  if (has_ilotterytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->ilotterytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LimitLottery_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsTenTimes = 1;
    if (has_bistentimes()) {
      total_size += 1 + 1;
    }

    // optional uint32 uin = 2;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 izoneid = 3;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional string strNickName = 4;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional int32 iLotteryType = 5;
    if (has_ilotterytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilotterytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LimitLottery_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LimitLottery_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LimitLottery_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LimitLottery_Request::MergeFrom(const Zone_LimitLottery_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bistentimes()) {
      set_bistentimes(from.bistentimes());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_ilotterytype()) {
      set_ilotterytype(from.ilotterytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LimitLottery_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LimitLottery_Request::CopyFrom(const Zone_LimitLottery_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LimitLottery_Request::IsInitialized() const {

  return true;
}

void Zone_LimitLottery_Request::Swap(Zone_LimitLottery_Request* other) {
  if (other != this) {
    std::swap(bistentimes_, other->bistentimes_);
    std::swap(uin_, other->uin_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(strnickname_, other->strnickname_);
    std::swap(ilotterytype_, other->ilotterytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LimitLottery_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LimitLottery_Request_descriptor_;
  metadata.reflection = Zone_LimitLottery_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LimitLottery_Response::kIResultFieldNumber;
const int Zone_LimitLottery_Response::kILotteryIDsFieldNumber;
const int Zone_LimitLottery_Response::kUinFieldNumber;
const int Zone_LimitLottery_Response::kILotteryTypeFieldNumber;
#endif  // !_MSC_VER

Zone_LimitLottery_Response::Zone_LimitLottery_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LimitLottery_Response::InitAsDefaultInstance() {
}

Zone_LimitLottery_Response::Zone_LimitLottery_Response(const Zone_LimitLottery_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LimitLottery_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  uin_ = 0u;
  ilotterytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LimitLottery_Response::~Zone_LimitLottery_Response() {
  SharedDtor();
}

void Zone_LimitLottery_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_LimitLottery_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LimitLottery_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LimitLottery_Response_descriptor_;
}

const Zone_LimitLottery_Response& Zone_LimitLottery_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_LimitLottery_Response* Zone_LimitLottery_Response::default_instance_ = NULL;

Zone_LimitLottery_Response* Zone_LimitLottery_Response::New() const {
  return new Zone_LimitLottery_Response;
}

void Zone_LimitLottery_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    uin_ = 0u;
    ilotterytype_ = 0;
  }
  ilotteryids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LimitLottery_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iLotteryIDs;
        break;
      }

      // repeated int32 iLotteryIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLotteryIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_ilotteryids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ilotteryids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iLotteryIDs;
        if (input->ExpectTag(24)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iLotteryType;
        break;
      }

      // optional int32 iLotteryType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLotteryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilotterytype_)));
          set_has_ilotterytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LimitLottery_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // repeated int32 iLotteryIDs = 2;
  for (int i = 0; i < this->ilotteryids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->ilotteryids(i), output);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->uin(), output);
  }

  // optional int32 iLotteryType = 4;
  if (has_ilotterytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ilotterytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LimitLottery_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // repeated int32 iLotteryIDs = 2;
  for (int i = 0; i < this->ilotteryids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->ilotteryids(i), target);
  }

  // optional uint32 uin = 3;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->uin(), target);
  }

  // optional int32 iLotteryType = 4;
  if (has_ilotterytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ilotterytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LimitLottery_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional uint32 uin = 3;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

    // optional int32 iLotteryType = 4;
    if (has_ilotterytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilotterytype());
    }

  }
  // repeated int32 iLotteryIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->ilotteryids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ilotteryids(i));
    }
    total_size += 1 * this->ilotteryids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LimitLottery_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LimitLottery_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LimitLottery_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LimitLottery_Response::MergeFrom(const Zone_LimitLottery_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  ilotteryids_.MergeFrom(from.ilotteryids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ilotterytype()) {
      set_ilotterytype(from.ilotterytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LimitLottery_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LimitLottery_Response::CopyFrom(const Zone_LimitLottery_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LimitLottery_Response::IsInitialized() const {

  return true;
}

void Zone_LimitLottery_Response::Swap(Zone_LimitLottery_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    ilotteryids_.Swap(&other->ilotteryids_);
    std::swap(uin_, other->uin_);
    std::swap(ilotterytype_, other->ilotterytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LimitLottery_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LimitLottery_Response_descriptor_;
  metadata.reflection = Zone_LimitLottery_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_PayLotteryRecord_Request::kIFromFieldNumber;
const int Zone_PayLotteryRecord_Request::kINumFieldNumber;
const int Zone_PayLotteryRecord_Request::kIzoneidFieldNumber;
#endif  // !_MSC_VER

Zone_PayLotteryRecord_Request::Zone_PayLotteryRecord_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_PayLotteryRecord_Request::InitAsDefaultInstance() {
}

Zone_PayLotteryRecord_Request::Zone_PayLotteryRecord_Request(const Zone_PayLotteryRecord_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_PayLotteryRecord_Request::SharedCtor() {
  _cached_size_ = 0;
  ifrom_ = 0;
  inum_ = 0;
  izoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_PayLotteryRecord_Request::~Zone_PayLotteryRecord_Request() {
  SharedDtor();
}

void Zone_PayLotteryRecord_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_PayLotteryRecord_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_PayLotteryRecord_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_PayLotteryRecord_Request_descriptor_;
}

const Zone_PayLotteryRecord_Request& Zone_PayLotteryRecord_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_PayLotteryRecord_Request* Zone_PayLotteryRecord_Request::default_instance_ = NULL;

Zone_PayLotteryRecord_Request* Zone_PayLotteryRecord_Request::New() const {
  return new Zone_PayLotteryRecord_Request;
}

void Zone_PayLotteryRecord_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifrom_ = 0;
    inum_ = 0;
    izoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_PayLotteryRecord_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFrom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifrom_)));
          set_has_ifrom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_izoneid;
        break;
      }

      // optional int32 izoneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_izoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_PayLotteryRecord_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFrom = 1;
  if (has_ifrom()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifrom(), output);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inum(), output);
  }

  // optional int32 izoneid = 3;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->izoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_PayLotteryRecord_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFrom = 1;
  if (has_ifrom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifrom(), target);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inum(), target);
  }

  // optional int32 izoneid = 3;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->izoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_PayLotteryRecord_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFrom = 1;
    if (has_ifrom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifrom());
    }

    // optional int32 iNum = 2;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

    // optional int32 izoneid = 3;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_PayLotteryRecord_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_PayLotteryRecord_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_PayLotteryRecord_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_PayLotteryRecord_Request::MergeFrom(const Zone_PayLotteryRecord_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifrom()) {
      set_ifrom(from.ifrom());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_PayLotteryRecord_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_PayLotteryRecord_Request::CopyFrom(const Zone_PayLotteryRecord_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_PayLotteryRecord_Request::IsInitialized() const {

  return true;
}

void Zone_PayLotteryRecord_Request::Swap(Zone_PayLotteryRecord_Request* other) {
  if (other != this) {
    std::swap(ifrom_, other->ifrom_);
    std::swap(inum_, other->inum_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_PayLotteryRecord_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_PayLotteryRecord_Request_descriptor_;
  metadata.reflection = Zone_PayLotteryRecord_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PayLotteryRecord::kStrNickNameFieldNumber;
const int PayLotteryRecord::kILotteryIDFieldNumber;
const int PayLotteryRecord::kIIndexFieldNumber;
#endif  // !_MSC_VER

PayLotteryRecord::PayLotteryRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PayLotteryRecord::InitAsDefaultInstance() {
}

PayLotteryRecord::PayLotteryRecord(const PayLotteryRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PayLotteryRecord::SharedCtor() {
  _cached_size_ = 0;
  strnickname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ilotteryid_ = 0;
  iindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PayLotteryRecord::~PayLotteryRecord() {
  SharedDtor();
}

void PayLotteryRecord::SharedDtor() {
  if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnickname_;
  }
  if (this != default_instance_) {
  }
}

void PayLotteryRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PayLotteryRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PayLotteryRecord_descriptor_;
}

const PayLotteryRecord& PayLotteryRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

PayLotteryRecord* PayLotteryRecord::default_instance_ = NULL;

PayLotteryRecord* PayLotteryRecord::New() const {
  return new PayLotteryRecord;
}

void PayLotteryRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strnickname()) {
      if (strnickname_ != &::google::protobuf::internal::kEmptyString) {
        strnickname_->clear();
      }
    }
    ilotteryid_ = 0;
    iindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PayLotteryRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strNickName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnickname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnickname().data(), this->strnickname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iLotteryID;
        break;
      }

      // optional int32 iLotteryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iLotteryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilotteryid_)));
          set_has_ilotteryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iIndex;
        break;
      }

      // optional int32 iIndex = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iindex_)));
          set_has_iindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PayLotteryRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strnickname(), output);
  }

  // optional int32 iLotteryID = 2;
  if (has_ilotteryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ilotteryid(), output);
  }

  // optional int32 iIndex = 3;
  if (has_iindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PayLotteryRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strNickName = 1;
  if (has_strnickname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnickname().data(), this->strnickname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strnickname(), target);
  }

  // optional int32 iLotteryID = 2;
  if (has_ilotteryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ilotteryid(), target);
  }

  // optional int32 iIndex = 3;
  if (has_iindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PayLotteryRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strNickName = 1;
    if (has_strnickname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnickname());
    }

    // optional int32 iLotteryID = 2;
    if (has_ilotteryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilotteryid());
    }

    // optional int32 iIndex = 3;
    if (has_iindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PayLotteryRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PayLotteryRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PayLotteryRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PayLotteryRecord::MergeFrom(const PayLotteryRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strnickname()) {
      set_strnickname(from.strnickname());
    }
    if (from.has_ilotteryid()) {
      set_ilotteryid(from.ilotteryid());
    }
    if (from.has_iindex()) {
      set_iindex(from.iindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PayLotteryRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayLotteryRecord::CopyFrom(const PayLotteryRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayLotteryRecord::IsInitialized() const {

  return true;
}

void PayLotteryRecord::Swap(PayLotteryRecord* other) {
  if (other != this) {
    std::swap(strnickname_, other->strnickname_);
    std::swap(ilotteryid_, other->ilotteryid_);
    std::swap(iindex_, other->iindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PayLotteryRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PayLotteryRecord_descriptor_;
  metadata.reflection = PayLotteryRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_PayLotteryRecord_Response::kIResultFieldNumber;
const int Zone_PayLotteryRecord_Response::kStRecordsFieldNumber;
#endif  // !_MSC_VER

Zone_PayLotteryRecord_Response::Zone_PayLotteryRecord_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_PayLotteryRecord_Response::InitAsDefaultInstance() {
}

Zone_PayLotteryRecord_Response::Zone_PayLotteryRecord_Response(const Zone_PayLotteryRecord_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_PayLotteryRecord_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_PayLotteryRecord_Response::~Zone_PayLotteryRecord_Response() {
  SharedDtor();
}

void Zone_PayLotteryRecord_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_PayLotteryRecord_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_PayLotteryRecord_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_PayLotteryRecord_Response_descriptor_;
}

const Zone_PayLotteryRecord_Response& Zone_PayLotteryRecord_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_PayLotteryRecord_Response* Zone_PayLotteryRecord_Response::default_instance_ = NULL;

Zone_PayLotteryRecord_Response* Zone_PayLotteryRecord_Response::New() const {
  return new Zone_PayLotteryRecord_Response;
}

void Zone_PayLotteryRecord_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  strecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_PayLotteryRecord_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRecords;
        break;
      }

      // repeated .PayLotteryRecord stRecords = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRecords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_PayLotteryRecord_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // repeated .PayLotteryRecord stRecords = 2;
  for (int i = 0; i < this->strecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strecords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_PayLotteryRecord_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // repeated .PayLotteryRecord stRecords = 2;
  for (int i = 0; i < this->strecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strecords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_PayLotteryRecord_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  // repeated .PayLotteryRecord stRecords = 2;
  total_size += 1 * this->strecords_size();
  for (int i = 0; i < this->strecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_PayLotteryRecord_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_PayLotteryRecord_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_PayLotteryRecord_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_PayLotteryRecord_Response::MergeFrom(const Zone_PayLotteryRecord_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  strecords_.MergeFrom(from.strecords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_PayLotteryRecord_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_PayLotteryRecord_Response::CopyFrom(const Zone_PayLotteryRecord_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_PayLotteryRecord_Response::IsInitialized() const {

  return true;
}

void Zone_PayLotteryRecord_Response::Swap(Zone_PayLotteryRecord_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    strecords_.Swap(&other->strecords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_PayLotteryRecord_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_PayLotteryRecord_Response_descriptor_;
  metadata.reflection = Zone_PayLotteryRecord_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseLampInfo::kILampIDFieldNumber;
const int HorseLampInfo::kIEndTimeFieldNumber;
const int HorseLampInfo::kIIntervalFieldNumber;
const int HorseLampInfo::kITimesFieldNumber;
const int HorseLampInfo::kStrParamsFieldNumber;
#endif  // !_MSC_VER

HorseLampInfo::HorseLampInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HorseLampInfo::InitAsDefaultInstance() {
}

HorseLampInfo::HorseLampInfo(const HorseLampInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HorseLampInfo::SharedCtor() {
  _cached_size_ = 0;
  ilampid_ = 0;
  iendtime_ = 0;
  iinterval_ = 0;
  itimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseLampInfo::~HorseLampInfo() {
  SharedDtor();
}

void HorseLampInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseLampInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseLampInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseLampInfo_descriptor_;
}

const HorseLampInfo& HorseLampInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

HorseLampInfo* HorseLampInfo::default_instance_ = NULL;

HorseLampInfo* HorseLampInfo::New() const {
  return new HorseLampInfo;
}

void HorseLampInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ilampid_ = 0;
    iendtime_ = 0;
    iinterval_ = 0;
    itimes_ = 0;
  }
  strparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseLampInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iLampID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilampid_)));
          set_has_ilampid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iEndTime;
        break;
      }

      // optional int32 iEndTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iendtime_)));
          set_has_iendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iInterval;
        break;
      }

      // optional int32 iInterval = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iInterval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iinterval_)));
          set_has_iinterval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iTimes;
        break;
      }

      // optional int32 iTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itimes_)));
          set_has_itimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strParams;
        break;
      }

      // repeated bytes strParams = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strParams:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_strparams()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_strParams;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HorseLampInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iLampID = 1;
  if (has_ilampid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ilampid(), output);
  }

  // optional int32 iEndTime = 2;
  if (has_iendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iendtime(), output);
  }

  // optional int32 iInterval = 3;
  if (has_iinterval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->iinterval(), output);
  }

  // optional int32 iTimes = 4;
  if (has_itimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itimes(), output);
  }

  // repeated bytes strParams = 5;
  for (int i = 0; i < this->strparams_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->strparams(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HorseLampInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iLampID = 1;
  if (has_ilampid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ilampid(), target);
  }

  // optional int32 iEndTime = 2;
  if (has_iendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iendtime(), target);
  }

  // optional int32 iInterval = 3;
  if (has_iinterval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->iinterval(), target);
  }

  // optional int32 iTimes = 4;
  if (has_itimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itimes(), target);
  }

  // repeated bytes strParams = 5;
  for (int i = 0; i < this->strparams_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(5, this->strparams(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HorseLampInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iLampID = 1;
    if (has_ilampid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilampid());
    }

    // optional int32 iEndTime = 2;
    if (has_iendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iendtime());
    }

    // optional int32 iInterval = 3;
    if (has_iinterval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iinterval());
    }

    // optional int32 iTimes = 4;
    if (has_itimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itimes());
    }

  }
  // repeated bytes strParams = 5;
  total_size += 1 * this->strparams_size();
  for (int i = 0; i < this->strparams_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->strparams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseLampInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseLampInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseLampInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseLampInfo::MergeFrom(const HorseLampInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  strparams_.MergeFrom(from.strparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ilampid()) {
      set_ilampid(from.ilampid());
    }
    if (from.has_iendtime()) {
      set_iendtime(from.iendtime());
    }
    if (from.has_iinterval()) {
      set_iinterval(from.iinterval());
    }
    if (from.has_itimes()) {
      set_itimes(from.itimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseLampInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseLampInfo::CopyFrom(const HorseLampInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseLampInfo::IsInitialized() const {

  return true;
}

void HorseLampInfo::Swap(HorseLampInfo* other) {
  if (other != this) {
    std::swap(ilampid_, other->ilampid_);
    std::swap(iendtime_, other->iendtime_);
    std::swap(iinterval_, other->iinterval_);
    std::swap(itimes_, other->itimes_);
    strparams_.Swap(&other->strparams_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseLampInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseLampInfo_descriptor_;
  metadata.reflection = HorseLampInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_HorseLamp_Notify::kIZoneIDFieldNumber;
const int Zone_HorseLamp_Notify::kStInfosFieldNumber;
#endif  // !_MSC_VER

Zone_HorseLamp_Notify::Zone_HorseLamp_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_HorseLamp_Notify::InitAsDefaultInstance() {
}

Zone_HorseLamp_Notify::Zone_HorseLamp_Notify(const Zone_HorseLamp_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_HorseLamp_Notify::SharedCtor() {
  _cached_size_ = 0;
  izoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_HorseLamp_Notify::~Zone_HorseLamp_Notify() {
  SharedDtor();
}

void Zone_HorseLamp_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_HorseLamp_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_HorseLamp_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_HorseLamp_Notify_descriptor_;
}

const Zone_HorseLamp_Notify& Zone_HorseLamp_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_HorseLamp_Notify* Zone_HorseLamp_Notify::default_instance_ = NULL;

Zone_HorseLamp_Notify* Zone_HorseLamp_Notify::New() const {
  return new Zone_HorseLamp_Notify;
}

void Zone_HorseLamp_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    izoneid_ = 0;
  }
  stinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_HorseLamp_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iZoneID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stInfos;
        break;
      }

      // repeated .HorseLampInfo stInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_HorseLamp_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iZoneID = 1;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->izoneid(), output);
  }

  // repeated .HorseLampInfo stInfos = 2;
  for (int i = 0; i < this->stinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_HorseLamp_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iZoneID = 1;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->izoneid(), target);
  }

  // repeated .HorseLampInfo stInfos = 2;
  for (int i = 0; i < this->stinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_HorseLamp_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iZoneID = 1;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

  }
  // repeated .HorseLampInfo stInfos = 2;
  total_size += 1 * this->stinfos_size();
  for (int i = 0; i < this->stinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_HorseLamp_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_HorseLamp_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_HorseLamp_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_HorseLamp_Notify::MergeFrom(const Zone_HorseLamp_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  stinfos_.MergeFrom(from.stinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_HorseLamp_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_HorseLamp_Notify::CopyFrom(const Zone_HorseLamp_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_HorseLamp_Notify::IsInitialized() const {

  return true;
}

void Zone_HorseLamp_Notify::Swap(Zone_HorseLamp_Notify* other) {
  if (other != this) {
    std::swap(izoneid_, other->izoneid_);
    stinfos_.Swap(&other->stinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_HorseLamp_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_HorseLamp_Notify_descriptor_;
  metadata.reflection = Zone_HorseLamp_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_EnterLasvegas_Request::kBIsEnterFieldNumber;
#endif  // !_MSC_VER

Zone_EnterLasvegas_Request::Zone_EnterLasvegas_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_EnterLasvegas_Request::InitAsDefaultInstance() {
}

Zone_EnterLasvegas_Request::Zone_EnterLasvegas_Request(const Zone_EnterLasvegas_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_EnterLasvegas_Request::SharedCtor() {
  _cached_size_ = 0;
  bisenter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_EnterLasvegas_Request::~Zone_EnterLasvegas_Request() {
  SharedDtor();
}

void Zone_EnterLasvegas_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_EnterLasvegas_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_EnterLasvegas_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_EnterLasvegas_Request_descriptor_;
}

const Zone_EnterLasvegas_Request& Zone_EnterLasvegas_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_EnterLasvegas_Request* Zone_EnterLasvegas_Request::default_instance_ = NULL;

Zone_EnterLasvegas_Request* Zone_EnterLasvegas_Request::New() const {
  return new Zone_EnterLasvegas_Request;
}

void Zone_EnterLasvegas_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bisenter_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_EnterLasvegas_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bIsEnter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisenter_)));
          set_has_bisenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_EnterLasvegas_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool bIsEnter = 1;
  if (has_bisenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bisenter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_EnterLasvegas_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool bIsEnter = 1;
  if (has_bisenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->bisenter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_EnterLasvegas_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool bIsEnter = 1;
    if (has_bisenter()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_EnterLasvegas_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_EnterLasvegas_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_EnterLasvegas_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_EnterLasvegas_Request::MergeFrom(const Zone_EnterLasvegas_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bisenter()) {
      set_bisenter(from.bisenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_EnterLasvegas_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_EnterLasvegas_Request::CopyFrom(const Zone_EnterLasvegas_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_EnterLasvegas_Request::IsInitialized() const {

  return true;
}

void Zone_EnterLasvegas_Request::Swap(Zone_EnterLasvegas_Request* other) {
  if (other != this) {
    std::swap(bisenter_, other->bisenter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_EnterLasvegas_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_EnterLasvegas_Request_descriptor_;
  metadata.reflection = Zone_EnterLasvegas_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_EnterLasvegas_Response::kIResultFieldNumber;
const int Zone_EnterLasvegas_Response::kBIsEnterFieldNumber;
#endif  // !_MSC_VER

Zone_EnterLasvegas_Response::Zone_EnterLasvegas_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_EnterLasvegas_Response::InitAsDefaultInstance() {
}

Zone_EnterLasvegas_Response::Zone_EnterLasvegas_Response(const Zone_EnterLasvegas_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_EnterLasvegas_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  bisenter_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_EnterLasvegas_Response::~Zone_EnterLasvegas_Response() {
  SharedDtor();
}

void Zone_EnterLasvegas_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_EnterLasvegas_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_EnterLasvegas_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_EnterLasvegas_Response_descriptor_;
}

const Zone_EnterLasvegas_Response& Zone_EnterLasvegas_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_EnterLasvegas_Response* Zone_EnterLasvegas_Response::default_instance_ = NULL;

Zone_EnterLasvegas_Response* Zone_EnterLasvegas_Response::New() const {
  return new Zone_EnterLasvegas_Response;
}

void Zone_EnterLasvegas_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    bisenter_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_EnterLasvegas_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsEnter;
        break;
      }

      // optional bool bIsEnter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsEnter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bisenter_)));
          set_has_bisenter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_EnterLasvegas_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional bool bIsEnter = 2;
  if (has_bisenter()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bisenter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_EnterLasvegas_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional bool bIsEnter = 2;
  if (has_bisenter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bisenter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_EnterLasvegas_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional bool bIsEnter = 2;
    if (has_bisenter()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_EnterLasvegas_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_EnterLasvegas_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_EnterLasvegas_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_EnterLasvegas_Response::MergeFrom(const Zone_EnterLasvegas_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_bisenter()) {
      set_bisenter(from.bisenter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_EnterLasvegas_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_EnterLasvegas_Response::CopyFrom(const Zone_EnterLasvegas_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_EnterLasvegas_Response::IsInitialized() const {

  return true;
}

void Zone_EnterLasvegas_Response::Swap(Zone_EnterLasvegas_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(bisenter_, other->bisenter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_EnterLasvegas_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_EnterLasvegas_Response_descriptor_;
  metadata.reflection = Zone_EnterLasvegas_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LasvegasBet_Request::kStBetFieldNumber;
#endif  // !_MSC_VER

Zone_LasvegasBet_Request::Zone_LasvegasBet_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LasvegasBet_Request::InitAsDefaultInstance() {
  stbet_ = const_cast< ::NumberBetInfo*>(&::NumberBetInfo::default_instance());
}

Zone_LasvegasBet_Request::Zone_LasvegasBet_Request(const Zone_LasvegasBet_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LasvegasBet_Request::SharedCtor() {
  _cached_size_ = 0;
  stbet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LasvegasBet_Request::~Zone_LasvegasBet_Request() {
  SharedDtor();
}

void Zone_LasvegasBet_Request::SharedDtor() {
  if (this != default_instance_) {
    delete stbet_;
  }
}

void Zone_LasvegasBet_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LasvegasBet_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LasvegasBet_Request_descriptor_;
}

const Zone_LasvegasBet_Request& Zone_LasvegasBet_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_LasvegasBet_Request* Zone_LasvegasBet_Request::default_instance_ = NULL;

Zone_LasvegasBet_Request* Zone_LasvegasBet_Request::New() const {
  return new Zone_LasvegasBet_Request;
}

void Zone_LasvegasBet_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stbet()) {
      if (stbet_ != NULL) stbet_->::NumberBetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LasvegasBet_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NumberBetInfo stBet = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LasvegasBet_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NumberBetInfo stBet = 1;
  if (has_stbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stbet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LasvegasBet_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NumberBetInfo stBet = 1;
  if (has_stbet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stbet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LasvegasBet_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NumberBetInfo stBet = 1;
    if (has_stbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LasvegasBet_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LasvegasBet_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LasvegasBet_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LasvegasBet_Request::MergeFrom(const Zone_LasvegasBet_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stbet()) {
      mutable_stbet()->::NumberBetInfo::MergeFrom(from.stbet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LasvegasBet_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LasvegasBet_Request::CopyFrom(const Zone_LasvegasBet_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LasvegasBet_Request::IsInitialized() const {

  return true;
}

void Zone_LasvegasBet_Request::Swap(Zone_LasvegasBet_Request* other) {
  if (other != this) {
    std::swap(stbet_, other->stbet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LasvegasBet_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LasvegasBet_Request_descriptor_;
  metadata.reflection = Zone_LasvegasBet_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_LasvegasBet_Response::kIResultFieldNumber;
const int Zone_LasvegasBet_Response::kStBetFieldNumber;
#endif  // !_MSC_VER

Zone_LasvegasBet_Response::Zone_LasvegasBet_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_LasvegasBet_Response::InitAsDefaultInstance() {
  stbet_ = const_cast< ::NumberBetInfo*>(&::NumberBetInfo::default_instance());
}

Zone_LasvegasBet_Response::Zone_LasvegasBet_Response(const Zone_LasvegasBet_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_LasvegasBet_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  stbet_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_LasvegasBet_Response::~Zone_LasvegasBet_Response() {
  SharedDtor();
}

void Zone_LasvegasBet_Response::SharedDtor() {
  if (this != default_instance_) {
    delete stbet_;
  }
}

void Zone_LasvegasBet_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_LasvegasBet_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_LasvegasBet_Response_descriptor_;
}

const Zone_LasvegasBet_Response& Zone_LasvegasBet_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_LasvegasBet_Response* Zone_LasvegasBet_Response::default_instance_ = NULL;

Zone_LasvegasBet_Response* Zone_LasvegasBet_Response::New() const {
  return new Zone_LasvegasBet_Response;
}

void Zone_LasvegasBet_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_stbet()) {
      if (stbet_ != NULL) stbet_->::NumberBetInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_LasvegasBet_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stBet;
        break;
      }

      // optional .NumberBetInfo stBet = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stBet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stbet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_LasvegasBet_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional .NumberBetInfo stBet = 2;
  if (has_stbet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stbet(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_LasvegasBet_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional .NumberBetInfo stBet = 2;
  if (has_stbet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stbet(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_LasvegasBet_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional .NumberBetInfo stBet = 2;
    if (has_stbet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stbet());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_LasvegasBet_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_LasvegasBet_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_LasvegasBet_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_LasvegasBet_Response::MergeFrom(const Zone_LasvegasBet_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_stbet()) {
      mutable_stbet()->::NumberBetInfo::MergeFrom(from.stbet());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_LasvegasBet_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_LasvegasBet_Response::CopyFrom(const Zone_LasvegasBet_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_LasvegasBet_Response::IsInitialized() const {

  return true;
}

void Zone_LasvegasBet_Response::Swap(Zone_LasvegasBet_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(stbet_, other->stbet_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_LasvegasBet_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_LasvegasBet_Response_descriptor_;
  metadata.reflection = Zone_LasvegasBet_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UpdateLasvegas_Notify::kStInfoFieldNumber;
#endif  // !_MSC_VER

Zone_UpdateLasvegas_Notify::Zone_UpdateLasvegas_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UpdateLasvegas_Notify::InitAsDefaultInstance() {
  stinfo_ = const_cast< ::LasvegasInfo*>(&::LasvegasInfo::default_instance());
}

Zone_UpdateLasvegas_Notify::Zone_UpdateLasvegas_Notify(const Zone_UpdateLasvegas_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UpdateLasvegas_Notify::SharedCtor() {
  _cached_size_ = 0;
  stinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UpdateLasvegas_Notify::~Zone_UpdateLasvegas_Notify() {
  SharedDtor();
}

void Zone_UpdateLasvegas_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stinfo_;
  }
}

void Zone_UpdateLasvegas_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UpdateLasvegas_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UpdateLasvegas_Notify_descriptor_;
}

const Zone_UpdateLasvegas_Notify& Zone_UpdateLasvegas_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UpdateLasvegas_Notify* Zone_UpdateLasvegas_Notify::default_instance_ = NULL;

Zone_UpdateLasvegas_Notify* Zone_UpdateLasvegas_Notify::New() const {
  return new Zone_UpdateLasvegas_Notify;
}

void Zone_UpdateLasvegas_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_stinfo()) {
      if (stinfo_ != NULL) stinfo_->::LasvegasInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UpdateLasvegas_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .LasvegasInfo stInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UpdateLasvegas_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .LasvegasInfo stInfo = 1;
  if (has_stinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UpdateLasvegas_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .LasvegasInfo stInfo = 1;
  if (has_stinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UpdateLasvegas_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .LasvegasInfo stInfo = 1;
    if (has_stinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UpdateLasvegas_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UpdateLasvegas_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UpdateLasvegas_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UpdateLasvegas_Notify::MergeFrom(const Zone_UpdateLasvegas_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_stinfo()) {
      mutable_stinfo()->::LasvegasInfo::MergeFrom(from.stinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UpdateLasvegas_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UpdateLasvegas_Notify::CopyFrom(const Zone_UpdateLasvegas_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UpdateLasvegas_Notify::IsInitialized() const {

  return true;
}

void Zone_UpdateLasvegas_Notify::Swap(Zone_UpdateLasvegas_Notify* other) {
  if (other != this) {
    std::swap(stinfo_, other->stinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UpdateLasvegas_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UpdateLasvegas_Notify_descriptor_;
  metadata.reflection = Zone_UpdateLasvegas_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetRewardInfo_Request::kIFromIndexFieldNumber;
const int Zone_GetRewardInfo_Request::kINumFieldNumber;
#endif  // !_MSC_VER

Zone_GetRewardInfo_Request::Zone_GetRewardInfo_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetRewardInfo_Request::InitAsDefaultInstance() {
}

Zone_GetRewardInfo_Request::Zone_GetRewardInfo_Request(const Zone_GetRewardInfo_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetRewardInfo_Request::SharedCtor() {
  _cached_size_ = 0;
  ifromindex_ = 0;
  inum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetRewardInfo_Request::~Zone_GetRewardInfo_Request() {
  SharedDtor();
}

void Zone_GetRewardInfo_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetRewardInfo_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetRewardInfo_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetRewardInfo_Request_descriptor_;
}

const Zone_GetRewardInfo_Request& Zone_GetRewardInfo_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetRewardInfo_Request* Zone_GetRewardInfo_Request::default_instance_ = NULL;

Zone_GetRewardInfo_Request* Zone_GetRewardInfo_Request::New() const {
  return new Zone_GetRewardInfo_Request;
}

void Zone_GetRewardInfo_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifromindex_ = 0;
    inum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetRewardInfo_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFromIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromindex_)));
          set_has_ifromindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetRewardInfo_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFromIndex = 1;
  if (has_ifromindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifromindex(), output);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetRewardInfo_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFromIndex = 1;
  if (has_ifromindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifromindex(), target);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetRewardInfo_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFromIndex = 1;
    if (has_ifromindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromindex());
    }

    // optional int32 iNum = 2;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetRewardInfo_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetRewardInfo_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetRewardInfo_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetRewardInfo_Request::MergeFrom(const Zone_GetRewardInfo_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifromindex()) {
      set_ifromindex(from.ifromindex());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetRewardInfo_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetRewardInfo_Request::CopyFrom(const Zone_GetRewardInfo_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetRewardInfo_Request::IsInitialized() const {

  return true;
}

void Zone_GetRewardInfo_Request::Swap(Zone_GetRewardInfo_Request* other) {
  if (other != this) {
    std::swap(ifromindex_, other->ifromindex_);
    std::swap(inum_, other->inum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetRewardInfo_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetRewardInfo_Request_descriptor_;
  metadata.reflection = Zone_GetRewardInfo_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetRewardInfo_Response::kIResultFieldNumber;
const int Zone_GetRewardInfo_Response::kStInfosFieldNumber;
#endif  // !_MSC_VER

Zone_GetRewardInfo_Response::Zone_GetRewardInfo_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetRewardInfo_Response::InitAsDefaultInstance() {
}

Zone_GetRewardInfo_Response::Zone_GetRewardInfo_Response(const Zone_GetRewardInfo_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetRewardInfo_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetRewardInfo_Response::~Zone_GetRewardInfo_Response() {
  SharedDtor();
}

void Zone_GetRewardInfo_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetRewardInfo_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetRewardInfo_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetRewardInfo_Response_descriptor_;
}

const Zone_GetRewardInfo_Response& Zone_GetRewardInfo_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetRewardInfo_Response* Zone_GetRewardInfo_Response::default_instance_ = NULL;

Zone_GetRewardInfo_Response* Zone_GetRewardInfo_Response::New() const {
  return new Zone_GetRewardInfo_Response;
}

void Zone_GetRewardInfo_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  stinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetRewardInfo_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stInfos;
        break;
      }

      // repeated .PrizeInfo stInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetRewardInfo_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // repeated .PrizeInfo stInfos = 2;
  for (int i = 0; i < this->stinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetRewardInfo_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // repeated .PrizeInfo stInfos = 2;
  for (int i = 0; i < this->stinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->stinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetRewardInfo_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  // repeated .PrizeInfo stInfos = 2;
  total_size += 1 * this->stinfos_size();
  for (int i = 0; i < this->stinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetRewardInfo_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetRewardInfo_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetRewardInfo_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetRewardInfo_Response::MergeFrom(const Zone_GetRewardInfo_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  stinfos_.MergeFrom(from.stinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetRewardInfo_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetRewardInfo_Response::CopyFrom(const Zone_GetRewardInfo_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetRewardInfo_Response::IsInitialized() const {

  return true;
}

void Zone_GetRewardInfo_Response::Swap(Zone_GetRewardInfo_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    stinfos_.Swap(&other->stinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetRewardInfo_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetRewardInfo_Response_descriptor_;
  metadata.reflection = Zone_GetRewardInfo_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetLoginReward_Request::kIRewardIDFieldNumber;
#endif  // !_MSC_VER

Zone_GetLoginReward_Request::Zone_GetLoginReward_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetLoginReward_Request::InitAsDefaultInstance() {
}

Zone_GetLoginReward_Request::Zone_GetLoginReward_Request(const Zone_GetLoginReward_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetLoginReward_Request::SharedCtor() {
  _cached_size_ = 0;
  irewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetLoginReward_Request::~Zone_GetLoginReward_Request() {
  SharedDtor();
}

void Zone_GetLoginReward_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetLoginReward_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetLoginReward_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetLoginReward_Request_descriptor_;
}

const Zone_GetLoginReward_Request& Zone_GetLoginReward_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetLoginReward_Request* Zone_GetLoginReward_Request::default_instance_ = NULL;

Zone_GetLoginReward_Request* Zone_GetLoginReward_Request::New() const {
  return new Zone_GetLoginReward_Request;
}

void Zone_GetLoginReward_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetLoginReward_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRewardID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irewardid_)));
          set_has_irewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetLoginReward_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRewardID = 1;
  if (has_irewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetLoginReward_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRewardID = 1;
  if (has_irewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetLoginReward_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRewardID = 1;
    if (has_irewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetLoginReward_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetLoginReward_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetLoginReward_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetLoginReward_Request::MergeFrom(const Zone_GetLoginReward_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irewardid()) {
      set_irewardid(from.irewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetLoginReward_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetLoginReward_Request::CopyFrom(const Zone_GetLoginReward_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetLoginReward_Request::IsInitialized() const {

  return true;
}

void Zone_GetLoginReward_Request::Swap(Zone_GetLoginReward_Request* other) {
  if (other != this) {
    std::swap(irewardid_, other->irewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetLoginReward_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetLoginReward_Request_descriptor_;
  metadata.reflection = Zone_GetLoginReward_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetLoginReward_Response::kIResultFieldNumber;
const int Zone_GetLoginReward_Response::kIRewardIDFieldNumber;
#endif  // !_MSC_VER

Zone_GetLoginReward_Response::Zone_GetLoginReward_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetLoginReward_Response::InitAsDefaultInstance() {
}

Zone_GetLoginReward_Response::Zone_GetLoginReward_Response(const Zone_GetLoginReward_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetLoginReward_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  irewardid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetLoginReward_Response::~Zone_GetLoginReward_Response() {
  SharedDtor();
}

void Zone_GetLoginReward_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetLoginReward_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetLoginReward_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetLoginReward_Response_descriptor_;
}

const Zone_GetLoginReward_Response& Zone_GetLoginReward_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetLoginReward_Response* Zone_GetLoginReward_Response::default_instance_ = NULL;

Zone_GetLoginReward_Response* Zone_GetLoginReward_Response::New() const {
  return new Zone_GetLoginReward_Response;
}

void Zone_GetLoginReward_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    irewardid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetLoginReward_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iRewardID;
        break;
      }

      // optional int32 iRewardID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRewardID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irewardid_)));
          set_has_irewardid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetLoginReward_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iRewardID = 2;
  if (has_irewardid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->irewardid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetLoginReward_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iRewardID = 2;
  if (has_irewardid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->irewardid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetLoginReward_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iRewardID = 2;
    if (has_irewardid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irewardid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetLoginReward_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetLoginReward_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetLoginReward_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetLoginReward_Response::MergeFrom(const Zone_GetLoginReward_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_irewardid()) {
      set_irewardid(from.irewardid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetLoginReward_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetLoginReward_Response::CopyFrom(const Zone_GetLoginReward_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetLoginReward_Response::IsInitialized() const {

  return true;
}

void Zone_GetLoginReward_Response::Swap(Zone_GetLoginReward_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(irewardid_, other->irewardid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetLoginReward_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetLoginReward_Response_descriptor_;
  metadata.reflection = Zone_GetLoginReward_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetPayRecord_Request::kUinFieldNumber;
#endif  // !_MSC_VER

Zone_GetPayRecord_Request::Zone_GetPayRecord_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetPayRecord_Request::InitAsDefaultInstance() {
}

Zone_GetPayRecord_Request::Zone_GetPayRecord_Request(const Zone_GetPayRecord_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetPayRecord_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetPayRecord_Request::~Zone_GetPayRecord_Request() {
  SharedDtor();
}

void Zone_GetPayRecord_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetPayRecord_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetPayRecord_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetPayRecord_Request_descriptor_;
}

const Zone_GetPayRecord_Request& Zone_GetPayRecord_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetPayRecord_Request* Zone_GetPayRecord_Request::default_instance_ = NULL;

Zone_GetPayRecord_Request* Zone_GetPayRecord_Request::New() const {
  return new Zone_GetPayRecord_Request;
}

void Zone_GetPayRecord_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetPayRecord_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetPayRecord_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->uin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetPayRecord_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->uin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetPayRecord_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetPayRecord_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetPayRecord_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetPayRecord_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetPayRecord_Request::MergeFrom(const Zone_GetPayRecord_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetPayRecord_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetPayRecord_Request::CopyFrom(const Zone_GetPayRecord_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetPayRecord_Request::IsInitialized() const {

  return true;
}

void Zone_GetPayRecord_Request::Swap(Zone_GetPayRecord_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetPayRecord_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetPayRecord_Request_descriptor_;
  metadata.reflection = Zone_GetPayRecord_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetPayRecord_Response::kIResultFieldNumber;
const int Zone_GetPayRecord_Response::kStRecordsFieldNumber;
#endif  // !_MSC_VER

Zone_GetPayRecord_Response::Zone_GetPayRecord_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetPayRecord_Response::InitAsDefaultInstance() {
}

Zone_GetPayRecord_Response::Zone_GetPayRecord_Response(const Zone_GetPayRecord_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetPayRecord_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetPayRecord_Response::~Zone_GetPayRecord_Response() {
  SharedDtor();
}

void Zone_GetPayRecord_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetPayRecord_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetPayRecord_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetPayRecord_Response_descriptor_;
}

const Zone_GetPayRecord_Response& Zone_GetPayRecord_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetPayRecord_Response* Zone_GetPayRecord_Response::default_instance_ = NULL;

Zone_GetPayRecord_Response* Zone_GetPayRecord_Response::New() const {
  return new Zone_GetPayRecord_Response;
}

void Zone_GetPayRecord_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
  }
  strecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetPayRecord_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRecords;
        break;
      }

      // repeated .RechargeRecord stRecords = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_stRecords;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetPayRecord_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // repeated .RechargeRecord stRecords = 2;
  for (int i = 0; i < this->strecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->strecords(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetPayRecord_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // repeated .RechargeRecord stRecords = 2;
  for (int i = 0; i < this->strecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->strecords(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetPayRecord_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

  }
  // repeated .RechargeRecord stRecords = 2;
  total_size += 1 * this->strecords_size();
  for (int i = 0; i < this->strecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetPayRecord_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetPayRecord_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetPayRecord_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetPayRecord_Response::MergeFrom(const Zone_GetPayRecord_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  strecords_.MergeFrom(from.strecords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetPayRecord_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetPayRecord_Response::CopyFrom(const Zone_GetPayRecord_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetPayRecord_Response::IsInitialized() const {

  return true;
}

void Zone_GetPayRecord_Response::Swap(Zone_GetPayRecord_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    strecords_.Swap(&other->strecords_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetPayRecord_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetPayRecord_Response_descriptor_;
  metadata.reflection = Zone_GetPayRecord_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetPayGift_Request::kIGiftTypeFieldNumber;
#endif  // !_MSC_VER

Zone_GetPayGift_Request::Zone_GetPayGift_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetPayGift_Request::InitAsDefaultInstance() {
}

Zone_GetPayGift_Request::Zone_GetPayGift_Request(const Zone_GetPayGift_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetPayGift_Request::SharedCtor() {
  _cached_size_ = 0;
  igifttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetPayGift_Request::~Zone_GetPayGift_Request() {
  SharedDtor();
}

void Zone_GetPayGift_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetPayGift_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetPayGift_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetPayGift_Request_descriptor_;
}

const Zone_GetPayGift_Request& Zone_GetPayGift_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetPayGift_Request* Zone_GetPayGift_Request::default_instance_ = NULL;

Zone_GetPayGift_Request* Zone_GetPayGift_Request::New() const {
  return new Zone_GetPayGift_Request;
}

void Zone_GetPayGift_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    igifttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetPayGift_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iGiftType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igifttype_)));
          set_has_igifttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetPayGift_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iGiftType = 1;
  if (has_igifttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->igifttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetPayGift_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iGiftType = 1;
  if (has_igifttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->igifttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetPayGift_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iGiftType = 1;
    if (has_igifttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igifttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetPayGift_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetPayGift_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetPayGift_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetPayGift_Request::MergeFrom(const Zone_GetPayGift_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_igifttype()) {
      set_igifttype(from.igifttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetPayGift_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetPayGift_Request::CopyFrom(const Zone_GetPayGift_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetPayGift_Request::IsInitialized() const {

  return true;
}

void Zone_GetPayGift_Request::Swap(Zone_GetPayGift_Request* other) {
  if (other != this) {
    std::swap(igifttype_, other->igifttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetPayGift_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetPayGift_Request_descriptor_;
  metadata.reflection = Zone_GetPayGift_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetPayGift_Response::kIResultFieldNumber;
const int Zone_GetPayGift_Response::kIGiftTypeFieldNumber;
#endif  // !_MSC_VER

Zone_GetPayGift_Response::Zone_GetPayGift_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetPayGift_Response::InitAsDefaultInstance() {
}

Zone_GetPayGift_Response::Zone_GetPayGift_Response(const Zone_GetPayGift_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetPayGift_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  igifttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetPayGift_Response::~Zone_GetPayGift_Response() {
  SharedDtor();
}

void Zone_GetPayGift_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetPayGift_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetPayGift_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetPayGift_Response_descriptor_;
}

const Zone_GetPayGift_Response& Zone_GetPayGift_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetPayGift_Response* Zone_GetPayGift_Response::default_instance_ = NULL;

Zone_GetPayGift_Response* Zone_GetPayGift_Response::New() const {
  return new Zone_GetPayGift_Response;
}

void Zone_GetPayGift_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    igifttype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetPayGift_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iGiftType;
        break;
      }

      // optional int32 iGiftType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGiftType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &igifttype_)));
          set_has_igifttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetPayGift_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iGiftType = 2;
  if (has_igifttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->igifttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetPayGift_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iGiftType = 2;
  if (has_igifttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->igifttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetPayGift_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iGiftType = 2;
    if (has_igifttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->igifttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetPayGift_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetPayGift_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetPayGift_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetPayGift_Response::MergeFrom(const Zone_GetPayGift_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_igifttype()) {
      set_igifttype(from.igifttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetPayGift_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetPayGift_Response::CopyFrom(const Zone_GetPayGift_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetPayGift_Response::IsInitialized() const {

  return true;
}

void Zone_GetPayGift_Response::Swap(Zone_GetPayGift_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(igifttype_, other->igifttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetPayGift_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetPayGift_Response_descriptor_;
  metadata.reflection = Zone_GetPayGift_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UpdateMonthTime_Notify::kIMonthEndTimeFieldNumber;
#endif  // !_MSC_VER

Zone_UpdateMonthTime_Notify::Zone_UpdateMonthTime_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UpdateMonthTime_Notify::InitAsDefaultInstance() {
}

Zone_UpdateMonthTime_Notify::Zone_UpdateMonthTime_Notify(const Zone_UpdateMonthTime_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UpdateMonthTime_Notify::SharedCtor() {
  _cached_size_ = 0;
  imonthendtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UpdateMonthTime_Notify::~Zone_UpdateMonthTime_Notify() {
  SharedDtor();
}

void Zone_UpdateMonthTime_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UpdateMonthTime_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UpdateMonthTime_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UpdateMonthTime_Notify_descriptor_;
}

const Zone_UpdateMonthTime_Notify& Zone_UpdateMonthTime_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UpdateMonthTime_Notify* Zone_UpdateMonthTime_Notify::default_instance_ = NULL;

Zone_UpdateMonthTime_Notify* Zone_UpdateMonthTime_Notify::New() const {
  return new Zone_UpdateMonthTime_Notify;
}

void Zone_UpdateMonthTime_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    imonthendtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UpdateMonthTime_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iMonthEndTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imonthendtime_)));
          set_has_imonthendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UpdateMonthTime_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iMonthEndTime = 1;
  if (has_imonthendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->imonthendtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UpdateMonthTime_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iMonthEndTime = 1;
  if (has_imonthendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->imonthendtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UpdateMonthTime_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iMonthEndTime = 1;
    if (has_imonthendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imonthendtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UpdateMonthTime_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UpdateMonthTime_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UpdateMonthTime_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UpdateMonthTime_Notify::MergeFrom(const Zone_UpdateMonthTime_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_imonthendtime()) {
      set_imonthendtime(from.imonthendtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UpdateMonthTime_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UpdateMonthTime_Notify::CopyFrom(const Zone_UpdateMonthTime_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UpdateMonthTime_Notify::IsInitialized() const {

  return true;
}

void Zone_UpdateMonthTime_Notify::Swap(Zone_UpdateMonthTime_Notify* other) {
  if (other != this) {
    std::swap(imonthendtime_, other->imonthendtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UpdateMonthTime_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UpdateMonthTime_Notify_descriptor_;
  metadata.reflection = Zone_UpdateMonthTime_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FishUserUpdate_Notify::kISeatFieldNumber;
const int Zone_FishUserUpdate_Notify::kIAddCoinsFieldNumber;
const int Zone_FishUserUpdate_Notify::kIAddTicketsFieldNumber;
const int Zone_FishUserUpdate_Notify::kStAddItemFieldNumber;
#endif  // !_MSC_VER

Zone_FishUserUpdate_Notify::Zone_FishUserUpdate_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FishUserUpdate_Notify::InitAsDefaultInstance() {
  stadditem_ = const_cast< ::OneSlotInfo*>(&::OneSlotInfo::default_instance());
}

Zone_FishUserUpdate_Notify::Zone_FishUserUpdate_Notify(const Zone_FishUserUpdate_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FishUserUpdate_Notify::SharedCtor() {
  _cached_size_ = 0;
  iseat_ = 0;
  iaddcoins_ = GOOGLE_LONGLONG(0);
  iaddtickets_ = GOOGLE_LONGLONG(0);
  stadditem_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FishUserUpdate_Notify::~Zone_FishUserUpdate_Notify() {
  SharedDtor();
}

void Zone_FishUserUpdate_Notify::SharedDtor() {
  if (this != default_instance_) {
    delete stadditem_;
  }
}

void Zone_FishUserUpdate_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FishUserUpdate_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FishUserUpdate_Notify_descriptor_;
}

const Zone_FishUserUpdate_Notify& Zone_FishUserUpdate_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FishUserUpdate_Notify* Zone_FishUserUpdate_Notify::default_instance_ = NULL;

Zone_FishUserUpdate_Notify* Zone_FishUserUpdate_Notify::New() const {
  return new Zone_FishUserUpdate_Notify;
}

void Zone_FishUserUpdate_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iseat_ = 0;
    iaddcoins_ = GOOGLE_LONGLONG(0);
    iaddtickets_ = GOOGLE_LONGLONG(0);
    if (has_stadditem()) {
      if (stadditem_ != NULL) stadditem_->::OneSlotInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FishUserUpdate_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iSeat = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iseat_)));
          set_has_iseat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iAddCoins;
        break;
      }

      // optional int64 iAddCoins = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddCoins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iaddcoins_)));
          set_has_iaddcoins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iAddTickets;
        break;
      }

      // optional int64 iAddTickets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iAddTickets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &iaddtickets_)));
          set_has_iaddtickets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stAddItem;
        break;
      }

      // optional .OneSlotInfo stAddItem = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stAddItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stadditem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FishUserUpdate_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iseat(), output);
  }

  // optional int64 iAddCoins = 2;
  if (has_iaddcoins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->iaddcoins(), output);
  }

  // optional int64 iAddTickets = 3;
  if (has_iaddtickets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->iaddtickets(), output);
  }

  // optional .OneSlotInfo stAddItem = 4;
  if (has_stadditem()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stadditem(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FishUserUpdate_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iSeat = 1;
  if (has_iseat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iseat(), target);
  }

  // optional int64 iAddCoins = 2;
  if (has_iaddcoins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->iaddcoins(), target);
  }

  // optional int64 iAddTickets = 3;
  if (has_iaddtickets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->iaddtickets(), target);
  }

  // optional .OneSlotInfo stAddItem = 4;
  if (has_stadditem()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->stadditem(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FishUserUpdate_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iSeat = 1;
    if (has_iseat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iseat());
    }

    // optional int64 iAddCoins = 2;
    if (has_iaddcoins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iaddcoins());
    }

    // optional int64 iAddTickets = 3;
    if (has_iaddtickets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->iaddtickets());
    }

    // optional .OneSlotInfo stAddItem = 4;
    if (has_stadditem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stadditem());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FishUserUpdate_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FishUserUpdate_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FishUserUpdate_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FishUserUpdate_Notify::MergeFrom(const Zone_FishUserUpdate_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iseat()) {
      set_iseat(from.iseat());
    }
    if (from.has_iaddcoins()) {
      set_iaddcoins(from.iaddcoins());
    }
    if (from.has_iaddtickets()) {
      set_iaddtickets(from.iaddtickets());
    }
    if (from.has_stadditem()) {
      mutable_stadditem()->::OneSlotInfo::MergeFrom(from.stadditem());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FishUserUpdate_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FishUserUpdate_Notify::CopyFrom(const Zone_FishUserUpdate_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FishUserUpdate_Notify::IsInitialized() const {

  return true;
}

void Zone_FishUserUpdate_Notify::Swap(Zone_FishUserUpdate_Notify* other) {
  if (other != this) {
    std::swap(iseat_, other->iseat_);
    std::swap(iaddcoins_, other->iaddcoins_);
    std::swap(iaddtickets_, other->iaddtickets_);
    std::swap(stadditem_, other->stadditem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FishUserUpdate_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FishUserUpdate_Notify_descriptor_;
  metadata.reflection = Zone_FishUserUpdate_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_VipExpUpdate_Notify::kIVipLevelFieldNumber;
const int Zone_VipExpUpdate_Notify::kIVipExpFieldNumber;
const int Zone_VipExpUpdate_Notify::kIVipPrivFieldNumber;
#endif  // !_MSC_VER

Zone_VipExpUpdate_Notify::Zone_VipExpUpdate_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_VipExpUpdate_Notify::InitAsDefaultInstance() {
}

Zone_VipExpUpdate_Notify::Zone_VipExpUpdate_Notify(const Zone_VipExpUpdate_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_VipExpUpdate_Notify::SharedCtor() {
  _cached_size_ = 0;
  iviplevel_ = 0;
  ivipexp_ = 0;
  ivippriv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_VipExpUpdate_Notify::~Zone_VipExpUpdate_Notify() {
  SharedDtor();
}

void Zone_VipExpUpdate_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_VipExpUpdate_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_VipExpUpdate_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_VipExpUpdate_Notify_descriptor_;
}

const Zone_VipExpUpdate_Notify& Zone_VipExpUpdate_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_VipExpUpdate_Notify* Zone_VipExpUpdate_Notify::default_instance_ = NULL;

Zone_VipExpUpdate_Notify* Zone_VipExpUpdate_Notify::New() const {
  return new Zone_VipExpUpdate_Notify;
}

void Zone_VipExpUpdate_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iviplevel_ = 0;
    ivipexp_ = 0;
    ivippriv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_VipExpUpdate_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iVipLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iviplevel_)));
          set_has_iviplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iVipExp;
        break;
      }

      // optional int32 iVipExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVipExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivipexp_)));
          set_has_ivipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iVipPriv;
        break;
      }

      // optional int32 iVipPriv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iVipPriv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ivippriv_)));
          set_has_ivippriv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_VipExpUpdate_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iVipLevel = 1;
  if (has_iviplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iviplevel(), output);
  }

  // optional int32 iVipExp = 2;
  if (has_ivipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ivipexp(), output);
  }

  // optional int32 iVipPriv = 3;
  if (has_ivippriv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ivippriv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_VipExpUpdate_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iVipLevel = 1;
  if (has_iviplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iviplevel(), target);
  }

  // optional int32 iVipExp = 2;
  if (has_ivipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ivipexp(), target);
  }

  // optional int32 iVipPriv = 3;
  if (has_ivippriv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ivippriv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_VipExpUpdate_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iVipLevel = 1;
    if (has_iviplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iviplevel());
    }

    // optional int32 iVipExp = 2;
    if (has_ivipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivipexp());
    }

    // optional int32 iVipPriv = 3;
    if (has_ivippriv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ivippriv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_VipExpUpdate_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_VipExpUpdate_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_VipExpUpdate_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_VipExpUpdate_Notify::MergeFrom(const Zone_VipExpUpdate_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iviplevel()) {
      set_iviplevel(from.iviplevel());
    }
    if (from.has_ivipexp()) {
      set_ivipexp(from.ivipexp());
    }
    if (from.has_ivippriv()) {
      set_ivippriv(from.ivippriv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_VipExpUpdate_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_VipExpUpdate_Notify::CopyFrom(const Zone_VipExpUpdate_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_VipExpUpdate_Notify::IsInitialized() const {

  return true;
}

void Zone_VipExpUpdate_Notify::Swap(Zone_VipExpUpdate_Notify* other) {
  if (other != this) {
    std::swap(iviplevel_, other->iviplevel_);
    std::swap(ivipexp_, other->ivipexp_);
    std::swap(ivippriv_, other->ivippriv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_VipExpUpdate_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_VipExpUpdate_Notify_descriptor_;
  metadata.reflection = Zone_VipExpUpdate_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UserRecharge_Notify::kIRechargeIDFieldNumber;
#endif  // !_MSC_VER

Zone_UserRecharge_Notify::Zone_UserRecharge_Notify()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UserRecharge_Notify::InitAsDefaultInstance() {
}

Zone_UserRecharge_Notify::Zone_UserRecharge_Notify(const Zone_UserRecharge_Notify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UserRecharge_Notify::SharedCtor() {
  _cached_size_ = 0;
  irechargeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UserRecharge_Notify::~Zone_UserRecharge_Notify() {
  SharedDtor();
}

void Zone_UserRecharge_Notify::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UserRecharge_Notify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UserRecharge_Notify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UserRecharge_Notify_descriptor_;
}

const Zone_UserRecharge_Notify& Zone_UserRecharge_Notify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UserRecharge_Notify* Zone_UserRecharge_Notify::default_instance_ = NULL;

Zone_UserRecharge_Notify* Zone_UserRecharge_Notify::New() const {
  return new Zone_UserRecharge_Notify;
}

void Zone_UserRecharge_Notify::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irechargeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UserRecharge_Notify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRechargeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irechargeid_)));
          set_has_irechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UserRecharge_Notify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRechargeID = 1;
  if (has_irechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irechargeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UserRecharge_Notify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRechargeID = 1;
  if (has_irechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irechargeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UserRecharge_Notify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRechargeID = 1;
    if (has_irechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irechargeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UserRecharge_Notify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UserRecharge_Notify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UserRecharge_Notify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UserRecharge_Notify::MergeFrom(const Zone_UserRecharge_Notify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irechargeid()) {
      set_irechargeid(from.irechargeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UserRecharge_Notify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UserRecharge_Notify::CopyFrom(const Zone_UserRecharge_Notify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UserRecharge_Notify::IsInitialized() const {

  return true;
}

void Zone_UserRecharge_Notify::Swap(Zone_UserRecharge_Notify* other) {
  if (other != this) {
    std::swap(irechargeid_, other->irechargeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UserRecharge_Notify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UserRecharge_Notify_descriptor_;
  metadata.reflection = Zone_UserRecharge_Notify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetPayOrder_Request::kUinFieldNumber;
const int Zone_GetPayOrder_Request::kIFromZoneIDFieldNumber;
#endif  // !_MSC_VER

Zone_GetPayOrder_Request::Zone_GetPayOrder_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetPayOrder_Request::InitAsDefaultInstance() {
}

Zone_GetPayOrder_Request::Zone_GetPayOrder_Request(const Zone_GetPayOrder_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetPayOrder_Request::SharedCtor() {
  _cached_size_ = 0;
  uin_ = 0;
  ifromzoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetPayOrder_Request::~Zone_GetPayOrder_Request() {
  SharedDtor();
}

void Zone_GetPayOrder_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetPayOrder_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetPayOrder_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetPayOrder_Request_descriptor_;
}

const Zone_GetPayOrder_Request& Zone_GetPayOrder_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetPayOrder_Request* Zone_GetPayOrder_Request::default_instance_ = NULL;

Zone_GetPayOrder_Request* Zone_GetPayOrder_Request::New() const {
  return new Zone_GetPayOrder_Request;
}

void Zone_GetPayOrder_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    uin_ = 0;
    ifromzoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetPayOrder_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 uin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFromZoneID;
        break;
      }

      // optional int32 iFromZoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromzoneid_)));
          set_has_ifromzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetPayOrder_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->uin(), output);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifromzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetPayOrder_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 uin = 1;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->uin(), target);
  }

  // optional int32 iFromZoneID = 2;
  if (has_ifromzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifromzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetPayOrder_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 uin = 1;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uin());
    }

    // optional int32 iFromZoneID = 2;
    if (has_ifromzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetPayOrder_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetPayOrder_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetPayOrder_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetPayOrder_Request::MergeFrom(const Zone_GetPayOrder_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uin()) {
      set_uin(from.uin());
    }
    if (from.has_ifromzoneid()) {
      set_ifromzoneid(from.ifromzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetPayOrder_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetPayOrder_Request::CopyFrom(const Zone_GetPayOrder_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetPayOrder_Request::IsInitialized() const {

  return true;
}

void Zone_GetPayOrder_Request::Swap(Zone_GetPayOrder_Request* other) {
  if (other != this) {
    std::swap(uin_, other->uin_);
    std::swap(ifromzoneid_, other->ifromzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetPayOrder_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetPayOrder_Request_descriptor_;
  metadata.reflection = Zone_GetPayOrder_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetPayOrder_Response::kIResultFieldNumber;
const int Zone_GetPayOrder_Response::kStrOrderIDFieldNumber;
#endif  // !_MSC_VER

Zone_GetPayOrder_Response::Zone_GetPayOrder_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetPayOrder_Response::InitAsDefaultInstance() {
}

Zone_GetPayOrder_Response::Zone_GetPayOrder_Response(const Zone_GetPayOrder_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetPayOrder_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  strorderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetPayOrder_Response::~Zone_GetPayOrder_Response() {
  SharedDtor();
}

void Zone_GetPayOrder_Response::SharedDtor() {
  if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
    delete strorderid_;
  }
  if (this != default_instance_) {
  }
}

void Zone_GetPayOrder_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetPayOrder_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetPayOrder_Response_descriptor_;
}

const Zone_GetPayOrder_Response& Zone_GetPayOrder_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetPayOrder_Response* Zone_GetPayOrder_Response::default_instance_ = NULL;

Zone_GetPayOrder_Response* Zone_GetPayOrder_Response::New() const {
  return new Zone_GetPayOrder_Response;
}

void Zone_GetPayOrder_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_strorderid()) {
      if (strorderid_ != &::google::protobuf::internal::kEmptyString) {
        strorderid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetPayOrder_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strOrderID;
        break;
      }

      // optional string strOrderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strOrderID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strorderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strorderid().data(), this->strorderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetPayOrder_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional string strOrderID = 2;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strorderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetPayOrder_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional string strOrderID = 2;
  if (has_strorderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strorderid().data(), this->strorderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strorderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetPayOrder_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional string strOrderID = 2;
    if (has_strorderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strorderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetPayOrder_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetPayOrder_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetPayOrder_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetPayOrder_Response::MergeFrom(const Zone_GetPayOrder_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_strorderid()) {
      set_strorderid(from.strorderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetPayOrder_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetPayOrder_Response::CopyFrom(const Zone_GetPayOrder_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetPayOrder_Response::IsInitialized() const {

  return true;
}

void Zone_GetPayOrder_Response::Swap(Zone_GetPayOrder_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(strorderid_, other->strorderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetPayOrder_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetPayOrder_Response_descriptor_;
  metadata.reflection = Zone_GetPayOrder_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FinGuide_Request::kIGuideIDFieldNumber;
#endif  // !_MSC_VER

Zone_FinGuide_Request::Zone_FinGuide_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FinGuide_Request::InitAsDefaultInstance() {
}

Zone_FinGuide_Request::Zone_FinGuide_Request(const Zone_FinGuide_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FinGuide_Request::SharedCtor() {
  _cached_size_ = 0;
  iguideid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FinGuide_Request::~Zone_FinGuide_Request() {
  SharedDtor();
}

void Zone_FinGuide_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FinGuide_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FinGuide_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FinGuide_Request_descriptor_;
}

const Zone_FinGuide_Request& Zone_FinGuide_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FinGuide_Request* Zone_FinGuide_Request::default_instance_ = NULL;

Zone_FinGuide_Request* Zone_FinGuide_Request::New() const {
  return new Zone_FinGuide_Request;
}

void Zone_FinGuide_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iguideid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FinGuide_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iGuideID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iguideid_)));
          set_has_iguideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FinGuide_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iGuideID = 1;
  if (has_iguideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iguideid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FinGuide_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iGuideID = 1;
  if (has_iguideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iguideid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FinGuide_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iGuideID = 1;
    if (has_iguideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iguideid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FinGuide_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FinGuide_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FinGuide_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FinGuide_Request::MergeFrom(const Zone_FinGuide_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iguideid()) {
      set_iguideid(from.iguideid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FinGuide_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FinGuide_Request::CopyFrom(const Zone_FinGuide_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FinGuide_Request::IsInitialized() const {

  return true;
}

void Zone_FinGuide_Request::Swap(Zone_FinGuide_Request* other) {
  if (other != this) {
    std::swap(iguideid_, other->iguideid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FinGuide_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FinGuide_Request_descriptor_;
  metadata.reflection = Zone_FinGuide_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_FinGuide_Response::kIResultFieldNumber;
const int Zone_FinGuide_Response::kIGuideIDFieldNumber;
#endif  // !_MSC_VER

Zone_FinGuide_Response::Zone_FinGuide_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_FinGuide_Response::InitAsDefaultInstance() {
}

Zone_FinGuide_Response::Zone_FinGuide_Response(const Zone_FinGuide_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_FinGuide_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  iguideid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_FinGuide_Response::~Zone_FinGuide_Response() {
  SharedDtor();
}

void Zone_FinGuide_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_FinGuide_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_FinGuide_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_FinGuide_Response_descriptor_;
}

const Zone_FinGuide_Response& Zone_FinGuide_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_FinGuide_Response* Zone_FinGuide_Response::default_instance_ = NULL;

Zone_FinGuide_Response* Zone_FinGuide_Response::New() const {
  return new Zone_FinGuide_Response;
}

void Zone_FinGuide_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    iguideid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_FinGuide_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iGuideID;
        break;
      }

      // optional int32 iGuideID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iGuideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iguideid_)));
          set_has_iguideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_FinGuide_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iGuideID = 2;
  if (has_iguideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->iguideid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_FinGuide_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iGuideID = 2;
  if (has_iguideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->iguideid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_FinGuide_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iGuideID = 2;
    if (has_iguideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iguideid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_FinGuide_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_FinGuide_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_FinGuide_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_FinGuide_Response::MergeFrom(const Zone_FinGuide_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_iguideid()) {
      set_iguideid(from.iguideid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_FinGuide_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_FinGuide_Response::CopyFrom(const Zone_FinGuide_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_FinGuide_Response::IsInitialized() const {

  return true;
}

void Zone_FinGuide_Response::Swap(Zone_FinGuide_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(iguideid_, other->iguideid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_FinGuide_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_FinGuide_Response_descriptor_;
  metadata.reflection = Zone_FinGuide_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UpdateName_Request::kStrNewNameFieldNumber;
const int Zone_UpdateName_Request::kBIsSignFieldNumber;
#endif  // !_MSC_VER

Zone_UpdateName_Request::Zone_UpdateName_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UpdateName_Request::InitAsDefaultInstance() {
}

Zone_UpdateName_Request::Zone_UpdateName_Request(const Zone_UpdateName_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UpdateName_Request::SharedCtor() {
  _cached_size_ = 0;
  strnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bissign_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UpdateName_Request::~Zone_UpdateName_Request() {
  SharedDtor();
}

void Zone_UpdateName_Request::SharedDtor() {
  if (strnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnewname_;
  }
  if (this != default_instance_) {
  }
}

void Zone_UpdateName_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UpdateName_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UpdateName_Request_descriptor_;
}

const Zone_UpdateName_Request& Zone_UpdateName_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UpdateName_Request* Zone_UpdateName_Request::default_instance_ = NULL;

Zone_UpdateName_Request* Zone_UpdateName_Request::New() const {
  return new Zone_UpdateName_Request;
}

void Zone_UpdateName_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_strnewname()) {
      if (strnewname_ != &::google::protobuf::internal::kEmptyString) {
        strnewname_->clear();
      }
    }
    bissign_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UpdateName_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strNewName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnewname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnewname().data(), this->strnewname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_bIsSign;
        break;
      }

      // optional bool bIsSign = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissign_)));
          set_has_bissign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UpdateName_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string strNewName = 1;
  if (has_strnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnewname().data(), this->strnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->strnewname(), output);
  }

  // optional bool bIsSign = 2;
  if (has_bissign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bissign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UpdateName_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string strNewName = 1;
  if (has_strnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnewname().data(), this->strnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strnewname(), target);
  }

  // optional bool bIsSign = 2;
  if (has_bissign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bissign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UpdateName_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string strNewName = 1;
    if (has_strnewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnewname());
    }

    // optional bool bIsSign = 2;
    if (has_bissign()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UpdateName_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UpdateName_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UpdateName_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UpdateName_Request::MergeFrom(const Zone_UpdateName_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strnewname()) {
      set_strnewname(from.strnewname());
    }
    if (from.has_bissign()) {
      set_bissign(from.bissign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UpdateName_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UpdateName_Request::CopyFrom(const Zone_UpdateName_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UpdateName_Request::IsInitialized() const {

  return true;
}

void Zone_UpdateName_Request::Swap(Zone_UpdateName_Request* other) {
  if (other != this) {
    std::swap(strnewname_, other->strnewname_);
    std::swap(bissign_, other->bissign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UpdateName_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UpdateName_Request_descriptor_;
  metadata.reflection = Zone_UpdateName_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UpdateName_Response::kIResultFieldNumber;
const int Zone_UpdateName_Response::kStrNewNameFieldNumber;
const int Zone_UpdateName_Response::kBIsSignFieldNumber;
#endif  // !_MSC_VER

Zone_UpdateName_Response::Zone_UpdateName_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UpdateName_Response::InitAsDefaultInstance() {
}

Zone_UpdateName_Response::Zone_UpdateName_Response(const Zone_UpdateName_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UpdateName_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  strnewname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bissign_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UpdateName_Response::~Zone_UpdateName_Response() {
  SharedDtor();
}

void Zone_UpdateName_Response::SharedDtor() {
  if (strnewname_ != &::google::protobuf::internal::kEmptyString) {
    delete strnewname_;
  }
  if (this != default_instance_) {
  }
}

void Zone_UpdateName_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UpdateName_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UpdateName_Response_descriptor_;
}

const Zone_UpdateName_Response& Zone_UpdateName_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UpdateName_Response* Zone_UpdateName_Response::default_instance_ = NULL;

Zone_UpdateName_Response* Zone_UpdateName_Response::New() const {
  return new Zone_UpdateName_Response;
}

void Zone_UpdateName_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    if (has_strnewname()) {
      if (strnewname_ != &::google::protobuf::internal::kEmptyString) {
        strnewname_->clear();
      }
    }
    bissign_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UpdateName_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_strNewName;
        break;
      }

      // optional string strNewName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strNewName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnewname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->strnewname().data(), this->strnewname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bIsSign;
        break;
      }

      // optional bool bIsSign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bIsSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bissign_)));
          set_has_bissign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UpdateName_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional string strNewName = 2;
  if (has_strnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnewname().data(), this->strnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->strnewname(), output);
  }

  // optional bool bIsSign = 3;
  if (has_bissign()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->bissign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UpdateName_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional string strNewName = 2;
  if (has_strnewname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->strnewname().data(), this->strnewname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strnewname(), target);
  }

  // optional bool bIsSign = 3;
  if (has_bissign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->bissign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UpdateName_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional string strNewName = 2;
    if (has_strnewname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strnewname());
    }

    // optional bool bIsSign = 3;
    if (has_bissign()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UpdateName_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UpdateName_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UpdateName_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UpdateName_Response::MergeFrom(const Zone_UpdateName_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_strnewname()) {
      set_strnewname(from.strnewname());
    }
    if (from.has_bissign()) {
      set_bissign(from.bissign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UpdateName_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UpdateName_Response::CopyFrom(const Zone_UpdateName_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UpdateName_Response::IsInitialized() const {

  return true;
}

void Zone_UpdateName_Response::Swap(Zone_UpdateName_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(strnewname_, other->strnewname_);
    std::swap(bissign_, other->bissign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UpdateName_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UpdateName_Response_descriptor_;
  metadata.reflection = Zone_UpdateName_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UserRecharge_Request::kIRechargeIDFieldNumber;
#endif  // !_MSC_VER

Zone_UserRecharge_Request::Zone_UserRecharge_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UserRecharge_Request::InitAsDefaultInstance() {
}

Zone_UserRecharge_Request::Zone_UserRecharge_Request(const Zone_UserRecharge_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UserRecharge_Request::SharedCtor() {
  _cached_size_ = 0;
  irechargeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UserRecharge_Request::~Zone_UserRecharge_Request() {
  SharedDtor();
}

void Zone_UserRecharge_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UserRecharge_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UserRecharge_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UserRecharge_Request_descriptor_;
}

const Zone_UserRecharge_Request& Zone_UserRecharge_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UserRecharge_Request* Zone_UserRecharge_Request::default_instance_ = NULL;

Zone_UserRecharge_Request* Zone_UserRecharge_Request::New() const {
  return new Zone_UserRecharge_Request;
}

void Zone_UserRecharge_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    irechargeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UserRecharge_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iRechargeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irechargeid_)));
          set_has_irechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UserRecharge_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iRechargeID = 1;
  if (has_irechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->irechargeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UserRecharge_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iRechargeID = 1;
  if (has_irechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->irechargeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UserRecharge_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iRechargeID = 1;
    if (has_irechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irechargeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UserRecharge_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UserRecharge_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UserRecharge_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UserRecharge_Request::MergeFrom(const Zone_UserRecharge_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_irechargeid()) {
      set_irechargeid(from.irechargeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UserRecharge_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UserRecharge_Request::CopyFrom(const Zone_UserRecharge_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UserRecharge_Request::IsInitialized() const {

  return true;
}

void Zone_UserRecharge_Request::Swap(Zone_UserRecharge_Request* other) {
  if (other != this) {
    std::swap(irechargeid_, other->irechargeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UserRecharge_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UserRecharge_Request_descriptor_;
  metadata.reflection = Zone_UserRecharge_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_UserRecharge_Response::kIResultFieldNumber;
const int Zone_UserRecharge_Response::kIRechargeIDFieldNumber;
#endif  // !_MSC_VER

Zone_UserRecharge_Response::Zone_UserRecharge_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_UserRecharge_Response::InitAsDefaultInstance() {
}

Zone_UserRecharge_Response::Zone_UserRecharge_Response(const Zone_UserRecharge_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_UserRecharge_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  irechargeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_UserRecharge_Response::~Zone_UserRecharge_Response() {
  SharedDtor();
}

void Zone_UserRecharge_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_UserRecharge_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_UserRecharge_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_UserRecharge_Response_descriptor_;
}

const Zone_UserRecharge_Response& Zone_UserRecharge_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_UserRecharge_Response* Zone_UserRecharge_Response::default_instance_ = NULL;

Zone_UserRecharge_Response* Zone_UserRecharge_Response::New() const {
  return new Zone_UserRecharge_Response;
}

void Zone_UserRecharge_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    irechargeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_UserRecharge_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iRechargeID;
        break;
      }

      // optional int32 iRechargeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iRechargeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &irechargeid_)));
          set_has_irechargeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_UserRecharge_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iRechargeID = 2;
  if (has_irechargeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->irechargeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_UserRecharge_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iRechargeID = 2;
  if (has_irechargeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->irechargeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_UserRecharge_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iRechargeID = 2;
    if (has_irechargeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->irechargeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_UserRecharge_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_UserRecharge_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_UserRecharge_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_UserRecharge_Response::MergeFrom(const Zone_UserRecharge_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_irechargeid()) {
      set_irechargeid(from.irechargeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_UserRecharge_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_UserRecharge_Response::CopyFrom(const Zone_UserRecharge_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_UserRecharge_Response::IsInitialized() const {

  return true;
}

void Zone_UserRecharge_Response::Swap(Zone_UserRecharge_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(irechargeid_, other->irechargeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_UserRecharge_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_UserRecharge_Response_descriptor_;
  metadata.reflection = Zone_UserRecharge_Response_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetExchangeRec_Request::kIFromIndexFieldNumber;
const int Zone_GetExchangeRec_Request::kINumFieldNumber;
const int Zone_GetExchangeRec_Request::kIZoneIDFieldNumber;
const int Zone_GetExchangeRec_Request::kUinFieldNumber;
#endif  // !_MSC_VER

Zone_GetExchangeRec_Request::Zone_GetExchangeRec_Request()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetExchangeRec_Request::InitAsDefaultInstance() {
}

Zone_GetExchangeRec_Request::Zone_GetExchangeRec_Request(const Zone_GetExchangeRec_Request& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetExchangeRec_Request::SharedCtor() {
  _cached_size_ = 0;
  ifromindex_ = 0;
  inum_ = 0;
  izoneid_ = 0;
  uin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetExchangeRec_Request::~Zone_GetExchangeRec_Request() {
  SharedDtor();
}

void Zone_GetExchangeRec_Request::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetExchangeRec_Request::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetExchangeRec_Request::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetExchangeRec_Request_descriptor_;
}

const Zone_GetExchangeRec_Request& Zone_GetExchangeRec_Request::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetExchangeRec_Request* Zone_GetExchangeRec_Request::default_instance_ = NULL;

Zone_GetExchangeRec_Request* Zone_GetExchangeRec_Request::New() const {
  return new Zone_GetExchangeRec_Request;
}

void Zone_GetExchangeRec_Request::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ifromindex_ = 0;
    inum_ = 0;
    izoneid_ = 0;
    uin_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetExchangeRec_Request::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iFromIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromindex_)));
          set_has_ifromindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iZoneID;
        break;
      }

      // optional int32 iZoneID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iZoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &izoneid_)));
          set_has_izoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetExchangeRec_Request::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iFromIndex = 1;
  if (has_ifromindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ifromindex(), output);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->inum(), output);
  }

  // optional int32 iZoneID = 3;
  if (has_izoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->izoneid(), output);
  }

  // optional uint32 uin = 4;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->uin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetExchangeRec_Request::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iFromIndex = 1;
  if (has_ifromindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ifromindex(), target);
  }

  // optional int32 iNum = 2;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inum(), target);
  }

  // optional int32 iZoneID = 3;
  if (has_izoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->izoneid(), target);
  }

  // optional uint32 uin = 4;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->uin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetExchangeRec_Request::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iFromIndex = 1;
    if (has_ifromindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromindex());
    }

    // optional int32 iNum = 2;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

    // optional int32 iZoneID = 3;
    if (has_izoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->izoneid());
    }

    // optional uint32 uin = 4;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetExchangeRec_Request::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetExchangeRec_Request* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetExchangeRec_Request*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetExchangeRec_Request::MergeFrom(const Zone_GetExchangeRec_Request& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ifromindex()) {
      set_ifromindex(from.ifromindex());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
    if (from.has_izoneid()) {
      set_izoneid(from.izoneid());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetExchangeRec_Request::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetExchangeRec_Request::CopyFrom(const Zone_GetExchangeRec_Request& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetExchangeRec_Request::IsInitialized() const {

  return true;
}

void Zone_GetExchangeRec_Request::Swap(Zone_GetExchangeRec_Request* other) {
  if (other != this) {
    std::swap(ifromindex_, other->ifromindex_);
    std::swap(inum_, other->inum_);
    std::swap(izoneid_, other->izoneid_);
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetExchangeRec_Request::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetExchangeRec_Request_descriptor_;
  metadata.reflection = Zone_GetExchangeRec_Request_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Zone_GetExchangeRec_Response::kIResultFieldNumber;
const int Zone_GetExchangeRec_Response::kIFromIndexFieldNumber;
const int Zone_GetExchangeRec_Response::kINumFieldNumber;
const int Zone_GetExchangeRec_Response::kStRecordsFieldNumber;
const int Zone_GetExchangeRec_Response::kUinFieldNumber;
#endif  // !_MSC_VER

Zone_GetExchangeRec_Response::Zone_GetExchangeRec_Response()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Zone_GetExchangeRec_Response::InitAsDefaultInstance() {
}

Zone_GetExchangeRec_Response::Zone_GetExchangeRec_Response(const Zone_GetExchangeRec_Response& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Zone_GetExchangeRec_Response::SharedCtor() {
  _cached_size_ = 0;
  iresult_ = 0;
  ifromindex_ = 0;
  inum_ = 0;
  uin_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Zone_GetExchangeRec_Response::~Zone_GetExchangeRec_Response() {
  SharedDtor();
}

void Zone_GetExchangeRec_Response::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Zone_GetExchangeRec_Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Zone_GetExchangeRec_Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Zone_GetExchangeRec_Response_descriptor_;
}

const Zone_GetExchangeRec_Response& Zone_GetExchangeRec_Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GameProtocol_5fZone_2eproto();
  return *default_instance_;
}

Zone_GetExchangeRec_Response* Zone_GetExchangeRec_Response::default_instance_ = NULL;

Zone_GetExchangeRec_Response* Zone_GetExchangeRec_Response::New() const {
  return new Zone_GetExchangeRec_Response;
}

void Zone_GetExchangeRec_Response::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iresult_ = 0;
    ifromindex_ = 0;
    inum_ = 0;
    uin_ = 0u;
  }
  strecords_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Zone_GetExchangeRec_Response::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iResult = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iresult_)));
          set_has_iresult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_iFromIndex;
        break;
      }

      // optional int32 iFromIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iFromIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ifromindex_)));
          set_has_ifromindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iNum;
        break;
      }

      // optional int32 iNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inum_)));
          set_has_inum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stRecords;
        break;
      }

      // repeated .ExchangeRec stRecords = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stRecords:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_strecords()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_stRecords;
        if (input->ExpectTag(40)) goto parse_uin;
        break;
      }

      // optional uint32 uin = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &uin_)));
          set_has_uin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Zone_GetExchangeRec_Response::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iresult(), output);
  }

  // optional int32 iFromIndex = 2;
  if (has_ifromindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ifromindex(), output);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->inum(), output);
  }

  // repeated .ExchangeRec stRecords = 4;
  for (int i = 0; i < this->strecords_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->strecords(i), output);
  }

  // optional uint32 uin = 5;
  if (has_uin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->uin(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Zone_GetExchangeRec_Response::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iResult = 1;
  if (has_iresult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iresult(), target);
  }

  // optional int32 iFromIndex = 2;
  if (has_ifromindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ifromindex(), target);
  }

  // optional int32 iNum = 3;
  if (has_inum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->inum(), target);
  }

  // repeated .ExchangeRec stRecords = 4;
  for (int i = 0; i < this->strecords_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->strecords(i), target);
  }

  // optional uint32 uin = 5;
  if (has_uin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->uin(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Zone_GetExchangeRec_Response::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iResult = 1;
    if (has_iresult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iresult());
    }

    // optional int32 iFromIndex = 2;
    if (has_ifromindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ifromindex());
    }

    // optional int32 iNum = 3;
    if (has_inum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->inum());
    }

    // optional uint32 uin = 5;
    if (has_uin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->uin());
    }

  }
  // repeated .ExchangeRec stRecords = 4;
  total_size += 1 * this->strecords_size();
  for (int i = 0; i < this->strecords_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->strecords(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Zone_GetExchangeRec_Response::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Zone_GetExchangeRec_Response* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Zone_GetExchangeRec_Response*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Zone_GetExchangeRec_Response::MergeFrom(const Zone_GetExchangeRec_Response& from) {
  GOOGLE_CHECK_NE(&from, this);
  strecords_.MergeFrom(from.strecords_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iresult()) {
      set_iresult(from.iresult());
    }
    if (from.has_ifromindex()) {
      set_ifromindex(from.ifromindex());
    }
    if (from.has_inum()) {
      set_inum(from.inum());
    }
    if (from.has_uin()) {
      set_uin(from.uin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Zone_GetExchangeRec_Response::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Zone_GetExchangeRec_Response::CopyFrom(const Zone_GetExchangeRec_Response& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Zone_GetExchangeRec_Response::IsInitialized() const {

  return true;
}

void Zone_GetExchangeRec_Response::Swap(Zone_GetExchangeRec_Response* other) {
  if (other != this) {
    std::swap(iresult_, other->iresult_);
    std::swap(ifromindex_, other->ifromindex_);
    std::swap(inum_, other->inum_);
    strecords_.Swap(&other->strecords_);
    std::swap(uin_, other->uin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Zone_GetExchangeRec_Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Zone_GetExchangeRec_Response_descriptor_;
  metadata.reflection = Zone_GetExchangeRec_Response_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
